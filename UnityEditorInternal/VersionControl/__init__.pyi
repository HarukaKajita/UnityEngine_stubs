import typing, clr
from System import Array_1, MulticastDelegate, IAsyncResult, AsyncCallback
from UnityEditor.VersionControl import FileMode, ChangeSets, AssetList, Asset, ChangeSet
from UnityEditor import StatusQueryOptions, AssetDeleteResult, RemoveAssetOptions, AssetMoveResult
from UnityEngine import Rect, Texture
from System.Reflection import MethodInfo
from System.Collections.Generic import List_1

class AssetModificationHook:
    def __init__(self) -> None: ...
    @staticmethod
    def FileModeChanged(assets: Array_1[str], mode: FileMode) -> None: ...
    @staticmethod
    def IsOpenForEdit(assetPath: str, message: clr.Reference[str], statusOptions: StatusQueryOptions) -> bool: ...
    @staticmethod
    def OnWillDeleteAsset(assetPath: str, option: RemoveAssetOptions) -> AssetDeleteResult: ...
    @staticmethod
    def OnWillDeleteAssets(assetPaths: Array_1[str], deletionResults: Array_1[AssetDeleteResult], option: RemoveAssetOptions) -> None: ...
    @staticmethod
    def OnWillMoveAsset(from_: str, to: str) -> AssetMoveResult: ...


class ListControl:
    def __init__(self) -> None: ...
    @property
    def ActionEvent(self) -> ListControl.ActionDelegate: ...
    @ActionEvent.setter
    def ActionEvent(self, value: ListControl.ActionDelegate) -> ListControl.ActionDelegate: ...
    @property
    def DragAcceptOnly(self) -> bool: ...
    @DragAcceptOnly.setter
    def DragAcceptOnly(self, value: bool) -> bool: ...
    @property
    def DragEvent(self) -> ListControl.DragDelegate: ...
    @DragEvent.setter
    def DragEvent(self, value: ListControl.DragDelegate) -> ListControl.DragDelegate: ...
    @property
    def EmptyChangeSets(self) -> ChangeSets: ...
    @property
    def ExpandEvent(self) -> ListControl.ExpandDelegate: ...
    @ExpandEvent.setter
    def ExpandEvent(self, value: ListControl.ExpandDelegate) -> ListControl.ExpandDelegate: ...
    @property
    def listState(self) -> ListControl.ListState: ...
    @property
    def MenuDefault(self) -> str: ...
    @MenuDefault.setter
    def MenuDefault(self, value: str) -> str: ...
    @property
    def MenuFolder(self) -> str: ...
    @MenuFolder.setter
    def MenuFolder(self, value: str) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> bool: ...
    @property
    def Root(self) -> ListItem: ...
    @property
    def SelectedAssets(self) -> AssetList: ...
    @property
    def SelectedChangeSets(self) -> ChangeSets: ...
    @property
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def FindItemWithIdentifier(self, identifier: int) -> ListItem: ...
    @staticmethod
    def FromID(id: int) -> ListControl: ...
    def OnGUI(self, area: Rect, focus: bool) -> bool: ...
    def SelectedAdd(self, item: ListItem) -> None: ...
    def SelectedAll(self) -> None: ...
    def SelectedSet(self, item: ListItem) -> None: ...
    def Sync(self) -> None: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, parent: ListItem, name: str, asset: Asset) -> ListItem:...
        @typing.overload
        def __call__(self, parent: ListItem, name: str, change: ChangeSet) -> ListItem:...

    # Skipped Refresh due to it being static, abstract and generic.

    Refresh : Refresh_MethodGroup
    class Refresh_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, updateExpanded: bool) -> None:...


    class ActionDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, item: ListItem, actionIdx: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, item: ListItem, actionIdx: int) -> None: ...


    class DragDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, target: ChangeSet, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, target: ChangeSet) -> None: ...


    class ExpandDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, expand: ChangeSet, item: ListItem, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, expand: ChangeSet, item: ListItem) -> None: ...


    class ListState:
        def __init__(self) -> None: ...
        Expanded : List_1[str]
        Scroll : float


    class SelectDirection(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Up : ListControl.SelectDirection # 0
        Down : ListControl.SelectDirection # 1
        Current : ListControl.SelectDirection # 2



class ListItem:
    def __init__(self) -> None: ...
    @property
    def Actions(self) -> Array_1[str]: ...
    @Actions.setter
    def Actions(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def Asset(self) -> Asset: ...
    @Asset.setter
    def Asset(self, value: Asset) -> Asset: ...
    @property
    def CanAccept(self) -> bool: ...
    @CanAccept.setter
    def CanAccept(self, value: bool) -> bool: ...
    @property
    def CanExpand(self) -> bool: ...
    @property
    def Change(self) -> ChangeSet: ...
    @Change.setter
    def Change(self, value: ChangeSet) -> ChangeSet: ...
    @property
    def ChildCount(self) -> int: ...
    @property
    def Dummy(self) -> bool: ...
    @Dummy.setter
    def Dummy(self, value: bool) -> bool: ...
    @property
    def Exclusive(self) -> bool: ...
    @Exclusive.setter
    def Exclusive(self, value: bool) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> bool: ...
    @property
    def FirstChild(self) -> ListItem: ...
    @property
    def HasActions(self) -> bool: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Hidden(self) -> bool: ...
    @Hidden.setter
    def Hidden(self, value: bool) -> bool: ...
    @property
    def Icon(self) -> Texture: ...
    @Icon.setter
    def Icon(self, value: Texture) -> Texture: ...
    @property
    def Identifier(self) -> int: ...
    @property
    def Indent(self) -> int: ...
    @Indent.setter
    def Indent(self, value: int) -> int: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def LastChild(self) -> ListItem: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Next(self) -> ListItem: ...
    @property
    def NextOpen(self) -> ListItem: ...
    @property
    def NextOpenSkip(self) -> ListItem: ...
    @property
    def NextOpenVisible(self) -> ListItem: ...
    @property
    def OpenCount(self) -> int: ...
    @property
    def Parent(self) -> ListItem: ...
    @property
    def Prev(self) -> ListItem: ...
    @property
    def PrevOpen(self) -> ListItem: ...
    @property
    def PrevOpenSkip(self) -> ListItem: ...
    @property
    def PrevOpenVisible(self) -> ListItem: ...
    def Add(self, listItem: ListItem) -> None: ...
    def Clear(self) -> None: ...
    def FindWithIdentifierRecurse(self, inIdentifier: int) -> ListItem: ...
    def HasPath(self) -> bool: ...
    def IsChildOf(self, listItem: ListItem) -> bool: ...
    def Remove(self, listItem: ListItem) -> bool: ...
    def RemoveAll(self) -> None: ...


class Overlay:
    def __init__(self) -> None: ...
    @staticmethod
    def GetOverlayRect(itemRect: Rect) -> Rect: ...
    # Skipped DrawOverlay due to it being static, abstract and generic.

    DrawOverlay : DrawOverlay_MethodGroup
    class DrawOverlay_MethodGroup:
        @typing.overload
        def __call__(self, asset: Asset, itemRect: Rect) -> None:...
        @typing.overload
        def __call__(self, asset: Asset, metaAsset: Asset, itemRect: Rect) -> None:...


