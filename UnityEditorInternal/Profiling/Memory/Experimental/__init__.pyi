import typing, clr, abc
from System import MulticastDelegate, IAsyncResult, Array_1, AsyncCallback, IDisposable
from System.Reflection import MethodInfo
from UnityEngine import ISerializationCallbackReceiver
from UnityEditorInternal.Profiling.Memory.Experimental.FileFormat import EntryType

class GetItem_GenericClasses(abc.ABCMeta):
    Generic_GetItem_GenericClasses_GetItem_1_T = typing.TypeVar('Generic_GetItem_GenericClasses_GetItem_1_T')
    def __getitem__(self, types : typing.Type[Generic_GetItem_GenericClasses_GetItem_1_T]) -> typing.Type[GetItem_1[Generic_GetItem_GenericClasses_GetItem_1_T]]: ...

GetItem : GetItem_GenericClasses

GetItem_1_T = typing.TypeVar('GetItem_1_T')
class GetItem_1(typing.Generic[GetItem_1_T], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, data: Array_1[int], startIndex: int, numBytes: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> GetItem_1_T: ...
    def Invoke(self, data: Array_1[int], startIndex: int, numBytes: int) -> GetItem_1_T: ...


class MemorySnapshotFileReader(ISerializationCallbackReceiver):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, filePath: str) -> None: ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetFilePath(self) -> str: ...
    def GetNumEntries(self, entryType: EntryType) -> int: ...
    def OnAfterDeserialize(self) -> None: ...
    def OnBeforeSerialize(self) -> None: ...
    def Open(self, filePath: str) -> None: ...
    # Skipped GetDataArray due to it being static, abstract and generic.

    GetDataArray : GetDataArray_MethodGroup
    class GetDataArray_MethodGroup:
        def __getitem__(self, t:typing.Type[GetDataArray_1_T1]) -> GetDataArray_1[GetDataArray_1_T1]: ...

        GetDataArray_1_T1 = typing.TypeVar('GetDataArray_1_T1')
        class GetDataArray_1(typing.Generic[GetDataArray_1_T1]):
            GetDataArray_1_T = MemorySnapshotFileReader.GetDataArray_MethodGroup.GetDataArray_1_T1
            def __call__(self, entryType: EntryType, entryIndex: int, numEntries: int, dataOut: clr.Reference[Array_1[GetDataArray_1_T]], getItemFunc: GetItem_1[GetDataArray_1_T]) -> None:...


    # Skipped GetDataSingle due to it being static, abstract and generic.

    GetDataSingle : GetDataSingle_MethodGroup
    class GetDataSingle_MethodGroup:
        def __getitem__(self, t:typing.Type[GetDataSingle_1_T1]) -> GetDataSingle_1[GetDataSingle_1_T1]: ...

        GetDataSingle_1_T1 = typing.TypeVar('GetDataSingle_1_T1')
        class GetDataSingle_1(typing.Generic[GetDataSingle_1_T1]):
            GetDataSingle_1_T = MemorySnapshotFileReader.GetDataSingle_MethodGroup.GetDataSingle_1_T1
            def __call__(self, entryType: EntryType, getItemFunc: GetItem_1[GetDataSingle_1_T]) -> GetDataSingle_1_T:...




class MemorySnapshotFileWriter(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, filepath: str) -> None: ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def Open(self, filename: str) -> None: ...
    # Skipped WriteEntry due to it being static, abstract and generic.

    WriteEntry : WriteEntry_MethodGroup
    class WriteEntry_MethodGroup:
        def __getitem__(self, t:typing.Type[WriteEntry_1_T1]) -> WriteEntry_1[WriteEntry_1_T1]: ...

        WriteEntry_1_T1 = typing.TypeVar('WriteEntry_1_T1')
        class WriteEntry_1(typing.Generic[WriteEntry_1_T1]):
            WriteEntry_1_T = MemorySnapshotFileWriter.WriteEntry_MethodGroup.WriteEntry_1_T1
            def __call__(self, entryType: EntryType, data: WriteEntry_1_T) -> None:...

        def __call__(self, entryType: EntryType, data: str) -> None:...

    # Skipped WriteEntryArray due to it being static, abstract and generic.

    WriteEntryArray : WriteEntryArray_MethodGroup
    class WriteEntryArray_MethodGroup:
        def __getitem__(self, t:typing.Type[WriteEntryArray_1_T1]) -> WriteEntryArray_1[WriteEntryArray_1_T1]: ...

        WriteEntryArray_1_T1 = typing.TypeVar('WriteEntryArray_1_T1')
        class WriteEntryArray_1(typing.Generic[WriteEntryArray_1_T1]):
            WriteEntryArray_1_T = MemorySnapshotFileWriter.WriteEntryArray_MethodGroup.WriteEntryArray_1_T1
            def __call__(self, entryType: EntryType, data: Array_1[WriteEntryArray_1_T]) -> None:...



