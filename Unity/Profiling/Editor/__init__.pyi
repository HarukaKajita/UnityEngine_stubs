import typing, abc
from Unity.Profiling import ProfilerCategory
from System import Attribute, IDisposable

class ProfilerCounterDescriptor:
    @typing.overload
    def __init__(self, name: str, category: ProfilerCategory) -> None: ...
    @typing.overload
    def __init__(self, name: str, categoryName: str) -> None: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    def ToString(self) -> str: ...


class ProfilerModule(abc.ABC):
    @property
    def DisplayName(self) -> str: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> str: ...
    def CreateDetailsViewController(self) -> ProfilerModuleViewController: ...


class ProfilerModuleChartType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Line : ProfilerModuleChartType # 0
    StackedTimeArea : ProfilerModuleChartType # 1
    StackedArea : ProfilerModuleChartType # 2


class ProfilerModuleMetadataAttribute(Attribute):
    def __init__(self, displayName: str) -> None: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IconPath(self) -> str: ...
    @IconPath.setter
    def IconPath(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ProfilerModuleViewController(IDisposable, abc.ABC):
    @property
    def Disposed(self) -> bool: ...
    @Disposed.setter
    def Disposed(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...

