import typing, clr, abc
from Unity.Jobs import JobHandle
from System import Array_1, IDisposable
from System.Collections.Generic import List_1

class AssetLoadingSubsystem(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Other : AssetLoadingSubsystem # 0
    Texture : AssetLoadingSubsystem # 1
    VirtualTexture : AssetLoadingSubsystem # 2
    Mesh : AssetLoadingSubsystem # 3
    Audio : AssetLoadingSubsystem # 4
    Scripts : AssetLoadingSubsystem # 5
    EntitiesScene : AssetLoadingSubsystem # 6
    EntitiesStreamBinaryReader : AssetLoadingSubsystem # 7
    FileInfo : AssetLoadingSubsystem # 8
    ContentLoading : AssetLoadingSubsystem # 9


class AsyncReadManager(abc.ABC):
    @staticmethod
    def CloseCachedFileAsync(fileName: str, dependency: JobHandle = ...) -> JobHandle: ...
    @staticmethod
    def GetFileInfo(filename: str, result: clr.Reference[FileInfoResult]) -> ReadHandle: ...
    @staticmethod
    def OpenFileAsync(fileName: str) -> FileHandle: ...
    @staticmethod
    def ReadDeferred(fileHandle: clr.Reference[FileHandle], readCmdArray: clr.Reference[ReadCommandArray], dependency: JobHandle) -> ReadHandle: ...
    # Skipped Read due to it being static, abstract and generic.

    Read : Read_MethodGroup
    class Read_MethodGroup:
        @typing.overload
        def __call__(self, fileHandle: clr.Reference[FileHandle], readCmdArray: ReadCommandArray) -> ReadHandle:...
        @typing.overload
        def __call__(self, filename: str, readCmds: clr.Reference[ReadCommand], readCmdCount: int, assetName: str = ..., typeID: int = ..., subsystem: AssetLoadingSubsystem = ...) -> ReadHandle:...



class AsyncReadManagerMetrics(abc.ABC):
    @staticmethod
    def ClearCompletedMetrics() -> None: ...
    @staticmethod
    def GetTotalSizeOfNonASRMReadsBytes(emptyAfterRead: bool) -> int: ...
    @staticmethod
    def IsEnabled() -> bool: ...
    @staticmethod
    def StartCollectingMetrics() -> None: ...
    @staticmethod
    def StopCollectingMetrics() -> None: ...
    # Skipped GetCurrentSummaryMetrics due to it being static, abstract and generic.

    GetCurrentSummaryMetrics : GetCurrentSummaryMetrics_MethodGroup
    class GetCurrentSummaryMetrics_MethodGroup:
        @typing.overload
        def __call__(self, flags: AsyncReadManagerMetrics.Flags) -> AsyncReadManagerSummaryMetrics:...
        @typing.overload
        def __call__(self, metricsFilters: AsyncReadManagerMetricsFilters, flags: AsyncReadManagerMetrics.Flags) -> AsyncReadManagerSummaryMetrics:...

    # Skipped GetMetrics due to it being static, abstract and generic.

    GetMetrics : GetMetrics_MethodGroup
    class GetMetrics_MethodGroup:
        @typing.overload
        def __call__(self, flags: AsyncReadManagerMetrics.Flags) -> Array_1[AsyncReadManagerRequestMetric]:...
        @typing.overload
        def __call__(self, outMetrics: List_1[AsyncReadManagerRequestMetric], flags: AsyncReadManagerMetrics.Flags) -> None:...
        @typing.overload
        def __call__(self, filters: AsyncReadManagerMetricsFilters, flags: AsyncReadManagerMetrics.Flags) -> Array_1[AsyncReadManagerRequestMetric]:...
        @typing.overload
        def __call__(self, outMetrics: List_1[AsyncReadManagerRequestMetric], filters: AsyncReadManagerMetricsFilters, flags: AsyncReadManagerMetrics.Flags) -> None:...

    # Skipped GetSummaryOfMetrics due to it being static, abstract and generic.

    GetSummaryOfMetrics : GetSummaryOfMetrics_MethodGroup
    class GetSummaryOfMetrics_MethodGroup:
        @typing.overload
        def __call__(self, metrics: Array_1[AsyncReadManagerRequestMetric]) -> AsyncReadManagerSummaryMetrics:...
        @typing.overload
        def __call__(self, metrics: List_1[AsyncReadManagerRequestMetric]) -> AsyncReadManagerSummaryMetrics:...
        @typing.overload
        def __call__(self, metrics: Array_1[AsyncReadManagerRequestMetric], metricsFilters: AsyncReadManagerMetricsFilters) -> AsyncReadManagerSummaryMetrics:...
        @typing.overload
        def __call__(self, metrics: List_1[AsyncReadManagerRequestMetric], metricsFilters: AsyncReadManagerMetricsFilters) -> AsyncReadManagerSummaryMetrics:...


    class Flags(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : AsyncReadManagerMetrics.Flags # 0
        ClearOnRead : AsyncReadManagerMetrics.Flags # 1



class AsyncReadManagerMetricsFilters:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, priorityLevel: Priority) -> None: ...
    @typing.overload
    def __init__(self, priorityLevels: Array_1[Priority]) -> None: ...
    @typing.overload
    def __init__(self, readType: FileReadType) -> None: ...
    @typing.overload
    def __init__(self, readTypes: Array_1[FileReadType]) -> None: ...
    @typing.overload
    def __init__(self, state: ProcessingState) -> None: ...
    @typing.overload
    def __init__(self, states: Array_1[ProcessingState]) -> None: ...
    @typing.overload
    def __init__(self, subsystem: AssetLoadingSubsystem) -> None: ...
    @typing.overload
    def __init__(self, subsystems: Array_1[AssetLoadingSubsystem]) -> None: ...
    @typing.overload
    def __init__(self, typeID: int) -> None: ...
    @typing.overload
    def __init__(self, typeIDs: Array_1[int]) -> None: ...
    @typing.overload
    def __init__(self, typeIDs: Array_1[int], states: Array_1[ProcessingState], readTypes: Array_1[FileReadType], priorityLevels: Array_1[Priority], subsystems: Array_1[AssetLoadingSubsystem]) -> None: ...
    def ClearFilters(self) -> None: ...
    def RemovePriorityFilter(self) -> None: ...
    def RemoveReadTypeFilter(self) -> None: ...
    def RemoveStateFilter(self) -> None: ...
    def RemoveSubsystemFilter(self) -> None: ...
    def RemoveTypeIDFilter(self) -> None: ...
    # Skipped SetPriorityFilter due to it being static, abstract and generic.

    SetPriorityFilter : SetPriorityFilter_MethodGroup
    class SetPriorityFilter_MethodGroup:
        @typing.overload
        def __call__(self, _priorityLevels: Array_1[Priority]) -> None:...
        @typing.overload
        def __call__(self, _priorityLevel: Priority) -> None:...

    # Skipped SetReadTypeFilter due to it being static, abstract and generic.

    SetReadTypeFilter : SetReadTypeFilter_MethodGroup
    class SetReadTypeFilter_MethodGroup:
        @typing.overload
        def __call__(self, _readTypes: Array_1[FileReadType]) -> None:...
        @typing.overload
        def __call__(self, _readType: FileReadType) -> None:...

    # Skipped SetStateFilter due to it being static, abstract and generic.

    SetStateFilter : SetStateFilter_MethodGroup
    class SetStateFilter_MethodGroup:
        @typing.overload
        def __call__(self, _states: Array_1[ProcessingState]) -> None:...
        @typing.overload
        def __call__(self, _state: ProcessingState) -> None:...

    # Skipped SetSubsystemFilter due to it being static, abstract and generic.

    SetSubsystemFilter : SetSubsystemFilter_MethodGroup
    class SetSubsystemFilter_MethodGroup:
        @typing.overload
        def __call__(self, _subsystems: Array_1[AssetLoadingSubsystem]) -> None:...
        @typing.overload
        def __call__(self, _subsystem: AssetLoadingSubsystem) -> None:...

    # Skipped SetTypeIDFilter due to it being static, abstract and generic.

    SetTypeIDFilter : SetTypeIDFilter_MethodGroup
    class SetTypeIDFilter_MethodGroup:
        @typing.overload
        def __call__(self, _typeID: int) -> None:...
        @typing.overload
        def __call__(self, _typeIDs: Array_1[int]) -> None:...



class AsyncReadManagerRequestMetric:
    @property
    def AssetName(self) -> str: ...
    @property
    def AssetTypeId(self) -> int: ...
    @property
    def BatchReadCount(self) -> int: ...
    @property
    def CurrentBytesRead(self) -> int: ...
    @property
    def FileName(self) -> str: ...
    @property
    def IsBatchRead(self) -> bool: ...
    @property
    def OffsetBytes(self) -> int: ...
    @property
    def PriorityLevel(self) -> Priority: ...
    @property
    def ReadType(self) -> FileReadType: ...
    @property
    def RequestTimeMicroseconds(self) -> float: ...
    @property
    def SizeBytes(self) -> int: ...
    @property
    def State(self) -> ProcessingState: ...
    @property
    def Subsystem(self) -> AssetLoadingSubsystem: ...
    @property
    def TimeInQueueMicroseconds(self) -> float: ...
    @property
    def TotalTimeMicroseconds(self) -> float: ...


class AsyncReadManagerSummaryMetrics:
    def __init__(self) -> None: ...
    @property
    def AverageBandwidthMBPerSecond(self) -> float: ...
    @property
    def AverageReadSizeInBytes(self) -> float: ...
    @property
    def AverageReadTimeMicroseconds(self) -> float: ...
    @property
    def AverageThroughputMBPerSecond(self) -> float: ...
    @property
    def AverageTotalRequestTimeMicroseconds(self) -> float: ...
    @property
    def AverageWaitTimeMicroseconds(self) -> float: ...
    @property
    def LongestReadAssetType(self) -> int: ...
    @property
    def LongestReadSubsystem(self) -> AssetLoadingSubsystem: ...
    @property
    def LongestReadTimeMicroseconds(self) -> float: ...
    @property
    def LongestWaitAssetType(self) -> int: ...
    @property
    def LongestWaitSubsystem(self) -> AssetLoadingSubsystem: ...
    @property
    def LongestWaitTimeMicroseconds(self) -> float: ...
    @property
    def NumberOfAsyncReads(self) -> int: ...
    @property
    def NumberOfCachedReads(self) -> int: ...
    @property
    def NumberOfCanceledRequests(self) -> int: ...
    @property
    def NumberOfCompletedRequests(self) -> int: ...
    @property
    def NumberOfFailedRequests(self) -> int: ...
    @property
    def NumberOfInProgressRequests(self) -> int: ...
    @property
    def NumberOfSyncReads(self) -> int: ...
    @property
    def NumberOfWaitingRequests(self) -> int: ...
    @property
    def TotalBytesRead(self) -> int: ...
    @property
    def TotalNumberOfRequests(self) -> int: ...


class FileHandle:
    @property
    def JobHandle(self) -> JobHandle: ...
    @property
    def Status(self) -> FileStatus: ...
    def Close(self, dependency: JobHandle = ...) -> JobHandle: ...
    def IsValid(self) -> bool: ...


class FileInfoResult:
    FileSize : int
    FileState : FileState


class FileReadType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sync : FileReadType # 0
    Async : FileReadType # 1


class FileState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Absent : FileState # 0
    Exists : FileState # 1


class FileStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Closed : FileStatus # 0
    Pending : FileStatus # 1
    Open : FileStatus # 2
    OpenFailed : FileStatus # 3


class Priority(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PriorityLow : Priority # 0
    PriorityHigh : Priority # 1


class ProcessingState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : ProcessingState # 0
    InQueue : ProcessingState # 1
    Reading : ProcessingState # 2
    Completed : ProcessingState # 3
    Failed : ProcessingState # 4
    Canceled : ProcessingState # 5


class ReadCommand:
    Buffer : clr.Reference[None]
    Offset : int
    Size : int


class ReadCommandArray:
    CommandCount : int
    ReadCommands : clr.Reference[ReadCommand]


class ReadHandle(IDisposable):
    @property
    def JobHandle(self) -> JobHandle: ...
    @property
    def ReadCount(self) -> int: ...
    @property
    def Status(self) -> ReadStatus: ...
    def Cancel(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetBytesReadArray(self) -> clr.Reference[int]: ...
    def IsValid(self) -> bool: ...
    # Skipped GetBytesRead due to it being static, abstract and generic.

    GetBytesRead : GetBytesRead_MethodGroup
    class GetBytesRead_MethodGroup:
        @typing.overload
        def __call__(self) -> int:...
        @typing.overload
        def __call__(self, readCommandIndex: int) -> int:...



class ReadStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Complete : ReadStatus # 0
    InProgress : ReadStatus # 1
    Failed : ReadStatus # 2
    Truncated : ReadStatus # 4
    Canceled : ReadStatus # 5


class VirtualFileSystem(abc.ABC):
    @staticmethod
    def GetLocalFileSystemName(vfsFileName: str, localFileName: clr.Reference[str], localFileOffset: clr.Reference[int], localFileSize: clr.Reference[int]) -> bool: ...

