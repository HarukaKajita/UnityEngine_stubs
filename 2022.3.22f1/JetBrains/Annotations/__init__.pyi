import typing
from System import Attribute

class AssertionConditionAttribute(Attribute):
    def __init__(self, conditionType: AssertionConditionType) -> None: ...
    @property
    def ConditionType(self) -> AssertionConditionType: ...
    @property
    def TypeId(self) -> typing.Any: ...


class AssertionConditionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    IS_TRUE : AssertionConditionType # 0
    IS_FALSE : AssertionConditionType # 1
    IS_NULL : AssertionConditionType # 2
    IS_NOT_NULL : AssertionConditionType # 3


class AssertionMethodAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class BaseTypeRequiredAttribute(Attribute):
    def __init__(self, baseType: typing.Type[typing.Any]) -> None: ...
    @property
    def BaseType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CanBeNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CannotApplyEqualityOperatorAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CollectionAccessAttribute(Attribute):
    def __init__(self, collectionAccessType: CollectionAccessType) -> None: ...
    @property
    def CollectionAccessType(self) -> CollectionAccessType: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CollectionAccessType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CollectionAccessType # 0
    Read : CollectionAccessType # 1
    ModifyExistingContent : CollectionAccessType # 2
    UpdatedContent : CollectionAccessType # 6


class ContractAnnotationAttribute(Attribute):
    @typing.overload
    def __init__(self, contract: str) -> None: ...
    @typing.overload
    def __init__(self, contract: str, forceFullStates: bool) -> None: ...
    @property
    def Contract(self) -> str: ...
    @property
    def ForceFullStates(self) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ImplicitUseKindFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Access : ImplicitUseKindFlags # 1
    Assign : ImplicitUseKindFlags # 2
    InstantiatedWithFixedConstructorSignature : ImplicitUseKindFlags # 4
    Default : ImplicitUseKindFlags # 7
    InstantiatedNoFixedConstructorSignature : ImplicitUseKindFlags # 8


class ImplicitUseTargetFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : ImplicitUseTargetFlags # 1
    Itself : ImplicitUseTargetFlags # 1
    Members : ImplicitUseTargetFlags # 2
    WithMembers : ImplicitUseTargetFlags # 3


class InstantHandleAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class InvokerParameterNameAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ItemCanBeNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ItemNotNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class LinqTunnelAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class LocalizationRequiredAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, required: bool) -> None: ...
    @property
    def Required(self) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...


class MacroAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def Editable(self) -> int: ...
    @Editable.setter
    def Editable(self, value: int) -> int: ...
    @property
    def Expression(self) -> str: ...
    @Expression.setter
    def Expression(self, value: str) -> str: ...
    @property
    def Target(self) -> str: ...
    @Target.setter
    def Target(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class MeansImplicitUseAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, targetFlags: ImplicitUseTargetFlags) -> None: ...
    @typing.overload
    def __init__(self, useKindFlags: ImplicitUseKindFlags) -> None: ...
    @typing.overload
    def __init__(self, useKindFlags: ImplicitUseKindFlags, targetFlags: ImplicitUseTargetFlags) -> None: ...
    @property
    def TargetFlags(self) -> ImplicitUseTargetFlags: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def UseKindFlags(self) -> ImplicitUseKindFlags: ...


class MustUseReturnValueAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, justification: str) -> None: ...
    @property
    def Justification(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class NoEnumerationAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class NoReorderAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class NotifyPropertyChangedInvocatorAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parameterName: str) -> None: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class NotNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class PathReferenceAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, basePath: str) -> None: ...
    @property
    def BasePath(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ProvidesContextAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class PublicAPIAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, comment: str) -> None: ...
    @property
    def Comment(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class PureAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RegexPatternAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class SourceTemplateAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class StringFormatMethodAttribute(Attribute):
    def __init__(self, formatParameterName: str) -> None: ...
    @property
    def FormatParameterName(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class TerminatesProgramAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class UsedImplicitlyAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, targetFlags: ImplicitUseTargetFlags) -> None: ...
    @typing.overload
    def __init__(self, useKindFlags: ImplicitUseKindFlags) -> None: ...
    @typing.overload
    def __init__(self, useKindFlags: ImplicitUseKindFlags, targetFlags: ImplicitUseTargetFlags) -> None: ...
    @property
    def TargetFlags(self) -> ImplicitUseTargetFlags: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def UseKindFlags(self) -> ImplicitUseKindFlags: ...


class ValueProviderAttribute(Attribute):
    def __init__(self, name: str) -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

