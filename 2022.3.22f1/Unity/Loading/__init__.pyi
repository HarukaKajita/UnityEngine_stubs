import typing, abc
from UnityEngine import Object
from System import Array_1
from Unity.Content import ContentNamespace
from Unity.Collections import NativeArray_1
from Unity.Jobs import JobHandle
from UnityEngine.SceneManagement import Scene, LoadSceneMode, LocalPhysicsMode

class ContentFile:
    @classmethod
    @property
    def GlobalTableDependency(cls) -> ContentFile: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LoadingStatus(self) -> LoadingStatus: ...
    def GetObject(self, localIdentifierInFile: int) -> Object: ...
    def GetObjects(self) -> Array_1[Object]: ...
    def UnloadAsync(self) -> ContentFileUnloadHandle: ...
    def WaitForCompletion(self, timeoutMs: int) -> bool: ...


class ContentFileUnloadHandle:
    @property
    def IsCompleted(self) -> bool: ...
    def WaitForCompletion(self, timeoutMs: int) -> bool: ...


class ContentLoadInterface(abc.ABC):
    @staticmethod
    def GetContentFiles(nameSpace: ContentNamespace) -> Array_1[ContentFile]: ...
    @staticmethod
    def GetIntegrationTimeMS() -> float: ...
    @staticmethod
    def GetSceneFiles(nameSpace: ContentNamespace) -> Array_1[ContentSceneFile]: ...
    @staticmethod
    def LoadContentFileAsync(nameSpace: ContentNamespace, filename: str, dependencies: NativeArray_1[ContentFile], dependentFence: JobHandle = ...) -> ContentFile: ...
    @staticmethod
    def LoadSceneAsync(nameSpace: ContentNamespace, filename: str, sceneName: str, sceneParams: ContentSceneParameters, dependencies: NativeArray_1[ContentFile], dependentFence: JobHandle = ...) -> ContentSceneFile: ...
    @staticmethod
    def SetIntegrationTimeMS(integrationTimeMS: float) -> None: ...


class ContentSceneFile:
    @property
    def IsValid(self) -> bool: ...
    @property
    def Scene(self) -> Scene: ...
    @property
    def Status(self) -> SceneLoadingStatus: ...
    def IntegrateAtEndOfFrame(self) -> None: ...
    def UnloadAtEndOfFrame(self) -> bool: ...
    def WaitForLoadCompletion(self, timeoutMs: int) -> bool: ...


class ContentSceneParameters:
    @property
    def autoIntegrate(self) -> bool: ...
    @autoIntegrate.setter
    def autoIntegrate(self, value: bool) -> bool: ...
    @property
    def loadSceneMode(self) -> LoadSceneMode: ...
    @loadSceneMode.setter
    def loadSceneMode(self, value: LoadSceneMode) -> LoadSceneMode: ...
    @property
    def localPhysicsMode(self) -> LocalPhysicsMode: ...
    @localPhysicsMode.setter
    def localPhysicsMode(self, value: LocalPhysicsMode) -> LocalPhysicsMode: ...


class LoadingStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InProgress : LoadingStatus # 0
    Completed : LoadingStatus # 1
    Failed : LoadingStatus # 2


class SceneLoadingStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InProgress : SceneLoadingStatus # 0
    WaitingForIntegrate : SceneLoadingStatus # 1
    WillIntegrateNextFrame : SceneLoadingStatus # 2
    Complete : SceneLoadingStatus # 3
    Failed : SceneLoadingStatus # 4

