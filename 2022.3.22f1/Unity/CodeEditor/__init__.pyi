import typing, clr, abc
from System.Collections.Generic import Dictionary_2
from System import Array_1

class CodeEditor:
    def __init__(self) -> None: ...
    @property
    def CurrentCodeEditor(self) -> IExternalCodeEditor: ...
    @classmethod
    @property
    def CurrentEditor(cls) -> IExternalCodeEditor: ...
    @classmethod
    @property
    def CurrentEditorInstallation(cls) -> str: ...
    @classmethod
    @property
    def CurrentEditorPath(cls) -> str: ...
    @property
    def CurrentInstallation(self) -> CodeEditor.Installation: ...
    @classmethod
    @property
    def Editor(cls) -> CodeEditor: ...
    def GetCodeEditorForPath(self, editorPath: str) -> IExternalCodeEditor: ...
    def GetFoundScriptEditorPaths(self) -> Dictionary_2[str, str]: ...
    def GetInstallationForPath(self, editorPath: str) -> CodeEditor.Installation: ...
    @staticmethod
    def OSOpenFile(appPath: str, arguments: str) -> bool: ...
    @staticmethod
    def ParseArgument(arguments: str, path: str, line: int, column: int) -> str: ...
    @staticmethod
    def QuoteForProcessStart(argument: str) -> str: ...
    @staticmethod
    def Register(externalCodeEditor: IExternalCodeEditor) -> None: ...
    def SetCodeEditor(self, editorPath: str) -> None: ...
    @staticmethod
    def SetExternalScriptEditor(path: str) -> None: ...
    @staticmethod
    def Unregister(externalCodeEditor: IExternalCodeEditor) -> None: ...

    class Installation:
        Name : str
        Path : str



class IExternalCodeEditor(typing.Protocol):
    @property
    def Installations(self) -> Array_1[CodeEditor.Installation]: ...
    @abc.abstractmethod
    def Initialize(self, editorInstallationPath: str) -> None: ...
    @abc.abstractmethod
    def OnGUI(self) -> None: ...
    @abc.abstractmethod
    def OpenProject(self, filePath: str = ..., line: int = ..., column: int = ...) -> bool: ...
    @abc.abstractmethod
    def SyncAll(self) -> None: ...
    @abc.abstractmethod
    def SyncIfNeeded(self, addedFiles: Array_1[str], deletedFiles: Array_1[str], movedFiles: Array_1[str], movedFromFiles: Array_1[str], importedFiles: Array_1[str]) -> None: ...
    @abc.abstractmethod
    def TryGetInstallationForPath(self, editorPath: str, installation: clr.Reference[CodeEditor.Installation]) -> bool: ...

