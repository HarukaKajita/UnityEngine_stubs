import typing, clr, abc
from UnityEngine import RuntimeAnimatorController, AnimationClip, HideFlags, TextAsset, Object, Motion, Vector3, Animator, Texture2D, Rect, Component, GameObject, Bounds, GUIContent, Material, RenderTexture, LayerMask, Transform, Vector2, Camera, Vector4, Sprite, Renderer, Color32, Color, Light, RectTransform, GUIStyle, Event, AsyncOperation, PropertyAttribute, RuntimePlatform
from System import Array_1, MulticastDelegate, IAsyncResult, AsyncCallback, Func_1, Version, IDisposable
from UnityEditor import AssetImporter, Editor, Il2CppCompilerConfiguration, BuildTarget, SceneView, DragAndDropVisualMode, HierarchyProperty, HierarchyDropFlags, PropertyDrawer, SerializedProperty, MonoScript, EditorWindow, SerializedObject
from System.Reflection import MethodInfo, Assembly, FieldInfo
from System.Collections.Generic import Dictionary_2, IEnumerable_1, List_1
from System.IO import FileInfo
from System.Diagnostics import ProcessStartInfo
from UnityEngine.SceneManagement import Scene
from UnityEngine.UIElements import VisualElement
from UnityEngine.Profiling import ProfilerArea
from UnityEditor.Profiling import HierarchyFrameDataView, RawFrameDataView
from UnityEditor.IMGUI.Controls import MultiColumnHeader, MultiColumnHeaderState
from System.Collections import IList
from System.Collections.ObjectModel import ReadOnlyCollection_1
from UnityEngine.Events import UnityEventBase, PersistentListenerMode

class AnimatorController(RuntimeAnimatorController):
    def __init__(self) -> None: ...
    @property
    def animationClips(self) -> Array_1[AnimationClip]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class AnimatorControllerLayer:
    def __init__(self) -> None: ...


class AnimatorControllerParameter:
    def __init__(self) -> None: ...


class AnimatorControllerParameterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Float : AnimatorControllerParameterType # -1
    Int : AnimatorControllerParameterType # -1
    Bool : AnimatorControllerParameterType # -1
    Trigger : AnimatorControllerParameterType # -1


class AnimatorLayerBlendingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Override : AnimatorLayerBlendingMode # -1
    Additive : AnimatorLayerBlendingMode # -1


class AssemblyDefinitionAsset(TextAsset):
    @property
    def bytes(self) -> Array_1[int]: ...
    @property
    def dataSize(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def text(self) -> str: ...


class AssemblyDefinitionImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...


class AssemblyDefinitionReferenceAsset(TextAsset):
    @property
    def bytes(self) -> Array_1[int]: ...
    @property
    def dataSize(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def text(self) -> str: ...


class AssemblyDefinitionReferenceImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...


class AssetStore:
    def __init__(self) -> None: ...
    @staticmethod
    def Open(assetStoreURL: str) -> None: ...


class AssetStoreToolUtils:
    def __init__(self) -> None: ...
    @staticmethod
    def BuildAssetStoreAssetBundle(targetObject: Object, targetPath: str) -> bool: ...


class AudioProfilerClipInfo:
    age : int
    assetInstanceId : int
    assetNameOffset : int
    disposed : int
    instancePtr : int
    internalLoadState : int
    loadState : int
    numChannelInstances : int
    numClones : int
    refCount : int


class AudioProfilerDSPInfo:
    absoluteAudibility : float
    audibilityVisitOrder : int
    cpuLoad : float
    flags : int
    id : int
    level1 : float
    level2 : float
    nameOffset : int
    numChannels : int
    numLevels : int
    relativeAudibility : float
    target : int
    targetPort : int
    weight : float


class AudioProfilerGroupInfo:
    assetInstanceId : int
    assetNameOffset : int
    audibility : float
    distanceToListener : float
    flags : int
    frequency : float
    maxDist : float
    maxRMSLevelOrDuration : float
    minDist : float
    objectInstanceId : int
    objectNameOffset : int
    parentId : int
    playCount : int
    time : float
    uniqueId : int
    volume : float


class BatchBreakingReason(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoBreaking : BatchBreakingReason # 0
    NotCoplanarWithCanvas : BatchBreakingReason # 1
    CanvasInjectionIndex : BatchBreakingReason # 2
    DifferentMaterialInstance : BatchBreakingReason # 4
    DifferentRectClipping : BatchBreakingReason # 8
    DifferentTexture : BatchBreakingReason # 16
    DifferentA8TextureUsage : BatchBreakingReason # 32
    DifferentClipRect : BatchBreakingReason # 64
    Unknown : BatchBreakingReason # 128


class BlendTree(Motion):
    def __init__(self) -> None: ...
    @property
    def apparentSpeed(self) -> float: ...
    @property
    def averageAngularSpeed(self) -> float: ...
    @property
    def averageDuration(self) -> float: ...
    @property
    def averageSpeed(self) -> Vector3: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isAnimatorMotion(self) -> bool: ...
    @property
    def isHumanMotion(self) -> bool: ...
    @property
    def isLooping(self) -> bool: ...
    @property
    def legacy(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class BlendTreePreviewUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def CalculateBlendTexture(animator: Animator, layerIndex: int, stateHash: int, blendTexture: Texture2D, weightTextures: Array_1[Texture2D], rect: Rect) -> None: ...
    @staticmethod
    def CalculateRootBlendTreeChildWeights(animator: Animator, layerIndex: int, stateHash: int, weightArray: Array_1[float], blendX: float, blendY: float) -> None: ...
    @staticmethod
    def GetRootBlendTreeChildWeights(animator: Animator, layerIndex: int, stateHash: int, weightArray: Array_1[float]) -> None: ...


class CanAppendBuild(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unsupported : CanAppendBuild # 0
    Yes : CanAppendBuild # 1
    No : CanAppendBuild # 2


class ComponentUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def CopyComponent(component: Component) -> bool: ...
    @staticmethod
    def DestroyComponentsMatching(dst: GameObject, componentFilter: ComponentUtility.IsDesiredComponent) -> None: ...
    @staticmethod
    def MoveComponentDown(component: Component) -> bool: ...
    @staticmethod
    def MoveComponentUp(component: Component) -> bool: ...
    @staticmethod
    def PasteComponentAsNew(go: GameObject) -> bool: ...
    @staticmethod
    def PasteComponentValues(component: Component) -> bool: ...
    @staticmethod
    def ReplaceComponentsIfDifferent(src: GameObject, dst: GameObject, componentFilter: ComponentUtility.IsDesiredComponent) -> None: ...

    class IsDesiredComponent(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, c: Component, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, c: Component) -> bool: ...



class DllType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : DllType # 0
    Native : DllType # 1
    UnknownManaged : DllType # 2
    ManagedNET35 : DllType # 3
    ManagedNET40 : DllType # 4
    WinMDNative : DllType # 5
    WinMDNET40 : DllType # 6


class EditMode:
    def __init__(self) -> None: ...
    onEditModeEndDelegate : EditMode.OnEditModeStopFunc
    onEditModeStartDelegate : EditMode.OnEditModeStartFunc
    @classmethod
    @property
    def editMode(cls) -> EditMode.SceneViewEditMode: ...
    @classmethod
    @editMode.setter
    def editMode(cls, value: EditMode.SceneViewEditMode) -> EditMode.SceneViewEditMode: ...
    @staticmethod
    def ChangeEditMode(mode: EditMode.SceneViewEditMode, bounds: Bounds, caller: Editor) -> None: ...
    @staticmethod
    def IsOwner(editor: Editor) -> bool: ...
    @staticmethod
    def OnSelectionChange() -> None: ...
    @staticmethod
    def QuitEditMode() -> None: ...
    @staticmethod
    def ResetToolToPrevious() -> None: ...
    # Skipped DoEditModeInspectorModeButton due to it being static, abstract and generic.

    DoEditModeInspectorModeButton : DoEditModeInspectorModeButton_MethodGroup
    class DoEditModeInspectorModeButton_MethodGroup:
        @typing.overload
        def __call__(self, mode: EditMode.SceneViewEditMode, label: str, icon: GUIContent, getBoundsOfTargets: Func_1[Bounds], caller: Editor) -> None:...
        @typing.overload
        def __call__(self, mode: EditMode.SceneViewEditMode, label: str, icon: GUIContent, bounds: Bounds, caller: Editor) -> None:...

    # Skipped DoInspectorToolbar due to it being static, abstract and generic.

    DoInspectorToolbar : DoInspectorToolbar_MethodGroup
    class DoInspectorToolbar_MethodGroup:
        @typing.overload
        def __call__(self, modes: Array_1[EditMode.SceneViewEditMode], guiContents: Array_1[GUIContent], getBoundsOfTargets: Func_1[Bounds], caller: Editor) -> None:...
        @typing.overload
        def __call__(self, modes: Array_1[EditMode.SceneViewEditMode], guiContents: Array_1[GUIContent], bounds: Bounds, caller: Editor) -> None:...


    class OnEditModeStartFunc(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, editor: Editor, mode: EditMode.SceneViewEditMode, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, editor: Editor, mode: EditMode.SceneViewEditMode) -> None: ...


    class OnEditModeStopFunc(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, editor: Editor, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, editor: Editor) -> None: ...


    class SceneViewEditMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : EditMode.SceneViewEditMode # 0
        Collider : EditMode.SceneViewEditMode # 1
        ClothConstraints : EditMode.SceneViewEditMode # 2
        ClothSelfAndInterCollisionParticles : EditMode.SceneViewEditMode # 3
        ReflectionProbeBox : EditMode.SceneViewEditMode # 4
        ReflectionProbeOrigin : EditMode.SceneViewEditMode # 5
        LightProbeProxyVolumeBox : EditMode.SceneViewEditMode # 6
        LightProbeProxyVolumeOrigin : EditMode.SceneViewEditMode # 7
        LightProbeGroup : EditMode.SceneViewEditMode # 8
        JointAngularLimits : EditMode.SceneViewEditMode # 9
        GridPainting : EditMode.SceneViewEditMode # 10
        GridPicking : EditMode.SceneViewEditMode # 11
        GridEraser : EditMode.SceneViewEditMode # 12
        GridFloodFill : EditMode.SceneViewEditMode # 13
        GridBox : EditMode.SceneViewEditMode # 14
        GridSelect : EditMode.SceneViewEditMode # 15
        GridMove : EditMode.SceneViewEditMode # 16
        LineRendererEdit : EditMode.SceneViewEditMode # 17
        LineRendererCreate : EditMode.SceneViewEditMode # 18



class EventMarker:
    frame : int
    nameOffset : int
    objectInstanceId : int


class GenerateIconsWithMipLevels:
    def __init__(self) -> None: ...
    @staticmethod
    def GenerateAllIconsWithMipLevels() -> None: ...
    @staticmethod
    def GenerateIconWithMipLevels(assetPath: str, mipTextures: Dictionary_2[int, Texture2D], fileInfo: FileInfo) -> None: ...
    @staticmethod
    def GenerateSelectedIconsWithMips() -> None: ...
    @staticmethod
    def MipLevelForAssetPath(assetPath: str, separator: str) -> int: ...
    @staticmethod
    def VerifyIconPath(assetPath: str, logError: bool) -> bool: ...


class GpuProfilingStatisticsAvailabilityStates(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Gathered : GpuProfilingStatisticsAvailabilityStates # 1
    Enabled : GpuProfilingStatisticsAvailabilityStates # 2
    Supported : GpuProfilingStatisticsAvailabilityStates # 4
    NotSupportedWithEditorProfiling : GpuProfilingStatisticsAvailabilityStates # 8
    NotSupportedWithLegacyGfxJobs : GpuProfilingStatisticsAvailabilityStates # 16
    NotSupportedWithNativeGfxJobs : GpuProfilingStatisticsAvailabilityStates # 32
    NotSupportedByDevice : GpuProfilingStatisticsAvailabilityStates # 64
    NotSupportedByGraphicsAPI : GpuProfilingStatisticsAvailabilityStates # 128
    NotSupportedDueToFrameTimingStatsAndDisjointTimerQuery : GpuProfilingStatisticsAvailabilityStates # 256
    NotSupportedWithVulkan : GpuProfilingStatisticsAvailabilityStates # 512
    NotSupportedWithMetal : GpuProfilingStatisticsAvailabilityStates # 1024
    NotSupportedWithOpenGLGPURecorders : GpuProfilingStatisticsAvailabilityStates # 2048


class Il2CppNativeCodeBuilder(abc.ABC):
    def __init__(self, baselibLibraryDirectory: str) -> None: ...
    @property
    def AdditionalIl2CPPArguments(self) -> IEnumerable_1[str]: ...
    @property
    def BaselibLibraryDirectory(self) -> str: ...
    @property
    def CacheDirectory(self) -> str: ...
    @property
    def CompilerArchitecture(self) -> str: ...
    @property
    def CompilerFlags(self) -> str: ...
    @property
    def CompilerPlatform(self) -> str: ...
    @property
    def LinkerFlags(self) -> str: ...
    @property
    def LinkLibIl2CppStatically(self) -> bool: ...
    @property
    def PluginPath(self) -> str: ...
    @property
    def SetsUpEnvironment(self) -> bool: ...
    def ConvertIncludesToFullPaths(self, relativeIncludePaths: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    def ConvertOutputFileToFullPath(self, outputFileRelativePath: str) -> str: ...
    def SetupStartInfo(self, startInfo: ProcessStartInfo) -> None: ...


class Il2CppNativeCodeBuilderUtils(abc.ABC):
    @staticmethod
    def AddBuilderArguments(builder: Il2CppNativeCodeBuilder, outputRelativePath: str, includeRelativePaths: IEnumerable_1[str], additionalLibs: IEnumerable_1[str], compilerConfiguration: Il2CppCompilerConfiguration) -> IEnumerable_1[str]: ...
    @staticmethod
    def ClearAndPrepareCacheDirectory(builder: Il2CppNativeCodeBuilder) -> None: ...
    @staticmethod
    def ClearCacheIfEditorVersionDiffers(builder: Il2CppNativeCodeBuilder, currentEditorVersion: str) -> None: ...
    @staticmethod
    def GetConfigurationName(compilerConfiguration: Il2CppCompilerConfiguration) -> str: ...
    @staticmethod
    def ObjectFilePathInCacheDirectoryFor(builderCacheDirectory: str) -> str: ...
    @staticmethod
    def PrepareCacheDirectory(builder: Il2CppNativeCodeBuilder, currentEditorVersion: str) -> None: ...


class InstrumentedAssemblyTypes(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : InstrumentedAssemblyTypes # 0
    System : InstrumentedAssemblyTypes # 1
    Unity : InstrumentedAssemblyTypes # 2
    Plugins : InstrumentedAssemblyTypes # 4
    Script : InstrumentedAssemblyTypes # 8
    All : InstrumentedAssemblyTypes # 2147483647


class InternalEditorUtility:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def defaultScreenHeight(cls) -> float: ...
    @classmethod
    @property
    def defaultScreenWidth(cls) -> float: ...
    @classmethod
    @property
    def defaultWebScreenHeight(cls) -> float: ...
    @classmethod
    @property
    def defaultWebScreenWidth(cls) -> float: ...
    @classmethod
    @property
    def expandedProjectWindowItems(cls) -> Array_1[int]: ...
    @classmethod
    @expandedProjectWindowItems.setter
    def expandedProjectWindowItems(cls, value: Array_1[int]) -> Array_1[int]: ...
    @classmethod
    @property
    def inBatchMode(cls) -> bool: ...
    @classmethod
    @property
    def isApplicationActive(cls) -> bool: ...
    @classmethod
    @property
    def isHumanControllingUs(cls) -> bool: ...
    @classmethod
    @property
    def layers(cls) -> Array_1[str]: ...
    @classmethod
    @property
    def remoteScreenHeight(cls) -> float: ...
    @classmethod
    @property
    def remoteScreenWidth(cls) -> float: ...
    @classmethod
    @property
    def tags(cls) -> Array_1[str]: ...
    @classmethod
    @property
    def unityPreferencesFolder(cls) -> str: ...
    @staticmethod
    def AddTag(tag: str) -> None: ...
    @staticmethod
    def BuildCanBeAppended(target: BuildTarget, location: str) -> CanAppendBuild: ...
    @staticmethod
    def BumpMapSettingsFixingWindowReportResult(result: int) -> None: ...
    @staticmethod
    def BumpMapTextureNeedsFixingInternal(material: Material, propName: str, flaggedAsNormal: bool) -> bool: ...
    @staticmethod
    def CalculateHashForObjectsAndDependencies(objects: Array_1[Object]) -> str: ...
    @staticmethod
    def CanConnectToCacheServer() -> bool: ...
    @staticmethod
    def CaptureSceneView(sv: SceneView, rt: RenderTexture) -> bool: ...
    @staticmethod
    def ConcatenatedLayersMaskToLayerMask(concatenatedLayersMask: int) -> LayerMask: ...
    @staticmethod
    def CountToString(count: int) -> str: ...
    @staticmethod
    def CurrentThreadIsMainThread() -> bool: ...
    @staticmethod
    def DetectDotNetDll(path: str) -> DllType: ...
    @staticmethod
    def DetermineDepthOrder(lhs: Transform, rhs: Transform) -> int: ...
    @staticmethod
    def EnsureSceneHasBeenSaved(operation: str) -> bool: ...
    @staticmethod
    def ExecuteCommandOnKeyWindow(commandName: str) -> None: ...
    @staticmethod
    def FindIconForFile(fileName: str) -> Texture2D: ...
    @staticmethod
    def FixCacheServerIntegrityErrors() -> int: ...
    @staticmethod
    def FixNormalmapTextureInternal(material: Material, propName: str) -> None: ...
    @staticmethod
    def GetAssetsFolder() -> str: ...
    @staticmethod
    def GetAuthToken() -> str: ...
    @staticmethod
    def GetAvailableDiffTools() -> Array_1[str]: ...
    @staticmethod
    def GetBoundsOfDesktopAtPoint(pos: Vector2) -> Rect: ...
    @staticmethod
    def GetCrashHandlerProcessID() -> int: ...
    @staticmethod
    def GetCrashReportFolder() -> str: ...
    @staticmethod
    def GetDisplayStringOfInvalidCharsOfFileName(filename: str) -> str: ...
    @staticmethod
    def GetEditorAssemblyPath() -> str: ...
    @staticmethod
    def GetEditorFolder() -> str: ...
    @staticmethod
    def GetEditorSettingsList(prefix: str, count: int) -> Array_1[str]: ...
    @staticmethod
    def GetEngineAssemblyPath() -> str: ...
    @staticmethod
    def GetEngineCoreModuleAssemblyPath() -> str: ...
    @staticmethod
    def GetFullUnityVersion() -> str: ...
    @staticmethod
    def GetGameObjectInstanceIDFromComponent(instanceID: int) -> int: ...
    @staticmethod
    def GetGpuDevices() -> Array_1[str]: ...
    @staticmethod
    def GetIconForFile(fileName: str) -> Texture2D: ...
    @staticmethod
    def GetIsInspectorExpanded(obj: Object) -> bool: ...
    @staticmethod
    def GetLayerName(layer: int) -> str: ...
    @staticmethod
    def GetLicenseFlags() -> Array_1[int]: ...
    @staticmethod
    def GetLicenseInfo() -> str: ...
    @staticmethod
    def GetLoadedObjectFromInstanceID(instanceID: int) -> Object: ...
    @staticmethod
    def GetNewSelection(clickedInstanceID: int, allInstanceIDs: List_1[int], selectedInstanceIDs: List_1[int], lastClickedInstanceID: int, keepMultiSelection: bool, useShiftAsActionKey: bool, allowMultiSelection: bool) -> List_1[int]: ...
    @staticmethod
    def GetNoDiffToolsDetectedMessage() -> str: ...
    @staticmethod
    def GetObjectFromInstanceID(instanceID: int) -> Object: ...
    @staticmethod
    def GetSceneViewCameras() -> Array_1[Camera]: ...
    @staticmethod
    def GetSpriteOuterUV(sprite: Sprite, getAtlasData: bool) -> Vector4: ...
    @staticmethod
    def GetTypeWithoutLoadingObject(instanceID: int) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetUnityBuildBranch() -> str: ...
    @staticmethod
    def GetUnityBuildHash() -> str: ...
    @staticmethod
    def GetUnityCopyright() -> str: ...
    @staticmethod
    def GetUnityDisplayVersion() -> str: ...
    @staticmethod
    def GetUnityDisplayVersionVerbose() -> str: ...
    @staticmethod
    def GetUnityRevision() -> int: ...
    @staticmethod
    def GetUnityVersion() -> Version: ...
    @staticmethod
    def GetUnityVersionDate() -> int: ...
    @staticmethod
    def GetUnityVersionDigits() -> str: ...
    @staticmethod
    def HasAdvancedLicenseOnBuildTarget(target: BuildTarget) -> bool: ...
    @staticmethod
    def HasEduLicense() -> bool: ...
    @staticmethod
    def HasFreeLicense() -> bool: ...
    @staticmethod
    def HasFullscreenCamera() -> bool: ...
    @staticmethod
    def HasPro() -> bool: ...
    @staticmethod
    def HasTeamLicense() -> bool: ...
    @staticmethod
    def HierarchyWindowDrag(property: HierarchyProperty, dropMode: HierarchyDropFlags, parentForDraggedObjects: Transform, perform: bool) -> DragAndDropVisualMode: ...
    @staticmethod
    def HierarchyWindowDragByID(dropTargetInstanceID: int, dropMode: HierarchyDropFlags, parentForDraggedObjects: Transform, perform: bool) -> DragAndDropVisualMode: ...
    @staticmethod
    def InstantiateMaterialsInEditMode(renderer: Renderer) -> Array_1[Material]: ...
    @staticmethod
    def IsDotNet4Dll(path: str) -> bool: ...
    @staticmethod
    def IsGpuDeviceSelectionSupported() -> bool: ...
    @staticmethod
    def IsInEditorFolder(path: str) -> bool: ...
    @staticmethod
    def IsMobilePlatform(target: BuildTarget) -> bool: ...
    @staticmethod
    def IsUnityBeta() -> bool: ...
    @staticmethod
    def IsValidFileName(filename: str) -> bool: ...
    @staticmethod
    def LayerMaskToConcatenatedLayersMask(mask: LayerMask) -> int: ...
    @staticmethod
    def LoadAssemblyWrapper(dllName: str, dllLocation: str) -> Assembly: ...
    @staticmethod
    def LoadDefaultLayout() -> None: ...
    @staticmethod
    def LoadSerializedFileAndForget(path: str) -> Array_1[Object]: ...
    @staticmethod
    def LoadSerializedFileAndForgetAsync(path: str, localIdentifierInFile: int, offsetInFile: int = ..., fileSize: int = ..., destScene: Scene = ...) -> LoadFileAndForgetOperation: ...
    @staticmethod
    def OnGameViewFocus(focus: bool) -> None: ...
    @staticmethod
    def OpenEditorConsole() -> None: ...
    @staticmethod
    def OpenPlayerConsole() -> None: ...
    @staticmethod
    def PassAndReturnColor32(c: Color32) -> Color32: ...
    @staticmethod
    def PassAndReturnVector2(v: Vector2) -> Vector2: ...
    @staticmethod
    def PerformUnmarkedBumpMapTexturesFixing() -> bool: ...
    @staticmethod
    def ProjectWindowDrag(property: HierarchyProperty, perform: bool) -> DragAndDropVisualMode: ...
    @staticmethod
    def ReadScreenPixel(pixelPos: Vector2, sizex: int, sizey: int) -> Array_1[Color]: ...
    @staticmethod
    def ReadScreenPixelUnderCursor(cursorPosHint: Vector2, sizex: int, sizey: int) -> Array_1[Color]: ...
    @staticmethod
    def ReloadWindowLayoutMenu() -> None: ...
    @staticmethod
    def RemoveCustomLighting() -> None: ...
    @staticmethod
    def RemoveInvalidCharsFromFileName(filename: str, logIfInvalidChars: bool) -> str: ...
    @staticmethod
    def RemoveTag(tag: str) -> None: ...
    @staticmethod
    def RepaintAllViews() -> None: ...
    @staticmethod
    def RequestScriptReload() -> None: ...
    @staticmethod
    def ResetCursor() -> None: ...
    @staticmethod
    def RevertFactoryLayoutSettings(quitOnCancel: bool) -> None: ...
    @staticmethod
    def SaveCursorToFile(path: str, image: Texture2D, hotSpot: Vector2) -> bool: ...
    @staticmethod
    def SaveEditorSettingsList(prefix: str, aList: Array_1[str], count: int) -> None: ...
    @staticmethod
    def SaveToSerializedFileAndForget(obj: Array_1[Object], path: str, allowTextSerialization: bool) -> None: ...
    @staticmethod
    def SceneViewDrag(dropUpon: Object, worldPosition: Vector3, viewportPosition: Vector2, parentForDraggedObjects: Transform, perform: bool) -> DragAndDropVisualMode: ...
    @staticmethod
    def SetCustomLighting(lights: Array_1[Light], ambient: Color) -> None: ...
    @staticmethod
    def SetCustomLightingInternal(lights: Array_1[Light], ambient: Color) -> None: ...
    @staticmethod
    def SetGpuDeviceAndRecreateGraphics(index: int, name: str) -> None: ...
    @staticmethod
    def SetIsInspectorExpanded(obj: Object, isExpanded: bool) -> None: ...
    @staticmethod
    def SetRectTransformTemporaryRect(rectTransform: RectTransform, rect: Rect) -> None: ...
    @staticmethod
    def SetShowGizmos(value: bool) -> None: ...
    @staticmethod
    def SetupShaderMenu(material: Material) -> None: ...
    @staticmethod
    def ShowGameView() -> None: ...
    @staticmethod
    def ShowPackageManagerWindow() -> None: ...
    @staticmethod
    def SwitchSkinAndRepaintAllViews() -> None: ...
    @staticmethod
    def TextAreaForDocBrowser(position: Rect, text: str, style: GUIStyle) -> str: ...
    @staticmethod
    def TextifyEvent(evt: Event) -> str: ...
    @staticmethod
    def TransformBounds(b: Bounds, t: Transform) -> Bounds: ...
    @staticmethod
    def VerifyCacheServerIntegrity() -> int: ...
    # Skipped CalculateSelectionBounds due to it being static, abstract and generic.

    CalculateSelectionBounds : CalculateSelectionBounds_MethodGroup
    class CalculateSelectionBounds_MethodGroup:
        @typing.overload
        def __call__(self, usePivotOnlyForParticles: bool, onlyUseActiveSelection: bool) -> Bounds:...
        @typing.overload
        def __call__(self, usePivotOnlyForParticles: bool, onlyUseActiveSelection: bool, ignoreEditableField: bool) -> Bounds:...

    # Skipped OpenFileAtLineExternal due to it being static, abstract and generic.

    OpenFileAtLineExternal : OpenFileAtLineExternal_MethodGroup
    class OpenFileAtLineExternal_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, line: int) -> bool:...
        @typing.overload
        def __call__(self, filename: str, line: int, column: int) -> bool:...

    # Skipped TryOpenErrorFileFromConsole due to it being static, abstract and generic.

    TryOpenErrorFileFromConsole : TryOpenErrorFileFromConsole_MethodGroup
    class TryOpenErrorFileFromConsole_MethodGroup:
        @typing.overload
        def __call__(self, path: str, line: int) -> bool:...
        @typing.overload
        def __call__(self, path: str, line: int, column: int) -> bool:...



class InternalSpriteUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def GenerateAutomaticSpriteRectangles(texture: Texture2D, minRectSize: int, extrudeSize: int) -> Array_1[Rect]: ...
    # Skipped GenerateGridSpriteRectangles due to it being static, abstract and generic.

    GenerateGridSpriteRectangles : GenerateGridSpriteRectangles_MethodGroup
    class GenerateGridSpriteRectangles_MethodGroup:
        @typing.overload
        def __call__(self, texture: Texture2D, offset: Vector2, size: Vector2, padding: Vector2) -> Array_1[Rect]:...
        @typing.overload
        def __call__(self, texture: Texture2D, offset: Vector2, size: Vector2, padding: Vector2, keepEmptyRects: bool) -> Array_1[Rect]:...



class LoadFileAndForgetOperation(AsyncOperation):
    def __init__(self) -> None: ...
    @property
    def allowSceneActivation(self) -> bool: ...
    @allowSceneActivation.setter
    def allowSceneActivation(self, value: bool) -> bool: ...
    @property
    def isDone(self) -> bool: ...
    @property
    def priority(self) -> int: ...
    @priority.setter
    def priority(self, value: int) -> int: ...
    @property
    def progress(self) -> float: ...
    @property
    def Result(self) -> Object: ...


class MemoryInfoGCReason(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SceneObject : MemoryInfoGCReason # 0
    BuiltinResource : MemoryInfoGCReason # 1
    MarkedDontSave : MemoryInfoGCReason # 2
    AssetMarkedDirtyInEditor : MemoryInfoGCReason # 3
    SceneAssetReferencedByNativeCodeOnly : MemoryInfoGCReason # 5
    SceneAssetReferenced : MemoryInfoGCReason # 6
    AssetReferencedByNativeCodeOnly : MemoryInfoGCReason # 8
    AssetReferenced : MemoryInfoGCReason # 9
    NotApplicable : MemoryInfoGCReason # 10


class MinMaxCurvePropertyDrawer(PropertyDrawer):
    def __init__(self) -> None: ...
    @property
    def attribute(self) -> PropertyAttribute: ...
    @property
    def fieldInfo(self) -> FieldInfo: ...
    @property
    def preferredLabel(self) -> str: ...
    def CreatePropertyGUI(self, property: SerializedProperty) -> VisualElement: ...
    def OnGUI(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None: ...


class MinMaxGradientPropertyDrawer(PropertyDrawer):
    def __init__(self) -> None: ...
    @property
    def attribute(self) -> PropertyAttribute: ...
    @property
    def fieldInfo(self) -> FieldInfo: ...
    @property
    def preferredLabel(self) -> str: ...
    def CreatePropertyGUI(self, property: SerializedProperty) -> VisualElement: ...
    def GetPropertyHeight(self, property: SerializedProperty, label: GUIContent) -> float: ...
    def OnGUI(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None: ...


class MonoScripts(abc.ABC):
    @staticmethod
    def CreateMonoScript(scriptContents: str, className: str, nameSpace: str, assemblyName: str, isEditorScript: bool) -> MonoScript: ...


class NativeProfilerTimeline:
    def __init__(self) -> None: ...
    @staticmethod
    def Draw(args: clr.Reference[NativeProfilerTimeline_DrawArgs]) -> None: ...
    @staticmethod
    def GetEntryAtPosition(args: clr.Reference[NativeProfilerTimeline_GetEntryAtPositionArgs]) -> bool: ...
    @staticmethod
    def GetEntryInstanceInfo(args: clr.Reference[NativeProfilerTimeline_GetEntryInstanceInfoArgs]) -> bool: ...
    @staticmethod
    def GetEntryPositionInfo(args: clr.Reference[NativeProfilerTimeline_GetEntryPositionInfoArgs]) -> bool: ...
    @staticmethod
    def GetEntryTimingInfo(args: clr.Reference[NativeProfilerTimeline_GetEntryTimingInfoArgs]) -> bool: ...
    @staticmethod
    def Initialize(args: clr.Reference[NativeProfilerTimeline_InitializeArgs]) -> None: ...


class NativeProfilerTimeline_DrawArgs:
    frameIndex : int
    mousedOverEntryIndex : int
    selectedEntryIndex : int
    shownAreaRect : Rect
    threadIndex : int
    threadRect : Rect
    timeOffset : float
    def Reset(self) -> None: ...


class NativeProfilerTimeline_GetEntryAtPositionArgs:
    frameIndex : int
    out_EntryIndex : int
    out_EntryName : str
    out_EntryYMaxPos : float
    position : Vector2
    shownAreaRect : Rect
    threadIndex : int
    threadRect : Rect
    timeOffset : float
    def Reset(self) -> None: ...


class NativeProfilerTimeline_GetEntryInstanceInfoArgs:
    entryIndex : int
    frameIndex : int
    out_CallstackInfo : str
    out_Id : int
    out_MetaData : str
    out_Path : str
    out_PathMarkerIds : Array_1[int]
    threadIndex : int
    def Reset(self) -> None: ...


class NativeProfilerTimeline_GetEntryPositionInfoArgs:
    frameIndex : int
    out_Depth : int
    out_Position : Vector2
    out_Size : Vector2
    sampleIndex : int
    shownAreaRect : Rect
    threadIndex : int
    threadRect : Rect
    timeOffset : float
    def Reset(self) -> None: ...


class NativeProfilerTimeline_GetEntryTimingInfoArgs:
    calculateFrameData : bool
    entryIndex : int
    frameIndex : int
    out_Duration : float
    out_InstanceCountForFrame : int
    out_LocalStartTime : float
    out_TotalDurationForFrame : float
    threadIndex : int
    def Reset(self) -> None: ...


class NativeProfilerTimeline_InitializeArgs:
    ghostAlpha : float
    guiStyle : int
    lineHeight : float
    nonSelectedAlpha : float
    profilerColorDescriptors : Array_1[ProfilerColorDescriptor]
    showFullScriptingMethodNames : int
    textFadeOutWidth : float
    textFadeStartWidth : float
    def Reset(self) -> None: ...


class ObjectMemoryInfo:
    def __init__(self) -> None: ...
    className : str
    count : int
    instanceId : int
    memorySize : int
    name : str
    reason : int


class ObjectMemoryStackInfo:
    def __init__(self) -> None: ...
    allocated : int
    callerSites : Array_1[ObjectMemoryStackInfo]
    expanded : bool
    name : str
    ownedAllocated : int
    sorted : bool


class PackageManifest(TextAsset):
    @property
    def bytes(self) -> Array_1[int]: ...
    @property
    def dataSize(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def text(self) -> str: ...


class PackageManifestImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...


class ProfilerAudioView(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Stats : ProfilerAudioView # 0
    Channels : ProfilerAudioView # 1
    Groups : ProfilerAudioView # 2
    ChannelsAndGroups : ProfilerAudioView # 3
    DSPGraph : ProfilerAudioView # 4
    Clips : ProfilerAudioView # 5


class ProfilerCaptureFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ProfilerCaptureFlags # 0
    Channels : ProfilerCaptureFlags # 1
    DSPNodes : ProfilerCaptureFlags # 2
    Clips : ProfilerCaptureFlags # 4
    All : ProfilerCaptureFlags # 7


class ProfilerColorDescriptor:
    def __init__(self, color: Color) -> None: ...
    color : Color
    isBright : bool


class ProfilerDriver(abc.ABC):
    directConnectionPort : str
    @classmethod
    @property
    def connectedProfiler(cls) -> int: ...
    @classmethod
    @connectedProfiler.setter
    def connectedProfiler(cls, value: int) -> int: ...
    @classmethod
    @property
    def deepProfiling(cls) -> bool: ...
    @classmethod
    @deepProfiling.setter
    def deepProfiling(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def directConnectionUrl(cls) -> str: ...
    @classmethod
    @property
    def enabled(cls) -> bool: ...
    @classmethod
    @enabled.setter
    def enabled(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def firstFrameIndex(cls) -> int: ...
    @classmethod
    @property
    def isGPUProfilerBuggyOnDriver(cls) -> bool: ...
    @classmethod
    @property
    def isGPUProfilerSupported(cls) -> bool: ...
    @classmethod
    @property
    def isGPUProfilerSupportedByOS(cls) -> bool: ...
    @classmethod
    @property
    def lastFrameIndex(cls) -> int: ...
    @classmethod
    @property
    def memoryRecordMode(cls) -> ProfilerMemoryRecordMode: ...
    @classmethod
    @memoryRecordMode.setter
    def memoryRecordMode(cls, value: ProfilerMemoryRecordMode) -> ProfilerMemoryRecordMode: ...
    @classmethod
    @property
    def miniMemoryOverview(cls) -> str: ...
    @classmethod
    @property
    def objectCount(cls) -> int: ...
    @classmethod
    @property
    def profileEditor(cls) -> bool: ...
    @classmethod
    @profileEditor.setter
    def profileEditor(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def profileGPU(cls) -> bool: ...
    @classmethod
    @profileGPU.setter
    def profileGPU(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def selectedPropertyPath(cls) -> str: ...
    @classmethod
    @selectedPropertyPath.setter
    def selectedPropertyPath(cls, value: str) -> str: ...
    @classmethod
    @property
    def usedHeapSize(cls) -> int: ...
    @staticmethod
    def ClearAllFrames() -> None: ...
    @staticmethod
    def DirectIPConnect(IP: str) -> None: ...
    @staticmethod
    def DirectURLConnect(IP: str) -> None: ...
    @staticmethod
    def GetAllStatisticsProperties() -> Array_1[str]: ...
    @staticmethod
    def GetAvailableProfilers() -> Array_1[int]: ...
    @staticmethod
    def GetConnectionIdentifier(guid: int) -> str: ...
    @staticmethod
    def GetFormattedStatisticsValue(frame: int, identifier: int) -> str: ...
    @staticmethod
    def GetGpuStatisticsAvailabilityState(frame: int) -> GpuProfilingStatisticsAvailabilityStates: ...
    @staticmethod
    def GetGpuStatisticsAvailabilityStates(firstFrame: int, buffer: Array_1[GpuProfilingStatisticsAvailabilityStates]) -> None: ...
    @staticmethod
    def GetGraphStatisticsPropertiesForArea(area: ProfilerArea) -> Array_1[str]: ...
    @staticmethod
    def GetHierarchyFrameDataView(frameIndex: int, threadIndex: int, viewMode: HierarchyFrameDataView.ViewModes, sortColumn: int, sortAscending: bool) -> HierarchyFrameDataView: ...
    @staticmethod
    def GetNextFrameIndex(frame: int) -> int: ...
    @staticmethod
    def GetOverviewText(profilerArea: ProfilerArea, frame: int) -> str: ...
    @staticmethod
    def GetPreviousFrameIndex(frame: int) -> int: ...
    @staticmethod
    def GetRawFrameDataView(frameIndex: int, threadIndex: int) -> RawFrameDataView: ...
    @staticmethod
    def GetStatisticsIdentifier(propertyName: str) -> int: ...
    @staticmethod
    def GetStatisticsIdentifierForArea(profilerArea: ProfilerArea, propertyName: str) -> int: ...
    @staticmethod
    def GetStatisticsValues(identifier: int, firstFrame: int, scale: float, buffer: Array_1[float], maxValue: clr.Reference[float]) -> None: ...
    @staticmethod
    def GetUISystemEventMarkersBatch(firstFrame: int, frameCount: int, buffer: Array_1[EventMarker], names: Array_1[str]) -> None: ...
    @staticmethod
    def GetUISystemEventMarkersCount(firstFrame: int, frameCount: int) -> int: ...
    @staticmethod
    def IsAreaEnabled(area: ProfilerArea) -> bool: ...
    @staticmethod
    def IsIdentifierConnectable(guid: int) -> bool: ...
    @staticmethod
    def LoadProfile(filename: str, keepExistingData: bool) -> bool: ...
    @staticmethod
    def QueryFunctionCallees(fullname: str) -> None: ...
    @staticmethod
    def QueryInstrumentableFunctions() -> None: ...
    @staticmethod
    def RequestMemorySnapshot() -> None: ...
    @staticmethod
    def RequestObjectMemoryInfo(gatherObjectReferences: bool) -> None: ...
    @staticmethod
    def ResetHistory() -> None: ...
    @staticmethod
    def SaveProfile(filename: str) -> None: ...
    @staticmethod
    def SetAreaEnabled(area: ProfilerArea, enabled: bool) -> None: ...
    @staticmethod
    def SetAudioCaptureFlags(flags: int) -> None: ...
    @staticmethod
    def SetMarkerFiltering(name: str) -> None: ...
    # Skipped GetCounterValuesBatch due to it being static, abstract and generic.

    GetCounterValuesBatch : GetCounterValuesBatch_MethodGroup
    class GetCounterValuesBatch_MethodGroup:
        @typing.overload
        def __call__(self, area: ProfilerArea, name: str, firstFrame: int, scale: float, buffer: Array_1[float], maxValue: clr.Reference[float]) -> None:...
        @typing.overload
        def __call__(self, category: str, name: str, firstFrame: int, scale: float, buffer: Array_1[float], maxValue: clr.Reference[float]) -> None:...

    # Skipped GetFormattedCounterValue due to it being static, abstract and generic.

    GetFormattedCounterValue : GetFormattedCounterValue_MethodGroup
    class GetFormattedCounterValue_MethodGroup:
        @typing.overload
        def __call__(self, frame: int, area: ProfilerArea, name: str) -> str:...
        @typing.overload
        def __call__(self, frame: int, category: str, name: str) -> str:...

    # Skipped GetStatisticsAvailable due to it being static, abstract and generic.

    GetStatisticsAvailable : GetStatisticsAvailable_MethodGroup
    class GetStatisticsAvailable_MethodGroup:
        def __call__(self, profilerArea: ProfilerArea, firstFrame: int, buffer: Array_1[int]) -> None:...
        # Method GetStatisticsAvailable(profilerArea : ProfilerArea, firstFrame : Int32, buffer : Boolean[]) was skipped since it collides with above method



class ProfilerFrameDataIterator(IDisposable):
    def __init__(self) -> None: ...
    @property
    def depth(self) -> int: ...
    @property
    def durationMS(self) -> float: ...
    @property
    def extraTooltipInfo(self) -> str: ...
    @property
    def frameGpuTimeMS(self) -> float: ...
    @property
    def frameTimeMS(self) -> float: ...
    @property
    def group(self) -> int: ...
    @property
    def id(self) -> int: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def maxDepth(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def path(self) -> str: ...
    @property
    def sampleId(self) -> int: ...
    @property
    def startTimeMS(self) -> float: ...
    def Dispose(self) -> None: ...
    def GetFrameStartS(self, frame: int) -> float: ...
    def GetGroupCount(self, frame: int) -> int: ...
    def GetGroupName(self) -> str: ...
    def GetThreadCount(self, frame: int) -> int: ...
    def GetThreadName(self) -> str: ...
    def Next(self, enterChildren: bool) -> bool: ...
    def SetRoot(self, frame: int, threadIdx: int) -> None: ...


class ProfilerFrameDataMultiColumnHeader(MultiColumnHeader):
    def __init__(self, state: MultiColumnHeaderState, columns: Array_1[ProfilerFrameDataMultiColumnHeader.Column]) -> None: ...
    @property
    def canSort(self) -> bool: ...
    @canSort.setter
    def canSort(self, value: bool) -> bool: ...
    @property
    def columns(self) -> Array_1[ProfilerFrameDataMultiColumnHeader.Column]: ...
    @property
    def height(self) -> float: ...
    @height.setter
    def height(self, value: float) -> float: ...
    @property
    def sortedColumnIndex(self) -> int: ...
    @sortedColumnIndex.setter
    def sortedColumnIndex(self, value: int) -> int: ...
    @property
    def sortedProfilerColumn(self) -> int: ...
    @property
    def sortedProfilerColumnAscending(self) -> bool: ...
    @property
    def state(self) -> MultiColumnHeaderState: ...
    @state.setter
    def state(self, value: MultiColumnHeaderState) -> MultiColumnHeaderState: ...
    def GetProfilerColumn(self, multiColumnHeaderIndex: int) -> int: ...
    # Skipped GetMultiColumnHeaderIndex due to it being static, abstract and generic.

    GetMultiColumnHeaderIndex : GetMultiColumnHeaderIndex_MethodGroup
    class GetMultiColumnHeaderIndex_MethodGroup:
        @typing.overload
        def __call__(self, profilerColumn: int) -> int:...
        @typing.overload
        def __call__(self, columns: Array_1[ProfilerFrameDataMultiColumnHeader.Column], profilerColumn: int) -> int:...


    class Column:
        headerLabel : GUIContent
        profilerColumn : int



class ProfilerMemoryRecordMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ProfilerMemoryRecordMode # 0
    GCAlloc : ProfilerMemoryRecordMode # 1
    UnsafeUtilityMalloc : ProfilerMemoryRecordMode # 2
    JobHandleComplete : ProfilerMemoryRecordMode # 4
    NativeAlloc : ProfilerMemoryRecordMode # 8


class ProfilerMemoryView(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Simple : ProfilerMemoryView # 0
    Detailed : ProfilerMemoryView # 1


class ProfilerProperty(IDisposable):
    def __init__(self) -> None: ...
    @property
    def depth(self) -> int: ...
    @property
    def frameDataReady(self) -> bool: ...
    @property
    def frameFPS(self) -> str: ...
    @property
    def frameGpuTime(self) -> str: ...
    @property
    def frameTime(self) -> str: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def instanceIDs(self) -> Array_1[int]: ...
    @property
    def onlyShowGPUSamples(self) -> bool: ...
    @onlyShowGPUSamples.setter
    def onlyShowGPUSamples(self, value: bool) -> bool: ...
    @property
    def propertyName(self) -> str: ...
    @property
    def propertyPath(self) -> str: ...
    def Cleanup(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetAudioProfilerClipInfo(self) -> Array_1[AudioProfilerClipInfo]: ...
    def GetAudioProfilerDSPInfo(self) -> Array_1[AudioProfilerDSPInfo]: ...
    def GetAudioProfilerGroupInfo(self) -> Array_1[AudioProfilerGroupInfo]: ...
    def GetAudioProfilerNameByOffset(self, offset: int) -> str: ...
    def GetColumn(self, column: int) -> str: ...
    def GetColumnAsSingle(self, colum: int) -> float: ...
    def GetTooltip(self, column: int) -> str: ...
    def GetUISystemBatchInstanceIDs(self) -> Array_1[int]: ...
    def GetUISystemEventMarkerNameByOffset(self, offset: int) -> str: ...
    def GetUISystemEventMarkers(self) -> Array_1[EventMarker]: ...
    def GetUISystemProfilerInfo(self) -> Array_1[UISystemProfilerInfo]: ...
    def GetUISystemProfilerNameByOffset(self, offset: int) -> str: ...
    def InitializeDetailProperty(self, source: ProfilerProperty) -> None: ...
    def Next(self, enterChildren: bool) -> bool: ...
    @staticmethod
    def ReleaseUISystemProfilerRender(t: Texture2D) -> None: ...
    def ResetToRoot(self) -> None: ...
    def SetRoot(self, frame: int, profilerSortColumn: int, viewType: int) -> None: ...
    @staticmethod
    def UISystemProfilerRender(frameIndex: int, renderDataIndex: int, renderDataCount: int, renderOverdraw: bool) -> Texture2D: ...


class RegistryUtil:
    def __init__(self) -> None: ...
    @staticmethod
    def GetRegistryStringValue(subKey: str, valueName: str, defaultValue: str, view: RegistryView) -> str: ...
    @staticmethod
    def GetRegistryUInt32Value(subKey: str, valueName: str, defaultValue: int, view: RegistryView) -> int: ...


class RegistryView(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : RegistryView # 0
    _32 : RegistryView # 1
    _64 : RegistryView # 2


class RenderDoc(abc.ABC):
    @staticmethod
    def BeginCaptureRenderDoc(window: EditorWindow) -> None: ...
    @staticmethod
    def EndCaptureRenderDoc(window: EditorWindow) -> None: ...
    @staticmethod
    def IsInstalled() -> bool: ...
    @staticmethod
    def IsLoaded() -> bool: ...
    @staticmethod
    def IsSupported() -> bool: ...
    @staticmethod
    def Load() -> None: ...


class ReorderableList:
    @typing.overload
    def __init__(self, elements: IList, elementType: typing.Type[typing.Any]) -> None: ...
    @typing.overload
    def __init__(self, elements: IList, elementType: typing.Type[typing.Any], draggable: bool, displayHeader: bool, displayAddButton: bool, displayRemoveButton: bool) -> None: ...
    @typing.overload
    def __init__(self, serializedObject: SerializedObject, elements: SerializedProperty) -> None: ...
    @typing.overload
    def __init__(self, serializedObject: SerializedObject, elements: SerializedProperty, draggable: bool, displayHeader: bool, displayAddButton: bool, displayRemoveButton: bool) -> None: ...
    displayAdd : bool
    displayRemove : bool
    drawElementBackgroundCallback : ReorderableList.ElementCallbackDelegate
    drawElementCallback : ReorderableList.ElementCallbackDelegate
    drawFooterCallback : ReorderableList.FooterCallbackDelegate
    drawHeaderCallback : ReorderableList.HeaderCallbackDelegate
    drawNoneElementCallback : ReorderableList.DrawNoneElementCallback
    elementHeight : float
    elementHeightCallback : ReorderableList.ElementHeightCallbackDelegate
    footerHeight : float
    headerHeight : float
    onAddCallback : ReorderableList.AddCallbackDelegate
    onAddDropdownCallback : ReorderableList.AddDropdownCallbackDelegate
    onCanAddCallback : ReorderableList.CanAddCallbackDelegate
    onCanRemoveCallback : ReorderableList.CanRemoveCallbackDelegate
    onChangedCallback : ReorderableList.ChangedCallbackDelegate
    onMouseDragCallback : ReorderableList.DragCallbackDelegate
    onMouseUpCallback : ReorderableList.SelectCallbackDelegate
    onRemoveCallback : ReorderableList.RemoveCallbackDelegate
    onReorderCallback : ReorderableList.ReorderCallbackDelegate
    onReorderCallbackWithDetails : ReorderableList.ReorderCallbackDelegateWithDetails
    onSelectCallback : ReorderableList.SelectCallbackDelegate
    showDefaultBackground : bool
    @property
    def count(self) -> int: ...
    @classmethod
    @property
    def defaultBehaviours(cls) -> ReorderableList.Defaults: ...
    @property
    def draggable(self) -> bool: ...
    @draggable.setter
    def draggable(self, value: bool) -> bool: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def list(self) -> IList: ...
    @list.setter
    def list(self, value: IList) -> IList: ...
    @property
    def multiSelect(self) -> bool: ...
    @multiSelect.setter
    def multiSelect(self, value: bool) -> bool: ...
    @property
    def selectedIndices(self) -> ReadOnlyCollection_1[int]: ...
    @property
    def serializedProperty(self) -> SerializedProperty: ...
    @serializedProperty.setter
    def serializedProperty(self, value: SerializedProperty) -> SerializedProperty: ...
    def ClearSelection(self) -> None: ...
    def Deselect(self, index: int) -> None: ...
    def DoLayoutList(self) -> None: ...
    def GetHeight(self) -> float: ...
    @staticmethod
    def GetReorderableListFromSerializedProperty(prop: SerializedProperty) -> ReorderableList: ...
    def GrabKeyboardFocus(self) -> None: ...
    def HasKeyboardControl(self) -> bool: ...
    def IsSelected(self, index: int) -> bool: ...
    def ReleaseKeyboardFocus(self) -> None: ...
    def Select(self, index: int, append: bool = ...) -> None: ...
    def SelectRange(self, indexFrom: int, indexTo: int) -> None: ...
    # Skipped DoList due to it being static, abstract and generic.

    DoList : DoList_MethodGroup
    class DoList_MethodGroup:
        @typing.overload
        def __call__(self, rect: Rect) -> None:...
        @typing.overload
        def __call__(self, rect: Rect, visibleRect: Rect) -> None:...


    class AddCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList) -> None: ...


    class AddDropdownCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, buttonRect: Rect, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, buttonRect: Rect, list: ReorderableList) -> None: ...


    class CanAddCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, list: ReorderableList) -> bool: ...


    class CanRemoveCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, list: ReorderableList) -> bool: ...


    class ChangedCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList) -> None: ...


    class Defaults:
        def __init__(self) -> None: ...
        boxBackground : GUIStyle
        draggingHandle : GUIStyle
        dragHandleWidth : int
        elementBackground : GUIStyle
        emptyHeaderBackground : GUIStyle
        footerBackground : GUIStyle
        headerBackground : GUIStyle
        iconToolbarMinus : GUIContent
        iconToolbarPlus : GUIContent
        iconToolbarPlusMore : GUIContent
        padding : int
        preButton : GUIStyle
        def DoAddButton(self, list: ReorderableList) -> None: ...
        def DoRemoveButton(self, list: ReorderableList) -> None: ...
        def DrawElementBackground(self, rect: Rect, index: int, selected: bool, focused: bool, draggable: bool) -> None: ...
        def DrawElementDraggingHandle(self, rect: Rect, index: int, selected: bool, focused: bool, draggable: bool) -> None: ...
        def DrawFooter(self, rect: Rect, list: ReorderableList) -> None: ...
        def DrawHeader(self, headerRect: Rect, serializedObject: SerializedObject, element: SerializedProperty, elementList: IList) -> None: ...
        def DrawHeaderBackground(self, headerRect: Rect) -> None: ...
        def DrawNoneElement(self, rect: Rect, draggable: bool) -> None: ...
        def DrawOverMaxMultiEditElement(self, rect: Rect, maxMultiEditElementCount: int, draggable: bool) -> None: ...
        # Skipped DrawElement due to it being static, abstract and generic.

        DrawElement : DrawElement_MethodGroup
        class DrawElement_MethodGroup:
            @typing.overload
            def __call__(self, rect: Rect, element: SerializedProperty, listItem: typing.Any, selected: bool, focused: bool, draggable: bool) -> None:...
            @typing.overload
            def __call__(self, rect: Rect, element: SerializedProperty, listItem: typing.Any, selected: bool, focused: bool, draggable: bool, editable: bool) -> None:...



    class DragCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList) -> None: ...


    class DrawNoneElementCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, rect: Rect, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, rect: Rect) -> None: ...


    class ElementCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, rect: Rect, index: int, isActive: bool, isFocused: bool, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, rect: Rect, index: int, isActive: bool, isFocused: bool) -> None: ...


    class ElementHeightCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, index: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> float: ...
        def Invoke(self, index: int) -> float: ...


    class FooterCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, rect: Rect, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, rect: Rect) -> None: ...


    class HeaderCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, rect: Rect, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, rect: Rect) -> None: ...


    class RemoveCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList) -> None: ...


    class ReorderCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList) -> None: ...


    class ReorderCallbackDelegateWithDetails(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, oldIndex: int, newIndex: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList, oldIndex: int, newIndex: int) -> None: ...


    class SelectCallbackDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, list: ReorderableList, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, list: ReorderableList) -> None: ...



class ScriptEditorUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def GetExternalScriptEditor() -> str: ...
    @staticmethod
    def GetFoundScriptEditorPaths(platform: RuntimePlatform) -> Dictionary_2[str, str]: ...
    @staticmethod
    def GetScriptEditorFromPath(path: str) -> ScriptEditorUtility.ScriptEditor: ...
    @staticmethod
    def GetScriptEditorFromPreferences() -> ScriptEditorUtility.ScriptEditor: ...
    @staticmethod
    def RegisterIde(pathCallBack: Func_1[Array_1[ScriptEditorUtility.Installation]]) -> None: ...
    @staticmethod
    def SetExternalScriptEditor(path: str) -> None: ...

    class Installation:
        Name : str
        Path : str


    class ScriptEditor(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        SystemDefault : ScriptEditorUtility.ScriptEditor # 0
        MonoDevelop : ScriptEditorUtility.ScriptEditor # 1
        VisualStudio : ScriptEditorUtility.ScriptEditor # 2
        VisualStudioExpress : ScriptEditorUtility.ScriptEditor # 3
        Other : ScriptEditorUtility.ScriptEditor # 32



class SpriteMaskUtility(abc.ABC):
    @staticmethod
    def EnableDebugMode(enable: bool) -> None: ...


class State(Object):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def iKOnFeet(self) -> bool: ...
    @iKOnFeet.setter
    def iKOnFeet(self, value: bool) -> bool: ...
    @property
    def mirror(self) -> bool: ...
    @mirror.setter
    def mirror(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def speed(self) -> float: ...
    @speed.setter
    def speed(self, value: float) -> float: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def uniqueName(self) -> str: ...
    @property
    def uniqueNameHash(self) -> int: ...
    # Skipped CreateBlendTree due to it being static, abstract and generic.

    CreateBlendTree : CreateBlendTree_MethodGroup
    class CreateBlendTree_MethodGroup:
        @typing.overload
        def __call__(self) -> BlendTree:...
        @typing.overload
        def __call__(self, layer: AnimatorControllerLayer) -> BlendTree:...

    # Skipped GetMotion due to it being static, abstract and generic.

    GetMotion : GetMotion_MethodGroup
    class GetMotion_MethodGroup:
        @typing.overload
        def __call__(self) -> Motion:...
        @typing.overload
        def __call__(self, layer: AnimatorControllerLayer) -> Motion:...



class StateMachine(Object):
    def __init__(self) -> None: ...
    @property
    def anyStatePosition(self) -> Vector3: ...
    @anyStatePosition.setter
    def anyStatePosition(self, value: Vector3) -> Vector3: ...
    @property
    def defaultState(self) -> State: ...
    @defaultState.setter
    def defaultState(self, value: State) -> State: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def parentStateMachinePosition(self) -> Vector3: ...
    @parentStateMachinePosition.setter
    def parentStateMachinePosition(self, value: Vector3) -> Vector3: ...
    def AddAnyStateTransition(self, dst: State) -> Transition: ...
    def AddState(self, stateName: str) -> State: ...
    def AddStateMachine(self, stateMachineName: str) -> StateMachine: ...
    def AddTransition(self, src: State, dst: State) -> Transition: ...
    def GetState(self, index: int) -> State: ...
    def GetStateMachine(self, index: int) -> StateMachine: ...
    def GetStateMachinePosition(self, i: int) -> Vector3: ...
    def GetTransitionsFromState(self, srcState: State) -> Array_1[Transition]: ...


class Transition(Object):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class UISystemProfilerInfo:
    batchBreakingReason : BatchBreakingReason
    batchCount : int
    instanceIDsCount : int
    instanceIDsIndex : int
    isBatch : bool
    objectInstanceId : int
    objectNameOffset : int
    parentId : int
    renderDataCount : int
    renderDataIndex : int
    totalBatchCount : int
    totalVertexCount : int
    vertexCount : int


class UnityEventDrawer(PropertyDrawer):
    def __init__(self) -> None: ...
    @property
    def attribute(self) -> PropertyAttribute: ...
    @property
    def fieldInfo(self) -> FieldInfo: ...
    @property
    def preferredLabel(self) -> str: ...
    def CreatePropertyGUI(self, property: SerializedProperty) -> VisualElement: ...
    def GetPropertyHeight(self, property: SerializedProperty, label: GUIContent) -> float: ...
    @staticmethod
    def IsPersistantListenerValid(dummyEvent: UnityEventBase, methodName: str, uObject: Object, modeEnum: PersistentListenerMode, argumentType: typing.Type[typing.Any]) -> bool: ...
    # Skipped OnGUI due to it being static, abstract and generic.

    OnGUI : OnGUI_MethodGroup
    class OnGUI_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect) -> None:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None:...


