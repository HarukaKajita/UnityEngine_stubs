import typing, clr, abc
from UnityEngine.UIElements import VisualElement, ICustomStyle, IExperimentalFeatures, FocusController, MeshGenerationContext, LanguageDirection, IPanel, PickingMode, IResolvedStyle, IVisualElementScheduler, IStyle, VisualElementStyleSheetSet, ITransform, UsageHints, VisualTreeAsset, MouseManipulator, ManipulatorActivationFilter, Manipulator, MouseDownEvent, MouseMoveEvent, MouseUpEvent, UQueryState_1, ContextualMenuPopulateEvent, ImmediateModeElement, DragEnterEvent, DragLeaveEvent, DragPerformEvent, DragUpdatedEvent, UxmlFactory_2, UxmlAttributeDescription, UxmlChildElementDescription, IUxmlAttributes, CreationContext, UxmlFactory_1, MouseButton, EventBase_1, IEventHandler, PropagationPhase
from UnityEngine import SpriteAlignment, Vector2, Rect, Color, Matrix4x4, Texture, Vector3, HideFlags, GUIContent, ScriptableObject, Event
from System import Action_1, Action_3, MulticastDelegate, IAsyncResult, AsyncCallback, Array_1, Action_2, Func_2, Func_1, Action, IComparable_1, Attribute
from System.Collections.Generic import List_1, IEnumerable_1, HashSet_1, Dictionary_2
from System.Reflection import MethodInfo
from UnityEditor import IDataModeController, EditorWindow
from UnityEditor.Overlays import OverlayCanvas

class Attacher:
    def __init__(self, anchored: VisualElement, target: VisualElement, alignment: SpriteAlignment) -> None: ...
    @property
    def alignment(self) -> SpriteAlignment: ...
    @alignment.setter
    def alignment(self, value: SpriteAlignment) -> SpriteAlignment: ...
    @property
    def distance(self) -> float: ...
    @distance.setter
    def distance(self, value: float) -> float: ...
    @property
    def element(self) -> VisualElement: ...
    @element.setter
    def element(self, value: VisualElement) -> VisualElement: ...
    @property
    def offset(self) -> Vector2: ...
    @offset.setter
    def offset(self, value: Vector2) -> Vector2: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...
    def Detach(self) -> None: ...
    def Reattach(self) -> None: ...


class Blackboard(GraphElement, ISelection):
    def __init__(self, associatedGraphView: GraphView = ...) -> None: ...
    @property
    def addItemRequested(self) -> Action_1[Blackboard]: ...
    @addItemRequested.setter
    def addItemRequested(self, value: Action_1[Blackboard]) -> Action_1[Blackboard]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def editTextRequested(self) -> Action_3[Blackboard, VisualElement, str]: ...
    @editTextRequested.setter
    def editTextRequested(self, value: Action_3[Blackboard, VisualElement, str]) -> Action_3[Blackboard, VisualElement, str]: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def graphView(self) -> GraphView: ...
    @graphView.setter
    def graphView(self, value: GraphView) -> GraphView: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def moveItemRequested(self) -> Action_3[Blackboard, int, VisualElement]: ...
    @moveItemRequested.setter
    def moveItemRequested(self, value: Action_3[Blackboard, int, VisualElement]) -> Action_3[Blackboard, int, VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def scrollable(self) -> bool: ...
    @scrollable.setter
    def scrollable(self, value: bool) -> bool: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def selection(self) -> List_1[ISelectable]: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def subTitle(self) -> str: ...
    @subTitle.setter
    def subTitle(self, value: str) -> str: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def windowed(self) -> bool: ...
    @windowed.setter
    def windowed(self, value: bool) -> bool: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AddToSelection(self, selectable: ISelectable) -> None: ...
    def ClearSelection(self) -> None: ...
    def RemoveFromSelection(self, selectable: ISelectable) -> None: ...


class BlackboardField(GraphElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, icon: Texture, text: str, typeText: str) -> None: ...
    @property
    def blackboard(self) -> Blackboard: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highlighted(self) -> bool: ...
    @highlighted.setter
    def highlighted(self, value: bool) -> bool: ...
    @property
    def icon(self) -> Texture: ...
    @icon.setter
    def icon(self, value: Texture) -> Texture: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def typeText(self) -> str: ...
    @typeText.setter
    def typeText(self, value: str) -> str: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def OpenTextEditor(self) -> None: ...


class BlackboardRow(GraphElement):
    def __init__(self, item: VisualElement, propertyView: VisualElement) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def expanded(self) -> bool: ...
    @expanded.setter
    def expanded(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class BlackboardSection(GraphElement):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canAcceptDrop(self) -> BlackboardSection.CanAcceptDropDelegate: ...
    @canAcceptDrop.setter
    def canAcceptDrop(self, value: BlackboardSection.CanAcceptDropDelegate) -> BlackboardSection.CanAcceptDropDelegate: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerVisible(self) -> bool: ...
    @headerVisible.setter
    def headerVisible(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def CanAcceptDrop(self, selection: List_1[ISelectable]) -> bool: ...

    class CanAcceptDropDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, selected: ISelectable, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, selected: ISelectable) -> bool: ...



class Capabilities(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Selectable : Capabilities # 1
    Collapsible : Capabilities # 2
    Resizable : Capabilities # 4
    Movable : Capabilities # 8
    Deletable : Capabilities # 16
    Droppable : Capabilities # 32
    Ascendable : Capabilities # 64
    Renamable : Capabilities # 128
    Copiable : Capabilities # 256
    Snappable : Capabilities # 512
    Groupable : Capabilities # 1024
    Stackable : Capabilities # 2048


class ClickSelector(MouseManipulator):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class ContentDragger(MouseManipulator):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def clampToParentEdges(self) -> bool: ...
    @clampToParentEdges.setter
    def clampToParentEdges(self, value: bool) -> bool: ...
    @property
    def panSpeed(self) -> Vector2: ...
    @panSpeed.setter
    def panSpeed(self, value: Vector2) -> Vector2: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class ContentZoomer(Manipulator):
    def __init__(self) -> None: ...
    DefaultMaxScale : float
    DefaultMinScale : float
    DefaultReferenceScale : float
    DefaultScaleStep : float
    @property
    def keepPixelCacheOnZoom(self) -> bool: ...
    @keepPixelCacheOnZoom.setter
    def keepPixelCacheOnZoom(self, value: bool) -> bool: ...
    @property
    def maxScale(self) -> float: ...
    @maxScale.setter
    def maxScale(self, value: float) -> float: ...
    @property
    def minScale(self) -> float: ...
    @minScale.setter
    def minScale(self, value: float) -> float: ...
    @property
    def referenceScale(self) -> float: ...
    @referenceScale.setter
    def referenceScale(self, value: float) -> float: ...
    @property
    def scaleStep(self) -> float: ...
    @scaleStep.setter
    def scaleStep(self, value: float) -> float: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class Direction(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Input : Direction # 0
    Output : Direction # 1


class Dragger(MouseManipulator):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def clampToParentEdges(self) -> bool: ...
    @clampToParentEdges.setter
    def clampToParentEdges(self, value: bool) -> bool: ...
    @property
    def panSpeed(self) -> Vector2: ...
    @panSpeed.setter
    def panSpeed(self, value: Vector2) -> Vector2: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class Edge(GraphElement):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def candidatePosition(self) -> Vector2: ...
    @candidatePosition.setter
    def candidatePosition(self, value: Vector2) -> Vector2: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def defaultColor(self) -> Color: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def edgeControl(self) -> EdgeControl: ...
    @property
    def edgeWidth(self) -> int: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def ghostColor(self) -> Color: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def input(self) -> Port: ...
    @input.setter
    def input(self, value: Port) -> Port: ...
    @property
    def isGhostEdge(self) -> bool: ...
    @isGhostEdge.setter
    def isGhostEdge(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def output(self) -> Port: ...
    @output.setter
    def output(self, value: Port) -> Port: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def selectedColor(self) -> Color: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ContainsPoint(self, localPoint: Vector2) -> bool: ...
    def OnPortChanged(self, isInput: bool) -> None: ...
    def OnSelected(self) -> None: ...
    def OnUnselected(self) -> None: ...
    def Overlaps(self, rectangle: Rect) -> bool: ...
    def UpdateEdgeControl(self) -> bool: ...


class EdgeConnector_GenericClasses(abc.ABCMeta):
    Generic_EdgeConnector_GenericClasses_EdgeConnector_1_TEdge = typing.TypeVar('Generic_EdgeConnector_GenericClasses_EdgeConnector_1_TEdge')
    def __getitem__(self, types : typing.Type[Generic_EdgeConnector_GenericClasses_EdgeConnector_1_TEdge]) -> typing.Type[EdgeConnector_1[Generic_EdgeConnector_GenericClasses_EdgeConnector_1_TEdge]]: ...

class EdgeConnector(EdgeConnector_0, metaclass =EdgeConnector_GenericClasses): ...

class EdgeConnector_0(MouseManipulator):
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def edgeDragHelper(self) -> EdgeDragHelper: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


EdgeConnector_1_TEdge = typing.TypeVar('EdgeConnector_1_TEdge')
class EdgeConnector_1(typing.Generic[EdgeConnector_1_TEdge], EdgeConnector_0):
    def __init__(self, listener: IEdgeConnectorListener) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def edgeDragHelper(self) -> EdgeDragHelper: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class EdgeControl(VisualElement):
    def __init__(self) -> None: ...
    k_MinEdgeWidth : float
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capRadius(self) -> float: ...
    @capRadius.setter
    def capRadius(self, value: float) -> float: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def controlPoints(self) -> Array_1[Vector2]: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def drawFromCap(self) -> bool: ...
    @drawFromCap.setter
    def drawFromCap(self, value: bool) -> bool: ...
    @property
    def drawToCap(self) -> bool: ...
    @drawToCap.setter
    def drawToCap(self, value: bool) -> bool: ...
    @property
    def edgeColor(self) -> Color: ...
    @edgeColor.setter
    def edgeColor(self, value: Color) -> Color: ...
    @property
    def edgeWidth(self) -> int: ...
    @edgeWidth.setter
    def edgeWidth(self, value: int) -> int: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def from(self) -> Vector2: ...
    @from.setter
    def from(self, value: Vector2) -> Vector2: ...
    @property
    def fromCapColor(self) -> Color: ...
    @fromCapColor.setter
    def fromCapColor(self, value: Color) -> Color: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def inputColor(self) -> Color: ...
    @inputColor.setter
    def inputColor(self, value: Color) -> Color: ...
    @property
    def inputOrientation(self) -> Orientation: ...
    @inputOrientation.setter
    def inputOrientation(self, value: Orientation) -> Orientation: ...
    @property
    def interceptWidth(self) -> float: ...
    @interceptWidth.setter
    def interceptWidth(self, value: float) -> float: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def outputColor(self) -> Color: ...
    @outputColor.setter
    def outputColor(self, value: Color) -> Color: ...
    @property
    def outputOrientation(self) -> Orientation: ...
    @outputOrientation.setter
    def outputOrientation(self, value: Orientation) -> Orientation: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def to(self) -> Vector2: ...
    @to.setter
    def to(self, value: Vector2) -> Vector2: ...
    @property
    def toCapColor(self) -> Color: ...
    @toCapColor.setter
    def toCapColor(self, value: Color) -> Color: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ContainsPoint(self, localPoint: Vector2) -> bool: ...
    def Overlaps(self, rect: Rect) -> bool: ...
    def UpdateLayout(self) -> None: ...


class EdgeDragHelper_GenericClasses(abc.ABCMeta):
    Generic_EdgeDragHelper_GenericClasses_EdgeDragHelper_1_TEdge = typing.TypeVar('Generic_EdgeDragHelper_GenericClasses_EdgeDragHelper_1_TEdge')
    def __getitem__(self, types : typing.Type[Generic_EdgeDragHelper_GenericClasses_EdgeDragHelper_1_TEdge]) -> typing.Type[EdgeDragHelper_1[Generic_EdgeDragHelper_GenericClasses_EdgeDragHelper_1_TEdge]]: ...

class EdgeDragHelper(EdgeDragHelper_0, metaclass =EdgeDragHelper_GenericClasses): ...

class EdgeDragHelper_0(abc.ABC):
    @property
    def draggedPort(self) -> Port: ...
    @draggedPort.setter
    def draggedPort(self, value: Port) -> Port: ...
    @property
    def edgeCandidate(self) -> Edge: ...
    @edgeCandidate.setter
    def edgeCandidate(self, value: Edge) -> Edge: ...
    @abc.abstractmethod
    def HandleMouseDown(self, evt: MouseDownEvent) -> bool: ...
    @abc.abstractmethod
    def HandleMouseMove(self, evt: MouseMoveEvent) -> None: ...
    @abc.abstractmethod
    def HandleMouseUp(self, evt: MouseUpEvent) -> None: ...
    @abc.abstractmethod
    def Reset(self, didConnect: bool = ...) -> None: ...


EdgeDragHelper_1_TEdge = typing.TypeVar('EdgeDragHelper_1_TEdge')
class EdgeDragHelper_1(typing.Generic[EdgeDragHelper_1_TEdge], EdgeDragHelper_0):
    def __init__(self, listener: IEdgeConnectorListener) -> None: ...
    @property
    def draggedPort(self) -> Port: ...
    @draggedPort.setter
    def draggedPort(self, value: Port) -> Port: ...
    @property
    def edgeCandidate(self) -> Edge: ...
    @edgeCandidate.setter
    def edgeCandidate(self, value: Edge) -> Edge: ...
    @property
    def resetPositionOnPan(self) -> bool: ...
    @resetPositionOnPan.setter
    def resetPositionOnPan(self, value: bool) -> bool: ...
    def HandleMouseDown(self, evt: MouseDownEvent) -> bool: ...
    def HandleMouseMove(self, evt: MouseMoveEvent) -> None: ...
    def HandleMouseUp(self, evt: MouseUpEvent) -> None: ...
    def Reset(self, didConnect: bool = ...) -> None: ...


class EdgeManipulator(MouseManipulator):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class EventPropagation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Stop : EventPropagation # 0
    Continue : EventPropagation # 1


class FreehandSelector(MouseManipulator):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class GraphElement(VisualElement, ISelectable, abc.ABC):
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def GetGlobalCenter(self) -> Vector3: ...
    def GetPosition(self) -> Rect: ...
    def HitTest(self, localPoint: Vector2) -> bool: ...
    def IsAscendable(self) -> bool: ...
    def IsCopiable(self) -> bool: ...
    def IsDroppable(self) -> bool: ...
    def IsGroupable(self) -> bool: ...
    def IsMovable(self) -> bool: ...
    def IsRenamable(self) -> bool: ...
    def IsResizable(self) -> bool: ...
    def IsSelectable(self) -> bool: ...
    def IsSelected(self, selectionContainer: VisualElement) -> bool: ...
    def IsSnappable(self) -> bool: ...
    def IsStackable(self) -> bool: ...
    def OnSelected(self) -> None: ...
    def OnUnselected(self) -> None: ...
    def ResetLayer(self) -> None: ...
    def Select(self, selectionContainer: VisualElement, additive: bool) -> None: ...
    def SetPosition(self, newPos: Rect) -> None: ...
    def Unselect(self, selectionContainer: VisualElement) -> None: ...
    def UpdatePresenterPosition(self) -> None: ...


class GraphElementScopeExtensions(abc.ABC):
    @staticmethod
    def GetContainingScope(element: GraphElement) -> Scope: ...


class GraphView(VisualElement, ISelection, abc.ABC):
    ports : UQueryState_1[Port]
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def canPasteSerializedData(self) -> GraphView.CanPasteSerializedDataDelegate: ...
    @canPasteSerializedData.setter
    def canPasteSerializedData(self, value: GraphView.CanPasteSerializedDataDelegate) -> GraphView.CanPasteSerializedDataDelegate: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def contentViewContainer(self) -> VisualElement: ...
    @contentViewContainer.setter
    def contentViewContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def deleteSelection(self) -> GraphView.DeleteSelectionDelegate: ...
    @deleteSelection.setter
    def deleteSelection(self, value: GraphView.DeleteSelectionDelegate) -> GraphView.DeleteSelectionDelegate: ...
    @property
    def edges(self) -> UQueryState_1[Edge]: ...
    @edges.setter
    def edges(self, value: UQueryState_1[Edge]) -> UQueryState_1[Edge]: ...
    @property
    def elementResized(self) -> GraphView.ElementResized: ...
    @elementResized.setter
    def elementResized(self, value: GraphView.ElementResized) -> GraphView.ElementResized: ...
    @property
    def elementsAddedToGroup(self) -> Action_2[Group, IEnumerable_1[GraphElement]]: ...
    @elementsAddedToGroup.setter
    def elementsAddedToGroup(self, value: Action_2[Group, IEnumerable_1[GraphElement]]) -> Action_2[Group, IEnumerable_1[GraphElement]]: ...
    @property
    def elementsInsertedToStackNode(self) -> Action_3[StackNode, int, IEnumerable_1[GraphElement]]: ...
    @elementsInsertedToStackNode.setter
    def elementsInsertedToStackNode(self, value: Action_3[StackNode, int, IEnumerable_1[GraphElement]]) -> Action_3[StackNode, int, IEnumerable_1[GraphElement]]: ...
    @property
    def elementsRemovedFromGroup(self) -> Action_2[Group, IEnumerable_1[GraphElement]]: ...
    @elementsRemovedFromGroup.setter
    def elementsRemovedFromGroup(self, value: Action_2[Group, IEnumerable_1[GraphElement]]) -> Action_2[Group, IEnumerable_1[GraphElement]]: ...
    @property
    def elementsRemovedFromStackNode(self) -> Action_2[StackNode, IEnumerable_1[GraphElement]]: ...
    @elementsRemovedFromStackNode.setter
    def elementsRemovedFromStackNode(self, value: Action_2[StackNode, IEnumerable_1[GraphElement]]) -> Action_2[StackNode, IEnumerable_1[GraphElement]]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def graphElements(self) -> UQueryState_1[GraphElement]: ...
    @graphElements.setter
    def graphElements(self, value: UQueryState_1[GraphElement]) -> UQueryState_1[GraphElement]: ...
    @property
    def graphViewChanged(self) -> GraphView.GraphViewChanged: ...
    @graphViewChanged.setter
    def graphViewChanged(self, value: GraphView.GraphViewChanged) -> GraphView.GraphViewChanged: ...
    @property
    def groupTitleChanged(self) -> Action_2[Group, str]: ...
    @groupTitleChanged.setter
    def groupTitleChanged(self, value: Action_2[Group, str]) -> Action_2[Group, str]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isReframable(self) -> bool: ...
    @isReframable.setter
    def isReframable(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maxScale(self) -> float: ...
    @property
    def minScale(self) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def nodeCreationRequest(self) -> Action_1[NodeCreationContext]: ...
    @nodeCreationRequest.setter
    def nodeCreationRequest(self, value: Action_1[NodeCreationContext]) -> Action_1[NodeCreationContext]: ...
    @property
    def nodes(self) -> UQueryState_1[Node]: ...
    @nodes.setter
    def nodes(self, value: UQueryState_1[Node]) -> UQueryState_1[Node]: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def placematContainer(self) -> PlacematContainer: ...
    @property
    def referenceScale(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def scale(self) -> float: ...
    @property
    def scaleStep(self) -> float: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> List_1[ISelectable]: ...
    @selection.setter
    def selection(self, value: List_1[ISelectable]) -> List_1[ISelectable]: ...
    @property
    def serializeGraphElements(self) -> GraphView.SerializeGraphElementsDelegate: ...
    @serializeGraphElements.setter
    def serializeGraphElements(self, value: GraphView.SerializeGraphElementsDelegate) -> GraphView.SerializeGraphElementsDelegate: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def supportsWindowedBlackboard(self) -> bool: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unserializeAndPaste(self) -> GraphView.UnserializeAndPasteDelegate: ...
    @unserializeAndPaste.setter
    def unserializeAndPaste(self, value: GraphView.UnserializeAndPasteDelegate) -> GraphView.UnserializeAndPasteDelegate: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def viewport(self) -> VisualElement: ...
    @property
    def viewTransform(self) -> ITransform: ...
    @property
    def viewTransformChanged(self) -> GraphView.ViewTransformChanged: ...
    @viewTransformChanged.setter
    def viewTransformChanged(self, value: GraphView.ViewTransformChanged) -> GraphView.ViewTransformChanged: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    @property
    def zoomerMaxElementCountWithPixelCacheRegen(self) -> int: ...
    @zoomerMaxElementCountWithPixelCacheRegen.setter
    def zoomerMaxElementCountWithPixelCacheRegen(self, value: int) -> int: ...
    def AddElement(self, graphElement: GraphElement) -> None: ...
    def AddLayer(self, index: int) -> None: ...
    def AddToSelection(self, selectable: ISelectable) -> None: ...
    def BuildContextualMenu(self, evt: ContextualMenuPopulateEvent) -> None: ...
    @staticmethod
    def CalculateFrameTransform(rectToFit: Rect, clientRect: Rect, border: int, frameTranslation: clr.Reference[Vector3], frameScaling: clr.Reference[Vector3]) -> None: ...
    def CalculateRectToFitAll(self, container: VisualElement) -> Rect: ...
    def ClearSelection(self) -> None: ...
    @staticmethod
    def CollectElements(elements: IEnumerable_1[GraphElement], collectedElementSet: HashSet_1[GraphElement], conditionFunc: Func_2[GraphElement, bool]) -> None: ...
    def DeleteElements(self, elementsToRemove: IEnumerable_1[GraphElement]) -> None: ...
    def DeleteSelection(self) -> EventPropagation: ...
    def FrameAll(self) -> EventPropagation: ...
    def FrameOrigin(self) -> EventPropagation: ...
    def FrameSelection(self) -> EventPropagation: ...
    def GetBlackboard(self) -> Blackboard: ...
    def GetCompatiblePorts(self, startPort: Port, nodeAdapter: NodeAdapter) -> List_1[Port]: ...
    def GetEdgeByGuid(self, guid: str) -> Edge: ...
    def GetElementByGuid(self, guid: str) -> GraphElement: ...
    def GetNodeByGuid(self, guid: str) -> Node: ...
    def GetPortByGuid(self, guid: str) -> Port: ...
    def GetPortCenterOverride(self, port: Port, overriddenPosition: clr.Reference[Vector2]) -> bool: ...
    def ReleaseBlackboard(self, toRelease: Blackboard) -> None: ...
    def RemoveElement(self, graphElement: GraphElement) -> None: ...
    def RemoveFromSelection(self, selectable: ISelectable) -> None: ...
    def UpdateViewTransform(self, newPosition: Vector3, newScale: Vector3) -> None: ...
    # Skipped FrameNext due to it being static, abstract and generic.

    FrameNext : FrameNext_MethodGroup
    class FrameNext_MethodGroup:
        @typing.overload
        def __call__(self) -> EventPropagation:...
        @typing.overload
        def __call__(self, predicate: Func_2[GraphElement, bool]) -> EventPropagation:...

    # Skipped FramePrev due to it being static, abstract and generic.

    FramePrev : FramePrev_MethodGroup
    class FramePrev_MethodGroup:
        @typing.overload
        def __call__(self) -> EventPropagation:...
        @typing.overload
        def __call__(self, predicate: Func_2[GraphElement, bool]) -> EventPropagation:...

    # Skipped SetupZoom due to it being static, abstract and generic.

    SetupZoom : SetupZoom_MethodGroup
    class SetupZoom_MethodGroup:
        @typing.overload
        def __call__(self, minScaleSetup: float, maxScaleSetup: float) -> None:...
        @typing.overload
        def __call__(self, minScaleSetup: float, maxScaleSetup: float, scaleStepSetup: float, referenceScaleSetup: float) -> None:...


    class AskUser(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        AskUser : GraphView.AskUser # 0
        DontAskUser : GraphView.AskUser # 1


    class CanPasteSerializedDataDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, data: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, data: str) -> bool: ...


    class DeleteSelectionDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, operationName: str, askUser: GraphView.AskUser, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, operationName: str, askUser: GraphView.AskUser) -> None: ...


    class ElementResized(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, visualElement: VisualElement, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, visualElement: VisualElement) -> None: ...


    class FrameType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        All : GraphView.FrameType # 0
        Selection : GraphView.FrameType # 1
        Origin : GraphView.FrameType # 2


    class GraphViewChanged(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, graphViewChange: GraphViewChange, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> GraphViewChange: ...
        def Invoke(self, graphViewChange: GraphViewChange) -> GraphViewChange: ...


    class Layer(VisualElement):
        def __init__(self) -> None: ...
        @property
        def cacheAsBitmap(self) -> bool: ...
        @cacheAsBitmap.setter
        def cacheAsBitmap(self, value: bool) -> bool: ...
        @property
        def canGrabFocus(self) -> bool: ...
        @property
        def childCount(self) -> int: ...
        @property
        def contentContainer(self) -> VisualElement: ...
        @property
        def contentRect(self) -> Rect: ...
        @property
        def customStyle(self) -> ICustomStyle: ...
        @property
        def delegatesFocus(self) -> bool: ...
        @delegatesFocus.setter
        def delegatesFocus(self, value: bool) -> bool: ...
        @property
        def enabledInHierarchy(self) -> bool: ...
        @property
        def enabledSelf(self) -> bool: ...
        @property
        def experimental(self) -> IExperimentalFeatures: ...
        @property
        def focusable(self) -> bool: ...
        @focusable.setter
        def focusable(self, value: bool) -> bool: ...
        @property
        def focusController(self) -> FocusController: ...
        @property
        def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
        @generateVisualContent.setter
        def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
        @property
        def hierarchy(self) -> VisualElement.Hierarchy: ...
        @property
        def Item(self) -> VisualElement: ...
        @property
        def languageDirection(self) -> LanguageDirection: ...
        @languageDirection.setter
        def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
        @property
        def layout(self) -> Rect: ...
        @layout.setter
        def layout(self, value: Rect) -> Rect: ...
        @property
        def localBound(self) -> Rect: ...
        @property
        def name(self) -> str: ...
        @name.setter
        def name(self, value: str) -> str: ...
        @property
        def panel(self) -> IPanel: ...
        @property
        def parent(self) -> VisualElement: ...
        @property
        def pickingMode(self) -> PickingMode: ...
        @pickingMode.setter
        def pickingMode(self, value: PickingMode) -> PickingMode: ...
        @property
        def resolvedStyle(self) -> IResolvedStyle: ...
        @property
        def schedule(self) -> IVisualElementScheduler: ...
        @property
        def style(self) -> IStyle: ...
        @property
        def styleSheets(self) -> VisualElementStyleSheetSet: ...
        @property
        def tabIndex(self) -> int: ...
        @tabIndex.setter
        def tabIndex(self, value: int) -> int: ...
        @property
        def tooltip(self) -> str: ...
        @tooltip.setter
        def tooltip(self, value: str) -> str: ...
        @property
        def transform(self) -> ITransform: ...
        @property
        def usageHints(self) -> UsageHints: ...
        @usageHints.setter
        def usageHints(self, value: UsageHints) -> UsageHints: ...
        @property
        def userData(self) -> typing.Any: ...
        @userData.setter
        def userData(self, value: typing.Any) -> typing.Any: ...
        @property
        def viewDataKey(self) -> str: ...
        @viewDataKey.setter
        def viewDataKey(self, value: str) -> str: ...
        @property
        def visible(self) -> bool: ...
        @visible.setter
        def visible(self, value: bool) -> bool: ...
        @property
        def visualTreeAssetSource(self) -> VisualTreeAsset: ...
        @visualTreeAssetSource.setter
        def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
        @property
        def worldBound(self) -> Rect: ...
        @property
        def worldTransform(self) -> Matrix4x4: ...


    class SerializeGraphElementsDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, elements: IEnumerable_1[GraphElement], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> str: ...
        def Invoke(self, elements: IEnumerable_1[GraphElement]) -> str: ...


    class UnserializeAndPasteDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, operationName: str, data: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, operationName: str, data: str) -> None: ...


    class ViewTransformChanged(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, graphView: GraphView, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, graphView: GraphView) -> None: ...



class GraphViewBlackboardWindow(GraphViewToolWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...


class GraphViewChange:
    edgesToCreate : List_1[Edge]
    elementsToRemove : List_1[GraphElement]
    movedElements : List_1[GraphElement]
    moveDelta : Vector2


class GraphViewEditorWindow(EditorWindow, abc.ABC):
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def graphViews(self) -> IEnumerable_1[GraphView]: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def GetExtraPaneTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    # Skipped ShowGraphViewWindowWithTools due to it being static, abstract and generic.

    ShowGraphViewWindowWithTools : ShowGraphViewWindowWithTools_MethodGroup
    class ShowGraphViewWindowWithTools_MethodGroup:
        def __getitem__(self, t:typing.Type[ShowGraphViewWindowWithTools_1_T1]) -> ShowGraphViewWindowWithTools_1[ShowGraphViewWindowWithTools_1_T1]: ...

        ShowGraphViewWindowWithTools_1_T1 = typing.TypeVar('ShowGraphViewWindowWithTools_1_T1')
        class ShowGraphViewWindowWithTools_1(typing.Generic[ShowGraphViewWindowWithTools_1_T1]):
            ShowGraphViewWindowWithTools_1_T = GraphViewEditorWindow.ShowGraphViewWindowWithTools_MethodGroup.ShowGraphViewWindowWithTools_1_T1
            def __call__(self) -> List_1[EditorWindow]:...




class GraphViewMinimapWindow(GraphViewToolWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...


class GraphViewToolWindow(EditorWindow, abc.ABC):
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def GetExtraPaneTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    def SelectGraphViewFromWindow(self, window: GraphViewEditorWindow, graphView: GraphView, graphViewIndexInWindow: int = ...) -> None: ...


class GridBackground(ImmediateModeElement):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cullingEnabled(self) -> bool: ...
    @cullingEnabled.setter
    def cullingEnabled(self, value: bool) -> bool: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class Group(Scope, ICollectibleElement):
    def __init__(self) -> None: ...
    @property
    def autoUpdateGeometry(self) -> bool: ...
    @autoUpdateGeometry.setter
    def autoUpdateGeometry(self, value: bool) -> bool: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def containedElements(self) -> IEnumerable_1[GraphElement]: ...
    @property
    def containedElementsRect(self) -> Rect: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerContainer(self) -> VisualElement: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AcceptsElement(self, element: GraphElement, reasonWhyNotAccepted: clr.Reference[str]) -> bool: ...
    def CollectElements(self, collectedElementSet: HashSet_1[GraphElement], conditionFunc: Func_2[GraphElement, bool]) -> None: ...
    def FocusTitleTextField(self) -> None: ...


class ICollectibleElement(typing.Protocol):
    @abc.abstractmethod
    def CollectElements(self, collectedElementSet: HashSet_1[GraphElement], conditionFunc: Func_2[GraphElement, bool]) -> None: ...


class IconBadge(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, template: VisualTreeAsset) -> None: ...
    @property
    def badgeText(self) -> str: ...
    @badgeText.setter
    def badgeText(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def distance(self) -> int: ...
    @distance.setter
    def distance(self, value: int) -> int: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualStyle(self) -> str: ...
    @visualStyle.setter
    def visualStyle(self, value: str) -> str: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AttachTo(self, target: VisualElement, align: SpriteAlignment) -> None: ...
    @staticmethod
    def CreateComment(message: str) -> IconBadge: ...
    @staticmethod
    def CreateError(message: str) -> IconBadge: ...
    def Detach(self) -> None: ...


class IDroppable(typing.Protocol):
    @abc.abstractmethod
    def IsDroppable(self) -> bool: ...


class IDropTarget(typing.Protocol):
    @abc.abstractmethod
    def CanAcceptDrop(self, selection: List_1[ISelectable]) -> bool: ...
    @abc.abstractmethod
    def DragEnter(self, evt: DragEnterEvent, selection: IEnumerable_1[ISelectable], enteredTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    @abc.abstractmethod
    def DragExited(self) -> bool: ...
    @abc.abstractmethod
    def DragLeave(self, evt: DragLeaveEvent, selection: IEnumerable_1[ISelectable], leftTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    @abc.abstractmethod
    def DragPerform(self, evt: DragPerformEvent, selection: IEnumerable_1[ISelectable], dropTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    @abc.abstractmethod
    def DragUpdated(self, evt: DragUpdatedEvent, selection: IEnumerable_1[ISelectable], dropTarget: IDropTarget, dragSource: ISelection) -> bool: ...


class IEdgeConnectorListener(typing.Protocol):
    @abc.abstractmethod
    def OnDrop(self, graphView: GraphView, edge: Edge) -> None: ...
    @abc.abstractmethod
    def OnDropOutsidePort(self, edge: Edge, position: Vector2) -> None: ...


class IResizable(typing.Protocol):
    @abc.abstractmethod
    def OnResized(self) -> None: ...
    @abc.abstractmethod
    def OnStartResize(self) -> None: ...


class ISearchWindowProvider(typing.Protocol):
    @abc.abstractmethod
    def CreateSearchTree(self, context: SearchWindowContext) -> List_1[SearchTreeEntry]: ...
    @abc.abstractmethod
    def OnSelectEntry(self, SearchTreeEntry: SearchTreeEntry, context: SearchWindowContext) -> bool: ...


class ISelectable(typing.Protocol):
    @abc.abstractmethod
    def HitTest(self, localPoint: Vector2) -> bool: ...
    @abc.abstractmethod
    def IsSelectable(self) -> bool: ...
    @abc.abstractmethod
    def IsSelected(self, selectionContainer: VisualElement) -> bool: ...
    @abc.abstractmethod
    def Overlaps(self, rectangle: Rect) -> bool: ...
    @abc.abstractmethod
    def Select(self, selectionContainer: VisualElement, additive: bool) -> None: ...
    @abc.abstractmethod
    def Unselect(self, selectionContainer: VisualElement) -> None: ...


class ISelection(typing.Protocol):
    @property
    def selection(self) -> List_1[ISelectable]: ...
    @abc.abstractmethod
    def AddToSelection(self, selectable: ISelectable) -> None: ...
    @abc.abstractmethod
    def ClearSelection(self) -> None: ...
    @abc.abstractmethod
    def RemoveFromSelection(self, selectable: ISelectable) -> None: ...


class MiniMap(GraphElement):
    def __init__(self) -> None: ...
    zoomFactorTextChanged : Action_1[str]
    @property
    def anchored(self) -> bool: ...
    @anchored.setter
    def anchored(self, value: bool) -> bool: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def graphView(self) -> GraphView: ...
    @graphView.setter
    def graphView(self, value: GraphView) -> GraphView: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maxHeight(self) -> float: ...
    @maxHeight.setter
    def maxHeight(self, value: float) -> float: ...
    @property
    def maxWidth(self) -> float: ...
    @maxWidth.setter
    def maxWidth(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def windowed(self) -> bool: ...
    @windowed.setter
    def windowed(self, value: bool) -> bool: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def BuildContextualMenu(self, evt: ContextualMenuPopulateEvent) -> None: ...
    def OnResized(self) -> None: ...


class Node(GraphElement, ICollectibleElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, uiFile: str) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def expanded(self) -> bool: ...
    @expanded.setter
    def expanded(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def extensionContainer(self) -> VisualElement: ...
    @extensionContainer.setter
    def extensionContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def inputContainer(self) -> VisualElement: ...
    @inputContainer.setter
    def inputContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def mainContainer(self) -> VisualElement: ...
    @mainContainer.setter
    def mainContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def outputContainer(self) -> VisualElement: ...
    @outputContainer.setter
    def outputContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleButtonContainer(self) -> VisualElement: ...
    @titleButtonContainer.setter
    def titleButtonContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def titleContainer(self) -> VisualElement: ...
    @titleContainer.setter
    def titleContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def topContainer(self) -> VisualElement: ...
    @topContainer.setter
    def topContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def BuildContextualMenu(self, evt: ContextualMenuPopulateEvent) -> None: ...
    def CollectElements(self, collectedElementSet: HashSet_1[GraphElement], conditionFunc: Func_2[GraphElement, bool]) -> None: ...
    def GetPosition(self) -> Rect: ...
    def InstantiatePort(self, orientation: Orientation, direction: Direction, capacity: Port.Capacity, type: typing.Type[typing.Any]) -> Port: ...
    def RefreshExpandedState(self) -> None: ...
    def RefreshPorts(self) -> bool: ...
    def SetPosition(self, newPos: Rect) -> None: ...


class NodeAdapter:
    def __init__(self) -> None: ...
    def CanAdapt(self, a: typing.Any, b: typing.Any) -> bool: ...
    def Connect(self, a: typing.Any, b: typing.Any) -> bool: ...
    def GetAdapter(self, a: typing.Any, b: typing.Any) -> MethodInfo: ...
    def GetTypeAdapter(self, from_: typing.Type[typing.Any], to: typing.Type[typing.Any]) -> MethodInfo: ...


class NodeCreationContext:
    index : int
    screenMousePosition : Vector2
    target : VisualElement


class Orientation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Horizontal : Orientation # 0
    Vertical : Orientation # 1


class Pill(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, left: VisualElement, right: VisualElement) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highlighted(self) -> bool: ...
    @highlighted.setter
    def highlighted(self, value: bool) -> bool: ...
    @property
    def icon(self) -> Texture: ...
    @icon.setter
    def icon(self, value: Texture) -> Texture: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def left(self) -> VisualElement: ...
    @left.setter
    def left(self, value: VisualElement) -> VisualElement: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def right(self) -> VisualElement: ...
    @right.setter
    def right(self, value: VisualElement) -> VisualElement: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Pill, Pill.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Placemat(GraphElement):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def Collapsed(self) -> bool: ...
    @Collapsed.setter
    def Collapsed(self, value: bool) -> bool: ...
    @property
    def CollapsedElements(self) -> IEnumerable_1[GraphElement]: ...
    @property
    def CollapsedSize(self) -> Vector2: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def ExpandedPosition(self) -> Rect: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def UncollapsedSize(self) -> Vector2: ...
    @UncollapsedSize.setter
    def UncollapsedSize(self, value: Vector2) -> Vector2: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    @property
    def ZOrder(self) -> int: ...
    @ZOrder.setter
    def ZOrder(self, value: int) -> int: ...
    @staticmethod
    def ComputeElementBounds(pos: clr.Reference[Rect], elements: List_1[GraphElement], ensureMinSize: Placemat.MinSizePolicy = ...) -> bool: ...
    def SetPosition(self, newPos: Rect) -> None: ...
    def StartEditTitle(self) -> None: ...

    class MinSizePolicy(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        EnsureMinSize : Placemat.MinSizePolicy # 0
        DoNotEnsureMinSize : Placemat.MinSizePolicy # 1



class PlacematContainer(GraphView.Layer):
    def __init__(self, graphView: GraphView) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def Placemats(self) -> IEnumerable_1[Placemat]: ...
    @classmethod
    @property
    def PlacematsLayer(cls) -> int: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def GetPortCenterOverride(self, port: Port, overriddenPosition: clr.Reference[Vector2]) -> bool: ...
    def GetTopZOrder(self) -> int: ...
    def HideCollapsedEdges(self) -> None: ...
    def RemoveAllPlacemats(self) -> None: ...
    # Skipped CreatePlacemat due to it being static, abstract and generic.

    CreatePlacemat : CreatePlacemat_MethodGroup
    class CreatePlacemat_MethodGroup:
        def __getitem__(self, t:typing.Type[CreatePlacemat_1_T1]) -> CreatePlacemat_1[CreatePlacemat_1_T1]: ...

        CreatePlacemat_1_T1 = typing.TypeVar('CreatePlacemat_1_T1')
        class CreatePlacemat_1(typing.Generic[CreatePlacemat_1_T1]):
            CreatePlacemat_1_T = PlacematContainer.CreatePlacemat_MethodGroup.CreatePlacemat_1_T1
            @typing.overload
            def __call__(self, placematPosition: Rect, zOrder: int, placematTitle: str) -> CreatePlacemat_1_T:...
            @typing.overload
            def __call__(self, creator: Func_1[CreatePlacemat_1_T], placematPosition: Rect, zOrder: int, placematTitle: str) -> CreatePlacemat_1_T:...



    class CycleDirection(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Up : PlacematContainer.CycleDirection # 0
        Down : PlacematContainer.CycleDirection # 1



class Port(GraphElement):
    @property
    def allowMultiDrag(self) -> bool: ...
    @allowMultiDrag.setter
    def allowMultiDrag(self, value: bool) -> bool: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def capacity(self) -> Port.Capacity: ...
    @capacity.setter
    def capacity(self, value: Port.Capacity) -> Port.Capacity: ...
    @property
    def childCount(self) -> int: ...
    @property
    def collapsed(self) -> bool: ...
    @property
    def connected(self) -> bool: ...
    @property
    def connections(self) -> IEnumerable_1[Edge]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def direction(self) -> Direction: ...
    @direction.setter
    def direction(self, value: Direction) -> Direction: ...
    @property
    def disabledPortColor(self) -> Color: ...
    @property
    def edgeConnector(self) -> EdgeConnector: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highlight(self) -> bool: ...
    @highlight.setter
    def highlight(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def node(self) -> Node: ...
    @property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> Orientation: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def portCapLit(self) -> bool: ...
    @portCapLit.setter
    def portCapLit(self, value: bool) -> bool: ...
    @property
    def portColor(self) -> Color: ...
    @portColor.setter
    def portColor(self, value: Color) -> Color: ...
    @property
    def portName(self) -> str: ...
    @portName.setter
    def portName(self, value: str) -> str: ...
    @property
    def portType(self) -> typing.Type[typing.Any]: ...
    @portType.setter
    def portType(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @property
    def source(self) -> typing.Any: ...
    @source.setter
    def source(self, value: typing.Any) -> typing.Any: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualClass(self) -> str: ...
    @visualClass.setter
    def visualClass(self, value: str) -> str: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def Connect(self, edge: Edge) -> None: ...
    def ContainsPoint(self, localPoint: Vector2) -> bool: ...
    def Disconnect(self, edge: Edge) -> None: ...
    def DisconnectAll(self) -> None: ...
    def GetGlobalCenter(self) -> Vector3: ...
    def OnStartEdgeDragging(self) -> None: ...
    def OnStopEdgeDragging(self) -> None: ...
    # Skipped ConnectTo due to it being static, abstract and generic.

    ConnectTo : ConnectTo_MethodGroup
    class ConnectTo_MethodGroup:
        def __getitem__(self, t:typing.Type[ConnectTo_1_T1]) -> ConnectTo_1[ConnectTo_1_T1]: ...

        ConnectTo_1_T1 = typing.TypeVar('ConnectTo_1_T1')
        class ConnectTo_1(typing.Generic[ConnectTo_1_T1]):
            ConnectTo_1_T = Port.ConnectTo_MethodGroup.ConnectTo_1_T1
            def __call__(self, other: Port) -> ConnectTo_1_T:...

        def __call__(self, other: Port) -> Edge:...

    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        def __getitem__(self, t:typing.Type[Create_1_T1]) -> Create_1[Create_1_T1]: ...

        Create_1_T1 = typing.TypeVar('Create_1_T1')
        class Create_1(typing.Generic[Create_1_T1]):
            Create_1_TEdge = Port.Create_MethodGroup.Create_1_T1
            def __call__(self, orientation: Orientation, direction: Direction, capacity: Port.Capacity, type: typing.Type[typing.Any]) -> Port:...



    class Capacity(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Single : Port.Capacity # 0
        Multi : Port.Capacity # 1



class PortSource_GenericClasses(abc.ABCMeta):
    Generic_PortSource_GenericClasses_PortSource_1_T = typing.TypeVar('Generic_PortSource_GenericClasses_PortSource_1_T')
    def __getitem__(self, types : typing.Type[Generic_PortSource_GenericClasses_PortSource_1_T]) -> typing.Type[PortSource_1[Generic_PortSource_GenericClasses_PortSource_1_T]]: ...

PortSource : PortSource_GenericClasses

PortSource_1_T = typing.TypeVar('PortSource_1_T')
class PortSource_1(typing.Generic[PortSource_1_T]):
    def __init__(self) -> None: ...


class RectangleSelector(MouseManipulator):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...
    def ComputeAxisAlignedBound(self, position: Rect, transform: Matrix4x4) -> Rect: ...


class RectUtils:
    def __init__(self) -> None: ...
    @staticmethod
    def Encompass(a: Rect, b: Rect) -> Rect: ...
    @staticmethod
    def Inflate(a: Rect, left: float, top: float, right: float, bottom: float) -> Rect: ...
    @staticmethod
    def IntersectsSegment(rect: Rect, p1: Vector2, p2: Vector2) -> bool: ...


class ResizableElement(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, uiFile: str) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_1[ResizableElement]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class Resizer(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, minimumSize: Vector2, onResizedCallback: Action = ...) -> None: ...
    @typing.overload
    def __init__(self, onResizedCallback: Action) -> None: ...
    @property
    def activateButton(self) -> MouseButton: ...
    @activateButton.setter
    def activateButton(self, value: MouseButton) -> MouseButton: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class ResizerDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Top : ResizerDirection # 1
    Bottom : ResizerDirection # 2
    Left : ResizerDirection # 4
    Right : ResizerDirection # 8


class Scope(GraphElement):
    def __init__(self) -> None: ...
    @property
    def autoUpdateGeometry(self) -> bool: ...
    @autoUpdateGeometry.setter
    def autoUpdateGeometry(self, value: bool) -> bool: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def containedElements(self) -> IEnumerable_1[GraphElement]: ...
    @property
    def containedElementsRect(self) -> Rect: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerContainer(self) -> VisualElement: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AcceptsElement(self, element: GraphElement, reasonWhyNotAccepted: clr.Reference[str]) -> bool: ...
    def AddElement(self, element: GraphElement) -> None: ...
    def AddElements(self, elements: IEnumerable_1[GraphElement]) -> None: ...
    def ContainsElement(self, element: GraphElement) -> bool: ...
    def GetPosition(self) -> Rect: ...
    def HitTest(self, localPoint: Vector2) -> bool: ...
    def Overlaps(self, rectangle: Rect) -> bool: ...
    def RemoveElement(self, element: GraphElement) -> None: ...
    def RemoveElements(self, elements: IEnumerable_1[GraphElement]) -> None: ...
    def RemoveElementsWithoutNotification(self, elements: IEnumerable_1[GraphElement]) -> None: ...
    def SetPosition(self, newPos: Rect) -> None: ...
    def UpdateGeometryFromContent(self) -> None: ...
    def UpdatePresenterPosition(self) -> None: ...


class SearchTreeEntry(IComparable_1[SearchTreeEntry]):
    def __init__(self, content: GUIContent) -> None: ...
    content : GUIContent
    level : int
    userData : typing.Any
    @property
    def name(self) -> str: ...
    def CompareTo(self, o: SearchTreeEntry) -> int: ...


class SearchTreeGroupEntry(SearchTreeEntry):
    def __init__(self, content: GUIContent, level: int = ...) -> None: ...
    content : GUIContent
    level : int
    userData : typing.Any
    @property
    def name(self) -> str: ...


class SearchWindow(EditorWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    # Skipped Open due to it being static, abstract and generic.

    Open : Open_MethodGroup
    class Open_MethodGroup:
        def __getitem__(self, t:typing.Type[Open_1_T1]) -> Open_1[Open_1_T1]: ...

        Open_1_T1 = typing.TypeVar('Open_1_T1', bound=Union[ScriptableObject, ISearchWindowProvider])
        class Open_1(typing.Generic[Open_1_T1]):
            Open_1_T = SearchWindow.Open_MethodGroup.Open_1_T1
            def __call__(self, context: SearchWindowContext, provider: Open_1_T) -> bool:...




class SearchWindowContext:
    def __init__(self, screenMousePosition: Vector2, requestedWidth: float = ..., requestedHeight: float = ...) -> None: ...
    @property
    def requestedHeight(self) -> float: ...
    @requestedHeight.setter
    def requestedHeight(self, value: float) -> float: ...
    @property
    def requestedWidth(self) -> float: ...
    @requestedWidth.setter
    def requestedWidth(self, value: float) -> float: ...
    @property
    def screenMousePosition(self) -> Vector2: ...
    @screenMousePosition.setter
    def screenMousePosition(self, value: Vector2) -> Vector2: ...


class SelectionDragger(Dragger):
    def __init__(self) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def clampToParentEdges(self) -> bool: ...
    @clampToParentEdges.setter
    def clampToParentEdges(self, value: bool) -> bool: ...
    @property
    def panSpeed(self) -> Vector2: ...
    @panSpeed.setter
    def panSpeed(self, value: Vector2) -> Vector2: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class SelectionDropper(Manipulator):
    def __init__(self) -> None: ...
    @property
    def activateButton(self) -> MouseButton: ...
    @activateButton.setter
    def activateButton(self, value: MouseButton) -> MouseButton: ...
    @property
    def clampToParentEdges(self) -> bool: ...
    @clampToParentEdges.setter
    def clampToParentEdges(self, value: bool) -> bool: ...
    @property
    def panSpeed(self) -> Vector2: ...
    @panSpeed.setter
    def panSpeed(self, value: Vector2) -> Vector2: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class ShortcutDelegate(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> EventPropagation: ...
    def Invoke(self) -> EventPropagation: ...


class ShortcutHandler(Manipulator):
    def __init__(self, dictionary: Dictionary_2[Event, ShortcutDelegate]) -> None: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class StackNode(Node, IDropTarget):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def dropPreviewTemplate(self) -> Func_2[GraphElement, VisualElement]: ...
    @dropPreviewTemplate.setter
    def dropPreviewTemplate(self, value: Func_2[GraphElement, VisualElement]) -> Func_2[GraphElement, VisualElement]: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def expanded(self) -> bool: ...
    @expanded.setter
    def expanded(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def extensionContainer(self) -> VisualElement: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerContainer(self) -> VisualElement: ...
    @headerContainer.setter
    def headerContainer(self, value: VisualElement) -> VisualElement: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def inputContainer(self) -> VisualElement: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def mainContainer(self) -> VisualElement: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def outputContainer(self) -> VisualElement: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleButtonContainer(self) -> VisualElement: ...
    @property
    def titleContainer(self) -> VisualElement: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def topContainer(self) -> VisualElement: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AddElement(self, element: GraphElement) -> None: ...
    def CanAcceptDrop(self, selection: List_1[ISelectable]) -> bool: ...
    def CollectElements(self, collectedElementSet: HashSet_1[GraphElement], conditionFunc: Func_2[GraphElement, bool]) -> None: ...
    def DragEnter(self, evt: DragEnterEvent, selection: IEnumerable_1[ISelectable], enteredTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    def DragExited(self) -> bool: ...
    def DragLeave(self, evt: DragLeaveEvent, selection: IEnumerable_1[ISelectable], leftTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    def DragPerform(self, evt: DragPerformEvent, selection: IEnumerable_1[ISelectable], dropTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    def DragUpdated(self, evt: DragUpdatedEvent, selection: IEnumerable_1[ISelectable], dropTarget: IDropTarget, dragSource: ISelection) -> bool: ...
    def GetInsertionIndex(self, worldPosition: Vector2) -> int: ...
    def InsertElement(self, index: int, element: GraphElement) -> None: ...
    def OnStartDragging(self, ge: GraphElement) -> None: ...
    def RemoveElement(self, element: GraphElement) -> None: ...


class StickyNote(GraphElement, IResizable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, position: Vector2) -> None: ...
    @typing.overload
    def __init__(self, uiFile: str, position: Vector2) -> None: ...
    defaultSize : Vector2
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def contents(self) -> str: ...
    @contents.setter
    def contents(self, value: str) -> str: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def fontSize(self) -> StickyNoteFontSize: ...
    @fontSize.setter
    def fontSize(self, value: StickyNoteFontSize) -> StickyNoteFontSize: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def theme(self) -> StickyNoteTheme: ...
    @theme.setter
    def theme(self, value: StickyNoteTheme) -> StickyNoteTheme: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def BuildContextualMenu(self, evt: ContextualMenuPopulateEvent) -> None: ...
    def FitText(self, onlyIfSmaller: bool) -> None: ...
    def GetPosition(self) -> Rect: ...
    def OnResized(self) -> None: ...
    def OnStartResize(self) -> None: ...
    def SetPosition(self, rect: Rect) -> None: ...
    def UpdatePresenterPosition(self) -> None: ...

    class UxmlFactory(UxmlFactory_1[StickyNote]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class StickyNoteChange(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Title : StickyNoteChange # 0
    Contents : StickyNoteChange # 1
    Theme : StickyNoteChange # 2
    FontSize : StickyNoteChange # 3
    Position : StickyNoteChange # 4


class StickyNoteChangeEvent(EventBase_1[StickyNoteChangeEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def change(self) -> StickyNoteChange: ...
    @change.setter
    def change(self, value: StickyNoteChange) -> StickyNoteChange: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(target: StickyNote, change: StickyNoteChange) -> StickyNoteChangeEvent: ...


class StickyNoteFontSize(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Small : StickyNoteFontSize # 0
    Medium : StickyNoteFontSize # 1
    Large : StickyNoteFontSize # 2
    Huge : StickyNoteFontSize # 3


class StickyNoteTheme(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Classic : StickyNoteTheme # 0
    Black : StickyNoteTheme # 1


class TokenNode(Node):
    def __init__(self, input: Port, output: Port) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def capabilities(self) -> Capabilities: ...
    @capabilities.setter
    def capabilities(self, value: Capabilities) -> Capabilities: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elementTypeColor(self) -> Color: ...
    @elementTypeColor.setter
    def elementTypeColor(self, value: Color) -> Color: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def expanded(self) -> bool: ...
    @expanded.setter
    def expanded(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def extensionContainer(self) -> VisualElement: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highlighted(self) -> bool: ...
    @highlighted.setter
    def highlighted(self, value: bool) -> bool: ...
    @property
    def icon(self) -> Texture: ...
    @icon.setter
    def icon(self, value: Texture) -> Texture: ...
    @property
    def input(self) -> Port: ...
    @property
    def inputContainer(self) -> VisualElement: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layer(self) -> int: ...
    @layer.setter
    def layer(self, value: int) -> int: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def mainContainer(self) -> VisualElement: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def output(self) -> Port: ...
    @property
    def outputContainer(self) -> VisualElement: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> bool: ...
    @property
    def showInMiniMap(self) -> bool: ...
    @showInMiniMap.setter
    def showInMiniMap(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleButtonContainer(self) -> VisualElement: ...
    @property
    def titleContainer(self) -> VisualElement: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def topContainer(self) -> VisualElement: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class TypeAdapter(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

