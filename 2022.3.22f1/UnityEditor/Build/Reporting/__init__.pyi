import typing, abc
from UnityEngine import Object, HideFlags, LogType, ScriptableObject, ISerializationCallbackReceiver
from System import Array_1, TimeSpan, DateTime
from UnityEditor import GUID, BuildOptions, BuildTarget, BuildTargetGroup
from System.Collections.Generic import IEnumerable_1

class BuildFile:
    @property
    def id(self) -> int: ...
    @property
    def path(self) -> str: ...
    @property
    def role(self) -> str: ...
    @property
    def size(self) -> int: ...
    def ToString(self) -> str: ...


class BuildReport(Object):
    @property
    def files(self) -> Array_1[BuildFile]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def packedAssets(self) -> Array_1[PackedAssets]: ...
    @property
    def scenesUsingAssets(self) -> Array_1[ScenesUsingAssets]: ...
    @property
    def steps(self) -> Array_1[BuildStep]: ...
    @property
    def strippingInfo(self) -> StrippingInfo: ...
    @property
    def summary(self) -> BuildSummary: ...
    def GetFiles(self) -> Array_1[BuildFile]: ...


class BuildResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : BuildResult # 0
    Succeeded : BuildResult # 1
    Failed : BuildResult # 2
    Cancelled : BuildResult # 3


class BuildStep:
    @property
    def depth(self) -> int: ...
    @property
    def duration(self) -> TimeSpan: ...
    @property
    def messages(self) -> Array_1[BuildStepMessage]: ...
    @property
    def name(self) -> str: ...
    def ToString(self) -> str: ...


class BuildStepMessage:
    @property
    def content(self) -> str: ...
    @property
    def type(self) -> LogType: ...


class BuildSummary:
    @property
    def buildEndedAt(self) -> DateTime: ...
    @property
    def buildStartedAt(self) -> DateTime: ...
    @property
    def guid(self) -> GUID: ...
    @property
    def options(self) -> BuildOptions: ...
    @property
    def outputPath(self) -> str: ...
    @property
    def platform(self) -> BuildTarget: ...
    @property
    def platformGroup(self) -> BuildTargetGroup: ...
    @property
    def result(self) -> BuildResult: ...
    @property
    def totalErrors(self) -> int: ...
    @property
    def totalSize(self) -> int: ...
    @property
    def totalTime(self) -> TimeSpan: ...
    @property
    def totalWarnings(self) -> int: ...
    # Skipped GetSubtarget due to it being static, abstract and generic.

    GetSubtarget : GetSubtarget_MethodGroup
    class GetSubtarget_MethodGroup:
        def __getitem__(self, t:typing.Type[GetSubtarget_1_T1]) -> GetSubtarget_1[GetSubtarget_1_T1]: ...

        GetSubtarget_1_T1 = typing.TypeVar('GetSubtarget_1_T1')
        class GetSubtarget_1(typing.Generic[GetSubtarget_1_T1]):
            GetSubtarget_1_T = BuildSummary.GetSubtarget_MethodGroup.GetSubtarget_1_T1
            def __call__(self) -> GetSubtarget_1_T:...




class CommonRoles(abc.ABC):
    @classmethod
    @property
    def appInfo(cls) -> str: ...
    @classmethod
    @property
    def assetBundle(cls) -> str: ...
    @classmethod
    @property
    def assetBundleTextManifest(cls) -> str: ...
    @classmethod
    @property
    def bootConfig(cls) -> str: ...
    @classmethod
    @property
    def builtInResources(cls) -> str: ...
    @classmethod
    @property
    def builtInShaders(cls) -> str: ...
    @classmethod
    @property
    def crashHandler(cls) -> str: ...
    @classmethod
    @property
    def debugInfo(cls) -> str: ...
    @classmethod
    @property
    def dependentManagedLibrary(cls) -> str: ...
    @classmethod
    @property
    def engineLibrary(cls) -> str: ...
    @classmethod
    @property
    def executable(cls) -> str: ...
    @classmethod
    @property
    def globalGameManagers(cls) -> str: ...
    @classmethod
    @property
    def managedEngineApi(cls) -> str: ...
    @classmethod
    @property
    def managedLibrary(cls) -> str: ...
    @classmethod
    @property
    def manifestAssetBundle(cls) -> str: ...
    @classmethod
    @property
    def monoConfig(cls) -> str: ...
    @classmethod
    @property
    def monoRuntime(cls) -> str: ...
    @classmethod
    @property
    def resourcesFile(cls) -> str: ...
    @classmethod
    @property
    def scene(cls) -> str: ...
    @classmethod
    @property
    def sharedAssets(cls) -> str: ...
    @classmethod
    @property
    def streamingAsset(cls) -> str: ...
    @classmethod
    @property
    def streamingResourceFile(cls) -> str: ...


class PackedAssetInfo:
    @property
    def id(self) -> int: ...
    @property
    def offset(self) -> int: ...
    @property
    def packedSize(self) -> int: ...
    @property
    def sourceAssetGUID(self) -> GUID: ...
    @property
    def sourceAssetPath(self) -> str: ...
    @property
    def type(self) -> typing.Type[typing.Any]: ...


class PackedAssets(Object):
    def __init__(self) -> None: ...
    @property
    def contents(self) -> Array_1[PackedAssetInfo]: ...
    @property
    def file(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overhead(self) -> int: ...
    @property
    def shortPath(self) -> str: ...


class ScenesUsingAsset:
    @property
    def assetPath(self) -> str: ...
    @property
    def scenePaths(self) -> Array_1[str]: ...


class ScenesUsingAssets(Object):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def list(self) -> Array_1[ScenesUsingAsset]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class StrippingInfo(ScriptableObject, ISerializationCallbackReceiver):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def includedModules(self) -> IEnumerable_1[str]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def GetReasonsForIncluding(self, entityName: str) -> IEnumerable_1[str]: ...

