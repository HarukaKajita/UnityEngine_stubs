import typing, abc
from UnityEngine import ScriptableObject, HideFlags, Object, GUIContent
from System.Collections.Generic import IEnumerable_1
from UnityEditor import EditorWindow, Tool
from System import Attribute

class EditorTool(ScriptableObject, abc.ABC):
    @property
    def gridSnapEnabled(self) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def target(self) -> Object: ...
    @property
    def targets(self) -> IEnumerable_1[Object]: ...
    @property
    def toolbarIcon(self) -> GUIContent: ...
    def IsAvailable(self) -> bool: ...
    def OnActivated(self) -> None: ...
    def OnToolGUI(self, window: EditorWindow) -> None: ...
    def OnWillBeDeactivated(self) -> None: ...


class EditorToolAttribute(ToolAttribute):
    @typing.overload
    def __init__(self, displayName: str, componentToolTarget: typing.Type[typing.Any] = ...) -> None: ...
    @typing.overload
    def __init__(self, displayName: str, componentToolTarget: typing.Type[typing.Any], editorToolContext: typing.Type[typing.Any]) -> None: ...
    @property
    def displayName(self) -> str: ...
    @property
    def targetContext(self) -> typing.Type[typing.Any]: ...
    @property
    def targetType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class EditorToolContext(ScriptableObject, abc.ABC):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def target(self) -> Object: ...
    @property
    def targets(self) -> IEnumerable_1[Object]: ...
    def GetAdditionalToolTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    def OnActivated(self) -> None: ...
    def OnToolGUI(self, window: EditorWindow) -> None: ...
    def OnWillBeDeactivated(self) -> None: ...
    def ResolveTool(self, tool: Tool) -> typing.Type[typing.Any]: ...


class EditorToolContextAttribute(ToolAttribute):
    def __init__(self, displayName: str = ..., targetType: typing.Type[typing.Any] = ...) -> None: ...
    @property
    def displayName(self) -> str: ...
    @property
    def targetContext(self) -> typing.Type[typing.Any]: ...
    @property
    def targetType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class EditorTools(abc.ABC):
    @classmethod
    @property
    def activeToolType(cls) -> typing.Type[typing.Any]: ...
    @staticmethod
    def IsActiveTool(tool: EditorTool) -> bool: ...
    @staticmethod
    def RestorePreviousPersistentTool() -> None: ...
    @staticmethod
    def RestorePreviousTool() -> None: ...
    # Skipped SetActiveTool due to it being static, abstract and generic.

    SetActiveTool : SetActiveTool_MethodGroup
    class SetActiveTool_MethodGroup:
        def __getitem__(self, t:typing.Type[SetActiveTool_1_T1]) -> SetActiveTool_1[SetActiveTool_1_T1]: ...

        SetActiveTool_1_T1 = typing.TypeVar('SetActiveTool_1_T1')
        class SetActiveTool_1(typing.Generic[SetActiveTool_1_T1]):
            SetActiveTool_1_T = EditorTools.SetActiveTool_MethodGroup.SetActiveTool_1_T1
            def __call__(self) -> None:...

        @typing.overload
        def __call__(self, tool: EditorTool) -> None:...
        @typing.overload
        def __call__(self, type: typing.Type[typing.Any]) -> None:...



class GameObjectToolContext(EditorToolContext):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def target(self) -> Object: ...
    @property
    def targets(self) -> IEnumerable_1[Object]: ...


class IDrawSelectedHandles(typing.Protocol):
    @abc.abstractmethod
    def OnDrawHandles(self) -> None: ...


class ToolAttribute(Attribute):
    @property
    def displayName(self) -> str: ...
    @property
    def targetContext(self) -> typing.Type[typing.Any]: ...
    @property
    def targetType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ToolManager(abc.ABC):
    @classmethod
    @property
    def activeContextType(cls) -> typing.Type[typing.Any]: ...
    @classmethod
    @property
    def activeToolType(cls) -> typing.Type[typing.Any]: ...
    @staticmethod
    def IsActiveContext(context: EditorToolContext) -> bool: ...
    @staticmethod
    def IsActiveTool(tool: EditorTool) -> bool: ...
    @staticmethod
    def RefreshAvailableTools() -> None: ...
    @staticmethod
    def RestorePreviousPersistentTool() -> None: ...
    @staticmethod
    def RestorePreviousTool() -> None: ...
    # Skipped SetActiveContext due to it being static, abstract and generic.

    SetActiveContext : SetActiveContext_MethodGroup
    class SetActiveContext_MethodGroup:
        def __getitem__(self, t:typing.Type[SetActiveContext_1_T1]) -> SetActiveContext_1[SetActiveContext_1_T1]: ...

        SetActiveContext_1_T1 = typing.TypeVar('SetActiveContext_1_T1')
        class SetActiveContext_1(typing.Generic[SetActiveContext_1_T1]):
            SetActiveContext_1_T = ToolManager.SetActiveContext_MethodGroup.SetActiveContext_1_T1
            def __call__(self) -> None:...

        def __call__(self, context: typing.Type[typing.Any]) -> None:...

    # Skipped SetActiveTool due to it being static, abstract and generic.

    SetActiveTool : SetActiveTool_MethodGroup
    class SetActiveTool_MethodGroup:
        def __getitem__(self, t:typing.Type[SetActiveTool_1_T1]) -> SetActiveTool_1[SetActiveTool_1_T1]: ...

        SetActiveTool_1_T1 = typing.TypeVar('SetActiveTool_1_T1')
        class SetActiveTool_1(typing.Generic[SetActiveTool_1_T1]):
            SetActiveTool_1_T = ToolManager.SetActiveTool_MethodGroup.SetActiveTool_1_T1
            def __call__(self) -> None:...

        @typing.overload
        def __call__(self, tool: EditorTool) -> None:...
        @typing.overload
        def __call__(self, type: typing.Type[typing.Any]) -> None:...


