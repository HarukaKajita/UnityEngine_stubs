import typing, abc
from UnityEngine.UIElements import BasePopupField_2, IBinding, VisualElement, ICustomStyle, IExperimentalFeatures, FocusController, MeshGenerationContext, Label, LanguageDirection, IPanel, PickingMode, IResolvedStyle, IVisualElementScheduler, IStyle, VisualElementStyleSheetSet, ITransform, UsageHints, VisualTreeAsset, IBindable, BaseField_1, UxmlFactory_2, UxmlAttributeDescription, UxmlChildElementDescription, BaseFieldTraits_2, UxmlColorAttributeDescription, IUxmlAttributes, CreationContext, BindableElement, DropdownMenu, PopupField_1, EventCallback_1, INotifyValueChanged_1, EventBase_1, IEventHandler, PropagationPhase, UxmlFactory_1, Button, Clickable, ITextElementExperimentalFeatures, ITextSelection, TextElement, TextField, Toggle
from System.Collections.Generic import List_1, IEnumerable_1
from UnityEngine import Rect, Matrix4x4, Color, AnimationCurve, Gradient, ColorSpace, Object, Event, Vector2
from System import Action_1, Enum, Func_2, Action, Attribute
from UnityEditor import SerializedObject, SerializedProperty, Editor, EditorWindow

class BaseMaskField_GenericClasses(abc.ABCMeta):
    Generic_BaseMaskField_GenericClasses_BaseMaskField_1_TChoice = typing.TypeVar('Generic_BaseMaskField_GenericClasses_BaseMaskField_1_TChoice')
    def __getitem__(self, types : typing.Type[Generic_BaseMaskField_GenericClasses_BaseMaskField_1_TChoice]) -> typing.Type[BaseMaskField_1[Generic_BaseMaskField_GenericClasses_BaseMaskField_1_TChoice]]: ...

BaseMaskField : BaseMaskField_GenericClasses

BaseMaskField_1_TChoice = typing.TypeVar('BaseMaskField_1_TChoice')
class BaseMaskField_1(typing.Generic[BaseMaskField_1_TChoice], BasePopupField_2[BaseMaskField_1_TChoice, str]):
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[str]: ...
    @choices.setter
    def choices(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def choicesMasks(self) -> List_1[int]: ...
    @choicesMasks.setter
    def choicesMasks(self, value: List_1[int]) -> List_1[int]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> BaseMaskField_1_TChoice: ...
    @value.setter
    def value(self, value: BaseMaskField_1_TChoice) -> BaseMaskField_1_TChoice: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: BaseMaskField_1_TChoice) -> None: ...


class BindingExtensions(abc.ABC):
    prefabOverrideUssClassName : str
    @staticmethod
    def Bind(element: VisualElement, obj: SerializedObject) -> None: ...
    @staticmethod
    def TrackPropertyValue(element: VisualElement, property: SerializedProperty, callback: Action_1[SerializedProperty] = ...) -> None: ...
    @staticmethod
    def TrackSerializedObjectValue(element: VisualElement, obj: SerializedObject, callback: Action_1[SerializedObject] = ...) -> None: ...
    @staticmethod
    def Unbind(element: VisualElement) -> None: ...
    # Skipped BindProperty due to it being static, abstract and generic.

    BindProperty : BindProperty_MethodGroup
    class BindProperty_MethodGroup:
        @typing.overload
        def __call__(self, field: IBindable, obj: SerializedObject) -> SerializedProperty:...
        @typing.overload
        def __call__(self, field: IBindable, property: SerializedProperty) -> None:...



class ColorField(BaseField_1[Color]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hdr(self) -> bool: ...
    @hdr.setter
    def hdr(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showAlpha(self) -> bool: ...
    @showAlpha.setter
    def showAlpha(self, value: bool) -> bool: ...
    @property
    def showEyeDropper(self) -> bool: ...
    @showEyeDropper.setter
    def showEyeDropper(self, value: bool) -> bool: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Color: ...
    @value.setter
    def value(self, value: Color) -> Color: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ColorField, ColorField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseFieldTraits_2[Color, UxmlColorAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class CurveField(BaseField_1[AnimationCurve]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    borderUssClassName : str
    contentUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def ranges(self) -> Rect: ...
    @ranges.setter
    def ranges(self, value: Rect) -> Rect: ...
    @property
    def renderMode(self) -> CurveField.RenderMode: ...
    @renderMode.setter
    def renderMode(self, value: CurveField.RenderMode) -> CurveField.RenderMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> AnimationCurve: ...
    @value.setter
    def value(self, value: AnimationCurve) -> AnimationCurve: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: AnimationCurve) -> None: ...

    class RenderMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Default : CurveField.RenderMode # 0
        Texture : CurveField.RenderMode # 0
        Mesh : CurveField.RenderMode # 1


    class UxmlFactory(UxmlFactory_2[CurveField, CurveField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[AnimationCurve]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class EnumFlagsField(BaseMaskField_1[Enum]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, defaultValue: Enum) -> None: ...
    @typing.overload
    def __init__(self, defaultValue: Enum, includeObsoleteValues: bool) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    @typing.overload
    def __init__(self, label: str, defaultValue: Enum) -> None: ...
    @typing.overload
    def __init__(self, label: str, defaultValue: Enum, includeObsoleteValues: bool) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[str]: ...
    @choices.setter
    def choices(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def choicesMasks(self) -> List_1[int]: ...
    @choicesMasks.setter
    def choicesMasks(self, value: List_1[int]) -> List_1[int]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Enum: ...
    @value.setter
    def value(self, value: Enum) -> Enum: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def Init(self, defaultValue: Enum, includeObsoleteValues: bool = ...) -> None: ...

    class UxmlFactory(UxmlFactory_2[EnumFlagsField, EnumFlagsField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Enum]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class GradientField(BaseField_1[Gradient]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    backgroundUssClassName : str
    borderUssClassName : str
    contentUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def colorSpace(self) -> ColorSpace: ...
    @colorSpace.setter
    def colorSpace(self, value: ColorSpace) -> ColorSpace: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hdr(self) -> bool: ...
    @hdr.setter
    def hdr(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Gradient: ...
    @value.setter
    def value(self, value: Gradient) -> Gradient: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: Gradient) -> None: ...

    class UxmlFactory(UxmlFactory_2[GradientField, GradientField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Gradient]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class InspectorElement(BindableElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, editor: Editor) -> None: ...
    @typing.overload
    def __init__(self, obj: Object) -> None: ...
    @typing.overload
    def __init__(self, obj: SerializedObject) -> None: ...
    customInspectorUssClassName : str
    debugInternalVariantUssClassName : str
    debugVariantUssClassName : str
    iMGUIContainerUssClassName : str
    iMGUICustomVariantUssClassName : str
    iMGUIDefaultVariantUssClassName : str
    iMGUIInspectorVariantUssClassName : str
    noInspectorFoundVariantUssClassName : str
    uIECustomVariantUssClassName : str
    uIEDefaultVariantUssClassName : str
    uIEInspectorVariantUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    @staticmethod
    def FillDefaultInspector(container: VisualElement, serializedObject: SerializedObject, editor: Editor) -> None: ...

    class UxmlFactory(UxmlFactory_2[InspectorElement, InspectorElement.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class IToolbarMenuElement(typing.Protocol):
    @property
    def menu(self) -> DropdownMenu: ...


class LayerField(PopupField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, defaultValue: int) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    @typing.overload
    def __init__(self, label: str, defaultValue: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[int]: ...
    @choices.setter
    def choices(self, value: List_1[int]) -> List_1[int]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatListItemCallback(self) -> Func_2[int, str]: ...
    @formatListItemCallback.setter
    def formatListItemCallback(self, value: Func_2[int, str]) -> Func_2[int, str]: ...
    @property
    def formatSelectedValueCallback(self) -> Func_2[int, str]: ...
    @formatSelectedValueCallback.setter
    def formatSelectedValueCallback(self, value: Func_2[int, str]) -> Func_2[int, str]: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[LayerField, LayerField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[int]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class LayerMaskField(MaskField):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, defaultMask: int) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    @typing.overload
    def __init__(self, label: str, defaultMask: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[str]: ...
    @choices.setter
    def choices(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def choicesMasks(self) -> List_1[int]: ...
    @choicesMasks.setter
    def choicesMasks(self, value: List_1[int]) -> List_1[int]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatListItemCallback(self) -> Func_2[str, str]: ...
    @formatListItemCallback.setter
    def formatListItemCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def formatSelectedValueCallback(self) -> Func_2[str, str]: ...
    @formatSelectedValueCallback.setter
    def formatSelectedValueCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[LayerMaskField, LayerMaskField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[int]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class MaskField(BaseMaskField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, choices: List_1[str], defaultMask: int, formatSelectedValueCallback: Func_2[str, str] = ..., formatListItemCallback: Func_2[str, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    @typing.overload
    def __init__(self, label: str, choices: List_1[str], defaultMask: int, formatSelectedValueCallback: Func_2[str, str] = ..., formatListItemCallback: Func_2[str, str] = ...) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[str]: ...
    @choices.setter
    def choices(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def choicesMasks(self) -> List_1[int]: ...
    @choicesMasks.setter
    def choicesMasks(self, value: List_1[int]) -> List_1[int]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatListItemCallback(self) -> Func_2[str, str]: ...
    @formatListItemCallback.setter
    def formatListItemCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def formatSelectedValueCallback(self) -> Func_2[str, str]: ...
    @formatSelectedValueCallback.setter
    def formatSelectedValueCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[MaskField, MaskField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[int]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class ObjectField(BaseField_1[Object]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    objectUssClassName : str
    selectorUssClassName : str
    ussClassName : str
    @property
    def allowSceneObjects(self) -> bool: ...
    @allowSceneObjects.setter
    def allowSceneObjects(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def objectType(self) -> typing.Type[typing.Any]: ...
    @objectType.setter
    def objectType(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Object: ...
    @value.setter
    def value(self, value: Object) -> Object: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: Object) -> None: ...

    class UxmlFactory(UxmlFactory_2[ObjectField, ObjectField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Object]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class PropertyField(VisualElement, IBindable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, property: SerializedProperty) -> None: ...
    @typing.overload
    def __init__(self, property: SerializedProperty, label: str) -> None: ...
    inputUssClassName : str
    inspectorElementUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def RegisterValueChangeCallback(self, callback: EventCallback_1[SerializedPropertyChangeEvent]) -> None: ...

    class UxmlFactory(UxmlFactory_2[PropertyField, PropertyField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class SearchFieldBase_GenericClasses(abc.ABCMeta):
    Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_TextInputType = typing.TypeVar('Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_TextInputType')
    Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_T = typing.TypeVar('Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_T')
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_TextInputType], typing.Type[Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_T]]) -> typing.Type[SearchFieldBase_2[Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_TextInputType, Generic_SearchFieldBase_GenericClasses_SearchFieldBase_2_T]]: ...

SearchFieldBase : SearchFieldBase_GenericClasses

SearchFieldBase_2_TextInputType = typing.TypeVar('SearchFieldBase_2_TextInputType')
SearchFieldBase_2_T = typing.TypeVar('SearchFieldBase_2_T')
class SearchFieldBase_2(typing.Generic[SearchFieldBase_2_TextInputType, SearchFieldBase_2_T], VisualElement, INotifyValueChanged_1[SearchFieldBase_2_T], abc.ABC):
    cancelButtonOffVariantUssClassName : str
    cancelButtonUssClassName : str
    popupVariantUssClassName : str
    searchButtonUssClassName : str
    textInputUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> SearchFieldBase_2_T: ...
    @value.setter
    def value(self, value: SearchFieldBase_2_T) -> SearchFieldBase_2_T: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: SearchFieldBase_2_T) -> None: ...

    UxmlTraits_GenericClasses_SearchFieldBase_2_TextInputType = typing.TypeVar('UxmlTraits_GenericClasses_SearchFieldBase_2_TextInputType')
    UxmlTraits_GenericClasses_SearchFieldBase_2_T = typing.TypeVar('UxmlTraits_GenericClasses_SearchFieldBase_2_T')
    class UxmlTraits_GenericClasses(typing.Generic[UxmlTraits_GenericClasses_SearchFieldBase_2_TextInputType, UxmlTraits_GenericClasses_SearchFieldBase_2_T], abc.ABCMeta):
        UxmlTraits_GenericClasses_SearchFieldBase_2_TextInputType = SearchFieldBase_2.UxmlTraits_GenericClasses_SearchFieldBase_2_TextInputType
        UxmlTraits_GenericClasses_SearchFieldBase_2_T = SearchFieldBase_2.UxmlTraits_GenericClasses_SearchFieldBase_2_T
        def __call__(self) -> SearchFieldBase_2.UxmlTraits_2[UxmlTraits_GenericClasses_SearchFieldBase_2_TextInputType, UxmlTraits_GenericClasses_SearchFieldBase_2_T]: ...

    UxmlTraits : UxmlTraits_GenericClasses[SearchFieldBase_2_TextInputType, SearchFieldBase_2_T]

    UxmlTraits_2_TextInputType = typing.TypeVar('UxmlTraits_2_TextInputType')
    UxmlTraits_2_T = typing.TypeVar('UxmlTraits_2_T')
    class UxmlTraits_2(typing.Generic[UxmlTraits_2_TextInputType, UxmlTraits_2_T], VisualElement.UxmlTraits):
        UxmlTraits_2_TextInputType = SearchFieldBase_2.UxmlTraits_2_TextInputType
        UxmlTraits_2_T = SearchFieldBase_2.UxmlTraits_2_T
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class SerializedObjectChangeEvent(EventBase_1[SerializedObjectChangeEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def changedObject(self) -> SerializedObject: ...
    @changedObject.setter
    def changedObject(self, value: SerializedObject) -> SerializedObject: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(value: SerializedObject) -> SerializedObjectChangeEvent: ...


class SerializedPropertyChangeEvent(EventBase_1[SerializedPropertyChangeEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def changedProperty(self) -> SerializedProperty: ...
    @changedProperty.setter
    def changedProperty(self, value: SerializedProperty) -> SerializedProperty: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(value: SerializedProperty) -> SerializedPropertyChangeEvent: ...


class TagField(PopupField_1[str]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, defaultValue: str = ...) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[str]: ...
    @choices.setter
    def choices(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatListItemCallback(self) -> Func_2[str, str]: ...
    @formatListItemCallback.setter
    def formatListItemCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def formatSelectedValueCallback(self) -> Func_2[str, str]: ...
    @formatSelectedValueCallback.setter
    def formatSelectedValueCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: str) -> None: ...

    class UxmlFactory(UxmlFactory_2[TagField, TagField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[str]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Toolbar(VisualElement):
    def __init__(self) -> None: ...
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_1[Toolbar]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class ToolbarBreadcrumbs(VisualElement):
    def __init__(self) -> None: ...
    firstItemClassName : str
    itemClassName : str
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def PopItem(self) -> None: ...
    def PushItem(self, label: str, clickedEvent: Action = ...) -> None: ...

    class UxmlFactory(UxmlFactory_1[ToolbarBreadcrumbs]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class ToolbarButton(Button):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, clickEvent: Action) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def clickable(self) -> Clickable: ...
    @clickable.setter
    def clickable(self, value: Clickable) -> Clickable: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ToolbarButton, ToolbarButton.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(Button.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class ToolbarMenu(TextElement, IToolbarMenuElement):
    def __init__(self) -> None: ...
    arrowUssClassName : str
    popupVariantUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def menu(self) -> DropdownMenu: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def variant(self) -> ToolbarMenu.Variant: ...
    @variant.setter
    def variant(self, value: ToolbarMenu.Variant) -> ToolbarMenu.Variant: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ToolbarMenu, ToolbarMenu.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...


    class Variant(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Default : ToolbarMenu.Variant # 0
        Popup : ToolbarMenu.Variant # 1



class ToolbarMenuElementExtensions(abc.ABC):
    @staticmethod
    def ShowMenu(tbe: IToolbarMenuElement) -> None: ...


class ToolbarPopupSearchField(ToolbarSearchField, IToolbarMenuElement):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def menu(self) -> DropdownMenu: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ToolbarPopupSearchField, ToolbarPopupSearchField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(ToolbarSearchField.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class ToolbarSearchField(SearchFieldBase_2[TextField, str]):
    def __init__(self) -> None: ...
    cancelButtonOffVariantUssClassName : str
    cancelButtonUssClassName : str
    popupVariantUssClassName : str
    searchButtonUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: str) -> None: ...

    class UxmlFactory(UxmlFactory_2[ToolbarSearchField, ToolbarSearchField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(SearchFieldBase_2.UxmlTraits_2[TextField, str]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class ToolbarSpacer(VisualElement):
    def __init__(self) -> None: ...
    fixedSpacerVariantUssClassName : str
    flexibleSpacerVariantUssClassName : str
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def flex(self) -> bool: ...
    @flex.setter
    def flex(self, value: bool) -> bool: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_1[ToolbarSpacer]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class ToolbarToggle(Toggle):
    def __init__(self) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ToolbarToggle, ToolbarToggle.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(Toggle.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class UIElementsEntryPoint(abc.ABC):
    @staticmethod
    def GetAntiAliasing(window: EditorWindow) -> int: ...
    @staticmethod
    def SetAntiAliasing(window: EditorWindow, aa: int) -> None: ...


class UxmlNamespacePrefixAttribute(Attribute):
    def __init__(self, ns: str, prefix: str) -> None: ...
    @property
    def ns(self) -> str: ...
    @property
    def prefix(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

