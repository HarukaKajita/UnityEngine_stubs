import typing, clr
from System import Array_1, MulticastDelegate, IAsyncResult, AsyncCallback
from System.Reflection import MethodInfo

class DevDevice:
    def __init__(self, id: str, name: str, type: str, module: str, state: DevDeviceState, features: DevDeviceFeatures) -> None: ...
    features : DevDeviceFeatures
    id : str
    module : str
    name : str
    state : DevDeviceState
    type : str
    @property
    def isConnected(self) -> bool: ...
    @classmethod
    @property
    def none(cls) -> DevDevice: ...
    def ToString(self) -> str: ...


class DevDeviceFeatures(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DevDeviceFeatures # 0
    PlayerConnection : DevDeviceFeatures # 1
    RemoteConnection : DevDeviceFeatures # 2


class DevDeviceList:
    def __init__(self) -> None: ...
    @staticmethod
    def FindDevice(deviceId: str, device: clr.Reference[DevDevice]) -> bool: ...
    @staticmethod
    def GetDevices() -> Array_1[DevDevice]: ...
    @staticmethod
    def OnChanged() -> None: ...

    class OnChangedHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...



class DevDeviceState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disconnected : DevDeviceState # 0
    Connected : DevDeviceState # 1


class Usb:
    def __init__(self) -> None: ...
    @staticmethod
    def OnDevicesChanged(devices: Array_1[UsbDevice]) -> None: ...

    class OnDevicesChangedHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, devices: Array_1[UsbDevice], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, devices: Array_1[UsbDevice]) -> None: ...



class UsbDevice:
    name : str
    productId : int
    revision : int
    udid : str
    vendorId : int
    def ToString(self) -> str: ...

