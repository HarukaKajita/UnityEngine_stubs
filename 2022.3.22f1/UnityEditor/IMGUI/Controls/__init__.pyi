import typing, abc
from UnityEngine import Rect, Texture2D, Color, Vector3, Quaternion, EventType, ConfigurableJointMotion, Vector2, GUIStyle, GUIContent, TextAlignment, GUILayoutOption
from System import IComparable, Array_1, MulticastDelegate, IAsyncResult, AsyncCallback, IComparable_1
from System.Collections.Generic import IEnumerable_1, IList_1, List_1
from UnityEditor import Handles
from System.Reflection import MethodInfo

class AdvancedDropdown(abc.ABC):
    def __init__(self, state: AdvancedDropdownState) -> None: ...
    def Show(self, rect: Rect) -> None: ...


class AdvancedDropdownItem(IComparable):
    def __init__(self, name: str) -> None: ...
    @property
    def children(self) -> IEnumerable_1[AdvancedDropdownItem]: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def icon(self) -> Texture2D: ...
    @icon.setter
    def icon(self, value: Texture2D) -> Texture2D: ...
    @property
    def id(self) -> int: ...
    @id.setter
    def id(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def AddChild(self, child: AdvancedDropdownItem) -> None: ...
    def AddSeparator(self) -> None: ...
    def CompareTo(self, o: typing.Any) -> int: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class AdvancedDropdownState:
    def __init__(self) -> None: ...


class ArcHandle:
    def __init__(self) -> None: ...
    @property
    def angle(self) -> float: ...
    @angle.setter
    def angle(self, value: float) -> float: ...
    @property
    def angleHandleColor(self) -> Color: ...
    @angleHandleColor.setter
    def angleHandleColor(self, value: Color) -> Color: ...
    @property
    def angleHandleDrawFunction(self) -> Handles.CapFunction: ...
    @angleHandleDrawFunction.setter
    def angleHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def angleHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @angleHandleSizeFunction.setter
    def angleHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def fillColor(self) -> Color: ...
    @fillColor.setter
    def fillColor(self, value: Color) -> Color: ...
    @property
    def radius(self) -> float: ...
    @radius.setter
    def radius(self, value: float) -> float: ...
    @property
    def radiusHandleColor(self) -> Color: ...
    @radiusHandleColor.setter
    def radiusHandleColor(self, value: Color) -> Color: ...
    @property
    def radiusHandleDrawFunction(self) -> Handles.CapFunction: ...
    @radiusHandleDrawFunction.setter
    def radiusHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def radiusHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @radiusHandleSizeFunction.setter
    def radiusHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def wireframeColor(self) -> Color: ...
    @wireframeColor.setter
    def wireframeColor(self, value: Color) -> Color: ...
    @staticmethod
    def DefaultAngleHandleDrawFunction(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def DefaultAngleHandleSizeFunction(position: Vector3) -> float: ...
    @staticmethod
    def DefaultRadiusHandleSizeFunction(position: Vector3) -> float: ...
    def DrawHandle(self) -> None: ...
    def SetColorWithoutRadiusHandle(self, color: Color, fillColorAlpha: float) -> None: ...
    def SetColorWithRadiusHandle(self, color: Color, fillColorAlpha: float) -> None: ...


class BoxBoundsHandle(PrimitiveBoundsHandle):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, controlIDHint: int) -> None: ...
    @property
    def axes(self) -> PrimitiveBoundsHandle.Axes: ...
    @axes.setter
    def axes(self, value: PrimitiveBoundsHandle.Axes) -> PrimitiveBoundsHandle.Axes: ...
    @property
    def center(self) -> Vector3: ...
    @center.setter
    def center(self, value: Vector3) -> Vector3: ...
    @property
    def handleColor(self) -> Color: ...
    @handleColor.setter
    def handleColor(self, value: Color) -> Color: ...
    @property
    def midpointHandleDrawFunction(self) -> Handles.CapFunction: ...
    @midpointHandleDrawFunction.setter
    def midpointHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def midpointHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @midpointHandleSizeFunction.setter
    def midpointHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def size(self) -> Vector3: ...
    @size.setter
    def size(self, value: Vector3) -> Vector3: ...
    @property
    def wireframeColor(self) -> Color: ...
    @wireframeColor.setter
    def wireframeColor(self, value: Color) -> Color: ...


class CapsuleBoundsHandle(PrimitiveBoundsHandle):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, controlIDHint: int) -> None: ...
    @property
    def axes(self) -> PrimitiveBoundsHandle.Axes: ...
    @axes.setter
    def axes(self, value: PrimitiveBoundsHandle.Axes) -> PrimitiveBoundsHandle.Axes: ...
    @property
    def center(self) -> Vector3: ...
    @center.setter
    def center(self, value: Vector3) -> Vector3: ...
    @property
    def handleColor(self) -> Color: ...
    @handleColor.setter
    def handleColor(self, value: Color) -> Color: ...
    @property
    def height(self) -> float: ...
    @height.setter
    def height(self, value: float) -> float: ...
    @property
    def heightAxis(self) -> CapsuleBoundsHandle.HeightAxis: ...
    @heightAxis.setter
    def heightAxis(self, value: CapsuleBoundsHandle.HeightAxis) -> CapsuleBoundsHandle.HeightAxis: ...
    @property
    def midpointHandleDrawFunction(self) -> Handles.CapFunction: ...
    @midpointHandleDrawFunction.setter
    def midpointHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def midpointHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @midpointHandleSizeFunction.setter
    def midpointHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def radius(self) -> float: ...
    @radius.setter
    def radius(self, value: float) -> float: ...
    @property
    def wireframeColor(self) -> Color: ...
    @wireframeColor.setter
    def wireframeColor(self, value: Color) -> Color: ...

    class HeightAxis(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        X : CapsuleBoundsHandle.HeightAxis # 0
        Y : CapsuleBoundsHandle.HeightAxis # 1
        Z : CapsuleBoundsHandle.HeightAxis # 2



class JointAngularLimitHandle:
    def __init__(self) -> None: ...
    @property
    def angleHandleDrawFunction(self) -> Handles.CapFunction: ...
    @angleHandleDrawFunction.setter
    def angleHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def angleHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @angleHandleSizeFunction.setter
    def angleHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def fillAlpha(self) -> float: ...
    @fillAlpha.setter
    def fillAlpha(self, value: float) -> float: ...
    @property
    def radius(self) -> float: ...
    @radius.setter
    def radius(self, value: float) -> float: ...
    @property
    def wireframeAlpha(self) -> float: ...
    @wireframeAlpha.setter
    def wireframeAlpha(self, value: float) -> float: ...
    @property
    def xHandleColor(self) -> Color: ...
    @xHandleColor.setter
    def xHandleColor(self, value: Color) -> Color: ...
    @property
    def xMax(self) -> float: ...
    @xMax.setter
    def xMax(self, value: float) -> float: ...
    @property
    def xMin(self) -> float: ...
    @xMin.setter
    def xMin(self, value: float) -> float: ...
    @property
    def xMotion(self) -> ConfigurableJointMotion: ...
    @xMotion.setter
    def xMotion(self, value: ConfigurableJointMotion) -> ConfigurableJointMotion: ...
    @property
    def xRange(self) -> Vector2: ...
    @xRange.setter
    def xRange(self, value: Vector2) -> Vector2: ...
    @property
    def yHandleColor(self) -> Color: ...
    @yHandleColor.setter
    def yHandleColor(self, value: Color) -> Color: ...
    @property
    def yMax(self) -> float: ...
    @yMax.setter
    def yMax(self, value: float) -> float: ...
    @property
    def yMin(self) -> float: ...
    @yMin.setter
    def yMin(self, value: float) -> float: ...
    @property
    def yMotion(self) -> ConfigurableJointMotion: ...
    @yMotion.setter
    def yMotion(self, value: ConfigurableJointMotion) -> ConfigurableJointMotion: ...
    @property
    def yRange(self) -> Vector2: ...
    @yRange.setter
    def yRange(self, value: Vector2) -> Vector2: ...
    @property
    def zHandleColor(self) -> Color: ...
    @zHandleColor.setter
    def zHandleColor(self, value: Color) -> Color: ...
    @property
    def zMax(self) -> float: ...
    @zMax.setter
    def zMax(self, value: float) -> float: ...
    @property
    def zMin(self) -> float: ...
    @zMin.setter
    def zMin(self, value: float) -> float: ...
    @property
    def zMotion(self) -> ConfigurableJointMotion: ...
    @zMotion.setter
    def zMotion(self, value: ConfigurableJointMotion) -> ConfigurableJointMotion: ...
    @property
    def zRange(self) -> Vector2: ...
    @zRange.setter
    def zRange(self, value: Vector2) -> Vector2: ...
    # Skipped DrawHandle due to it being static, abstract and generic.

    DrawHandle : DrawHandle_MethodGroup
    class DrawHandle_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, usingArticulations: bool) -> None:...



class MultiColumnHeader:
    def __init__(self, state: MultiColumnHeaderState) -> None: ...
    @property
    def canSort(self) -> bool: ...
    @canSort.setter
    def canSort(self, value: bool) -> bool: ...
    @property
    def height(self) -> float: ...
    @height.setter
    def height(self, value: float) -> float: ...
    @property
    def sortedColumnIndex(self) -> int: ...
    @sortedColumnIndex.setter
    def sortedColumnIndex(self, value: int) -> int: ...
    @property
    def state(self) -> MultiColumnHeaderState: ...
    @state.setter
    def state(self, value: MultiColumnHeaderState) -> MultiColumnHeaderState: ...
    def GetCellRect(self, visibleColumnIndex: int, rowRect: Rect) -> Rect: ...
    def GetColumn(self, columnIndex: int) -> MultiColumnHeaderState.Column: ...
    def GetColumnRect(self, visibleColumnIndex: int) -> Rect: ...
    def GetVisibleColumnIndex(self, columnIndex: int) -> int: ...
    def IsColumnVisible(self, columnIndex: int) -> bool: ...
    def IsSortedAscending(self, columnIndex: int) -> bool: ...
    def OnGUI(self, rect: Rect, xScroll: float) -> None: ...
    def Repaint(self) -> None: ...
    def ResizeToFit(self) -> None: ...
    def SetSortDirection(self, columnIndex: int, sortAscending: bool) -> None: ...
    def SetSorting(self, columnIndex: int, sortAscending: bool) -> None: ...
    def SetSortingColumns(self, columnIndices: Array_1[int], sortAscending: Array_1[bool]) -> None: ...

    class DefaultGUI(abc.ABC):
        @classmethod
        @property
        def columnContentMargin(cls) -> float: ...
        @classmethod
        @property
        def defaultHeight(cls) -> float: ...
        @classmethod
        @property
        def minimumHeight(cls) -> float: ...


    class DefaultStyles(abc.ABC):
        background : GUIStyle
        columnHeader : GUIStyle
        columnHeaderCenterAligned : GUIStyle
        columnHeaderRightAligned : GUIStyle


    class HeaderCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, multiColumnHeader: MultiColumnHeader, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, multiColumnHeader: MultiColumnHeader) -> None: ...



class MultiColumnHeaderState:
    def __init__(self, columns: Array_1[MultiColumnHeaderState.Column]) -> None: ...
    @property
    def columns(self) -> Array_1[MultiColumnHeaderState.Column]: ...
    @property
    def maximumNumberOfSortedColumns(self) -> int: ...
    @maximumNumberOfSortedColumns.setter
    def maximumNumberOfSortedColumns(self, value: int) -> int: ...
    @property
    def sortedColumnIndex(self) -> int: ...
    @sortedColumnIndex.setter
    def sortedColumnIndex(self, value: int) -> int: ...
    @property
    def sortedColumns(self) -> Array_1[int]: ...
    @sortedColumns.setter
    def sortedColumns(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def visibleColumns(self) -> Array_1[int]: ...
    @visibleColumns.setter
    def visibleColumns(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def widthOfAllVisibleColumns(self) -> float: ...
    @staticmethod
    def CanOverwriteSerializedFields(source: MultiColumnHeaderState, destination: MultiColumnHeaderState) -> bool: ...
    @staticmethod
    def OverwriteSerializedFields(source: MultiColumnHeaderState, destination: MultiColumnHeaderState) -> None: ...

    class Column:
        def __init__(self) -> None: ...
        allowToggleVisibility : bool
        autoResize : bool
        canSort : bool
        contextMenuText : str
        headerContent : GUIContent
        headerTextAlignment : TextAlignment
        maxWidth : float
        minWidth : float
        sortedAscending : bool
        sortingArrowAlignment : TextAlignment
        userData : int
        width : float



class PrimitiveBoundsHandle(abc.ABC):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, controlIDHint: int) -> None: ...
    @property
    def axes(self) -> PrimitiveBoundsHandle.Axes: ...
    @axes.setter
    def axes(self, value: PrimitiveBoundsHandle.Axes) -> PrimitiveBoundsHandle.Axes: ...
    @property
    def center(self) -> Vector3: ...
    @center.setter
    def center(self, value: Vector3) -> Vector3: ...
    @property
    def handleColor(self) -> Color: ...
    @handleColor.setter
    def handleColor(self, value: Color) -> Color: ...
    @property
    def midpointHandleDrawFunction(self) -> Handles.CapFunction: ...
    @midpointHandleDrawFunction.setter
    def midpointHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def midpointHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @midpointHandleSizeFunction.setter
    def midpointHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def wireframeColor(self) -> Color: ...
    @wireframeColor.setter
    def wireframeColor(self, value: Color) -> Color: ...
    @staticmethod
    def DefaultMidpointHandleSizeFunction(position: Vector3) -> float: ...
    def DrawHandle(self) -> None: ...
    def SetColor(self, color: Color) -> None: ...

    class Axes(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : PrimitiveBoundsHandle.Axes # 0
        X : PrimitiveBoundsHandle.Axes # 1
        Y : PrimitiveBoundsHandle.Axes # 2
        Z : PrimitiveBoundsHandle.Axes # 4
        All : PrimitiveBoundsHandle.Axes # 7



class SearchField:
    def __init__(self) -> None: ...
    @property
    def autoSetFocusOnFindCommand(self) -> bool: ...
    @autoSetFocusOnFindCommand.setter
    def autoSetFocusOnFindCommand(self, value: bool) -> bool: ...
    @property
    def searchFieldControlID(self) -> int: ...
    @searchFieldControlID.setter
    def searchFieldControlID(self, value: int) -> int: ...
    def HasFocus(self) -> bool: ...
    def SetFocus(self) -> None: ...
    # Skipped OnGUI due to it being static, abstract and generic.

    OnGUI : OnGUI_MethodGroup
    class OnGUI_MethodGroup:
        @typing.overload
        def __call__(self, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, rect: Rect, text: str) -> str:...
        @typing.overload
        def __call__(self, rect: Rect, text: str, style: GUIStyle, cancelButtonStyle: GUIStyle, emptyCancelButtonStyle: GUIStyle) -> str:...

    # Skipped OnToolbarGUI due to it being static, abstract and generic.

    OnToolbarGUI : OnToolbarGUI_MethodGroup
    class OnToolbarGUI_MethodGroup:
        @typing.overload
        def __call__(self, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, rect: Rect, text: str) -> str:...


    class SearchFieldCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...



class SphereBoundsHandle(PrimitiveBoundsHandle):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, controlIDHint: int) -> None: ...
    @property
    def axes(self) -> PrimitiveBoundsHandle.Axes: ...
    @axes.setter
    def axes(self, value: PrimitiveBoundsHandle.Axes) -> PrimitiveBoundsHandle.Axes: ...
    @property
    def center(self) -> Vector3: ...
    @center.setter
    def center(self, value: Vector3) -> Vector3: ...
    @property
    def handleColor(self) -> Color: ...
    @handleColor.setter
    def handleColor(self, value: Color) -> Color: ...
    @property
    def midpointHandleDrawFunction(self) -> Handles.CapFunction: ...
    @midpointHandleDrawFunction.setter
    def midpointHandleDrawFunction(self, value: Handles.CapFunction) -> Handles.CapFunction: ...
    @property
    def midpointHandleSizeFunction(self) -> Handles.SizeFunction: ...
    @midpointHandleSizeFunction.setter
    def midpointHandleSizeFunction(self, value: Handles.SizeFunction) -> Handles.SizeFunction: ...
    @property
    def radius(self) -> float: ...
    @radius.setter
    def radius(self, value: float) -> float: ...
    @property
    def wireframeColor(self) -> Color: ...
    @wireframeColor.setter
    def wireframeColor(self, value: Color) -> Color: ...


class TreeView(abc.ABC):
    @typing.overload
    def __init__(self, state: TreeViewState) -> None: ...
    @typing.overload
    def __init__(self, state: TreeViewState, multiColumnHeader: MultiColumnHeader) -> None: ...
    @property
    def hasSearch(self) -> bool: ...
    @property
    def multiColumnHeader(self) -> MultiColumnHeader: ...
    @multiColumnHeader.setter
    def multiColumnHeader(self, value: MultiColumnHeader) -> MultiColumnHeader: ...
    @property
    def searchString(self) -> str: ...
    @searchString.setter
    def searchString(self, value: str) -> str: ...
    @property
    def state(self) -> TreeViewState: ...
    @property
    def totalHeight(self) -> float: ...
    @property
    def treeViewControlID(self) -> int: ...
    @treeViewControlID.setter
    def treeViewControlID(self, value: int) -> int: ...
    def CollapseAll(self) -> None: ...
    def EndRename(self) -> None: ...
    def ExpandAll(self) -> None: ...
    def FrameItem(self, id: int) -> None: ...
    def GetExpanded(self) -> IList_1[int]: ...
    def GetRows(self) -> IList_1[TreeViewItem]: ...
    def GetSelection(self) -> IList_1[int]: ...
    def HasFocus(self) -> bool: ...
    def HasSelection(self) -> bool: ...
    def IsExpanded(self, id: int) -> bool: ...
    def IsSelected(self, id: int) -> bool: ...
    def OnGUI(self, rect: Rect) -> None: ...
    def Reload(self) -> None: ...
    def Repaint(self) -> None: ...
    def SelectAllRows(self) -> None: ...
    def SetExpandedRecursive(self, id: int, expanded: bool) -> None: ...
    def SetFocus(self) -> None: ...
    def SetFocusAndEnsureSelectedItem(self) -> None: ...
    # Skipped BeginRename due to it being static, abstract and generic.

    BeginRename : BeginRename_MethodGroup
    class BeginRename_MethodGroup:
        @typing.overload
        def __call__(self, item: TreeViewItem) -> bool:...
        @typing.overload
        def __call__(self, item: TreeViewItem, delay: float) -> bool:...

    # Skipped SetExpanded due to it being static, abstract and generic.

    SetExpanded : SetExpanded_MethodGroup
    class SetExpanded_MethodGroup:
        @typing.overload
        def __call__(self, ids: IList_1[int]) -> None:...
        @typing.overload
        def __call__(self, id: int, expanded: bool) -> bool:...

    # Skipped SetSelection due to it being static, abstract and generic.

    SetSelection : SetSelection_MethodGroup
    class SetSelection_MethodGroup:
        @typing.overload
        def __call__(self, selectedIDs: IList_1[int]) -> None:...
        @typing.overload
        def __call__(self, selectedIDs: IList_1[int], options: TreeViewSelectionOptions) -> None:...


    class DefaultGUI(abc.ABC):
        @staticmethod
        def BoldLabel(rect: Rect, label: str, selected: bool, focused: bool) -> None: ...
        @staticmethod
        def BoldLabelRightAligned(rect: Rect, label: str, selected: bool, focused: bool) -> None: ...
        @staticmethod
        def FoldoutLabel(rect: Rect, label: str, selected: bool, focused: bool) -> None: ...
        @staticmethod
        def Label(rect: Rect, label: str, selected: bool, focused: bool) -> None: ...
        @staticmethod
        def LabelRightAligned(rect: Rect, label: str, selected: bool, focused: bool) -> None: ...


    class DefaultStyles(abc.ABC):
        backgroundEven : GUIStyle
        backgroundOdd : GUIStyle
        boldLabel : GUIStyle
        boldLabelRightAligned : GUIStyle
        foldoutLabel : GUIStyle
        label : GUIStyle
        labelRightAligned : GUIStyle


    class DoFoldoutCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, position: Rect, expandedState: bool, style: GUIStyle, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, position: Rect, expandedState: bool, style: GUIStyle) -> bool: ...


    class GetNewSelectionFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, clickedItem: TreeViewItem, keepMultiSelection: bool, useActionKeyAsShift: bool, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> List_1[int]: ...
        def Invoke(self, clickedItem: TreeViewItem, keepMultiSelection: bool, useActionKeyAsShift: bool) -> List_1[int]: ...



class TreeViewItem(IComparable_1[TreeViewItem]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, id: int) -> None: ...
    @typing.overload
    def __init__(self, id: int, depth: int) -> None: ...
    @typing.overload
    def __init__(self, id: int, depth: int, displayName: str) -> None: ...
    @property
    def children(self) -> List_1[TreeViewItem]: ...
    @children.setter
    def children(self, value: List_1[TreeViewItem]) -> List_1[TreeViewItem]: ...
    @property
    def depth(self) -> int: ...
    @depth.setter
    def depth(self, value: int) -> int: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def hasChildren(self) -> bool: ...
    @property
    def icon(self) -> Texture2D: ...
    @icon.setter
    def icon(self, value: Texture2D) -> Texture2D: ...
    @property
    def id(self) -> int: ...
    @id.setter
    def id(self, value: int) -> int: ...
    @property
    def parent(self) -> TreeViewItem: ...
    @parent.setter
    def parent(self, value: TreeViewItem) -> TreeViewItem: ...
    def AddChild(self, child: TreeViewItem) -> None: ...
    def CompareTo(self, other: TreeViewItem) -> int: ...
    def ToString(self) -> str: ...


class TreeViewSelectionOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : TreeViewSelectionOptions # 0
    FireSelectionChanged : TreeViewSelectionOptions # 1
    RevealAndFrame : TreeViewSelectionOptions # 2


class TreeViewState:
    def __init__(self) -> None: ...
    scrollPos : Vector2
    @property
    def expandedIDs(self) -> List_1[int]: ...
    @expandedIDs.setter
    def expandedIDs(self, value: List_1[int]) -> List_1[int]: ...
    @property
    def lastClickedID(self) -> int: ...
    @lastClickedID.setter
    def lastClickedID(self, value: int) -> int: ...
    @property
    def searchString(self) -> str: ...
    @searchString.setter
    def searchString(self, value: str) -> str: ...
    @property
    def selectedIDs(self) -> List_1[int]: ...
    @selectedIDs.setter
    def selectedIDs(self, value: List_1[int]) -> List_1[int]: ...

