import typing, clr, abc
import UnityEditor.MemoryProfiler
from System import Array_1, IDisposable, DateTime
from UnityEngine import HideFlags
from Unity.Profiling.Memory import CaptureFlags, MemorySnapshotMetadata

class ArrayEntries_GenericClasses(abc.ABCMeta):
    Generic_ArrayEntries_GenericClasses_ArrayEntries_1_T = typing.TypeVar('Generic_ArrayEntries_GenericClasses_ArrayEntries_1_T')
    def __getitem__(self, types : typing.Type[Generic_ArrayEntries_GenericClasses_ArrayEntries_1_T]) -> typing.Type[ArrayEntries_1[Generic_ArrayEntries_GenericClasses_ArrayEntries_1_T]]: ...

ArrayEntries : ArrayEntries_GenericClasses

ArrayEntries_1_T = typing.TypeVar('ArrayEntries_1_T')
class ArrayEntries_1(typing.Generic[ArrayEntries_1_T]):
    def GetEntries(self, indexStart: int, numEntries: int, dataOut: clr.Reference[Array_1[ArrayEntries_1_T]]) -> None: ...
    def GetNumEntries(self) -> int: ...


class ConnectionEntries:
    @property
    def from(self) -> ArrayEntries_1[int]: ...
    @property
    def to(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class FieldDescriptionEntries:
    @property
    def fieldDescriptionName(self) -> ArrayEntries_1[str]: ...
    @property
    def isStatic(self) -> ArrayEntries_1[bool]: ...
    @property
    def offset(self) -> ArrayEntries_1[int]: ...
    @property
    def typeIndex(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class GCHandleEntries:
    @property
    def target(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class ManagedMemorySectionEntries:
    @property
    def bytes(self) -> ArrayEntries_1[Array_1[int]]: ...
    @property
    def startAddress(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class NativeAllocationEntries:
    @property
    def address(self) -> ArrayEntries_1[int]: ...
    @property
    def allocationSiteId(self) -> ArrayEntries_1[int]: ...
    @property
    def memoryRegionIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def overheadSize(self) -> ArrayEntries_1[int]: ...
    @property
    def paddingSize(self) -> ArrayEntries_1[int]: ...
    @property
    def rootReferenceId(self) -> ArrayEntries_1[int]: ...
    @property
    def size(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class NativeAllocationSiteEntries:
    @property
    def callstackSymbols(self) -> ArrayEntries_1[Array_1[int]]: ...
    @property
    def id(self) -> ArrayEntries_1[int]: ...
    @property
    def memoryLabelIndex(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class NativeCallstackSymbolEntries:
    @property
    def readableStackTrace(self) -> ArrayEntries_1[str]: ...
    @property
    def symbol(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class NativeMemoryLabelEntries:
    @property
    def memoryLabelName(self) -> ArrayEntries_1[str]: ...
    def GetNumEntries(self) -> int: ...


class NativeMemoryRegionEntries:
    @property
    def addressBase(self) -> ArrayEntries_1[int]: ...
    @property
    def addressSize(self) -> ArrayEntries_1[int]: ...
    @property
    def firstAllocationIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def memoryRegionName(self) -> ArrayEntries_1[str]: ...
    @property
    def numAllocations(self) -> ArrayEntries_1[int]: ...
    @property
    def parentIndex(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class NativeObjectEntries:
    @property
    def flags(self) -> ArrayEntries_1[ObjectFlags]: ...
    @property
    def gcHandleIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def hideFlags(self) -> ArrayEntries_1[HideFlags]: ...
    @property
    def instanceId(self) -> ArrayEntries_1[int]: ...
    @property
    def nativeObjectAddress(self) -> ArrayEntries_1[int]: ...
    @property
    def nativeTypeArrayIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def objectName(self) -> ArrayEntries_1[str]: ...
    @property
    def rootReferenceId(self) -> ArrayEntries_1[int]: ...
    @property
    def size(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class NativeRootReferenceEntries:
    @property
    def accumulatedSize(self) -> ArrayEntries_1[int]: ...
    @property
    def areaName(self) -> ArrayEntries_1[str]: ...
    @property
    def id(self) -> ArrayEntries_1[int]: ...
    @property
    def objectName(self) -> ArrayEntries_1[str]: ...
    def GetNumEntries(self) -> int: ...


class NativeTypeEntries:
    @property
    def nativeBaseTypeArrayIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def typeName(self) -> ArrayEntries_1[str]: ...
    def GetNumEntries(self) -> int: ...


class ObjectFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    IsDontDestroyOnLoad : ObjectFlags # 1
    IsPersistent : ObjectFlags # 2
    IsManager : ObjectFlags # 4


class ObjectFlagsExtensions(abc.ABC):
    @staticmethod
    def IsDontDestroyOnLoad(flags: ObjectFlags) -> bool: ...
    @staticmethod
    def IsManager(flags: ObjectFlags) -> bool: ...
    @staticmethod
    def IsPersistent(flags: ObjectFlags) -> bool: ...


class PackedMemorySnapshot(IDisposable):
    @property
    def captureFlags(self) -> CaptureFlags: ...
    @property
    def connections(self) -> ConnectionEntries: ...
    @connections.setter
    def connections(self, value: ConnectionEntries) -> ConnectionEntries: ...
    @property
    def fieldDescriptions(self) -> FieldDescriptionEntries: ...
    @fieldDescriptions.setter
    def fieldDescriptions(self, value: FieldDescriptionEntries) -> FieldDescriptionEntries: ...
    @property
    def filePath(self) -> str: ...
    @property
    def gcHandles(self) -> GCHandleEntries: ...
    @gcHandles.setter
    def gcHandles(self, value: GCHandleEntries) -> GCHandleEntries: ...
    @property
    def managedHeapSections(self) -> ManagedMemorySectionEntries: ...
    @managedHeapSections.setter
    def managedHeapSections(self, value: ManagedMemorySectionEntries) -> ManagedMemorySectionEntries: ...
    @property
    def managedStacks(self) -> ManagedMemorySectionEntries: ...
    @managedStacks.setter
    def managedStacks(self, value: ManagedMemorySectionEntries) -> ManagedMemorySectionEntries: ...
    @property
    def metadata(self) -> MemorySnapshotMetadata: ...
    @property
    def nativeAllocations(self) -> NativeAllocationEntries: ...
    @nativeAllocations.setter
    def nativeAllocations(self, value: NativeAllocationEntries) -> NativeAllocationEntries: ...
    @property
    def nativeAllocationSites(self) -> NativeAllocationSiteEntries: ...
    @nativeAllocationSites.setter
    def nativeAllocationSites(self, value: NativeAllocationSiteEntries) -> NativeAllocationSiteEntries: ...
    @property
    def nativeCallstackSymbols(self) -> NativeCallstackSymbolEntries: ...
    @nativeCallstackSymbols.setter
    def nativeCallstackSymbols(self, value: NativeCallstackSymbolEntries) -> NativeCallstackSymbolEntries: ...
    @property
    def nativeMemoryLabels(self) -> NativeMemoryLabelEntries: ...
    @nativeMemoryLabels.setter
    def nativeMemoryLabels(self, value: NativeMemoryLabelEntries) -> NativeMemoryLabelEntries: ...
    @property
    def nativeMemoryRegions(self) -> NativeMemoryRegionEntries: ...
    @nativeMemoryRegions.setter
    def nativeMemoryRegions(self, value: NativeMemoryRegionEntries) -> NativeMemoryRegionEntries: ...
    @property
    def nativeObjects(self) -> NativeObjectEntries: ...
    @nativeObjects.setter
    def nativeObjects(self, value: NativeObjectEntries) -> NativeObjectEntries: ...
    @property
    def nativeRootReferences(self) -> NativeRootReferenceEntries: ...
    @nativeRootReferences.setter
    def nativeRootReferences(self, value: NativeRootReferenceEntries) -> NativeRootReferenceEntries: ...
    @property
    def nativeTypes(self) -> NativeTypeEntries: ...
    @nativeTypes.setter
    def nativeTypes(self, value: NativeTypeEntries) -> NativeTypeEntries: ...
    @property
    def recordDate(self) -> DateTime: ...
    @property
    def typeDescriptions(self) -> TypeDescriptionEntries: ...
    @typeDescriptions.setter
    def typeDescriptions(self, value: TypeDescriptionEntries) -> TypeDescriptionEntries: ...
    @property
    def version(self) -> int: ...
    @property
    def virtualMachineInformation(self) -> VirtualMachineInformation: ...
    @staticmethod
    def Convert(snapshot: UnityEditor.MemoryProfiler.PackedMemorySnapshot, writePath: str) -> bool: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def Load(path: str) -> PackedMemorySnapshot: ...
    @staticmethod
    def Save(snapshot: PackedMemorySnapshot, writePath: str) -> None: ...


class TypeDescriptionEntries:
    @property
    def assembly(self) -> ArrayEntries_1[str]: ...
    @property
    def baseOrElementTypeIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def fieldIndices(self) -> ArrayEntries_1[Array_1[int]]: ...
    @property
    def flags(self) -> ArrayEntries_1[TypeFlags]: ...
    @property
    def size(self) -> ArrayEntries_1[int]: ...
    @property
    def staticFieldBytes(self) -> ArrayEntries_1[Array_1[int]]: ...
    @property
    def typeDescriptionName(self) -> ArrayEntries_1[str]: ...
    @property
    def typeIndex(self) -> ArrayEntries_1[int]: ...
    @property
    def typeInfoAddress(self) -> ArrayEntries_1[int]: ...
    def GetNumEntries(self) -> int: ...


class TypeFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    kNone : TypeFlags # 0
    kValueType : TypeFlags # 1
    kArray : TypeFlags # 2
    kArrayRankMask : TypeFlags # -65536


class TypeFlagsExtensions(abc.ABC):
    @staticmethod
    def ArrayRank(flags: TypeFlags) -> int: ...
    @staticmethod
    def IsArray(flags: TypeFlags) -> bool: ...
    @staticmethod
    def IsValueType(flags: TypeFlags) -> bool: ...


class VirtualMachineInformation:
    @property
    def allocationGranularity(self) -> int: ...
    @allocationGranularity.setter
    def allocationGranularity(self, value: int) -> int: ...
    @property
    def arrayBoundsOffsetInHeader(self) -> int: ...
    @arrayBoundsOffsetInHeader.setter
    def arrayBoundsOffsetInHeader(self, value: int) -> int: ...
    @property
    def arrayHeaderSize(self) -> int: ...
    @arrayHeaderSize.setter
    def arrayHeaderSize(self, value: int) -> int: ...
    @property
    def arraySizeOffsetInHeader(self) -> int: ...
    @arraySizeOffsetInHeader.setter
    def arraySizeOffsetInHeader(self, value: int) -> int: ...
    @property
    def objectHeaderSize(self) -> int: ...
    @objectHeaderSize.setter
    def objectHeaderSize(self, value: int) -> int: ...
    @property
    def pointerSize(self) -> int: ...
    @pointerSize.setter
    def pointerSize(self, value: int) -> int: ...

