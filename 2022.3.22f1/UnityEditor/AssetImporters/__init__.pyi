import typing, clr, abc
from UnityEngine import Object, Texture2D, HideFlags, Rect, AnimationCurve, Vector4, Material, AnimationClip, SpriteAlignment, Vector2, Texture, Sprite, SecondarySpriteTexture, Color32
from UnityEditor import BuildTarget, GUID, Editor, SerializedObject, AssetPostprocessor, AssetImporter, TextureImporterType, TextureImporterPlatformSettings, TextureImporterSettings
from System.Collections.Generic import List_1
from UnityEditor.Experimental import ArtifactKey
from System import Array_1, IDisposable, Attribute
from Unity.Collections import NativeArray_1

class AssetImportContext:
    @property
    def assetPath(self) -> str: ...
    @assetPath.setter
    def assetPath(self, value: str) -> str: ...
    @property
    def mainObject(self) -> Object: ...
    @property
    def selectedBuildTarget(self) -> BuildTarget: ...
    def DependsOnCustomDependency(self, dependency: str) -> None: ...
    def GetObjects(self, objects: List_1[Object]) -> None: ...
    def GetOutputArtifactFilePath(self, fileName: str) -> str: ...
    def GetResultPath(self, extension: str) -> str: ...
    def LogImportError(self, msg: str, obj: Object = ...) -> None: ...
    def LogImportWarning(self, msg: str, obj: Object = ...) -> None: ...
    def SetMainObject(self, obj: Object) -> None: ...
    # Skipped AddObjectToAsset due to it being static, abstract and generic.

    AddObjectToAsset : AddObjectToAsset_MethodGroup
    class AddObjectToAsset_MethodGroup:
        @typing.overload
        def __call__(self, identifier: str, obj: Object) -> None:...
        @typing.overload
        def __call__(self, identifier: str, obj: Object, thumbnail: Texture2D) -> None:...

    # Skipped DependsOnArtifact due to it being static, abstract and generic.

    DependsOnArtifact : DependsOnArtifact_MethodGroup
    class DependsOnArtifact_MethodGroup:
        @typing.overload
        def __call__(self, guid: GUID) -> None:...
        @typing.overload
        def __call__(self, key: ArtifactKey) -> None:...
        @typing.overload
        def __call__(self, path: str) -> None:...

    # Skipped DependsOnSourceAsset due to it being static, abstract and generic.

    DependsOnSourceAsset : DependsOnSourceAsset_MethodGroup
    class DependsOnSourceAsset_MethodGroup:
        @typing.overload
        def __call__(self, guid: GUID) -> None:...
        @typing.overload
        def __call__(self, path: str) -> None:...

    # Skipped GetArtifactFilePath due to it being static, abstract and generic.

    GetArtifactFilePath : GetArtifactFilePath_MethodGroup
    class GetArtifactFilePath_MethodGroup:
        @typing.overload
        def __call__(self, guid: GUID, fileName: str) -> str:...
        @typing.overload
        def __call__(self, key: ArtifactKey, fileName: str) -> str:...
        @typing.overload
        def __call__(self, path: str, fileName: str) -> str:...



class AssetImporterEditor(Editor, abc.ABC):
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def showImportedObject(self) -> bool: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    def DiscardChanges(self) -> None: ...
    def DrawPreview(self, previewArea: Rect) -> None: ...
    def HasModified(self) -> bool: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    def OnInspectorGUI(self) -> None: ...
    def SaveChanges(self) -> None: ...


class CameraDescription(IDisposable):
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetFloatPropertyNames(self, names: List_1[str]) -> None: ...
    def GetIntPropertyNames(self, names: List_1[str]) -> None: ...
    def GetStringPropertyNames(self, names: List_1[str]) -> None: ...
    def GetVector4PropertyNames(self, names: List_1[str]) -> None: ...
    def HasAnimationCurve(self, propertyName: str) -> bool: ...
    def HasAnimationCurveInClip(self, clipName: str, propertyName: str) -> bool: ...
    def TryGetAnimationCurve(self, clipName: str, propertyName: str, value: clr.Reference[AnimationCurve]) -> bool: ...
    # Skipped TryGetProperty due to it being static, abstract and generic.

    TryGetProperty : TryGetProperty_MethodGroup
    class TryGetProperty_MethodGroup:
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[float]) -> bool:...
        # Method TryGetProperty(propertyName : String, value : Int32&) was skipped since it collides with above method
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[Vector4]) -> bool:...
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[str]) -> bool:...



class CollectImportedDependenciesAttribute(Attribute):
    def __init__(self, importerType: typing.Type[typing.Any], version: int) -> None: ...
    @property
    def importerType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def version(self) -> int: ...


class FBXMaterialDescriptionPreprocessor(AssetPostprocessor):
    def __init__(self) -> None: ...
    @property
    def assetImporter(self) -> AssetImporter: ...
    @property
    def assetPath(self) -> str: ...
    @assetPath.setter
    def assetPath(self, value: str) -> str: ...
    @property
    def context(self) -> AssetImportContext: ...
    @context.setter
    def context(self, value: AssetImportContext) -> AssetImportContext: ...
    @property
    def preview(self) -> Texture2D: ...
    @preview.setter
    def preview(self, value: Texture2D) -> Texture2D: ...
    def GetPostprocessOrder(self) -> int: ...
    def GetVersion(self) -> int: ...
    def OnPreprocessMaterialDescription(self, description: MaterialDescription, material: Material, clips: Array_1[AnimationClip]) -> None: ...


class ImportLog(Object):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def logEntries(self) -> Array_1[ImportLog.ImportLogEntry]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...

    class ImportLogEntry:
        file : str
        flags : ImportLogFlags
        line : int
        message : str
        @property
        def context(self) -> Object: ...
        @context.setter
        def context(self, value: Object) -> Object: ...



class ImportLogFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ImportLogFlags # 0
    Error : ImportLogFlags # 64
    Warning : ImportLogFlags # 128


class LightDescription(IDisposable):
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetFloatPropertyNames(self, names: List_1[str]) -> None: ...
    def GetIntPropertyNames(self, names: List_1[str]) -> None: ...
    def GetStringPropertyNames(self, names: List_1[str]) -> None: ...
    def GetVector4PropertyNames(self, names: List_1[str]) -> None: ...
    def HasAnimationCurve(self, propertyName: str) -> bool: ...
    def HasAnimationCurveInClip(self, clipName: str, propertyName: str) -> bool: ...
    def TryGetAnimationCurve(self, clipName: str, propertyName: str, value: clr.Reference[AnimationCurve]) -> bool: ...
    # Skipped TryGetProperty due to it being static, abstract and generic.

    TryGetProperty : TryGetProperty_MethodGroup
    class TryGetProperty_MethodGroup:
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[float]) -> bool:...
        # Method TryGetProperty(propertyName : String, value : Int32&) was skipped since it collides with above method
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[Vector4]) -> bool:...
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[str]) -> bool:...



class MaterialDescription(IDisposable):
    def __init__(self) -> None: ...
    @property
    def materialName(self) -> str: ...
    def Dispose(self) -> None: ...
    def GetFloatPropertyNames(self, names: List_1[str]) -> None: ...
    def GetStringPropertyNames(self, names: List_1[str]) -> None: ...
    def GetTexturePropertyNames(self, names: List_1[str]) -> None: ...
    def GetVector4PropertyNames(self, names: List_1[str]) -> None: ...
    def HasAnimationCurve(self, propertyName: str) -> bool: ...
    def HasAnimationCurveInClip(self, clipName: str, propertyName: str) -> bool: ...
    def TryGetAnimationCurve(self, clipName: str, propertyName: str, value: clr.Reference[AnimationCurve]) -> bool: ...
    # Skipped TryGetProperty due to it being static, abstract and generic.

    TryGetProperty : TryGetProperty_MethodGroup
    class TryGetProperty_MethodGroup:
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[float]) -> bool:...
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[Vector4]) -> bool:...
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, propertyName: str, value: clr.Reference[TexturePropertyDescription]) -> bool:...



class ScriptedImporter(AssetImporter, abc.ABC):
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @abc.abstractmethod
    def OnImportAsset(self, ctx: AssetImportContext) -> None: ...
    def SupportsRemappedAssetType(self, type: typing.Type[typing.Any]) -> bool: ...


class ScriptedImporterAttribute(Attribute):
    @typing.overload
    def __init__(self, version: int, ext: str) -> None: ...
    @typing.overload
    def __init__(self, version: int, ext: str, importQueueOffset: int) -> None: ...
    @typing.overload
    def __init__(self, version: int, exts: Array_1[str]) -> None: ...
    @typing.overload
    def __init__(self, version: int, exts: Array_1[str], importQueueOffset: int) -> None: ...
    @typing.overload
    def __init__(self, version: int, exts: Array_1[str], overrideExts: Array_1[str]) -> None: ...
    @typing.overload
    def __init__(self, version: int, exts: Array_1[str], overrideExts: Array_1[str], importQueueOffset: int) -> None: ...
    AllowCaching : bool
    AutoSelect : bool
    @property
    def fileExtensions(self) -> Array_1[str]: ...
    @fileExtensions.setter
    def fileExtensions(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def importQueuePriority(self) -> int: ...
    @importQueuePriority.setter
    def importQueuePriority(self, value: int) -> int: ...
    @property
    def overrideFileExtensions(self) -> Array_1[str]: ...
    @overrideFileExtensions.setter
    def overrideFileExtensions(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def version(self) -> int: ...
    @version.setter
    def version(self, value: int) -> int: ...


class ScriptedImporterEditor(AssetImporterEditor):
    def __init__(self) -> None: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def showImportedObject(self) -> bool: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...


class SketchupMaterialDescriptionPreprocessor(AssetPostprocessor):
    def __init__(self) -> None: ...
    @property
    def assetImporter(self) -> AssetImporter: ...
    @property
    def assetPath(self) -> str: ...
    @assetPath.setter
    def assetPath(self, value: str) -> str: ...
    @property
    def context(self) -> AssetImportContext: ...
    @context.setter
    def context(self, value: AssetImportContext) -> AssetImportContext: ...
    @property
    def preview(self) -> Texture2D: ...
    @preview.setter
    def preview(self, value: Texture2D) -> Texture2D: ...
    def GetPostprocessOrder(self) -> int: ...
    def GetVersion(self) -> int: ...
    def OnPreprocessMaterialDescription(self, description: MaterialDescription, material: Material, clips: Array_1[AnimationClip]) -> None: ...


class SourceTextureInformation:
    def __init__(self) -> None: ...
    @property
    def containsAlpha(self) -> bool: ...
    @containsAlpha.setter
    def containsAlpha(self, value: bool) -> bool: ...
    @property
    def hdr(self) -> bool: ...
    @hdr.setter
    def hdr(self, value: bool) -> bool: ...
    @property
    def height(self) -> int: ...
    @height.setter
    def height(self, value: int) -> int: ...
    @property
    def width(self) -> int: ...
    @width.setter
    def width(self, value: int) -> int: ...


class SpriteImportData:
    @property
    def alignment(self) -> SpriteAlignment: ...
    @alignment.setter
    def alignment(self, value: SpriteAlignment) -> SpriteAlignment: ...
    @property
    def border(self) -> Vector4: ...
    @border.setter
    def border(self, value: Vector4) -> Vector4: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def outline(self) -> List_1[Array_1[Vector2]]: ...
    @outline.setter
    def outline(self, value: List_1[Array_1[Vector2]]) -> List_1[Array_1[Vector2]]: ...
    @property
    def pivot(self) -> Vector2: ...
    @pivot.setter
    def pivot(self, value: Vector2) -> Vector2: ...
    @property
    def rect(self) -> Rect: ...
    @rect.setter
    def rect(self, value: Rect) -> Rect: ...
    @property
    def spriteID(self) -> str: ...
    @spriteID.setter
    def spriteID(self, value: str) -> str: ...
    @property
    def tessellationDetail(self) -> float: ...
    @tessellationDetail.setter
    def tessellationDetail(self, value: float) -> float: ...


class TextureGenerationOutput:
    @property
    def importInspectorWarnings(self) -> str: ...
    @property
    def importWarnings(self) -> Array_1[str]: ...
    @property
    def output(self) -> Texture: ...
    @property
    def sprites(self) -> Array_1[Sprite]: ...
    @property
    def texture(self) -> Texture2D: ...
    @property
    def thumbNail(self) -> Texture2D: ...


class TextureGenerationSettings:
    def __init__(self, type: TextureImporterType) -> None: ...
    @property
    def assetPath(self) -> str: ...
    @assetPath.setter
    def assetPath(self, value: str) -> str: ...
    @property
    def enablePostProcessor(self) -> bool: ...
    @enablePostProcessor.setter
    def enablePostProcessor(self, value: bool) -> bool: ...
    @property
    def platformSettings(self) -> TextureImporterPlatformSettings: ...
    @platformSettings.setter
    def platformSettings(self, value: TextureImporterPlatformSettings) -> TextureImporterPlatformSettings: ...
    @property
    def qualifyForSpritePacking(self) -> bool: ...
    @qualifyForSpritePacking.setter
    def qualifyForSpritePacking(self, value: bool) -> bool: ...
    @property
    def secondarySpriteTextures(self) -> Array_1[SecondarySpriteTexture]: ...
    @secondarySpriteTextures.setter
    def secondarySpriteTextures(self, value: Array_1[SecondarySpriteTexture]) -> Array_1[SecondarySpriteTexture]: ...
    @property
    def sourceTextureInformation(self) -> SourceTextureInformation: ...
    @sourceTextureInformation.setter
    def sourceTextureInformation(self, value: SourceTextureInformation) -> SourceTextureInformation: ...
    @property
    def spriteImportData(self) -> Array_1[SpriteImportData]: ...
    @spriteImportData.setter
    def spriteImportData(self, value: Array_1[SpriteImportData]) -> Array_1[SpriteImportData]: ...
    @property
    def spritePackingTag(self) -> str: ...
    @spritePackingTag.setter
    def spritePackingTag(self, value: str) -> str: ...
    @property
    def textureImporterSettings(self) -> TextureImporterSettings: ...
    @textureImporterSettings.setter
    def textureImporterSettings(self, value: TextureImporterSettings) -> TextureImporterSettings: ...


class TextureGenerator(abc.ABC):
    @staticmethod
    def GenerateTexture(settings: TextureGenerationSettings, colorBuffer: NativeArray_1[Color32]) -> TextureGenerationOutput: ...


class TexturePropertyDescription:
    offset : Vector2
    path : str
    relativePath : str
    scale : Vector2
    texture : Texture


class ThreeDSMaterialDescriptionPreprocessor(AssetPostprocessor):
    def __init__(self) -> None: ...
    @property
    def assetImporter(self) -> AssetImporter: ...
    @property
    def assetPath(self) -> str: ...
    @assetPath.setter
    def assetPath(self, value: str) -> str: ...
    @property
    def context(self) -> AssetImportContext: ...
    @context.setter
    def context(self, value: AssetImportContext) -> AssetImportContext: ...
    @property
    def preview(self) -> Texture2D: ...
    @preview.setter
    def preview(self, value: Texture2D) -> Texture2D: ...
    def GetPostprocessOrder(self) -> int: ...
    def GetVersion(self) -> int: ...
    def OnPreprocessMaterialDescription(self, description: MaterialDescription, material: Material, clips: Array_1[AnimationClip]) -> None: ...

