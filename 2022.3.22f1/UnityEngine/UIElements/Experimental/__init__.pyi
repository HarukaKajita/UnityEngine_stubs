import typing, abc
from UnityEngine import Rect, Vector3, Quaternion, Vector2, Color, Event, EventModifiers, PenStatus
from System import Action_2, Func_2, Func_4, Action
from UnityEngine.UIElements import VisualElement, PointerEventBase_1, IEventHandler, PropagationPhase, IPointerEvent

class Easing(abc.ABC):
    @staticmethod
    def InBounce(t: float) -> float: ...
    @staticmethod
    def InCirc(t: float) -> float: ...
    @staticmethod
    def InCubic(t: float) -> float: ...
    @staticmethod
    def InElastic(t: float) -> float: ...
    @staticmethod
    def InOutBounce(t: float) -> float: ...
    @staticmethod
    def InOutCirc(t: float) -> float: ...
    @staticmethod
    def InOutCubic(t: float) -> float: ...
    @staticmethod
    def InOutElastic(t: float) -> float: ...
    @staticmethod
    def InOutPower(t: float, power: int) -> float: ...
    @staticmethod
    def InOutQuad(t: float) -> float: ...
    @staticmethod
    def InOutSine(t: float) -> float: ...
    @staticmethod
    def InPower(t: float, power: int) -> float: ...
    @staticmethod
    def InQuad(t: float) -> float: ...
    @staticmethod
    def InSine(t: float) -> float: ...
    @staticmethod
    def Linear(t: float) -> float: ...
    @staticmethod
    def OutBounce(t: float) -> float: ...
    @staticmethod
    def OutCirc(t: float) -> float: ...
    @staticmethod
    def OutCubic(t: float) -> float: ...
    @staticmethod
    def OutElastic(t: float) -> float: ...
    @staticmethod
    def OutPower(t: float, power: int) -> float: ...
    @staticmethod
    def OutQuad(t: float) -> float: ...
    @staticmethod
    def OutSine(t: float) -> float: ...
    @staticmethod
    def Step(t: float) -> float: ...
    # Skipped InBack due to it being static, abstract and generic.

    InBack : InBack_MethodGroup
    class InBack_MethodGroup:
        @typing.overload
        def __call__(self, t: float) -> float:...
        @typing.overload
        def __call__(self, t: float, s: float) -> float:...

    # Skipped InOutBack due to it being static, abstract and generic.

    InOutBack : InOutBack_MethodGroup
    class InOutBack_MethodGroup:
        @typing.overload
        def __call__(self, t: float) -> float:...
        @typing.overload
        def __call__(self, t: float, s: float) -> float:...

    # Skipped OutBack due to it being static, abstract and generic.

    OutBack : OutBack_MethodGroup
    class OutBack_MethodGroup:
        @typing.overload
        def __call__(self, t: float) -> float:...
        @typing.overload
        def __call__(self, t: float, s: float) -> float:...



class ITransitionAnimations(typing.Protocol):
    @abc.abstractmethod
    def Layout(self, to: Rect, durationMs: int) -> ValueAnimation_1[Rect]: ...
    @abc.abstractmethod
    def Position(self, to: Vector3, duration: int) -> ValueAnimation_1[Vector3]: ...
    @abc.abstractmethod
    def Rotation(self, to: Quaternion, duration: int) -> ValueAnimation_1[Quaternion]: ...
    @abc.abstractmethod
    def Scale(self, to: float, duration: int) -> ValueAnimation_1[float]: ...
    @abc.abstractmethod
    def Size(self, to: Vector2, durationMs: int) -> ValueAnimation_1[Vector2]: ...
    @abc.abstractmethod
    def TopLeft(self, to: Vector2, durationMs: int) -> ValueAnimation_1[Vector2]: ...
    # Skipped Start due to it being static, abstract and generic.

    Start : Start_MethodGroup
    class Start_MethodGroup:
        @typing.overload
        def __call__(self, to: StyleValues, durationMs: int) -> ValueAnimation_1[StyleValues]:...
        @typing.overload
        def __call__(self, from_: StyleValues, to: StyleValues, durationMs: int) -> ValueAnimation_1[StyleValues]:...
        @typing.overload
        def __call__(self, from_: float, to: float, durationMs: int, onValueChanged: Action_2[VisualElement, float]) -> ValueAnimation_1[float]:...
        @typing.overload
        def __call__(self, fromValueGetter: Func_2[VisualElement, float], to: float, durationMs: int, onValueChanged: Action_2[VisualElement, float]) -> ValueAnimation_1[float]:...
        @typing.overload
        def __call__(self, fromValueGetter: Func_2[VisualElement, Rect], to: Rect, durationMs: int, onValueChanged: Action_2[VisualElement, Rect]) -> ValueAnimation_1[Rect]:...
        @typing.overload
        def __call__(self, fromValueGetter: Func_2[VisualElement, Color], to: Color, durationMs: int, onValueChanged: Action_2[VisualElement, Color]) -> ValueAnimation_1[Color]:...
        @typing.overload
        def __call__(self, fromValueGetter: Func_2[VisualElement, Vector3], to: Vector3, durationMs: int, onValueChanged: Action_2[VisualElement, Vector3]) -> ValueAnimation_1[Vector3]:...
        @typing.overload
        def __call__(self, fromValueGetter: Func_2[VisualElement, Vector2], to: Vector2, durationMs: int, onValueChanged: Action_2[VisualElement, Vector2]) -> ValueAnimation_1[Vector2]:...
        @typing.overload
        def __call__(self, fromValueGetter: Func_2[VisualElement, Quaternion], to: Quaternion, durationMs: int, onValueChanged: Action_2[VisualElement, Quaternion]) -> ValueAnimation_1[Quaternion]:...
        @typing.overload
        def __call__(self, from_: Rect, to: Rect, durationMs: int, onValueChanged: Action_2[VisualElement, Rect]) -> ValueAnimation_1[Rect]:...
        @typing.overload
        def __call__(self, from_: Color, to: Color, durationMs: int, onValueChanged: Action_2[VisualElement, Color]) -> ValueAnimation_1[Color]:...
        @typing.overload
        def __call__(self, from_: Vector3, to: Vector3, durationMs: int, onValueChanged: Action_2[VisualElement, Vector3]) -> ValueAnimation_1[Vector3]:...
        @typing.overload
        def __call__(self, from_: Vector2, to: Vector2, durationMs: int, onValueChanged: Action_2[VisualElement, Vector2]) -> ValueAnimation_1[Vector2]:...
        @typing.overload
        def __call__(self, from_: Quaternion, to: Quaternion, durationMs: int, onValueChanged: Action_2[VisualElement, Quaternion]) -> ValueAnimation_1[Quaternion]:...



class IValueAnimation(typing.Protocol):
    @property
    def durationMs(self) -> int: ...
    @durationMs.setter
    def durationMs(self, value: int) -> int: ...
    @property
    def isRunning(self) -> bool: ...
    @abc.abstractmethod
    def Recycle(self) -> None: ...
    @abc.abstractmethod
    def Start(self) -> None: ...
    @abc.abstractmethod
    def Stop(self) -> None: ...


class PointerDownLinkTagEvent(PointerEventBase_1[PointerDownLinkTagEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def linkID(self) -> str: ...
    @linkID.setter
    def linkID(self, value: str) -> str: ...
    @property
    def linkText(self) -> str: ...
    @linkText.setter
    def linkText(self, value: str) -> str: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...
    @staticmethod
    def GetPooled(evt: IPointerEvent, linkID: str, linkText: str) -> PointerDownLinkTagEvent: ...


class PointerMoveLinkTagEvent(PointerEventBase_1[PointerMoveLinkTagEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def linkID(self) -> str: ...
    @linkID.setter
    def linkID(self, value: str) -> str: ...
    @property
    def linkText(self) -> str: ...
    @linkText.setter
    def linkText(self, value: str) -> str: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...
    @staticmethod
    def GetPooled(evt: IPointerEvent, linkID: str, linkText: str) -> PointerMoveLinkTagEvent: ...


class PointerOutLinkTagEvent(PointerEventBase_1[PointerOutLinkTagEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...
    @staticmethod
    def GetPooled(evt: IPointerEvent, linkID: str) -> PointerOutLinkTagEvent: ...


class PointerOverLinkTagEvent(PointerEventBase_1[PointerOverLinkTagEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def linkID(self) -> str: ...
    @linkID.setter
    def linkID(self, value: str) -> str: ...
    @property
    def linkText(self) -> str: ...
    @linkText.setter
    def linkText(self, value: str) -> str: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...
    @staticmethod
    def GetPooled(evt: IPointerEvent, linkID: str, linkText: str) -> PointerOverLinkTagEvent: ...


class PointerUpLinkTagEvent(PointerEventBase_1[PointerUpLinkTagEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def linkID(self) -> str: ...
    @linkID.setter
    def linkID(self, value: str) -> str: ...
    @property
    def linkText(self) -> str: ...
    @linkText.setter
    def linkText(self, value: str) -> str: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...
    @staticmethod
    def GetPooled(evt: IPointerEvent, linkID: str, linkText: str) -> PointerUpLinkTagEvent: ...


class StyleValues:
    @property
    def backgroundColor(self) -> Color: ...
    @backgroundColor.setter
    def backgroundColor(self, value: Color) -> Color: ...
    @property
    def borderBottomLeftRadius(self) -> float: ...
    @borderBottomLeftRadius.setter
    def borderBottomLeftRadius(self, value: float) -> float: ...
    @property
    def borderBottomRightRadius(self) -> float: ...
    @borderBottomRightRadius.setter
    def borderBottomRightRadius(self, value: float) -> float: ...
    @property
    def borderBottomWidth(self) -> float: ...
    @borderBottomWidth.setter
    def borderBottomWidth(self, value: float) -> float: ...
    @property
    def borderColor(self) -> Color: ...
    @borderColor.setter
    def borderColor(self, value: Color) -> Color: ...
    @property
    def borderLeftWidth(self) -> float: ...
    @borderLeftWidth.setter
    def borderLeftWidth(self, value: float) -> float: ...
    @property
    def borderRightWidth(self) -> float: ...
    @borderRightWidth.setter
    def borderRightWidth(self, value: float) -> float: ...
    @property
    def borderTopLeftRadius(self) -> float: ...
    @borderTopLeftRadius.setter
    def borderTopLeftRadius(self, value: float) -> float: ...
    @property
    def borderTopRightRadius(self) -> float: ...
    @borderTopRightRadius.setter
    def borderTopRightRadius(self, value: float) -> float: ...
    @property
    def borderTopWidth(self) -> float: ...
    @borderTopWidth.setter
    def borderTopWidth(self, value: float) -> float: ...
    @property
    def bottom(self) -> float: ...
    @bottom.setter
    def bottom(self, value: float) -> float: ...
    @property
    def color(self) -> Color: ...
    @color.setter
    def color(self, value: Color) -> Color: ...
    @property
    def flexGrow(self) -> float: ...
    @flexGrow.setter
    def flexGrow(self, value: float) -> float: ...
    @property
    def flexShrink(self) -> float: ...
    @flexShrink.setter
    def flexShrink(self, value: float) -> float: ...
    @property
    def height(self) -> float: ...
    @height.setter
    def height(self, value: float) -> float: ...
    @property
    def left(self) -> float: ...
    @left.setter
    def left(self, value: float) -> float: ...
    @property
    def marginBottom(self) -> float: ...
    @marginBottom.setter
    def marginBottom(self, value: float) -> float: ...
    @property
    def marginLeft(self) -> float: ...
    @marginLeft.setter
    def marginLeft(self, value: float) -> float: ...
    @property
    def marginRight(self) -> float: ...
    @marginRight.setter
    def marginRight(self, value: float) -> float: ...
    @property
    def marginTop(self) -> float: ...
    @marginTop.setter
    def marginTop(self, value: float) -> float: ...
    @property
    def opacity(self) -> float: ...
    @opacity.setter
    def opacity(self, value: float) -> float: ...
    @property
    def paddingBottom(self) -> float: ...
    @paddingBottom.setter
    def paddingBottom(self, value: float) -> float: ...
    @property
    def paddingLeft(self) -> float: ...
    @paddingLeft.setter
    def paddingLeft(self, value: float) -> float: ...
    @property
    def paddingRight(self) -> float: ...
    @paddingRight.setter
    def paddingRight(self, value: float) -> float: ...
    @property
    def paddingTop(self) -> float: ...
    @paddingTop.setter
    def paddingTop(self, value: float) -> float: ...
    @property
    def right(self) -> float: ...
    @right.setter
    def right(self, value: float) -> float: ...
    @property
    def top(self) -> float: ...
    @top.setter
    def top(self, value: float) -> float: ...
    @property
    def unityBackgroundImageTintColor(self) -> Color: ...
    @unityBackgroundImageTintColor.setter
    def unityBackgroundImageTintColor(self, value: Color) -> Color: ...
    @property
    def width(self) -> float: ...
    @width.setter
    def width(self, value: float) -> float: ...


class ValueAnimation_GenericClasses(abc.ABCMeta):
    Generic_ValueAnimation_GenericClasses_ValueAnimation_1_T = typing.TypeVar('Generic_ValueAnimation_GenericClasses_ValueAnimation_1_T')
    def __getitem__(self, types : typing.Type[Generic_ValueAnimation_GenericClasses_ValueAnimation_1_T]) -> typing.Type[ValueAnimation_1[Generic_ValueAnimation_GenericClasses_ValueAnimation_1_T]]: ...

ValueAnimation : ValueAnimation_GenericClasses

ValueAnimation_1_T = typing.TypeVar('ValueAnimation_1_T')
class ValueAnimation_1(typing.Generic[ValueAnimation_1_T], IValueAnimation):
    def __init__(self) -> None: ...
    @property
    def autoRecycle(self) -> bool: ...
    @autoRecycle.setter
    def autoRecycle(self, value: bool) -> bool: ...
    @property
    def durationMs(self) -> int: ...
    @durationMs.setter
    def durationMs(self, value: int) -> int: ...
    @property
    def easingCurve(self) -> Func_2[float, float]: ...
    @easingCurve.setter
    def easingCurve(self, value: Func_2[float, float]) -> Func_2[float, float]: ...
    @property
    def from(self) -> ValueAnimation_1_T: ...
    @from.setter
    def from(self, value: ValueAnimation_1_T) -> ValueAnimation_1_T: ...
    @property
    def initialValue(self) -> Func_2[VisualElement, ValueAnimation_1_T]: ...
    @initialValue.setter
    def initialValue(self, value: Func_2[VisualElement, ValueAnimation_1_T]) -> Func_2[VisualElement, ValueAnimation_1_T]: ...
    @property
    def interpolator(self) -> Func_4[ValueAnimation_1_T, ValueAnimation_1_T, float, ValueAnimation_1_T]: ...
    @interpolator.setter
    def interpolator(self, value: Func_4[ValueAnimation_1_T, ValueAnimation_1_T, float, ValueAnimation_1_T]) -> Func_4[ValueAnimation_1_T, ValueAnimation_1_T, float, ValueAnimation_1_T]: ...
    @property
    def isRunning(self) -> bool: ...
    @isRunning.setter
    def isRunning(self, value: bool) -> bool: ...
    @property
    def onAnimationCompleted(self) -> Action: ...
    @onAnimationCompleted.setter
    def onAnimationCompleted(self, value: Action) -> Action: ...
    @property
    def to(self) -> ValueAnimation_1_T: ...
    @to.setter
    def to(self, value: ValueAnimation_1_T) -> ValueAnimation_1_T: ...
    @property
    def valueUpdated(self) -> Action_2[VisualElement, ValueAnimation_1_T]: ...
    @valueUpdated.setter
    def valueUpdated(self, value: Action_2[VisualElement, ValueAnimation_1_T]) -> Action_2[VisualElement, ValueAnimation_1_T]: ...
    @staticmethod
    def Create(e: VisualElement, interpolator: Func_4[ValueAnimation_1_T, ValueAnimation_1_T, float, ValueAnimation_1_T]) -> ValueAnimation_1[ValueAnimation_1_T]: ...
    def Ease(self, easing: Func_2[float, float]) -> ValueAnimation_1[ValueAnimation_1_T]: ...
    def KeepAlive(self) -> ValueAnimation_1[ValueAnimation_1_T]: ...
    def OnCompleted(self, callback: Action) -> ValueAnimation_1[ValueAnimation_1_T]: ...
    def Recycle(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...

