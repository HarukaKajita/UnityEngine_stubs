import typing, clr
from UnityEngine.TextCore import FaceInfo, Glyph
from System import Array_1, IEquatable_1
from UnityEngine import Font

class FontEngine:
    @staticmethod
    def DestroyFontEngine() -> FontEngineError: ...
    @staticmethod
    def GetFaceInfo() -> FaceInfo: ...
    @staticmethod
    def GetFontFaces() -> Array_1[str]: ...
    @staticmethod
    def GetSystemFontNames() -> Array_1[str]: ...
    @staticmethod
    def InitializeFontEngine() -> FontEngineError: ...
    @staticmethod
    def SetFaceSize(pointSize: int) -> FontEngineError: ...
    @staticmethod
    def TryGetGlyphIndex(unicode: int, glyphIndex: clr.Reference[int]) -> bool: ...
    @staticmethod
    def TryGetGlyphWithIndexValue(glyphIndex: int, flags: GlyphLoadFlags, glyph: clr.Reference[Glyph]) -> bool: ...
    @staticmethod
    def TryGetGlyphWithUnicodeValue(unicode: int, flags: GlyphLoadFlags, glyph: clr.Reference[Glyph]) -> bool: ...
    @staticmethod
    def UnloadAllFontFaces() -> FontEngineError: ...
    @staticmethod
    def UnloadFontFace() -> FontEngineError: ...
    # Skipped LoadFontFace due to it being static, abstract and generic.

    LoadFontFace : LoadFontFace_MethodGroup
    class LoadFontFace_MethodGroup:
        @typing.overload
        def __call__(self, sourceFontFile: Array_1[int]) -> FontEngineError:...
        @typing.overload
        def __call__(self, filePath: str) -> FontEngineError:...
        @typing.overload
        def __call__(self, font: Font) -> FontEngineError:...
        @typing.overload
        def __call__(self, sourceFontFile: Array_1[int], pointSize: int) -> FontEngineError:...
        @typing.overload
        def __call__(self, filePath: str, pointSize: int) -> FontEngineError:...
        @typing.overload
        def __call__(self, font: Font, pointSize: int) -> FontEngineError:...
        @typing.overload
        def __call__(self, familyName: str, styleName: str) -> FontEngineError:...
        @typing.overload
        def __call__(self, sourceFontFile: Array_1[int], pointSize: int, faceIndex: int) -> FontEngineError:...
        @typing.overload
        def __call__(self, filePath: str, pointSize: int, faceIndex: int) -> FontEngineError:...
        @typing.overload
        def __call__(self, font: Font, pointSize: int, faceIndex: int) -> FontEngineError:...
        @typing.overload
        def __call__(self, familyName: str, styleName: str, pointSize: int) -> FontEngineError:...



class FontEngineError(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : FontEngineError # 0
    Invalid_File_Path : FontEngineError # 1
    Invalid_File_Format : FontEngineError # 2
    Invalid_File_Structure : FontEngineError # 3
    Invalid_File : FontEngineError # 4
    Invalid_Table : FontEngineError # 8
    Invalid_Glyph_Index : FontEngineError # 16
    Invalid_Character_Code : FontEngineError # 17
    Invalid_Pixel_Size : FontEngineError # 23
    Invalid_Library : FontEngineError # 33
    Invalid_Face : FontEngineError # 35
    Invalid_Library_or_Face : FontEngineError # 41
    Atlas_Generation_Cancelled : FontEngineError # 100
    Invalid_SharedTextureData : FontEngineError # 101
    OpenTypeLayoutLookup_Mismatch : FontEngineError # 116


class FontFeatureLookupFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : FontFeatureLookupFlags # 0
    IgnoreLigatures : FontFeatureLookupFlags # 4
    IgnoreSpacingAdjustments : FontFeatureLookupFlags # 256


class GlyphAdjustmentRecord(IEquatable_1[GlyphAdjustmentRecord]):
    def __init__(self, glyphIndex: int, glyphValueRecord: GlyphValueRecord) -> None: ...
    @property
    def glyphIndex(self) -> int: ...
    @glyphIndex.setter
    def glyphIndex(self, value: int) -> int: ...
    @property
    def glyphValueRecord(self) -> GlyphValueRecord: ...
    @glyphValueRecord.setter
    def glyphValueRecord(self, value: GlyphValueRecord) -> GlyphValueRecord: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: GlyphAdjustmentRecord, rhs: GlyphAdjustmentRecord) -> bool: ...
    def __ne__(self, lhs: GlyphAdjustmentRecord, rhs: GlyphAdjustmentRecord) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: GlyphAdjustmentRecord) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class GlyphLoadFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LOAD_DEFAULT : GlyphLoadFlags # 0
    LOAD_NO_SCALE : GlyphLoadFlags # 1
    LOAD_NO_HINTING : GlyphLoadFlags # 2
    LOAD_RENDER : GlyphLoadFlags # 4
    LOAD_NO_BITMAP : GlyphLoadFlags # 8
    LOAD_FORCE_AUTOHINT : GlyphLoadFlags # 32
    LOAD_MONOCHROME : GlyphLoadFlags # 4096
    LOAD_NO_AUTOHINT : GlyphLoadFlags # 32768
    LOAD_COLOR : GlyphLoadFlags # 1048576
    LOAD_COMPUTE_METRICS : GlyphLoadFlags # 2097152
    LOAD_BITMAP_METRICS_ONLY : GlyphLoadFlags # 4194304


class GlyphPackingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BestShortSideFit : GlyphPackingMode # 0
    BestLongSideFit : GlyphPackingMode # 1
    BestAreaFit : GlyphPackingMode # 2
    BottomLeftRule : GlyphPackingMode # 3
    ContactPointRule : GlyphPackingMode # 4


class GlyphPairAdjustmentRecord(IEquatable_1[GlyphPairAdjustmentRecord]):
    def __init__(self, firstAdjustmentRecord: GlyphAdjustmentRecord, secondAdjustmentRecord: GlyphAdjustmentRecord) -> None: ...
    @property
    def featureLookupFlags(self) -> FontFeatureLookupFlags: ...
    @featureLookupFlags.setter
    def featureLookupFlags(self, value: FontFeatureLookupFlags) -> FontFeatureLookupFlags: ...
    @property
    def firstAdjustmentRecord(self) -> GlyphAdjustmentRecord: ...
    @firstAdjustmentRecord.setter
    def firstAdjustmentRecord(self, value: GlyphAdjustmentRecord) -> GlyphAdjustmentRecord: ...
    @property
    def secondAdjustmentRecord(self) -> GlyphAdjustmentRecord: ...
    @secondAdjustmentRecord.setter
    def secondAdjustmentRecord(self, value: GlyphAdjustmentRecord) -> GlyphAdjustmentRecord: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: GlyphPairAdjustmentRecord, rhs: GlyphPairAdjustmentRecord) -> bool: ...
    def __ne__(self, lhs: GlyphPairAdjustmentRecord, rhs: GlyphPairAdjustmentRecord) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: GlyphPairAdjustmentRecord) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class GlyphRenderMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SMOOTH : GlyphRenderMode # 4117
    RASTER : GlyphRenderMode # 4118
    SMOOTH_HINTED : GlyphRenderMode # 4121
    RASTER_HINTED : GlyphRenderMode # 4122
    SDF : GlyphRenderMode # 4134
    SDFAA : GlyphRenderMode # 4165
    SDFAA_HINTED : GlyphRenderMode # 4169
    SDF8 : GlyphRenderMode # 8230
    SDF16 : GlyphRenderMode # 16422
    SDF32 : GlyphRenderMode # 32806
    COLOR : GlyphRenderMode # 69652
    COLOR_HINTED : GlyphRenderMode # 69656


class GlyphValueRecord(IEquatable_1[GlyphValueRecord]):
    def __init__(self, xPlacement: float, yPlacement: float, xAdvance: float, yAdvance: float) -> None: ...
    @property
    def xAdvance(self) -> float: ...
    @xAdvance.setter
    def xAdvance(self, value: float) -> float: ...
    @property
    def xPlacement(self) -> float: ...
    @xPlacement.setter
    def xPlacement(self, value: float) -> float: ...
    @property
    def yAdvance(self) -> float: ...
    @yAdvance.setter
    def yAdvance(self, value: float) -> float: ...
    @property
    def yPlacement(self) -> float: ...
    @yPlacement.setter
    def yPlacement(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    def __add__(self, a: GlyphValueRecord, b: GlyphValueRecord) -> GlyphValueRecord: ...
    def __eq__(self, lhs: GlyphValueRecord, rhs: GlyphValueRecord) -> bool: ...
    def __ne__(self, lhs: GlyphValueRecord, rhs: GlyphValueRecord) -> bool: ...
    def __mul__(self, a: GlyphValueRecord, emScale: float) -> GlyphValueRecord: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: GlyphValueRecord) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...


