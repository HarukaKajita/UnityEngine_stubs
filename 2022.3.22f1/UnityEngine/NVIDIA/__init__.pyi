import typing, clr, abc
from UnityEngine import Texture
from UnityEngine.Rendering import CommandBuffer
from System.Collections.Generic import IEnumerable_1

class DLSSCommandExecutionData:
    @property
    def invertXAxis(self) -> int: ...
    @invertXAxis.setter
    def invertXAxis(self, value: int) -> int: ...
    @property
    def invertYAxis(self) -> int: ...
    @invertYAxis.setter
    def invertYAxis(self, value: int) -> int: ...
    @property
    def jitterOffsetX(self) -> float: ...
    @jitterOffsetX.setter
    def jitterOffsetX(self, value: float) -> float: ...
    @property
    def jitterOffsetY(self) -> float: ...
    @jitterOffsetY.setter
    def jitterOffsetY(self, value: float) -> float: ...
    @property
    def mvScaleX(self) -> float: ...
    @mvScaleX.setter
    def mvScaleX(self, value: float) -> float: ...
    @property
    def mvScaleY(self) -> float: ...
    @mvScaleY.setter
    def mvScaleY(self, value: float) -> float: ...
    @property
    def preExposure(self) -> float: ...
    @preExposure.setter
    def preExposure(self, value: float) -> float: ...
    @property
    def reset(self) -> int: ...
    @reset.setter
    def reset(self, value: int) -> int: ...
    @property
    def sharpness(self) -> float: ...
    @sharpness.setter
    def sharpness(self, value: float) -> float: ...
    @property
    def subrectHeight(self) -> int: ...
    @subrectHeight.setter
    def subrectHeight(self, value: int) -> int: ...
    @property
    def subrectOffsetX(self) -> int: ...
    @subrectOffsetX.setter
    def subrectOffsetX(self, value: int) -> int: ...
    @property
    def subrectOffsetY(self) -> int: ...
    @subrectOffsetY.setter
    def subrectOffsetY(self, value: int) -> int: ...
    @property
    def subrectWidth(self) -> int: ...
    @subrectWidth.setter
    def subrectWidth(self, value: int) -> int: ...


class DLSSCommandInitializationData:
    @property
    def featureFlags(self) -> DLSSFeatureFlags: ...
    @featureFlags.setter
    def featureFlags(self, value: DLSSFeatureFlags) -> DLSSFeatureFlags: ...
    @property
    def inputRTHeight(self) -> int: ...
    @inputRTHeight.setter
    def inputRTHeight(self, value: int) -> int: ...
    @property
    def inputRTWidth(self) -> int: ...
    @inputRTWidth.setter
    def inputRTWidth(self, value: int) -> int: ...
    @property
    def outputRTHeight(self) -> int: ...
    @outputRTHeight.setter
    def outputRTHeight(self, value: int) -> int: ...
    @property
    def outputRTWidth(self) -> int: ...
    @outputRTWidth.setter
    def outputRTWidth(self, value: int) -> int: ...
    @property
    def quality(self) -> DLSSQuality: ...
    @quality.setter
    def quality(self, value: DLSSQuality) -> DLSSQuality: ...
    def GetFlag(self, flag: DLSSFeatureFlags) -> bool: ...
    def SetFlag(self, flag: DLSSFeatureFlags, value: bool) -> None: ...


class DLSSContext:
    @property
    def executeData(self) -> clr.Reference[DLSSCommandExecutionData]: ...
    @property
    def initData(self) -> clr.Reference[DLSSCommandInitializationData]: ...


class DLSSDebugFeatureInfos:
    @property
    def execData(self) -> DLSSCommandExecutionData: ...
    @property
    def featureSlot(self) -> int: ...
    @property
    def initData(self) -> DLSSCommandInitializationData: ...
    @property
    def validFeature(self) -> bool: ...


class DLSSFeatureFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DLSSFeatureFlags # 0
    IsHDR : DLSSFeatureFlags # 1
    MVLowRes : DLSSFeatureFlags # 2
    MVJittered : DLSSFeatureFlags # 4
    DepthInverted : DLSSFeatureFlags # 8
    DoSharpening : DLSSFeatureFlags # 16


class DLSSQuality(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MaximumPerformance : DLSSQuality # 0
    Balanced : DLSSQuality # 1
    MaximumQuality : DLSSQuality # 2
    UltraPerformance : DLSSQuality # 3


class DLSSTextureTable:
    @property
    def biasColorMask(self) -> Texture: ...
    @biasColorMask.setter
    def biasColorMask(self, value: Texture) -> Texture: ...
    @property
    def colorInput(self) -> Texture: ...
    @colorInput.setter
    def colorInput(self, value: Texture) -> Texture: ...
    @property
    def colorOutput(self) -> Texture: ...
    @colorOutput.setter
    def colorOutput(self, value: Texture) -> Texture: ...
    @property
    def depth(self) -> Texture: ...
    @depth.setter
    def depth(self, value: Texture) -> Texture: ...
    @property
    def exposureTexture(self) -> Texture: ...
    @exposureTexture.setter
    def exposureTexture(self, value: Texture) -> Texture: ...
    @property
    def motionVectors(self) -> Texture: ...
    @motionVectors.setter
    def motionVectors(self, value: Texture) -> Texture: ...
    @property
    def transparencyMask(self) -> Texture: ...
    @transparencyMask.setter
    def transparencyMask(self, value: Texture) -> Texture: ...


class GraphicsDevice:
    @classmethod
    @property
    def device(cls) -> GraphicsDevice: ...
    @classmethod
    @property
    def version(cls) -> int: ...
    def CreateDebugView(self) -> GraphicsDeviceDebugView: ...
    def CreateFeature(self, cmd: CommandBuffer, initSettings: clr.Reference[DLSSCommandInitializationData]) -> DLSSContext: ...
    def DeleteDebugView(self, debugView: GraphicsDeviceDebugView) -> None: ...
    def DestroyFeature(self, cmd: CommandBuffer, dlssContext: DLSSContext) -> None: ...
    def ExecuteDLSS(self, cmd: CommandBuffer, dlssContext: DLSSContext, textures: clr.Reference[DLSSTextureTable]) -> None: ...
    def GetOptimalSettings(self, targetWidth: int, targetHeight: int, quality: DLSSQuality, optimalSettings: clr.Reference[OptimalDLSSSettingsData]) -> bool: ...
    def IsFeatureAvailable(self, featureID: GraphicsDeviceFeature) -> bool: ...
    def UpdateDebugView(self, debugView: GraphicsDeviceDebugView) -> None: ...
    # Skipped CreateGraphicsDevice due to it being static, abstract and generic.

    CreateGraphicsDevice : CreateGraphicsDevice_MethodGroup
    class CreateGraphicsDevice_MethodGroup:
        @typing.overload
        def __call__(self) -> GraphicsDevice:...
        @typing.overload
        def __call__(self, projectID: str) -> GraphicsDevice:...
        @typing.overload
        def __call__(self, projectID: str, appDir: str) -> GraphicsDevice:...



class GraphicsDeviceDebugView:
    @property
    def deviceVersion(self) -> int: ...
    @property
    def dlssFeatureInfos(self) -> IEnumerable_1[DLSSDebugFeatureInfos]: ...
    @property
    def ngxVersion(self) -> int: ...


class GraphicsDeviceFeature(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DLSS : GraphicsDeviceFeature # 0


class NVUnityPlugin(abc.ABC):
    @staticmethod
    def IsLoaded() -> bool: ...
    @staticmethod
    def Load() -> bool: ...


class OptimalDLSSSettingsData:
    @property
    def maxHeight(self) -> int: ...
    @property
    def maxWidth(self) -> int: ...
    @property
    def minHeight(self) -> int: ...
    @property
    def minWidth(self) -> int: ...
    @property
    def outRenderHeight(self) -> int: ...
    @property
    def outRenderWidth(self) -> int: ...
    @property
    def sharpness(self) -> float: ...

