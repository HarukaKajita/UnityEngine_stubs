import typing
from UnityEngine.SocialPlatforms import IAchievement, IAchievementDescription, ILeaderboard, IScore, Range, TimeScope, UserScope, ILocalUser, IUserProfile, UserState
from System import DateTime, Action_1, Array_1, Action_2
from UnityEngine import Texture2D

class Achievement(IAchievement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, id: str, percent: float) -> None: ...
    @typing.overload
    def __init__(self, id: str, percentCompleted: float, completed: bool, hidden: bool, lastReportedDate: DateTime) -> None: ...
    @property
    def completed(self) -> bool: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def lastReportedDate(self) -> DateTime: ...
    @property
    def percentCompleted(self) -> float: ...
    @percentCompleted.setter
    def percentCompleted(self, value: float) -> float: ...
    def ReportProgress(self, callback: Action_1[bool]) -> None: ...
    def SetCompleted(self, value: bool) -> None: ...
    def SetHidden(self, value: bool) -> None: ...
    def SetLastReportedDate(self, date: DateTime) -> None: ...
    def ToString(self) -> str: ...


class AchievementDescription(IAchievementDescription):
    def __init__(self, id: str, title: str, image: Texture2D, achievedDescription: str, unachievedDescription: str, hidden: bool, points: int) -> None: ...
    @property
    def achievedDescription(self) -> str: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def image(self) -> Texture2D: ...
    @property
    def points(self) -> int: ...
    @property
    def title(self) -> str: ...
    @property
    def unachievedDescription(self) -> str: ...
    def SetImage(self, image: Texture2D) -> None: ...
    def ToString(self) -> str: ...


class Leaderboard(ILeaderboard):
    def __init__(self) -> None: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def loading(self) -> bool: ...
    @property
    def localUserScore(self) -> IScore: ...
    @property
    def maxRange(self) -> int: ...
    @property
    def range(self) -> Range: ...
    @range.setter
    def range(self, value: Range) -> Range: ...
    @property
    def scores(self) -> Array_1[IScore]: ...
    @property
    def timeScope(self) -> TimeScope: ...
    @timeScope.setter
    def timeScope(self, value: TimeScope) -> TimeScope: ...
    @property
    def title(self) -> str: ...
    @property
    def userScope(self) -> UserScope: ...
    @userScope.setter
    def userScope(self, value: UserScope) -> UserScope: ...
    def GetUserFilter(self) -> Array_1[str]: ...
    def LoadScores(self, callback: Action_1[bool]) -> None: ...
    def SetLocalUserScore(self, score: IScore) -> None: ...
    def SetMaxRange(self, maxRange: int) -> None: ...
    def SetScores(self, scores: Array_1[IScore]) -> None: ...
    def SetTitle(self, title: str) -> None: ...
    def SetUserFilter(self, userIDs: Array_1[str]) -> None: ...
    def ToString(self) -> str: ...


class LocalUser(UserProfile, ILocalUser):
    def __init__(self) -> None: ...
    @property
    def authenticated(self) -> bool: ...
    @property
    def friends(self) -> Array_1[IUserProfile]: ...
    @property
    def gameId(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def image(self) -> Texture2D: ...
    @property
    def isFriend(self) -> bool: ...
    @property
    def legacyId(self) -> str: ...
    @property
    def state(self) -> UserState: ...
    @property
    def underage(self) -> bool: ...
    @property
    def userName(self) -> str: ...
    def LoadFriends(self, callback: Action_1[bool]) -> None: ...
    def SetAuthenticated(self, value: bool) -> None: ...
    def SetFriends(self, friends: Array_1[IUserProfile]) -> None: ...
    def SetUnderage(self, value: bool) -> None: ...
    # Skipped Authenticate due to it being static, abstract and generic.

    Authenticate : Authenticate_MethodGroup
    class Authenticate_MethodGroup:
        @typing.overload
        def __call__(self, callback: Action_1[bool]) -> None:...
        @typing.overload
        def __call__(self, callback: Action_2[bool, str]) -> None:...



class Score(IScore):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, leaderboardID: str, value: int) -> None: ...
    @typing.overload
    def __init__(self, leaderboardID: str, value: int, userID: str, date: DateTime, formattedValue: str, rank: int) -> None: ...
    @property
    def date(self) -> DateTime: ...
    @property
    def formattedValue(self) -> str: ...
    @property
    def leaderboardID(self) -> str: ...
    @leaderboardID.setter
    def leaderboardID(self, value: str) -> str: ...
    @property
    def rank(self) -> int: ...
    @property
    def userID(self) -> str: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    def ReportScore(self, callback: Action_1[bool]) -> None: ...
    def SetDate(self, date: DateTime) -> None: ...
    def SetFormattedValue(self, value: str) -> None: ...
    def SetRank(self, rank: int) -> None: ...
    def SetUserID(self, userID: str) -> None: ...
    def ToString(self) -> str: ...


class UserProfile(IUserProfile):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: str, id: str, friend: bool) -> None: ...
    @typing.overload
    def __init__(self, name: str, id: str, friend: bool, state: UserState, image: Texture2D) -> None: ...
    @typing.overload
    def __init__(self, name: str, teamId: str, gameId: str, friend: bool, state: UserState, image: Texture2D) -> None: ...
    @property
    def gameId(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def image(self) -> Texture2D: ...
    @property
    def isFriend(self) -> bool: ...
    @property
    def legacyId(self) -> str: ...
    @property
    def state(self) -> UserState: ...
    @property
    def userName(self) -> str: ...
    def SetImage(self, image: Texture2D) -> None: ...
    def SetIsFriend(self, value: bool) -> None: ...
    def SetLegacyUserID(self, id: str) -> None: ...
    def SetState(self, state: UserState) -> None: ...
    def SetUserGameID(self, id: str) -> None: ...
    def SetUserID(self, id: str) -> None: ...
    def SetUserName(self, name: str) -> None: ...
    def ToString(self) -> str: ...

