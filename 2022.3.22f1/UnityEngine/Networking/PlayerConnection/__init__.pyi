import typing, abc
from System import IDisposable, Guid, Array_1
from UnityEngine.Events import UnityAction_1
from UnityEngine import ScriptableObject, HideFlags

class ConnectionTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ConnectionTarget # 0
    Player : ConnectionTarget # 1
    Editor : ConnectionTarget # 2


class IConnectionState(IDisposable, typing.Protocol):
    @property
    def connectedToTarget(self) -> ConnectionTarget: ...
    @property
    def connectionName(self) -> str: ...


class IEditorPlayerConnection(typing.Protocol):
    @abc.abstractmethod
    def DisconnectAll(self) -> None: ...
    @abc.abstractmethod
    def Register(self, messageId: Guid, callback: UnityAction_1[MessageEventArgs]) -> None: ...
    @abc.abstractmethod
    def RegisterConnection(self, callback: UnityAction_1[int]) -> None: ...
    @abc.abstractmethod
    def RegisterDisconnection(self, callback: UnityAction_1[int]) -> None: ...
    @abc.abstractmethod
    def Send(self, messageId: Guid, data: Array_1[int]) -> None: ...
    @abc.abstractmethod
    def TrySend(self, messageId: Guid, data: Array_1[int]) -> bool: ...
    @abc.abstractmethod
    def Unregister(self, messageId: Guid, callback: UnityAction_1[MessageEventArgs]) -> None: ...
    @abc.abstractmethod
    def UnregisterConnection(self, callback: UnityAction_1[int]) -> None: ...
    @abc.abstractmethod
    def UnregisterDisconnection(self, callback: UnityAction_1[int]) -> None: ...


class MessageEventArgs:
    def __init__(self) -> None: ...
    data : Array_1[int]
    playerId : int


class PlayerConnection(ScriptableObject, IEditorPlayerConnection):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def instance(cls) -> PlayerConnection: ...
    @property
    def isConnected(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def BlockUntilRecvMsg(self, messageId: Guid, timeout: int) -> bool: ...
    def DisconnectAll(self) -> None: ...
    def OnEnable(self) -> None: ...
    def Register(self, messageId: Guid, callback: UnityAction_1[MessageEventArgs]) -> None: ...
    def RegisterConnection(self, callback: UnityAction_1[int]) -> None: ...
    def RegisterDisconnection(self, callback: UnityAction_1[int]) -> None: ...
    def Send(self, messageId: Guid, data: Array_1[int]) -> None: ...
    def TrySend(self, messageId: Guid, data: Array_1[int]) -> bool: ...
    def Unregister(self, messageId: Guid, callback: UnityAction_1[MessageEventArgs]) -> None: ...
    def UnregisterConnection(self, callback: UnityAction_1[int]) -> None: ...
    def UnregisterDisconnection(self, callback: UnityAction_1[int]) -> None: ...

