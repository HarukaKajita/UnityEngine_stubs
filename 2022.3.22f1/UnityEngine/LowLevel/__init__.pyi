import typing
from System import Array_1, MulticastDelegate, IAsyncResult, AsyncCallback
from System.Reflection import MethodInfo

class PlayerLoop:
    def __init__(self) -> None: ...
    @staticmethod
    def GetCurrentPlayerLoop() -> PlayerLoopSystem: ...
    @staticmethod
    def GetDefaultPlayerLoop() -> PlayerLoopSystem: ...
    @staticmethod
    def SetPlayerLoop(loop: PlayerLoopSystem) -> None: ...


class PlayerLoopSystem:
    loopConditionFunction : int
    subSystemList : Array_1[PlayerLoopSystem]
    type : typing.Type[typing.Any]
    updateDelegate : PlayerLoopSystem.UpdateFunction
    updateFunction : int
    def ToString(self) -> str: ...

    class UpdateFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...


