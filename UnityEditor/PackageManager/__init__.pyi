import typing, abc
from UnityEditor.PackageManager.Requests import AddRequest, AddAndRemoveRequest, EmbedRequest, PackRequest, RemoveRequest, ResetToEditorDefaultsRequest, ListRequest, SearchRequest
from System import Array_1, DateTime
from System.Collections.Generic import IEnumerable_1
from System.Reflection import Assembly
from System.Collections.ObjectModel import ReadOnlyCollection_1

class AuthorInfo:
    @property
    def email(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def url(self) -> str: ...


class BuildUtilities(abc.ABC):
    @staticmethod
    def RegisterShouldIncludeInBuildCallback(cb: IShouldIncludeInBuildCallback) -> None: ...


class Client(abc.ABC):
    @classmethod
    @property
    def LogLevel(cls) -> LogLevel: ...
    @classmethod
    @LogLevel.setter
    def LogLevel(cls, value: LogLevel) -> LogLevel: ...
    @staticmethod
    def Add(identifier: str) -> AddRequest: ...
    @staticmethod
    def AddAndRemove(packagesToAdd: Array_1[str] = ..., packagesToRemove: Array_1[str] = ...) -> AddAndRemoveRequest: ...
    @staticmethod
    def Embed(packageName: str) -> EmbedRequest: ...
    @staticmethod
    def Pack(packageFolder: str, targetFolder: str) -> PackRequest: ...
    @staticmethod
    def Remove(packageName: str) -> RemoveRequest: ...
    @staticmethod
    def ResetToEditorDefaults() -> ResetToEditorDefaultsRequest: ...
    @staticmethod
    def Resolve() -> None: ...
    # Skipped List due to it being static, abstract and generic.

    List : List_MethodGroup
    class List_MethodGroup:
        @typing.overload
        def __call__(self) -> ListRequest:...
        @typing.overload
        def __call__(self, offlineMode: bool) -> ListRequest:...
        @typing.overload
        def __call__(self, offlineMode: bool, includeIndirectDependencies: bool) -> ListRequest:...

    # Skipped Search due to it being static, abstract and generic.

    Search : Search_MethodGroup
    class Search_MethodGroup:
        @typing.overload
        def __call__(self, packageIdOrName: str) -> SearchRequest:...
        @typing.overload
        def __call__(self, packageIdOrName: str, offlineMode: bool) -> SearchRequest:...

    # Skipped SearchAll due to it being static, abstract and generic.

    SearchAll : SearchAll_MethodGroup
    class SearchAll_MethodGroup:
        @typing.overload
        def __call__(self) -> SearchRequest:...
        @typing.overload
        def __call__(self, offlineMode: bool) -> SearchRequest:...



class DependencyInfo:
    @property
    def name(self) -> str: ...
    @property
    def version(self) -> str: ...


class Error:
    @property
    def errorCode(self) -> ErrorCode: ...
    @property
    def message(self) -> str: ...


class ErrorCode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : ErrorCode # 0
    NotFound : ErrorCode # 1
    Forbidden : ErrorCode # 2
    InvalidParameter : ErrorCode # 3
    Conflict : ErrorCode # 4
    AggregateError : ErrorCode # 5


class Events(abc.ABC):
    pass


class GitInfo:
    @property
    def hash(self) -> str: ...
    @property
    def revision(self) -> str: ...


class IShouldIncludeInBuildCallback(typing.Protocol):
    @property
    def PackageName(self) -> str: ...
    @abc.abstractmethod
    def ShouldIncludeInBuild(self, path: str) -> bool: ...


class LogLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Error : LogLevel # 0
    Warn : LogLevel # 1
    Info : LogLevel # 2
    Verbose : LogLevel # 3
    Debug : LogLevel # 4
    Silly : LogLevel # 5


class PackageCollection(IEnumerable_1[PackageInfo]):
    @property
    def error(self) -> Error: ...


class PackageInfo:
    @property
    def assetPath(self) -> str: ...
    @property
    def author(self) -> AuthorInfo: ...
    @property
    def category(self) -> str: ...
    @property
    def changelogUrl(self) -> str: ...
    @property
    def datePublished(self) -> typing.Optional[DateTime]: ...
    @property
    def dependencies(self) -> Array_1[DependencyInfo]: ...
    @property
    def deprecationMessage(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def displayName(self) -> str: ...
    @property
    def documentationUrl(self) -> str: ...
    @property
    def errors(self) -> Array_1[Error]: ...
    @property
    def git(self) -> GitInfo: ...
    @property
    def isDeprecated(self) -> bool: ...
    @property
    def isDirectDependency(self) -> bool: ...
    @property
    def keywords(self) -> Array_1[str]: ...
    @property
    def licensesUrl(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def packageId(self) -> str: ...
    @property
    def registry(self) -> RegistryInfo: ...
    @property
    def repository(self) -> RepositoryInfo: ...
    @property
    def resolvedDependencies(self) -> Array_1[DependencyInfo]: ...
    @property
    def resolvedPath(self) -> str: ...
    @property
    def source(self) -> PackageSource: ...
    @property
    def status(self) -> PackageStatus: ...
    @property
    def type(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def versions(self) -> VersionsInfo: ...
    @staticmethod
    def FindForAssembly(assembly: Assembly) -> PackageInfo: ...
    @staticmethod
    def FindForAssetPath(assetPath: str) -> PackageInfo: ...
    @staticmethod
    def GetAllRegisteredPackages() -> Array_1[PackageInfo]: ...


class PackageRegistrationEventArgs:
    @property
    def added(self) -> ReadOnlyCollection_1[PackageInfo]: ...
    @added.setter
    def added(self, value: ReadOnlyCollection_1[PackageInfo]) -> ReadOnlyCollection_1[PackageInfo]: ...
    @property
    def changedFrom(self) -> ReadOnlyCollection_1[PackageInfo]: ...
    @changedFrom.setter
    def changedFrom(self, value: ReadOnlyCollection_1[PackageInfo]) -> ReadOnlyCollection_1[PackageInfo]: ...
    @property
    def changedTo(self) -> ReadOnlyCollection_1[PackageInfo]: ...
    @changedTo.setter
    def changedTo(self, value: ReadOnlyCollection_1[PackageInfo]) -> ReadOnlyCollection_1[PackageInfo]: ...
    @property
    def removed(self) -> ReadOnlyCollection_1[PackageInfo]: ...
    @removed.setter
    def removed(self, value: ReadOnlyCollection_1[PackageInfo]) -> ReadOnlyCollection_1[PackageInfo]: ...


class PackageSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : PackageSource # 0
    Registry : PackageSource # 1
    BuiltIn : PackageSource # 2
    Embedded : PackageSource # 3
    Local : PackageSource # 4
    Git : PackageSource # 5
    LocalTarball : PackageSource # 6


class PackageStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : PackageStatus # 0
    Unavailable : PackageStatus # 1
    InProgress : PackageStatus # 2
    Error : PackageStatus # 3
    Available : PackageStatus # 4


class PackOperationResult:
    @property
    def tarballPath(self) -> str: ...


class RegistryInfo:
    @property
    def isDefault(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def url(self) -> str: ...


class RepositoryInfo:
    @property
    def path(self) -> str: ...
    @property
    def revision(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def url(self) -> str: ...


class StatusCode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InProgress : StatusCode # 0
    Success : StatusCode # 1
    Failure : StatusCode # 2


class VersionsInfo:
    @property
    def all(self) -> Array_1[str]: ...
    @property
    def compatible(self) -> Array_1[str]: ...
    @property
    def deprecated(self) -> Array_1[str]: ...
    @property
    def latest(self) -> str: ...
    @property
    def latestCompatible(self) -> str: ...
    @property
    def recommended(self) -> str: ...
    @property
    def verified(self) -> str: ...

