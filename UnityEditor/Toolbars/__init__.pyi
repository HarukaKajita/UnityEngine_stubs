import typing, abc
from UnityEditor.UIElements import ToolbarButton, ToolbarToggle
from System import Action, Action_1, Attribute, Array_1
from UnityEngine import Texture2D, Rect, Matrix4x4
from UnityEngine.UIElements import IBinding, Clickable, VisualElement, ICustomStyle, ITextElementExperimentalFeatures, IExperimentalFeatures, FocusController, MeshGenerationContext, LanguageDirection, IPanel, PickingMode, IResolvedStyle, IVisualElementScheduler, ITextSelection, IStyle, VisualElementStyleSheetSet, ITransform, UsageHints, VisualTreeAsset, BaseField_1, Label
from UnityEditor import EditorWindow

class EditorToolbarButton(ToolbarButton):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, clickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, icon: Texture2D, clickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, text: str, clickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: Texture2D, clickEvent: Action) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def clickable(self) -> Clickable: ...
    @clickable.setter
    def clickable(self, value: Clickable) -> Clickable: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def icon(self) -> Texture2D: ...
    @icon.setter
    def icon(self, value: Texture2D) -> Texture2D: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class EditorToolbarDropdown(EditorToolbarButton):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, clickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, icon: Texture2D, clickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, text: str, clickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: Texture2D, clickEvent: Action) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def clickable(self) -> Clickable: ...
    @clickable.setter
    def clickable(self, value: Clickable) -> Clickable: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def icon(self) -> Texture2D: ...
    @icon.setter
    def icon(self, value: Texture2D) -> Texture2D: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class EditorToolbarDropdownToggle(BaseField_1[bool]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, dropdownClickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, icon: Texture2D, dropdownClickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, text: str, dropdownClickEvent: Action) -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: Texture2D, dropdownClickEvent: Action) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def dropdownClickable(self) -> Clickable: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def icon(self) -> Texture2D: ...
    @icon.setter
    def icon(self, value: Texture2D) -> Texture2D: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: bool) -> None: ...
    def ShowDropDown(self, show: bool) -> None: ...


class EditorToolbarElementAttribute(Attribute):
    def __init__(self, id: str, targetWindows: Array_1[typing.Type[typing.Any]]) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def targetWindows(self) -> Array_1[typing.Type[typing.Any]]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class EditorToolbarToggle(ToolbarToggle):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, icon: Texture2D) -> None: ...
    @typing.overload
    def __init__(self, onIcon: Texture2D, offIcon: Texture2D) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    @typing.overload
    def __init__(self, text: str, onIcon: Texture2D, offIcon: Texture2D) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def icon(self) -> Texture2D: ...
    @icon.setter
    def icon(self, value: Texture2D) -> Texture2D: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def offIcon(self) -> Texture2D: ...
    @offIcon.setter
    def offIcon(self, value: Texture2D) -> Texture2D: ...
    @property
    def onIcon(self) -> Texture2D: ...
    @onIcon.setter
    def onIcon(self, value: Texture2D) -> Texture2D: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: bool) -> None: ...


class EditorToolbarUtility(abc.ABC):
    @staticmethod
    def SetupChildrenAsButtonStrip(root: VisualElement) -> None: ...


class IAccessContainerWindow(typing.Protocol):
    @property
    def containerWindow(self) -> EditorWindow: ...
    @containerWindow.setter
    def containerWindow(self, value: EditorWindow) -> EditorWindow: ...

