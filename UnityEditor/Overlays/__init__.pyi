import typing, abc
from System.Collections.Generic import IEnumerable_1
from UnityEngine import Texture2D, Vector2, ISerializationCallbackReceiver, Rect, Matrix4x4
from UnityEditor import EditorWindow
from UnityEngine.UIElements import VisualElement, ICustomStyle, IExperimentalFeatures, FocusController, MeshGenerationContext, LanguageDirection, IPanel, PickingMode, IResolvedStyle, IVisualElementScheduler, IStyle, VisualElementStyleSheetSet, ITransform, UsageHints, VisualTreeAsset
from System import Attribute, Action_1

class DockPosition(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Top : DockPosition # 0
    Bottom : DockPosition # 1


class DockZone(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LeftToolbar : DockZone # 0
    RightToolbar : DockZone # 1
    TopToolbar : DockZone # 2
    BottomToolbar : DockZone # 3
    LeftColumn : DockZone # 4
    RightColumn : DockZone # 5
    Floating : DockZone # 6


class ICreateHorizontalToolbar(typing.Protocol):
    @abc.abstractmethod
    def CreateHorizontalToolbarContent(self) -> OverlayToolbar: ...


class ICreateToolbar(typing.Protocol):
    @property
    def toolbarElements(self) -> IEnumerable_1[str]: ...


class ICreateVerticalToolbar(typing.Protocol):
    @abc.abstractmethod
    def CreateVerticalToolbarContent(self) -> OverlayToolbar: ...


class IMGUIOverlay(Overlay):
    @property
    def collapsed(self) -> bool: ...
    @collapsed.setter
    def collapsed(self, value: bool) -> bool: ...
    @property
    def collapsedIcon(self) -> None: ...
    @collapsedIcon.setter
    def collapsedIcon(self, value: Texture2D) -> None: ...
    @property
    def containerWindow(self) -> EditorWindow: ...
    @property
    def displayed(self) -> bool: ...
    @displayed.setter
    def displayed(self, value: bool) -> bool: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def floating(self) -> bool: ...
    @floating.setter
    def floating(self, value: bool) -> bool: ...
    @property
    def floatingPosition(self) -> Vector2: ...
    @floatingPosition.setter
    def floatingPosition(self, value: Vector2) -> Vector2: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def isInToolbar(self) -> bool: ...
    @property
    def layout(self) -> Layout: ...
    @layout.setter
    def layout(self, value: Layout) -> Layout: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def size(self) -> Vector2: ...
    @size.setter
    def size(self, value: Vector2) -> Vector2: ...
    def CreatePanelContent(self) -> VisualElement: ...
    @abc.abstractmethod
    def OnGUI(self) -> None: ...


class ISupportsOverlays(typing.Protocol):
    pass


class ITransientOverlay(typing.Protocol):
    @property
    def visible(self) -> bool: ...


class Layout(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HorizontalToolbar : Layout # 1
    VerticalToolbar : Layout # 2
    Panel : Layout # 4
    All : Layout # 7


class Overlay(abc.ABC):
    ussClassName : str
    @property
    def collapsed(self) -> bool: ...
    @collapsed.setter
    def collapsed(self, value: bool) -> bool: ...
    @property
    def collapsedIcon(self) -> None: ...
    @collapsedIcon.setter
    def collapsedIcon(self, value: Texture2D) -> None: ...
    @property
    def containerWindow(self) -> EditorWindow: ...
    @property
    def displayed(self) -> bool: ...
    @displayed.setter
    def displayed(self, value: bool) -> bool: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def floating(self) -> bool: ...
    @floating.setter
    def floating(self, value: bool) -> bool: ...
    @property
    def floatingPosition(self) -> Vector2: ...
    @floatingPosition.setter
    def floatingPosition(self, value: Vector2) -> Vector2: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def isInToolbar(self) -> bool: ...
    @property
    def layout(self) -> Layout: ...
    @layout.setter
    def layout(self, value: Layout) -> Layout: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def size(self) -> Vector2: ...
    @size.setter
    def size(self, value: Vector2) -> Vector2: ...
    def Close(self) -> None: ...
    def CreateContent(self, requestedLayout: Layout) -> VisualElement: ...
    @abc.abstractmethod
    def CreatePanelContent(self) -> VisualElement: ...
    def OnCreated(self) -> None: ...
    def OnWillBeDestroyed(self) -> None: ...
    def Undock(self) -> None: ...


class OverlayAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, editorWindowType: typing.Type[typing.Any], displayName: str, defaultDisplay: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, editorWindowType: typing.Type[typing.Any], id: str, displayName: str, defaultDisplay: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, editorWindowType: typing.Type[typing.Any], id: str, displayName: str, ussName: str, defaultDisplay: bool = ...) -> None: ...
    @property
    def defaultDisplay(self) -> bool: ...
    @defaultDisplay.setter
    def defaultDisplay(self, value: bool) -> bool: ...
    @property
    def defaultDockIndex(self) -> int: ...
    @defaultDockIndex.setter
    def defaultDockIndex(self, value: int) -> int: ...
    @property
    def defaultDockPosition(self) -> DockPosition: ...
    @defaultDockPosition.setter
    def defaultDockPosition(self, value: DockPosition) -> DockPosition: ...
    @property
    def defaultDockZone(self) -> DockZone: ...
    @defaultDockZone.setter
    def defaultDockZone(self, value: DockZone) -> DockZone: ...
    @property
    def defaultLayout(self) -> Layout: ...
    @defaultLayout.setter
    def defaultLayout(self, value: Layout) -> Layout: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def editorWindowType(self) -> typing.Type[typing.Any]: ...
    @editorWindowType.setter
    def editorWindowType(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def ussName(self) -> str: ...
    @ussName.setter
    def ussName(self, value: str) -> str: ...


class OverlayCanvas(ISerializationCallbackReceiver):
    def OnAfterDeserialize(self) -> None: ...
    def OnBeforeSerialize(self) -> None: ...
    def Remove(self, overlay: Overlay) -> bool: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, overlay: Overlay) -> None:...
        @typing.overload
        def __call__(self, overlay: Overlay, show: bool) -> None:...



class OverlayToolbar(VisualElement):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetupChildrenAsButtonStrip(self) -> None: ...


class ToolbarOverlay(Overlay, ICreateToolbar):
    @property
    def collapsed(self) -> bool: ...
    @collapsed.setter
    def collapsed(self, value: bool) -> bool: ...
    @property
    def collapsedIcon(self) -> None: ...
    @collapsedIcon.setter
    def collapsedIcon(self, value: Texture2D) -> None: ...
    @property
    def containerWindow(self) -> EditorWindow: ...
    @property
    def displayed(self) -> bool: ...
    @displayed.setter
    def displayed(self, value: bool) -> bool: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def floating(self) -> bool: ...
    @floating.setter
    def floating(self, value: bool) -> bool: ...
    @property
    def floatingPosition(self) -> Vector2: ...
    @floatingPosition.setter
    def floatingPosition(self, value: Vector2) -> Vector2: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def isInToolbar(self) -> bool: ...
    @property
    def layout(self) -> Layout: ...
    @layout.setter
    def layout(self, value: Layout) -> Layout: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def size(self) -> Vector2: ...
    @size.setter
    def size(self, value: Vector2) -> Vector2: ...
    @property
    def toolbarElements(self) -> IEnumerable_1[str]: ...
    def CreateHorizontalToolbarContent(self) -> VisualElement: ...
    def CreatePanelContent(self) -> VisualElement: ...
    def CreateVerticalToolbarContent(self) -> VisualElement: ...

