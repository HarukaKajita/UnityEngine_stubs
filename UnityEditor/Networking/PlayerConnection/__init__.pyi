import typing, abc
from UnityEditor import ScriptableSingleton_1, EditorWindow
from UnityEngine.Networking.PlayerConnection import IEditorPlayerConnection, MessageEventArgs, IConnectionState
from System.Collections.Generic import List_1
from UnityEngine import HideFlags, Rect, GUIStyle
from System import Guid, Array_1, Action_1
from UnityEngine.Events import UnityAction_1

class ConnectedPlayer:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, playerId: int) -> None: ...
    @typing.overload
    def __init__(self, playerId: int, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def playerId(self) -> int: ...
    @property
    def PlayerId(self) -> int: ...


class EditorConnection(ScriptableSingleton_1[EditorConnection], IEditorPlayerConnection):
    def __init__(self) -> None: ...
    @property
    def ConnectedPlayers(self) -> List_1[ConnectedPlayer]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def DisconnectAll(self) -> None: ...
    def Initialize(self) -> None: ...
    def Register(self, messageId: Guid, callback: UnityAction_1[MessageEventArgs]) -> None: ...
    def RegisterConnection(self, callback: UnityAction_1[int]) -> None: ...
    def RegisterDisconnection(self, callback: UnityAction_1[int]) -> None: ...
    def Unregister(self, messageId: Guid, callback: UnityAction_1[MessageEventArgs]) -> None: ...
    def UnregisterConnection(self, callback: UnityAction_1[int]) -> None: ...
    def UnregisterDisconnection(self, callback: UnityAction_1[int]) -> None: ...
    # Skipped Send due to it being static, abstract and generic.

    Send : Send_MethodGroup
    class Send_MethodGroup:
        @typing.overload
        def __call__(self, messageId: Guid, data: Array_1[int]) -> None:...
        @typing.overload
        def __call__(self, messageId: Guid, data: Array_1[int], playerId: int) -> None:...

    # Skipped TrySend due to it being static, abstract and generic.

    TrySend : TrySend_MethodGroup
    class TrySend_MethodGroup:
        @typing.overload
        def __call__(self, messageId: Guid, data: Array_1[int]) -> bool:...
        @typing.overload
        def __call__(self, messageId: Guid, data: Array_1[int], playerId: int) -> bool:...



class PlayerConnectionGUI(abc.ABC):
    @staticmethod
    def ConnectionTargetSelectionDropdown(rect: Rect, state: IConnectionState, style: GUIStyle = ...) -> None: ...


class PlayerConnectionGUILayout(abc.ABC):
    @staticmethod
    def ConnectionTargetSelectionDropdown(state: IConnectionState, style: GUIStyle = ..., maxWidth: int = ...) -> None: ...


class PlayerConnectionGUIUtility(abc.ABC):
    @staticmethod
    def GetConnectionState(parentWindow: EditorWindow, connectedCallback: Action_1[str] = ...) -> IConnectionState: ...

