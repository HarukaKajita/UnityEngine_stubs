import typing, abc
from System import Attribute, Action_2, Action_1, Guid, Array_1, Func_4
from UnityEngine import Object
from UnityEditor import HierarchyProperty, GlobalObjectId
from System.Collections.Generic import IEnumerable_1

class AdvancedObjectSelectorAttribute(Attribute):
    @typing.overload
    def __init__(self, id: str, defaultPriority: int, defaultActive: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, displayName: str, defaultPriority: int, defaultActive: bool = ...) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class AdvancedObjectSelectorEventType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BeginSession : AdvancedObjectSelectorEventType # 0
    EndSession : AdvancedObjectSelectorEventType # 1
    OpenAndSearch : AdvancedObjectSelectorEventType # 2
    SetSearchFilter : AdvancedObjectSelectorEventType # 3


class AdvancedObjectSelectorParameters:
    @property
    def context(self) -> ObjectSelectorSearchContext: ...
    @property
    def searchFilter(self) -> str: ...
    @property
    def selectorClosedHandler(self) -> Action_2[Object, bool]: ...
    @property
    def trackingHandler(self) -> Action_1[Object]: ...


class AdvancedObjectSelectorValidatorAttribute(Attribute):
    def __init__(self, id: str) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class IFilterEngine_GenericClasses(abc.ABCMeta):
    Generic_IFilterEngine_GenericClasses_IFilterEngine_1_T = typing.TypeVar('Generic_IFilterEngine_GenericClasses_IFilterEngine_1_T')
    def __getitem__(self, types : typing.Type[Generic_IFilterEngine_GenericClasses_IFilterEngine_1_T]) -> typing.Type[IFilterEngine_1[Generic_IFilterEngine_GenericClasses_IFilterEngine_1_T]]: ...

IFilterEngine : IFilterEngine_GenericClasses

IFilterEngine_1_T = typing.TypeVar('IFilterEngine_1_T', contravariant=True)
class IFilterEngine_1(typing.Generic[IFilterEngine_1_T], ISearchEngineBase, typing.Protocol):
    @abc.abstractmethod
    def Filter(self, context: ISearchContext, query: str, objectToFilter: IFilterEngine_1_T) -> bool: ...


class IObjectSelectorEngine(ISelectorEngine, typing.Protocol):
    pass


class IProjectSearchEngine(ISearchEngine_1[str], typing.Protocol):
    pass


class ISceneSearchEngine(IFilterEngine_1[HierarchyProperty], typing.Protocol):
    pass


class ISearchContext(typing.Protocol):
    @property
    def engineScope(self) -> SearchEngineScope: ...
    @property
    def guid(self) -> Guid: ...
    @property
    def requiredTypeNames(self) -> IEnumerable_1[str]: ...
    @property
    def requiredTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...


class ISearchEngine_GenericClasses(abc.ABCMeta):
    Generic_ISearchEngine_GenericClasses_ISearchEngine_1_T = typing.TypeVar('Generic_ISearchEngine_GenericClasses_ISearchEngine_1_T')
    def __getitem__(self, types : typing.Type[Generic_ISearchEngine_GenericClasses_ISearchEngine_1_T]) -> typing.Type[ISearchEngine_1[Generic_ISearchEngine_GenericClasses_ISearchEngine_1_T]]: ...

ISearchEngine : ISearchEngine_GenericClasses

ISearchEngine_1_T = typing.TypeVar('ISearchEngine_1_T')
class ISearchEngine_1(typing.Generic[ISearchEngine_1_T], ISearchEngineBase, typing.Protocol):
    @abc.abstractmethod
    def Search(self, context: ISearchContext, query: str, asyncItemsReceived: Action_1[IEnumerable_1[ISearchEngine_1_T]]) -> IEnumerable_1[ISearchEngine_1_T]: ...


class ISearchEngineBase(typing.Protocol):
    @property
    def name(self) -> str: ...
    @abc.abstractmethod
    def BeginSearch(self, context: ISearchContext, query: str) -> None: ...
    @abc.abstractmethod
    def BeginSession(self, context: ISearchContext) -> None: ...
    @abc.abstractmethod
    def EndSearch(self, context: ISearchContext) -> None: ...
    @abc.abstractmethod
    def EndSession(self, context: ISearchContext) -> None: ...


class ISelectorEngine(ISearchEngineBase, typing.Protocol):
    @abc.abstractmethod
    def SelectObject(self, context: ISearchContext, onObjectSelectorClosed: Action_2[Object, bool], onObjectSelectedUpdated: Action_1[Object]) -> bool: ...
    @abc.abstractmethod
    def SetSearchFilter(self, context: ISearchContext, searchFilter: str) -> None: ...


class ObjectSelector(abc.ABC):
    EngineScope : SearchEngineScope
    @staticmethod
    def RegisterEngine(engine: IObjectSelectorEngine) -> None: ...
    @staticmethod
    def UnregisterEngine(engine: IObjectSelectorEngine) -> None: ...


class ObjectSelectorEngineAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ObjectSelectorHandlerAttribute(Attribute):
    def __init__(self, attributeType: typing.Type[typing.Any]) -> None: ...
    @property
    def attributeType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ObjectSelectorSearch(abc.ABC):
    EngineScope : SearchEngineScope
    @staticmethod
    def RegisterEngine(engine: IObjectSelectorEngine) -> None: ...
    @staticmethod
    def UnregisterEngine(engine: IObjectSelectorEngine) -> None: ...


class ObjectSelectorSearchContext(ISearchContext):
    def __init__(self) -> None: ...
    @property
    def allowedInstanceIds(self) -> IEnumerable_1[int]: ...
    @allowedInstanceIds.setter
    def allowedInstanceIds(self, value: IEnumerable_1[int]) -> IEnumerable_1[int]: ...
    @property
    def currentObject(self) -> Object: ...
    @currentObject.setter
    def currentObject(self, value: Object) -> Object: ...
    @property
    def editedObjects(self) -> Array_1[Object]: ...
    @editedObjects.setter
    def editedObjects(self, value: Array_1[Object]) -> Array_1[Object]: ...
    @property
    def engineScope(self) -> SearchEngineScope: ...
    @engineScope.setter
    def engineScope(self, value: SearchEngineScope) -> SearchEngineScope: ...
    @property
    def guid(self) -> Guid: ...
    @property
    def requiredTypeNames(self) -> IEnumerable_1[str]: ...
    @requiredTypeNames.setter
    def requiredTypeNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def requiredTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    @requiredTypes.setter
    def requiredTypes(self, value: IEnumerable_1[typing.Type[typing.Any]]) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    @property
    def selectorConstraint(self) -> Func_4[ObjectSelectorTargetInfo, Array_1[Object], ObjectSelectorSearchContext, bool]: ...
    @selectorConstraint.setter
    def selectorConstraint(self, value: Func_4[ObjectSelectorTargetInfo, Array_1[Object], ObjectSelectorSearchContext, bool]) -> Func_4[ObjectSelectorTargetInfo, Array_1[Object], ObjectSelectorSearchContext, bool]: ...
    @property
    def visibleObjects(self) -> VisibleObjects: ...
    @visibleObjects.setter
    def visibleObjects(self, value: VisibleObjects) -> VisibleObjects: ...


class ObjectSelectorTargetInfo:
    def __init__(self, globalObjectId: GlobalObjectId, targetObject: Object = ..., type: typing.Type[typing.Any] = ...) -> None: ...
    @property
    def globalObjectId(self) -> GlobalObjectId: ...
    @property
    def targetObject(self) -> Object: ...
    @property
    def type(self) -> typing.Type[typing.Any]: ...
    def LoadObject(self) -> Object: ...


class Project(abc.ABC):
    EngineScope : SearchEngineScope
    @staticmethod
    def RegisterEngine(engine: IProjectSearchEngine) -> None: ...
    @staticmethod
    def UnregisterEngine(engine: IProjectSearchEngine) -> None: ...


class ProjectSearch(abc.ABC):
    EngineScope : SearchEngineScope
    @staticmethod
    def RegisterEngine(engine: IProjectSearchEngine) -> None: ...
    @staticmethod
    def UnregisterEngine(engine: IProjectSearchEngine) -> None: ...


class ProjectSearchContext(ISearchContext):
    def __init__(self) -> None: ...
    @property
    def engineScope(self) -> SearchEngineScope: ...
    @engineScope.setter
    def engineScope(self, value: SearchEngineScope) -> SearchEngineScope: ...
    @property
    def guid(self) -> Guid: ...
    @property
    def requiredTypeNames(self) -> IEnumerable_1[str]: ...
    @requiredTypeNames.setter
    def requiredTypeNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def requiredTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    @requiredTypes.setter
    def requiredTypes(self, value: IEnumerable_1[typing.Type[typing.Any]]) -> IEnumerable_1[typing.Type[typing.Any]]: ...


class ProjectSearchEngineAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class Scene(abc.ABC):
    EngineScope : SearchEngineScope
    @staticmethod
    def RegisterEngine(engine: ISceneSearchEngine) -> None: ...
    @staticmethod
    def UnregisterEngine(engine: ISceneSearchEngine) -> None: ...


class SceneSearch(abc.ABC):
    EngineScope : SearchEngineScope
    @staticmethod
    def RegisterEngine(engine: ISceneSearchEngine) -> None: ...
    @staticmethod
    def UnregisterEngine(engine: ISceneSearchEngine) -> None: ...


class SceneSearchContext(ISearchContext):
    def __init__(self) -> None: ...
    @property
    def engineScope(self) -> SearchEngineScope: ...
    @engineScope.setter
    def engineScope(self, value: SearchEngineScope) -> SearchEngineScope: ...
    @property
    def guid(self) -> Guid: ...
    @property
    def requiredTypeNames(self) -> IEnumerable_1[str]: ...
    @requiredTypeNames.setter
    def requiredTypeNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def requiredTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    @requiredTypes.setter
    def requiredTypes(self, value: IEnumerable_1[typing.Type[typing.Any]]) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    @property
    def rootProperty(self) -> HierarchyProperty: ...
    @rootProperty.setter
    def rootProperty(self, value: HierarchyProperty) -> HierarchyProperty: ...


class SceneSearchEngineAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class SearchEngineScope(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Scene : SearchEngineScope # 0
    Project : SearchEngineScope # 1
    ObjectSelector : SearchEngineScope # 2


class VisibleObjects(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : VisibleObjects # 0
    Assets : VisibleObjects # 1
    Scene : VisibleObjects # 2
    All : VisibleObjects # 3

