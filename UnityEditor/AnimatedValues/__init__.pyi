import typing, abc
from UnityEngine.Events import UnityAction, UnityEvent
from UnityEngine import Quaternion, Vector3, ISerializationCallbackReceiver

class AnimBool(BaseAnimValueNonAlloc_1[bool]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, callback: UnityAction) -> None: ...
    @typing.overload
    def __init__(self, value: bool) -> None: ...
    @typing.overload
    def __init__(self, value: bool, callback: UnityAction) -> None: ...
    speed : float
    valueChanged : UnityEvent
    @property
    def faded(self) -> float: ...
    @property
    def isAnimating(self) -> bool: ...
    @property
    def target(self) -> bool: ...
    @target.setter
    def target(self, value: bool) -> bool: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    def Fade(self, from_: float, to: float) -> float: ...


class AnimFloat(BaseAnimValueNonAlloc_1[float]):
    @typing.overload
    def __init__(self, value: float) -> None: ...
    @typing.overload
    def __init__(self, value: float, callback: UnityAction) -> None: ...
    speed : float
    valueChanged : UnityEvent
    @property
    def isAnimating(self) -> bool: ...
    @property
    def target(self) -> float: ...
    @target.setter
    def target(self, value: float) -> float: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...


class AnimQuaternion(BaseAnimValueNonAlloc_1[Quaternion]):
    @typing.overload
    def __init__(self, value: Quaternion) -> None: ...
    @typing.overload
    def __init__(self, value: Quaternion, callback: UnityAction) -> None: ...
    speed : float
    valueChanged : UnityEvent
    @property
    def isAnimating(self) -> bool: ...
    @property
    def target(self) -> Quaternion: ...
    @target.setter
    def target(self, value: Quaternion) -> Quaternion: ...
    @property
    def value(self) -> Quaternion: ...
    @value.setter
    def value(self, value: Quaternion) -> Quaternion: ...


class AnimVector3(BaseAnimValueNonAlloc_1[Vector3]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, value: Vector3) -> None: ...
    @typing.overload
    def __init__(self, value: Vector3, callback: UnityAction) -> None: ...
    speed : float
    valueChanged : UnityEvent
    @property
    def isAnimating(self) -> bool: ...
    @property
    def target(self) -> Vector3: ...
    @target.setter
    def target(self, value: Vector3) -> Vector3: ...
    @property
    def value(self) -> Vector3: ...
    @value.setter
    def value(self, value: Vector3) -> Vector3: ...


class BaseAnimValue_GenericClasses(abc.ABCMeta):
    Generic_BaseAnimValue_GenericClasses_BaseAnimValue_1_T = typing.TypeVar('Generic_BaseAnimValue_GenericClasses_BaseAnimValue_1_T')
    def __getitem__(self, types : typing.Type[Generic_BaseAnimValue_GenericClasses_BaseAnimValue_1_T]) -> typing.Type[BaseAnimValue_1[Generic_BaseAnimValue_GenericClasses_BaseAnimValue_1_T]]: ...

BaseAnimValue : BaseAnimValue_GenericClasses

BaseAnimValue_1_T = typing.TypeVar('BaseAnimValue_1_T')
class BaseAnimValue_1(typing.Generic[BaseAnimValue_1_T], ISerializationCallbackReceiver, abc.ABC):
    speed : float
    valueChanged : UnityEvent
    @property
    def isAnimating(self) -> bool: ...
    @property
    def target(self) -> BaseAnimValue_1_T: ...
    @target.setter
    def target(self, value: BaseAnimValue_1_T) -> BaseAnimValue_1_T: ...
    @property
    def value(self) -> BaseAnimValue_1_T: ...
    @value.setter
    def value(self, value: BaseAnimValue_1_T) -> BaseAnimValue_1_T: ...


class BaseAnimValueNonAlloc_GenericClasses(abc.ABCMeta):
    Generic_BaseAnimValueNonAlloc_GenericClasses_BaseAnimValueNonAlloc_1_T = typing.TypeVar('Generic_BaseAnimValueNonAlloc_GenericClasses_BaseAnimValueNonAlloc_1_T')
    def __getitem__(self, types : typing.Type[Generic_BaseAnimValueNonAlloc_GenericClasses_BaseAnimValueNonAlloc_1_T]) -> typing.Type[BaseAnimValueNonAlloc_1[Generic_BaseAnimValueNonAlloc_GenericClasses_BaseAnimValueNonAlloc_1_T]]: ...

BaseAnimValueNonAlloc : BaseAnimValueNonAlloc_GenericClasses

BaseAnimValueNonAlloc_1_T = typing.TypeVar('BaseAnimValueNonAlloc_1_T')
class BaseAnimValueNonAlloc_1(typing.Generic[BaseAnimValueNonAlloc_1_T], BaseAnimValue_1[BaseAnimValueNonAlloc_1_T]):
    speed : float
    valueChanged : UnityEvent
    @property
    def isAnimating(self) -> bool: ...
    @property
    def target(self) -> BaseAnimValueNonAlloc_1_T: ...
    @target.setter
    def target(self, value: BaseAnimValueNonAlloc_1_T) -> BaseAnimValueNonAlloc_1_T: ...
    @property
    def value(self) -> BaseAnimValueNonAlloc_1_T: ...
    @value.setter
    def value(self, value: BaseAnimValueNonAlloc_1_T) -> BaseAnimValueNonAlloc_1_T: ...

