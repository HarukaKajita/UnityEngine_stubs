import typing, clr, abc
from System import Func_1, Array_1, IDisposable
from System.Collections.Generic import IEnumerable_1
from System.Collections.ObjectModel import ReadOnlyCollection_1
from UnityEditor import BuildTargetGroup, BuildTarget
from System.Runtime.Serialization import ISerializable, SerializationInfo, StreamingContext
from UnityEngine import Hash128

class PlayerBuildInterface(abc.ABC):
    ExtraTypesProvider : Func_1[IEnumerable_1[str]]
    @staticmethod
    def CompilePlayerScripts(input: ScriptCompilationSettings, outputFolder: str) -> ScriptCompilationResult: ...


class ScriptCompilationOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ScriptCompilationOptions # 0
    DevelopmentBuild : ScriptCompilationOptions # 1
    Assertions : ScriptCompilationOptions # 2


class ScriptCompilationResult:
    @property
    def assemblies(self) -> ReadOnlyCollection_1[str]: ...
    @property
    def typeDB(self) -> TypeDB: ...


class ScriptCompilationSettings:
    @property
    def extraScriptingDefines(self) -> Array_1[str]: ...
    @extraScriptingDefines.setter
    def extraScriptingDefines(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def group(self) -> BuildTargetGroup: ...
    @group.setter
    def group(self, value: BuildTargetGroup) -> BuildTargetGroup: ...
    @property
    def options(self) -> ScriptCompilationOptions: ...
    @options.setter
    def options(self, value: ScriptCompilationOptions) -> ScriptCompilationOptions: ...
    @property
    def subtarget(self) -> int: ...
    @subtarget.setter
    def subtarget(self, value: int) -> int: ...
    @property
    def target(self) -> BuildTarget: ...
    @target.setter
    def target(self, value: BuildTarget) -> BuildTarget: ...


class TypeDB(IDisposable, ISerializable):
    def Dispose(self) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHash128(self) -> Hash128: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class TypeDbHelper(abc.ABC):
    @staticmethod
    def TryGet(path: str, typeDb: clr.Reference[TypeDB]) -> bool: ...

