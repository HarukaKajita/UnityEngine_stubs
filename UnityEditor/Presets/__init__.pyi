import typing, abc
from UnityEngine import HideFlags, Object, Vector2, Rect, GUIContent, ScriptableObject
from System import Array_1, IEquatable_1
from UnityEditor import PropertyModification, EditorWindow, IDataModeController
from UnityEditor.Overlays import OverlayCanvas
from UnityEngine.UIElements import VisualElement

class DefaultPreset:
    @typing.overload
    def __init__(self, filter: str, preset: Preset) -> None: ...
    @typing.overload
    def __init__(self, filter: str, preset: Preset, enabled: bool) -> None: ...
    m_Filter : str
    m_Preset : Preset
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def filter(self) -> str: ...
    @filter.setter
    def filter(self, value: str) -> str: ...
    @property
    def preset(self) -> Preset: ...
    @preset.setter
    def preset(self, value: Preset) -> Preset: ...


class DefaultPresetSelectorReceiver(PresetSelectorReceiver):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def OnSelectionChanged(self, selection: Preset) -> None: ...
    def OnSelectionClosed(self, selection: Preset) -> None: ...


class Preset(Object):
    def __init__(self, source: Object) -> None: ...
    @property
    def excludedProperties(self) -> Array_1[str]: ...
    @excludedProperties.setter
    def excludedProperties(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def PropertyModifications(self) -> Array_1[PropertyModification]: ...
    def CanBeAppliedTo(self, target: Object) -> bool: ...
    def DataEquals(self, target: Object) -> bool: ...
    @staticmethod
    def GetAllDefaultTypes() -> Array_1[PresetType]: ...
    @staticmethod
    def GetDefaultForObject(target: Object) -> Preset: ...
    @staticmethod
    def GetDefaultForPreset(preset: Preset) -> Preset: ...
    @staticmethod
    def GetDefaultPresetsForObject(target: Object) -> Array_1[Preset]: ...
    @staticmethod
    def GetDefaultPresetsForType(type: PresetType) -> Array_1[DefaultPreset]: ...
    def GetPresetType(self) -> PresetType: ...
    def GetTargetFullTypeName(self) -> str: ...
    def GetTargetTypeName(self) -> str: ...
    @staticmethod
    def IsEditorTargetAPreset(target: Object) -> bool: ...
    @staticmethod
    def IsObjectExcludedFromDefaultPresets(target: Object) -> bool: ...
    @staticmethod
    def IsObjectExcludedFromPresets(target: Object) -> bool: ...
    @staticmethod
    def IsPresetExcludedFromDefaultPresets(preset: Preset) -> bool: ...
    def IsValid(self) -> bool: ...
    @staticmethod
    def RemoveFromDefault(preset: Preset) -> None: ...
    @staticmethod
    def SetAsDefault(preset: Preset) -> bool: ...
    @staticmethod
    def SetDefaultPresetsForType(type: PresetType, presets: Array_1[DefaultPreset]) -> bool: ...
    def UpdateProperties(self, source: Object) -> bool: ...
    # Skipped ApplyTo due to it being static, abstract and generic.

    ApplyTo : ApplyTo_MethodGroup
    class ApplyTo_MethodGroup:
        @typing.overload
        def __call__(self, target: Object) -> bool:...
        @typing.overload
        def __call__(self, target: Object, selectedPropertyPaths: Array_1[str]) -> bool:...



class PresetSelector(EditorWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    @staticmethod
    def DrawPresetButton(rectangle: Rect, targets: Array_1[Object]) -> bool: ...
    # Skipped ShowSelector due to it being static, abstract and generic.

    ShowSelector : ShowSelector_MethodGroup
    class ShowSelector_MethodGroup:
        @typing.overload
        def __call__(self, targets: Array_1[Object], currentSelection: Preset, createNewAllowed: bool) -> None:...
        @typing.overload
        def __call__(self, presetType: PresetType, currentSelection: Preset, createNewAllowed: bool, eventReceiver: PresetSelectorReceiver) -> None:...
        @typing.overload
        def __call__(self, target: Object, currentSelection: Preset, createNewAllowed: bool, eventReceiver: PresetSelectorReceiver) -> None:...



class PresetSelectorReceiver(ScriptableObject, abc.ABC):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def OnSelectionChanged(self, selection: Preset) -> None: ...
    def OnSelectionClosed(self, selection: Preset) -> None: ...


class PresetType(IEquatable_1[PresetType]):
    def __init__(self, o: Object) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetManagedTypeName(self) -> str: ...
    def IsValid(self) -> bool: ...
    def IsValidDefault(self) -> bool: ...
    def __eq__(self, a: PresetType, b: PresetType) -> bool: ...
    def __ne__(self, a: PresetType, b: PresetType) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: PresetType) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...


