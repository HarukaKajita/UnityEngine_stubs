import typing
from UnityEditor import CallbackOrderAttribute
from System import Attribute

class DidReloadScripts(CallbackOrderAttribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, callbackOrder: int) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class OnOpenAssetAttribute(CallbackOrderAttribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, attributeMode: OnOpenAssetAttributeMode) -> None: ...
    @typing.overload
    def __init__(self, callbackOrder: int) -> None: ...
    @typing.overload
    def __init__(self, callbackOrder: int, attributeMode: OnOpenAssetAttributeMode) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class OnOpenAssetAttributeMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Execute : OnOpenAssetAttributeMode # 0
    Validate : OnOpenAssetAttributeMode # 1


class PostProcessBuildAttribute(CallbackOrderAttribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, callbackOrder: int) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class PostProcessSceneAttribute(CallbackOrderAttribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, callbackOrder: int) -> None: ...
    @typing.overload
    def __init__(self, callbackOrder: int, version: int) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RunAfterAssemblyAttribute(Attribute):
    def __init__(self, assemblyName: str) -> None: ...
    @property
    def assemblyName(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RunAfterClassAttribute(Attribute):
    @typing.overload
    def __init__(self, assemblyQualifiedName: str) -> None: ...
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any]) -> None: ...
    @property
    def classType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RunAfterPackageAttribute(Attribute):
    def __init__(self, packageName: str) -> None: ...
    @property
    def packageName(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RunBeforeAssemblyAttribute(Attribute):
    def __init__(self, assemblyName: str) -> None: ...
    @property
    def assemblyName(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RunBeforeClassAttribute(Attribute):
    @typing.overload
    def __init__(self, assemblyQualifiedName: str) -> None: ...
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any]) -> None: ...
    @property
    def classType(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...


class RunBeforePackageAttribute(Attribute):
    def __init__(self, packageName: str) -> None: ...
    @property
    def packageName(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

