import typing, abc
from System import Array_1

class EntitlementGroupInfo:
    def __init__(self) -> None: ...
    @property
    def EntitlementGroupId(self) -> str: ...
    @property
    def Expiration_ts(self) -> str: ...
    @property
    def LicenseType(self) -> str: ...
    @property
    def ProductName(self) -> str: ...


class EntitlementInfo:
    def __init__(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def CustomData(self) -> str: ...
    @property
    def EntitlementGroupsData(self) -> Array_1[EntitlementGroupInfo]: ...
    @property
    def EntitlementId(self) -> str: ...
    @property
    def IsPackage(self) -> bool: ...
    @property
    def Status(self) -> EntitlementStatus: ...


class EntitlementStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : EntitlementStatus # 0
    Granted : EntitlementStatus # 1
    NotGranted : EntitlementStatus # 2
    Free : EntitlementStatus # 3


class LicensingUtility(abc.ABC):
    @staticmethod
    def HasEntitlement(entitlement: str) -> bool: ...
    @staticmethod
    def HasEntitlements(entitlements: Array_1[str]) -> Array_1[str]: ...
    @staticmethod
    def HasEntitlementsExtended(entitlements: Array_1[str], includeCustomData: bool) -> Array_1[EntitlementInfo]: ...
    @staticmethod
    def InvokeLicenseUpdateCallbacks() -> None: ...
    @staticmethod
    def UpdateLicense() -> bool: ...

