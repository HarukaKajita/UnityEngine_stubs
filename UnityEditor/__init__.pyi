import typing, clr, abc
from System import Array, Array_1, MulticastDelegate, IAsyncResult, AsyncCallback, Predicate_1, Action_1, ReadOnlySpan_1, Func_1, Action_2, Action, Func_2, Exception, Attribute, Delegate, IComparable, IEquatable_1, Enum, IDisposable, IComparable_1, Guid, DateTime, Version, TimeSpan
from UnityEngine import Object, HideFlags, AnimationCurve, AnimationClip, Color, GameObject, ScriptableObject, Transform, AnimationEvent, Animation, Vector2, Rect, GUIContent, Texture, Hash128, LazyLoadReference_1, AsyncOperation, Texture2D, AudioCompressionFormat, AudioClipLoadType, AssetBundleManifest, Camera, Matrix4x4, Vector3, PropertyAttribute, GUIStyle, Bounds, BoundsInt, Material, ScaleMode, FocusType, Gradient, ColorSpace, RectInt, Vector2Int, Vector3Int, Vector4, GUI, GUILayoutOption, GUIUtility, Event, GUISkin, RenderTexture, Shader, Font, Renderer, Cubemap, TextureFormat, TransparencySortMode, Quaternion, EventType, FilterMode, SnapAxis, Ray, Component, TextureWrapMode, TerrainLayer, Terrain, Light, LightType, LightmapsMode, MixedLightingMode, LightingSettings, ReflectionProbe, Behaviour, LODGroup, MaterialGlobalIlluminationFlags, MaterialPropertyBlock, Mesh, WrapMode, HumanDescription, Avatar, AvatarMask, TextAsset, MonoBehaviour, PrimitiveType, D3DHDRDisplayBitDepth, FullScreenMode, HDRDisplayBitDepth, RenderingPath, StackTraceLogType, LogType, Sprite, ComputeShader, SecondarySpriteTexture, SpriteMeshType
from UnityEngine.Playables import PlayableGraph
from System.Reflection import MethodInfo, MethodBase, FieldInfo
from UnityEditor.Overlays import OverlayCanvas, Overlay, ISupportsOverlays
from UnityEngine.UIElements import VisualElement
from System.Collections.Generic import List_1, IEnumerable_1, Dictionary_2, IList_1, IReadOnlyList_1, IDictionary_2, IEnumerator_1
from Unity.Collections import NativeArray_1, Allocator
from UnityEditor.AssetImporters import ImportLog, AssetImportContext
from UnityEditor.Build.Reporting import BuildReport
from System.Collections import IDictionary, ArrayList, IEnumerator, IList
from UnityEngine.SceneManagement import Scene
from UnityEngine.Analytics import AnalyticsResult, AnalyticsEventPriority
from UnityEngine.Rendering import ColorWriteMask, CompareFunction, ReflectionCubemapCompression, TextureDimension, GraphicsDeviceType, ShaderConstantType, ShaderParamType, ShaderTagId, BuiltinShaderDefine, GraphicsTier, VertexAttribute, CommandBuffer, LocalKeyword, PassIdentifier, ReflectionProbeUsage
from UnityEditor.EditorTools import EditorTool
from UnityEditor.Build import Il2CppCodeGeneration, OverrideTextureCompression, NamedBuildTarget
from UnityEditor.SceneManagement import SceneHierarchyHooks, AddedComponent, AddedGameObject, ObjectOverride, RemovedComponent, RemovedGameObject
from UnityEditor.Rendering import ScriptableRenderPipelineExtensionAttribute, ShaderType, ShaderCompilerPlatform, ShaderCompilerMessageSeverity
from UnityEngine.iOS import SystemGestureDeferMode
from UnityEditor.Profiling import IProfilerFrameTimeViewSampleSelectionController
from UnityEditor.ProjectWindowCallback import EndNameEditAction
from UnityEngine.Experimental.Rendering import RayTracingShader
from UnityEditor.Animations import AnimatorController, AnimatorStateMachine

class ActionOnDotNetUnhandledException(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SilentExit : ActionOnDotNetUnhandledException # 0
    Crash : ActionOnDotNetUnhandledException # 1


class ActiveEditorTracker:
    def __init__(self) -> None: ...
    @property
    def activeEditors(self) -> Array_1[Editor]: ...
    @property
    def hasComponentsWhichCannotBeMultiEdited(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @property
    def inspectorMode(self) -> InspectorMode: ...
    @inspectorMode.setter
    def inspectorMode(self, value: InspectorMode) -> InspectorMode: ...
    @property
    def isDirty(self) -> bool: ...
    @property
    def isLocked(self) -> bool: ...
    @isLocked.setter
    def isLocked(self, value: bool) -> bool: ...
    @classmethod
    @property
    def sharedTracker(cls) -> ActiveEditorTracker: ...
    def ClearDirty(self) -> None: ...
    def Destroy(self) -> None: ...
    def Equals(self, o: typing.Any) -> bool: ...
    def ForceRebuild(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetVisible(self, index: int) -> int: ...
    @staticmethod
    def HasCustomEditor(obj: Object) -> bool: ...
    @staticmethod
    def MakeCustomEditor(obj: Object) -> Editor: ...
    def RebuildIfNecessary(self) -> None: ...
    def SetVisible(self, index: int, visible: int) -> None: ...
    def VerifyModifiedMonoBehaviours(self) -> None: ...


class AndroidArchitecture(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AndroidArchitecture # 0
    ARMv7 : AndroidArchitecture # 1
    ARM64 : AndroidArchitecture # 2
    X86 : AndroidArchitecture # 4
    X86_64 : AndroidArchitecture # 8
    All : AndroidArchitecture # 4294967295


class AndroidAssetPackImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @staticmethod
    def GetAllImporters() -> Array_1[AndroidAssetPackImporter]: ...


class AndroidAutoRotationBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    User : AndroidAutoRotationBehavior # 1
    Sensor : AndroidAutoRotationBehavior # 2


class AndroidBlitType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Always : AndroidBlitType # 0
    Never : AndroidBlitType # 1
    Auto : AndroidBlitType # 2


class AndroidBuildSubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Generic : AndroidBuildSubtarget # -1
    DXT : AndroidBuildSubtarget # -1
    PVRTC : AndroidBuildSubtarget # -1
    ATC : AndroidBuildSubtarget # -1
    ETC : AndroidBuildSubtarget # -1
    ETC2 : AndroidBuildSubtarget # -1
    ASTC : AndroidBuildSubtarget # -1


class AndroidBuildSystem(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Internal : AndroidBuildSystem # 0
    Gradle : AndroidBuildSystem # 1
    ADT : AndroidBuildSystem # 2
    VisualStudio : AndroidBuildSystem # 3


class AndroidBuildType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Debug : AndroidBuildType # 0
    Development : AndroidBuildType # 1
    Release : AndroidBuildType # 2


class AndroidCreateSymbols(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : AndroidCreateSymbols # 0
    Public : AndroidCreateSymbols # 1
    Debugging : AndroidCreateSymbols # 2


class AndroidETC2Fallback(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Quality32Bit : AndroidETC2Fallback # 0
    Quality16Bit : AndroidETC2Fallback # 1
    Quality32BitDownscaled : AndroidETC2Fallback # 2


class AndroidETC2FallbackOverride(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UseBuildSettings : AndroidETC2FallbackOverride # 0
    Quality32Bit : AndroidETC2FallbackOverride # 1
    Quality16Bit : AndroidETC2FallbackOverride # 2
    Quality32BitDownscaled : AndroidETC2FallbackOverride # 3


class AndroidGamepadSupportLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SupportsDPad : AndroidGamepadSupportLevel # 0
    SupportsGamepad : AndroidGamepadSupportLevel # 1
    RequiresGamepad : AndroidGamepadSupportLevel # 2


class AndroidMinification(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AndroidMinification # 0
    Proguard : AndroidMinification # 1
    Gradle : AndroidMinification # 2


class AndroidPreferredInstallLocation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : AndroidPreferredInstallLocation # 0
    PreferExternal : AndroidPreferredInstallLocation # 1
    ForceInternal : AndroidPreferredInstallLocation # 2


class AndroidSdkVersions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AndroidApiLevelAuto : AndroidSdkVersions # 0
    AndroidApiLevel16 : AndroidSdkVersions # 16
    AndroidApiLevel17 : AndroidSdkVersions # 17
    AndroidApiLevel18 : AndroidSdkVersions # 18
    AndroidApiLevel19 : AndroidSdkVersions # 19
    AndroidApiLevel21 : AndroidSdkVersions # 21
    AndroidApiLevel22 : AndroidSdkVersions # 22
    AndroidApiLevel23 : AndroidSdkVersions # 23
    AndroidApiLevel24 : AndroidSdkVersions # 24
    AndroidApiLevel25 : AndroidSdkVersions # 25
    AndroidApiLevel26 : AndroidSdkVersions # 26
    AndroidApiLevel27 : AndroidSdkVersions # 27
    AndroidApiLevel28 : AndroidSdkVersions # 28
    AndroidApiLevel29 : AndroidSdkVersions # 29
    AndroidApiLevel30 : AndroidSdkVersions # 30
    AndroidApiLevel31 : AndroidSdkVersions # 31
    AndroidApiLevel32 : AndroidSdkVersions # 32
    AndroidApiLevel33 : AndroidSdkVersions # 33


class AndroidShowActivityIndicatorOnLoading(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Large : AndroidShowActivityIndicatorOnLoading # 0
    InversedLarge : AndroidShowActivityIndicatorOnLoading # 1
    Small : AndroidShowActivityIndicatorOnLoading # 2
    InversedSmall : AndroidShowActivityIndicatorOnLoading # 3
    DontShow : AndroidShowActivityIndicatorOnLoading # -1


class AndroidSplashScreenScale(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Center : AndroidSplashScreenScale # 0
    ScaleToFit : AndroidSplashScreenScale # 1
    ScaleToFill : AndroidSplashScreenScale # 2


class AndroidTargetDevice(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FAT : AndroidTargetDevice # 0
    ARMv7 : AndroidTargetDevice # 3


class AndroidTargetDevices(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AllDevices : AndroidTargetDevices # 0
    PhonesTabletsAndTVDevicesOnly : AndroidTargetDevices # 1
    ChromeOSDevicesOnly : AndroidTargetDevices # 2


class AnimationClipCurveData:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, binding: EditorCurveBinding) -> None: ...
    curve : AnimationCurve
    path : str
    propertyName : str
    type : typing.Type[typing.Any]


class AnimationClipSettings:
    def __init__(self) -> None: ...
    additiveReferencePoseClip : AnimationClip
    additiveReferencePoseTime : float
    cycleOffset : float
    hasAdditiveReferencePose : bool
    heightFromFeet : bool
    keepOriginalOrientation : bool
    keepOriginalPositionXZ : bool
    keepOriginalPositionY : bool
    level : float
    loopBlend : bool
    loopBlendOrientation : bool
    loopBlendPositionXZ : bool
    loopBlendPositionY : bool
    loopTime : bool
    mirror : bool
    orientationOffsetY : float
    startTime : float
    stopTime : float


class AnimationMode:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def animatedPropertyColor(cls) -> Color: ...
    @classmethod
    @property
    def candidatePropertyColor(cls) -> Color: ...
    @classmethod
    @property
    def recordedPropertyColor(cls) -> Color: ...
    @staticmethod
    def AddEditorCurveBinding(gameObject: GameObject, binding: EditorCurveBinding) -> None: ...
    @staticmethod
    def AddPropertyModification(binding: EditorCurveBinding, modification: PropertyModification, keepPrefabOverride: bool) -> None: ...
    @staticmethod
    def BeginSampling() -> None: ...
    @staticmethod
    def EndSampling() -> None: ...
    @staticmethod
    def IsPropertyAnimated(target: Object, propertyPath: str) -> bool: ...
    @staticmethod
    def SampleAnimationClip(gameObject: GameObject, clip: AnimationClip, time: float) -> None: ...
    @staticmethod
    def SamplePlayableGraph(graph: PlayableGraph, index: int, time: float) -> None: ...
    # Skipped InAnimationMode due to it being static, abstract and generic.

    InAnimationMode : InAnimationMode_MethodGroup
    class InAnimationMode_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, driver: AnimationModeDriver) -> bool:...

    # Skipped StartAnimationMode due to it being static, abstract and generic.

    StartAnimationMode : StartAnimationMode_MethodGroup
    class StartAnimationMode_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, driver: AnimationModeDriver) -> None:...

    # Skipped StopAnimationMode due to it being static, abstract and generic.

    StopAnimationMode : StopAnimationMode_MethodGroup
    class StopAnimationMode_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, driver: AnimationModeDriver) -> None:...



class AnimationModeDriver(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class AnimationUtility:
    def __init__(self) -> None: ...
    onCurveWasModified : AnimationUtility.OnCurveWasModified
    @staticmethod
    def CalculateTransformPath(targetTransform: Transform, root: Transform) -> str: ...
    @staticmethod
    def ConstrainToPolynomialCurve(curve: AnimationCurve) -> None: ...
    @staticmethod
    def GetAnimatableBindings(targetObject: GameObject, root: GameObject) -> Array_1[EditorCurveBinding]: ...
    @staticmethod
    def GetAnimatedObject(root: GameObject, binding: EditorCurveBinding) -> Object: ...
    @staticmethod
    def GetAnimationClipSettings(clip: AnimationClip) -> AnimationClipSettings: ...
    @staticmethod
    def GetAnimationEvents(clip: AnimationClip) -> Array_1[AnimationEvent]: ...
    @staticmethod
    def GetCurveBindings(clip: AnimationClip) -> Array_1[EditorCurveBinding]: ...
    @staticmethod
    def GetDiscreteIntValue(root: GameObject, binding: EditorCurveBinding, data: clr.Reference[int]) -> bool: ...
    @staticmethod
    def GetEditorCurveValueType(root: GameObject, binding: EditorCurveBinding) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetGenerateMotionCurves(clip: AnimationClip) -> bool: ...
    @staticmethod
    def GetKeyBroken(curve: AnimationCurve, index: int) -> bool: ...
    @staticmethod
    def GetKeyLeftTangentMode(curve: AnimationCurve, index: int) -> AnimationUtility.TangentMode: ...
    @staticmethod
    def GetKeyRightTangentMode(curve: AnimationCurve, index: int) -> AnimationUtility.TangentMode: ...
    @staticmethod
    def GetObjectReferenceCurve(clip: AnimationClip, binding: EditorCurveBinding) -> Array_1[ObjectReferenceKeyframe]: ...
    @staticmethod
    def GetObjectReferenceCurveBindings(clip: AnimationClip) -> Array_1[EditorCurveBinding]: ...
    @staticmethod
    def GetObjectReferenceValue(root: GameObject, binding: EditorCurveBinding, data: clr.Reference[Object]) -> bool: ...
    @staticmethod
    def InAnimationMode() -> bool: ...
    @staticmethod
    def PropertyModificationToEditorCurveBinding(modification: PropertyModification, gameObject: GameObject, binding: clr.Reference[EditorCurveBinding]) -> typing.Type[typing.Any]: ...
    @staticmethod
    def SetAdditiveReferencePose(clip: AnimationClip, referenceClip: AnimationClip, time: float) -> None: ...
    @staticmethod
    def SetAnimationClips(animation: Animation, clips: Array_1[AnimationClip]) -> None: ...
    @staticmethod
    def SetAnimationClipSettings(clip: AnimationClip, srcClipInfo: AnimationClipSettings) -> None: ...
    @staticmethod
    def SetAnimationEvents(clip: AnimationClip, events: Array_1[AnimationEvent]) -> None: ...
    @staticmethod
    def SetAnimationType(clip: AnimationClip, type: ModelImporterAnimationType) -> None: ...
    @staticmethod
    def SetEditorCurves(clip: AnimationClip, bindings: Array_1[EditorCurveBinding], curves: Array_1[AnimationCurve]) -> None: ...
    @staticmethod
    def SetGenerateMotionCurves(clip: AnimationClip, value: bool) -> None: ...
    @staticmethod
    def SetKeyBroken(curve: AnimationCurve, index: int, broken: bool) -> None: ...
    @staticmethod
    def SetKeyLeftTangentMode(curve: AnimationCurve, index: int, tangentMode: AnimationUtility.TangentMode) -> None: ...
    @staticmethod
    def SetKeyRightTangentMode(curve: AnimationCurve, index: int, tangentMode: AnimationUtility.TangentMode) -> None: ...
    @staticmethod
    def SetObjectReferenceCurve(clip: AnimationClip, binding: EditorCurveBinding, keyframes: Array_1[ObjectReferenceKeyframe]) -> None: ...
    @staticmethod
    def SetObjectReferenceCurves(clip: AnimationClip, bindings: Array_1[EditorCurveBinding], keyframes: Array_1[Array_1[ObjectReferenceKeyframe]]) -> None: ...
    @staticmethod
    def StartAnimationMode(objects: Array_1[Object]) -> None: ...
    @staticmethod
    def StopAnimationMode() -> None: ...
    # Skipped GetAllCurves due to it being static, abstract and generic.

    GetAllCurves : GetAllCurves_MethodGroup
    class GetAllCurves_MethodGroup:
        @typing.overload
        def __call__(self, clip: AnimationClip) -> Array_1[AnimationClipCurveData]:...
        @typing.overload
        def __call__(self, clip: AnimationClip, includeCurveData: bool) -> Array_1[AnimationClipCurveData]:...

    # Skipped GetAnimationClips due to it being static, abstract and generic.

    GetAnimationClips : GetAnimationClips_MethodGroup
    class GetAnimationClips_MethodGroup:
        @typing.overload
        def __call__(self, component: Animation) -> Array_1[AnimationClip]:...
        @typing.overload
        def __call__(self, gameObject: GameObject) -> Array_1[AnimationClip]:...

    # Skipped GetEditorCurve due to it being static, abstract and generic.

    GetEditorCurve : GetEditorCurve_MethodGroup
    class GetEditorCurve_MethodGroup:
        @typing.overload
        def __call__(self, clip: AnimationClip, binding: EditorCurveBinding) -> AnimationCurve:...
        @typing.overload
        def __call__(self, clip: AnimationClip, relativePath: str, type: typing.Type[typing.Any], propertyName: str) -> AnimationCurve:...

    # Skipped GetFloatValue due to it being static, abstract and generic.

    GetFloatValue : GetFloatValue_MethodGroup
    class GetFloatValue_MethodGroup:
        @typing.overload
        def __call__(self, root: GameObject, binding: EditorCurveBinding, data: clr.Reference[float]) -> bool:...
        @typing.overload
        def __call__(self, root: GameObject, relativePath: str, type: typing.Type[typing.Any], propertyName: str, data: clr.Reference[float]) -> bool:...

    # Skipped SetEditorCurve due to it being static, abstract and generic.

    SetEditorCurve : SetEditorCurve_MethodGroup
    class SetEditorCurve_MethodGroup:
        @typing.overload
        def __call__(self, clip: AnimationClip, binding: EditorCurveBinding, curve: AnimationCurve) -> None:...
        @typing.overload
        def __call__(self, clip: AnimationClip, relativePath: str, type: typing.Type[typing.Any], propertyName: str, curve: AnimationCurve) -> None:...


    class CurveModifiedType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        CurveDeleted : AnimationUtility.CurveModifiedType # 0
        CurveModified : AnimationUtility.CurveModifiedType # 1
        ClipModified : AnimationUtility.CurveModifiedType # 2


    class OnCurveWasModified(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, clip: AnimationClip, binding: EditorCurveBinding, type: AnimationUtility.CurveModifiedType, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, clip: AnimationClip, binding: EditorCurveBinding, type: AnimationUtility.CurveModifiedType) -> None: ...


    class TangentMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Free : AnimationUtility.TangentMode # 0
        Auto : AnimationUtility.TangentMode # 1
        Linear : AnimationUtility.TangentMode # 2
        Constant : AnimationUtility.TangentMode # 3
        ClampedAuto : AnimationUtility.TangentMode # 4



class AnimationWindow(EditorWindow, IHasCustomMenu):
    @property
    def animationClip(self) -> AnimationClip: ...
    @animationClip.setter
    def animationClip(self, value: AnimationClip) -> AnimationClip: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def canPreview(self) -> bool: ...
    @property
    def canRecord(self) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def frame(self) -> int: ...
    @frame.setter
    def frame(self, value: int) -> int: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def playing(self) -> bool: ...
    @playing.setter
    def playing(self, value: bool) -> bool: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def previewing(self) -> bool: ...
    @previewing.setter
    def previewing(self, value: bool) -> bool: ...
    @property
    def recording(self) -> bool: ...
    @recording.setter
    def recording(self, value: bool) -> bool: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def time(self) -> float: ...
    @time.setter
    def time(self, value: float) -> float: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def AddItemsToMenu(self, menu: GenericMenu) -> None: ...


class ApiCompatibilityLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NET_2_0 : ApiCompatibilityLevel # 1
    NET_2_0_Subset : ApiCompatibilityLevel # 2
    NET_4_6 : ApiCompatibilityLevel # 3
    NET_Unity_4_8 : ApiCompatibilityLevel # 3
    NET_Web : ApiCompatibilityLevel # 4
    NET_Micro : ApiCompatibilityLevel # 5
    NET_Standard : ApiCompatibilityLevel # 6
    NET_Standard_2_0 : ApiCompatibilityLevel # 6


class AppleMobileArchitecture(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ARMv7 : AppleMobileArchitecture # 0
    ARM64 : AppleMobileArchitecture # 1
    Universal : AppleMobileArchitecture # 2


class ArrayUtility(abc.ABC):
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        def __getitem__(self, t:typing.Type[Add_1_T1]) -> Add_1[Add_1_T1]: ...

        Add_1_T1 = typing.TypeVar('Add_1_T1')
        class Add_1(typing.Generic[Add_1_T1]):
            Add_1_T = ArrayUtility.Add_MethodGroup.Add_1_T1
            def __call__(self, array: clr.Reference[Array_1[Add_1_T]], item: Add_1_T) -> None:...


    # Skipped AddRange due to it being static, abstract and generic.

    AddRange : AddRange_MethodGroup
    class AddRange_MethodGroup:
        def __getitem__(self, t:typing.Type[AddRange_1_T1]) -> AddRange_1[AddRange_1_T1]: ...

        AddRange_1_T1 = typing.TypeVar('AddRange_1_T1')
        class AddRange_1(typing.Generic[AddRange_1_T1]):
            AddRange_1_T = ArrayUtility.AddRange_MethodGroup.AddRange_1_T1
            def __call__(self, array: clr.Reference[Array_1[AddRange_1_T]], items: Array_1[AddRange_1_T]) -> None:...


    # Skipped ArrayEquals due to it being static, abstract and generic.

    ArrayEquals : ArrayEquals_MethodGroup
    class ArrayEquals_MethodGroup:
        def __getitem__(self, t:typing.Type[ArrayEquals_1_T1]) -> ArrayEquals_1[ArrayEquals_1_T1]: ...

        ArrayEquals_1_T1 = typing.TypeVar('ArrayEquals_1_T1')
        class ArrayEquals_1(typing.Generic[ArrayEquals_1_T1]):
            ArrayEquals_1_T = ArrayUtility.ArrayEquals_MethodGroup.ArrayEquals_1_T1
            def __call__(self, lhs: Array_1[ArrayEquals_1_T], rhs: Array_1[ArrayEquals_1_T]) -> bool:...


    # Skipped ArrayReferenceEquals due to it being static, abstract and generic.

    ArrayReferenceEquals : ArrayReferenceEquals_MethodGroup
    class ArrayReferenceEquals_MethodGroup:
        def __getitem__(self, t:typing.Type[ArrayReferenceEquals_1_T1]) -> ArrayReferenceEquals_1[ArrayReferenceEquals_1_T1]: ...

        ArrayReferenceEquals_1_T1 = typing.TypeVar('ArrayReferenceEquals_1_T1')
        class ArrayReferenceEquals_1(typing.Generic[ArrayReferenceEquals_1_T1]):
            ArrayReferenceEquals_1_T = ArrayUtility.ArrayReferenceEquals_MethodGroup.ArrayReferenceEquals_1_T1
            def __call__(self, lhs: Array_1[ArrayReferenceEquals_1_T], rhs: Array_1[ArrayReferenceEquals_1_T]) -> bool:...


    # Skipped Clear due to it being static, abstract and generic.

    Clear : Clear_MethodGroup
    class Clear_MethodGroup:
        def __getitem__(self, t:typing.Type[Clear_1_T1]) -> Clear_1[Clear_1_T1]: ...

        Clear_1_T1 = typing.TypeVar('Clear_1_T1')
        class Clear_1(typing.Generic[Clear_1_T1]):
            Clear_1_T = ArrayUtility.Clear_MethodGroup.Clear_1_T1
            def __call__(self, array: clr.Reference[Array_1[Clear_1_T]]) -> None:...


    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        def __getitem__(self, t:typing.Type[Contains_1_T1]) -> Contains_1[Contains_1_T1]: ...

        Contains_1_T1 = typing.TypeVar('Contains_1_T1')
        class Contains_1(typing.Generic[Contains_1_T1]):
            Contains_1_T = ArrayUtility.Contains_MethodGroup.Contains_1_T1
            def __call__(self, array: Array_1[Contains_1_T], item: Contains_1_T) -> bool:...


    # Skipped Find due to it being static, abstract and generic.

    Find : Find_MethodGroup
    class Find_MethodGroup:
        def __getitem__(self, t:typing.Type[Find_1_T1]) -> Find_1[Find_1_T1]: ...

        Find_1_T1 = typing.TypeVar('Find_1_T1')
        class Find_1(typing.Generic[Find_1_T1]):
            Find_1_T = ArrayUtility.Find_MethodGroup.Find_1_T1
            def __call__(self, array: Array_1[Find_1_T], match: Predicate_1[Find_1_T]) -> Find_1_T:...


    # Skipped FindAll due to it being static, abstract and generic.

    FindAll : FindAll_MethodGroup
    class FindAll_MethodGroup:
        def __getitem__(self, t:typing.Type[FindAll_1_T1]) -> FindAll_1[FindAll_1_T1]: ...

        FindAll_1_T1 = typing.TypeVar('FindAll_1_T1')
        class FindAll_1(typing.Generic[FindAll_1_T1]):
            FindAll_1_T = ArrayUtility.FindAll_MethodGroup.FindAll_1_T1
            def __call__(self, array: Array_1[FindAll_1_T], match: Predicate_1[FindAll_1_T]) -> List_1[FindAll_1_T]:...


    # Skipped FindIndex due to it being static, abstract and generic.

    FindIndex : FindIndex_MethodGroup
    class FindIndex_MethodGroup:
        def __getitem__(self, t:typing.Type[FindIndex_1_T1]) -> FindIndex_1[FindIndex_1_T1]: ...

        FindIndex_1_T1 = typing.TypeVar('FindIndex_1_T1')
        class FindIndex_1(typing.Generic[FindIndex_1_T1]):
            FindIndex_1_T = ArrayUtility.FindIndex_MethodGroup.FindIndex_1_T1
            def __call__(self, array: Array_1[FindIndex_1_T], match: Predicate_1[FindIndex_1_T]) -> int:...


    # Skipped IndexOf due to it being static, abstract and generic.

    IndexOf : IndexOf_MethodGroup
    class IndexOf_MethodGroup:
        def __getitem__(self, t:typing.Type[IndexOf_1_T1]) -> IndexOf_1[IndexOf_1_T1]: ...

        IndexOf_1_T1 = typing.TypeVar('IndexOf_1_T1')
        class IndexOf_1(typing.Generic[IndexOf_1_T1]):
            IndexOf_1_T = ArrayUtility.IndexOf_MethodGroup.IndexOf_1_T1
            def __call__(self, array: Array_1[IndexOf_1_T], value: IndexOf_1_T) -> int:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        def __getitem__(self, t:typing.Type[Insert_1_T1]) -> Insert_1[Insert_1_T1]: ...

        Insert_1_T1 = typing.TypeVar('Insert_1_T1')
        class Insert_1(typing.Generic[Insert_1_T1]):
            Insert_1_T = ArrayUtility.Insert_MethodGroup.Insert_1_T1
            def __call__(self, array: clr.Reference[Array_1[Insert_1_T]], index: int, item: Insert_1_T) -> None:...


    # Skipped LastIndexOf due to it being static, abstract and generic.

    LastIndexOf : LastIndexOf_MethodGroup
    class LastIndexOf_MethodGroup:
        def __getitem__(self, t:typing.Type[LastIndexOf_1_T1]) -> LastIndexOf_1[LastIndexOf_1_T1]: ...

        LastIndexOf_1_T1 = typing.TypeVar('LastIndexOf_1_T1')
        class LastIndexOf_1(typing.Generic[LastIndexOf_1_T1]):
            LastIndexOf_1_T = ArrayUtility.LastIndexOf_MethodGroup.LastIndexOf_1_T1
            def __call__(self, array: Array_1[LastIndexOf_1_T], value: LastIndexOf_1_T) -> int:...


    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        def __getitem__(self, t:typing.Type[Remove_1_T1]) -> Remove_1[Remove_1_T1]: ...

        Remove_1_T1 = typing.TypeVar('Remove_1_T1')
        class Remove_1(typing.Generic[Remove_1_T1]):
            Remove_1_T = ArrayUtility.Remove_MethodGroup.Remove_1_T1
            def __call__(self, array: clr.Reference[Array_1[Remove_1_T]], item: Remove_1_T) -> None:...


    # Skipped RemoveAt due to it being static, abstract and generic.

    RemoveAt : RemoveAt_MethodGroup
    class RemoveAt_MethodGroup:
        def __getitem__(self, t:typing.Type[RemoveAt_1_T1]) -> RemoveAt_1[RemoveAt_1_T1]: ...

        RemoveAt_1_T1 = typing.TypeVar('RemoveAt_1_T1')
        class RemoveAt_1(typing.Generic[RemoveAt_1_T1]):
            RemoveAt_1_T = ArrayUtility.RemoveAt_MethodGroup.RemoveAt_1_T1
            def __call__(self, array: clr.Reference[Array_1[RemoveAt_1_T]], index: int) -> None:...




class AscentCalculationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Legacy2x : AscentCalculationMode # 0
    FaceAscender : AscentCalculationMode # 1
    FaceBoundingBox : AscentCalculationMode # 2


class AspectRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AspectOthers : AspectRatio # 0
    Aspect4by3 : AspectRatio # 1
    Aspect5by4 : AspectRatio # 2
    Aspect16by10 : AspectRatio # 3
    Aspect16by9 : AspectRatio # 4


class AssemblyReloadEvents(abc.ABC):

    class AssemblyReloadCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...



class AssetBundleBuild:
    addressableNames : Array_1[str]
    assetBundleName : str
    assetBundleVariant : str
    assetNames : Array_1[str]


class AssetDatabase:
    def __init__(self) -> None: ...
    onImportPackageItemsCompleted : Action_1[Array_1[str]]
    @classmethod
    @property
    def ActiveRefreshImportMode(cls) -> AssetDatabase.RefreshImportMode: ...
    @classmethod
    @ActiveRefreshImportMode.setter
    def ActiveRefreshImportMode(cls, value: AssetDatabase.RefreshImportMode) -> AssetDatabase.RefreshImportMode: ...
    @classmethod
    @property
    def DesiredWorkerCount(cls) -> int: ...
    @classmethod
    @DesiredWorkerCount.setter
    def DesiredWorkerCount(cls, value: int) -> int: ...
    @classmethod
    @property
    def GlobalArtifactDependencyVersion(cls) -> int: ...
    @classmethod
    @property
    def GlobalArtifactProcessedVersion(cls) -> int: ...
    @staticmethod
    def AllowAutoRefresh() -> None: ...
    @staticmethod
    def CanConnectToCacheServer(ip: str, port: int) -> bool: ...
    @staticmethod
    def CanOpenAssetInEditor(instanceID: int) -> bool: ...
    @staticmethod
    def ClearImporterOverride(path: str) -> None: ...
    @staticmethod
    def ClearLabels(obj: Object) -> None: ...
    @staticmethod
    def CloseCacheServerConnection() -> None: ...
    @staticmethod
    def CopyAsset(path: str, newPath: str) -> bool: ...
    @staticmethod
    def CreateAsset(asset: Object, path: str) -> None: ...
    @staticmethod
    def CreateFolder(parentFolder: str, newFolderName: str) -> str: ...
    @staticmethod
    def DeleteAsset(path: str) -> bool: ...
    @staticmethod
    def DeleteAssets(paths: Array_1[str], outFailedPaths: List_1[str]) -> bool: ...
    @staticmethod
    def DisallowAutoRefresh() -> None: ...
    @staticmethod
    def ExtractAsset(asset: Object, newPath: str) -> str: ...
    @staticmethod
    def ForceToDesiredWorkerCount() -> None: ...
    @staticmethod
    def GenerateUniqueAssetPath(path: str) -> str: ...
    @staticmethod
    def GetAllAssetBundleNames() -> Array_1[str]: ...
    @staticmethod
    def GetAllAssetPaths() -> Array_1[str]: ...
    @staticmethod
    def GetAssetBundleDependencies(assetBundleName: str, recursive: bool) -> Array_1[str]: ...
    def GetAssetBundleNames(self) -> Array_1[str]: ...
    @staticmethod
    def GetAssetOrScenePath(assetObject: Object) -> str: ...
    @staticmethod
    def GetAssetPathFromTextMetaFilePath(path: str) -> str: ...
    @staticmethod
    def GetAssetPathsFromAssetBundle(assetBundleName: str) -> Array_1[str]: ...
    @staticmethod
    def GetAssetPathsFromAssetBundleAndAssetName(assetBundleName: str, assetName: str) -> Array_1[str]: ...
    @staticmethod
    def GetAvailableImporters(path: str) -> Array_1[typing.Type[typing.Any]]: ...
    @staticmethod
    def GetAvailableImporterTypes(path: str) -> Array_1[typing.Type[typing.Any]]: ...
    @staticmethod
    def GetCachedIcon(path: str) -> Texture: ...
    @staticmethod
    def GetCacheServerAddress() -> str: ...
    @staticmethod
    def GetCacheServerEnableDownload() -> bool: ...
    @staticmethod
    def GetCacheServerEnableUpload() -> bool: ...
    @staticmethod
    def GetCacheServerNamespacePrefix() -> str: ...
    @staticmethod
    def GetCacheServerPort() -> int: ...
    @staticmethod
    def GetCurrentCacheServerIp() -> str: ...
    @staticmethod
    def GetDefaultImporter(path: str) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetImplicitAssetBundleName(assetPath: str) -> str: ...
    @staticmethod
    def GetImplicitAssetBundleVariantName(assetPath: str) -> str: ...
    @staticmethod
    def GetImporterOverride(path: str) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetMainAssetTypeAtPath(assetPath: str) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetMainAssetTypeFromGUID(guid: GUID) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetSubFolders(path: str) -> Array_1[str]: ...
    @staticmethod
    def GetTextMetaDataPathFromAssetPath(path: str) -> str: ...
    @staticmethod
    def GetTextMetaFilePathFromAssetPath(path: str) -> str: ...
    @staticmethod
    def GetTypeFromPathAndFileID(assetPath: str, localIdentifierInFile: int) -> typing.Type[typing.Any]: ...
    @staticmethod
    def GetUnusedAssetBundleNames() -> Array_1[str]: ...
    @staticmethod
    def GUIDFromAssetPath(path: str) -> GUID: ...
    @staticmethod
    def ImportPackage(packagePath: str, interactive: bool) -> None: ...
    @staticmethod
    def InstanceIDsToGUIDs(instanceIDs: NativeArray_1[int], guidsOut: NativeArray_1[GUID]) -> None: ...
    @staticmethod
    def IsAssetImportWorkerProcess() -> bool: ...
    @staticmethod
    def IsCacheServerEnabled() -> bool: ...
    @staticmethod
    def IsConnectedToCacheServer() -> bool: ...
    @staticmethod
    def IsDirectoryMonitoringEnabled() -> bool: ...
    @staticmethod
    def IsMainAssetAtPathLoaded(assetPath: str) -> bool: ...
    @staticmethod
    def IsValidFolder(path: str) -> bool: ...
    @staticmethod
    def LoadAllAssetRepresentationsAtPath(assetPath: str) -> Array_1[Object]: ...
    @staticmethod
    def LoadAllAssetsAtPath(assetPath: str) -> Array_1[Object]: ...
    @staticmethod
    def LoadMainAssetAtPath(assetPath: str) -> Object: ...
    @staticmethod
    def LoadObjectAsync(assetPath: str, localId: int) -> AssetDatabaseLoadOperation: ...
    @staticmethod
    def MoveAsset(oldPath: str, newPath: str) -> str: ...
    @staticmethod
    def MoveAssetsToTrash(paths: Array_1[str], outFailedPaths: List_1[str]) -> bool: ...
    @staticmethod
    def MoveAssetToTrash(path: str) -> bool: ...
    @staticmethod
    def RefreshSettings() -> None: ...
    @staticmethod
    def RegisterCustomDependency(dependency: str, hashOfValue: Hash128) -> None: ...
    @staticmethod
    def ReleaseCachedFileHandles() -> None: ...
    @staticmethod
    def RemoveAssetBundleName(assetBundleName: str, forceRemove: bool) -> bool: ...
    @staticmethod
    def RemoveObjectFromAsset(objectToRemove: Object) -> None: ...
    @staticmethod
    def RemoveUnusedAssetBundleNames() -> None: ...
    @staticmethod
    def RenameAsset(pathName: str, newName: str) -> str: ...
    @staticmethod
    def ResetCacheServerReconnectTimer() -> None: ...
    @staticmethod
    def SaveAssets() -> None: ...
    @staticmethod
    def SetLabels(obj: Object, labels: Array_1[str]) -> None: ...
    @staticmethod
    def SetMainObject(mainObject: Object, assetPath: str) -> None: ...
    @staticmethod
    def StartAssetEditing() -> None: ...
    @staticmethod
    def StopAssetEditing() -> None: ...
    @staticmethod
    def UnregisterCustomDependencyPrefixFilter(prefixFilter: str) -> int: ...
    @staticmethod
    def ValidateMoveAsset(oldPath: str, newPath: str) -> str: ...
    @staticmethod
    def WriteImportSettingsIfDirty(path: str) -> bool: ...
    # Skipped AddObjectToAsset due to it being static, abstract and generic.

    AddObjectToAsset : AddObjectToAsset_MethodGroup
    class AddObjectToAsset_MethodGroup:
        @typing.overload
        def __call__(self, objectToAdd: Object, path: str) -> None:...
        @typing.overload
        def __call__(self, objectToAdd: Object, assetObject: Object) -> None:...

    # Skipped AssetPathToGUID due to it being static, abstract and generic.

    AssetPathToGUID : AssetPathToGUID_MethodGroup
    class AssetPathToGUID_MethodGroup:
        @typing.overload
        def __call__(self, path: str) -> str:...
        @typing.overload
        def __call__(self, path: str, options: AssetPathToGUIDOptions) -> str:...

    # Skipped CanOpenForEdit due to it being static, abstract and generic.

    CanOpenForEdit : CanOpenForEdit_MethodGroup
    class CanOpenForEdit_MethodGroup:
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object) -> bool:...
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str, statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str, message: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, message: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, assetOrMetaFilePaths: Array_1[str], outNotEditablePaths: List_1[str], statusQueryOptions: StatusQueryOptions = ...) -> None:...
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str, message: clr.Reference[str], statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, message: clr.Reference[str], statusOptions: StatusQueryOptions) -> bool:...

    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, obj: Object) -> bool:...

    # Skipped ExportPackage due to it being static, abstract and generic.

    ExportPackage : ExportPackage_MethodGroup
    class ExportPackage_MethodGroup:
        @typing.overload
        def __call__(self, assetPathNames: Array_1[str], fileName: str) -> None:...
        @typing.overload
        def __call__(self, assetPathName: str, fileName: str) -> None:...
        @typing.overload
        def __call__(self, assetPathNames: Array_1[str], fileName: str, flags: ExportPackageOptions) -> None:...
        @typing.overload
        def __call__(self, assetPathName: str, fileName: str, flags: ExportPackageOptions) -> None:...

    # Skipped FindAssets due to it being static, abstract and generic.

    FindAssets : FindAssets_MethodGroup
    class FindAssets_MethodGroup:
        @typing.overload
        def __call__(self, filter: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, filter: str, searchInFolders: Array_1[str]) -> Array_1[str]:...

    # Skipped ForceReserializeAssets due to it being static, abstract and generic.

    ForceReserializeAssets : ForceReserializeAssets_MethodGroup
    class ForceReserializeAssets_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, assetPaths: IEnumerable_1[str], options: ForceReserializeAssetsOptions = ...) -> None:...

    # Skipped GetAssetDependencyHash due to it being static, abstract and generic.

    GetAssetDependencyHash : GetAssetDependencyHash_MethodGroup
    class GetAssetDependencyHash_MethodGroup:
        @typing.overload
        def __call__(self, guid: GUID) -> Hash128:...
        @typing.overload
        def __call__(self, path: str) -> Hash128:...

    # Skipped GetAssetPath due to it being static, abstract and generic.

    GetAssetPath : GetAssetPath_MethodGroup
    class GetAssetPath_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> str:...
        @typing.overload
        def __call__(self, assetObject: Object) -> str:...

    # Skipped GetBuiltinExtraResource due to it being static, abstract and generic.

    GetBuiltinExtraResource : GetBuiltinExtraResource_MethodGroup
    class GetBuiltinExtraResource_MethodGroup:
        def __getitem__(self, t:typing.Type[GetBuiltinExtraResource_1_T1]) -> GetBuiltinExtraResource_1[GetBuiltinExtraResource_1_T1]: ...

        GetBuiltinExtraResource_1_T1 = typing.TypeVar('GetBuiltinExtraResource_1_T1')
        class GetBuiltinExtraResource_1(typing.Generic[GetBuiltinExtraResource_1_T1]):
            GetBuiltinExtraResource_1_T = AssetDatabase.GetBuiltinExtraResource_MethodGroup.GetBuiltinExtraResource_1_T1
            def __call__(self, path: str) -> GetBuiltinExtraResource_1_T:...

        def __call__(self, type: typing.Type[typing.Any], path: str) -> Object:...

    # Skipped GetDependencies due to it being static, abstract and generic.

    GetDependencies : GetDependencies_MethodGroup
    class GetDependencies_MethodGroup:
        @typing.overload
        def __call__(self, pathNames: Array_1[str]) -> Array_1[str]:...
        @typing.overload
        def __call__(self, pathName: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, pathNames: Array_1[str], recursive: bool) -> Array_1[str]:...
        @typing.overload
        def __call__(self, pathName: str, recursive: bool) -> Array_1[str]:...

    # Skipped GetImporterType due to it being static, abstract and generic.

    GetImporterType : GetImporterType_MethodGroup
    class GetImporterType_MethodGroup:
        @typing.overload
        def __call__(self, assetPath: str) -> typing.Type[typing.Any]:...
        @typing.overload
        def __call__(self, guid: GUID) -> typing.Type[typing.Any]:...

    # Skipped GetImporterTypes due to it being static, abstract and generic.

    GetImporterTypes : GetImporterTypes_MethodGroup
    class GetImporterTypes_MethodGroup:
        @typing.overload
        def __call__(self, paths: Array_1[str]) -> Array_1[typing.Type[typing.Any]]:...
        @typing.overload
        def __call__(self, guids: ReadOnlySpan_1[GUID]) -> Array_1[typing.Type[typing.Any]]:...

    # Skipped GetLabels due to it being static, abstract and generic.

    GetLabels : GetLabels_MethodGroup
    class GetLabels_MethodGroup:
        @typing.overload
        def __call__(self, guid: GUID) -> Array_1[str]:...
        @typing.overload
        def __call__(self, obj: Object) -> Array_1[str]:...

    # Skipped GUIDToAssetPath due to it being static, abstract and generic.

    GUIDToAssetPath : GUIDToAssetPath_MethodGroup
    class GUIDToAssetPath_MethodGroup:
        @typing.overload
        def __call__(self, guid: str) -> str:...
        @typing.overload
        def __call__(self, guid: GUID) -> str:...

    # Skipped ImportAsset due to it being static, abstract and generic.

    ImportAsset : ImportAsset_MethodGroup
    class ImportAsset_MethodGroup:
        @typing.overload
        def __call__(self, path: str) -> None:...
        @typing.overload
        def __call__(self, path: str, options: ImportAssetOptions) -> None:...

    # Skipped IsForeignAsset due to it being static, abstract and generic.

    IsForeignAsset : IsForeignAsset_MethodGroup
    class IsForeignAsset_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, obj: Object) -> bool:...

    # Skipped IsMainAsset due to it being static, abstract and generic.

    IsMainAsset : IsMainAsset_MethodGroup
    class IsMainAsset_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, obj: Object) -> bool:...

    # Skipped IsMetaFileOpenForEdit due to it being static, abstract and generic.

    IsMetaFileOpenForEdit : IsMetaFileOpenForEdit_MethodGroup
    class IsMetaFileOpenForEdit_MethodGroup:
        @typing.overload
        def __call__(self, assetObject: Object) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, message: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, message: clr.Reference[str], statusOptions: StatusQueryOptions) -> bool:...

    # Skipped IsNativeAsset due to it being static, abstract and generic.

    IsNativeAsset : IsNativeAsset_MethodGroup
    class IsNativeAsset_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, obj: Object) -> bool:...

    # Skipped IsOpenForEdit due to it being static, abstract and generic.

    IsOpenForEdit : IsOpenForEdit_MethodGroup
    class IsOpenForEdit_MethodGroup:
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object) -> bool:...
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str, statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str, message: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, message: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, assetOrMetaFilePaths: Array_1[str], outNotEditablePaths: List_1[str], statusQueryOptions: StatusQueryOptions = ...) -> None:...
        @typing.overload
        def __call__(self, assetOrMetaFilePath: str, message: clr.Reference[str], statusOptions: StatusQueryOptions) -> bool:...
        @typing.overload
        def __call__(self, assetObject: Object, message: clr.Reference[str], statusOptions: StatusQueryOptions) -> bool:...

    # Skipped IsSubAsset due to it being static, abstract and generic.

    IsSubAsset : IsSubAsset_MethodGroup
    class IsSubAsset_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, obj: Object) -> bool:...

    # Skipped LoadAssetAtPath due to it being static, abstract and generic.

    LoadAssetAtPath : LoadAssetAtPath_MethodGroup
    class LoadAssetAtPath_MethodGroup:
        def __getitem__(self, t:typing.Type[LoadAssetAtPath_1_T1]) -> LoadAssetAtPath_1[LoadAssetAtPath_1_T1]: ...

        LoadAssetAtPath_1_T1 = typing.TypeVar('LoadAssetAtPath_1_T1')
        class LoadAssetAtPath_1(typing.Generic[LoadAssetAtPath_1_T1]):
            LoadAssetAtPath_1_T = AssetDatabase.LoadAssetAtPath_MethodGroup.LoadAssetAtPath_1_T1
            def __call__(self, assetPath: str) -> LoadAssetAtPath_1_T:...

        def __call__(self, assetPath: str, type: typing.Type[typing.Any]) -> Object:...

    # Skipped MakeEditable due to it being static, abstract and generic.

    MakeEditable : MakeEditable_MethodGroup
    class MakeEditable_MethodGroup:
        @typing.overload
        def __call__(self, path: str) -> bool:...
        @typing.overload
        def __call__(self, paths: Array_1[str], prompt: str = ..., outNotEditablePaths: List_1[str] = ...) -> bool:...

    # Skipped OpenAsset due to it being static, abstract and generic.

    OpenAsset : OpenAsset_MethodGroup
    class OpenAsset_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, objects: Array_1[Object]) -> bool:...
        @typing.overload
        def __call__(self, target: Object) -> bool:...
        @typing.overload
        def __call__(self, instanceID: int, lineNumber: int) -> bool:...
        @typing.overload
        def __call__(self, target: Object, lineNumber: int) -> bool:...
        @typing.overload
        def __call__(self, instanceID: int, lineNumber: int, columnNumber: int) -> bool:...
        @typing.overload
        def __call__(self, target: Object, lineNumber: int, columnNumber: int) -> bool:...

    # Skipped Refresh due to it being static, abstract and generic.

    Refresh : Refresh_MethodGroup
    class Refresh_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, options: ImportAssetOptions) -> None:...

    # Skipped RefreshDelayed due to it being static, abstract and generic.

    RefreshDelayed : RefreshDelayed_MethodGroup
    class RefreshDelayed_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, options: ImportAssetOptions) -> None:...

    # Skipped SaveAssetIfDirty due to it being static, abstract and generic.

    SaveAssetIfDirty : SaveAssetIfDirty_MethodGroup
    class SaveAssetIfDirty_MethodGroup:
        @typing.overload
        def __call__(self, guid: GUID) -> None:...
        @typing.overload
        def __call__(self, obj: Object) -> None:...

    # Skipped SetImporterOverride due to it being static, abstract and generic.

    SetImporterOverride : SetImporterOverride_MethodGroup
    class SetImporterOverride_MethodGroup:
        def __getitem__(self, t:typing.Type[SetImporterOverride_1_T1]) -> SetImporterOverride_1[SetImporterOverride_1_T1]: ...

        SetImporterOverride_1_T1 = typing.TypeVar('SetImporterOverride_1_T1')
        class SetImporterOverride_1(typing.Generic[SetImporterOverride_1_T1]):
            SetImporterOverride_1_T = AssetDatabase.SetImporterOverride_MethodGroup.SetImporterOverride_1_T1
            def __call__(self, path: str) -> None:...


    # Skipped TryGetGUIDAndLocalFileIdentifier due to it being static, abstract and generic.

    TryGetGUIDAndLocalFileIdentifier : TryGetGUIDAndLocalFileIdentifier_MethodGroup
    class TryGetGUIDAndLocalFileIdentifier_MethodGroup:
        def __getitem__(self, t:typing.Type[TryGetGUIDAndLocalFileIdentifier_1_T1]) -> TryGetGUIDAndLocalFileIdentifier_1[TryGetGUIDAndLocalFileIdentifier_1_T1]: ...

        TryGetGUIDAndLocalFileIdentifier_1_T1 = typing.TypeVar('TryGetGUIDAndLocalFileIdentifier_1_T1')
        class TryGetGUIDAndLocalFileIdentifier_1(typing.Generic[TryGetGUIDAndLocalFileIdentifier_1_T1]):
            TryGetGUIDAndLocalFileIdentifier_1_T = AssetDatabase.TryGetGUIDAndLocalFileIdentifier_MethodGroup.TryGetGUIDAndLocalFileIdentifier_1_T1
            def __call__(self, assetRef: LazyLoadReference_1[TryGetGUIDAndLocalFileIdentifier_1_T], guid: clr.Reference[str], localId: clr.Reference[int]) -> bool:...

        @typing.overload
        def __call__(self, instanceID: int, guid: clr.Reference[str], localId: clr.Reference[int]) -> bool:...
        # Method TryGetGUIDAndLocalFileIdentifier(instanceID : Int32, guid : String&, localId : Int64&) was skipped since it collides with above method
        @typing.overload
        def __call__(self, obj: Object, guid: clr.Reference[str], localId: clr.Reference[int]) -> bool:...
        # Method TryGetGUIDAndLocalFileIdentifier(obj : Object, guid : String&, localId : Int64&) was skipped since it collides with above method


    class ImportPackageCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, packageName: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, packageName: str) -> None: ...


    class ImportPackageFailedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, packageName: str, errorMessage: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, packageName: str, errorMessage: str) -> None: ...


    class RefreshImportMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        InProcess : AssetDatabase.RefreshImportMode # 0
        OutOfProcessPerQueue : AssetDatabase.RefreshImportMode # 1



class AssetDatabaseLoadOperation(AsyncOperation):
    def __init__(self) -> None: ...
    @property
    def allowSceneActivation(self) -> bool: ...
    @allowSceneActivation.setter
    def allowSceneActivation(self, value: bool) -> bool: ...
    @property
    def isDone(self) -> bool: ...
    @property
    def LoadedObject(self) -> Object: ...
    @property
    def priority(self) -> int: ...
    @priority.setter
    def priority(self, value: int) -> int: ...
    @property
    def progress(self) -> float: ...


class AssetDeleteResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DidNotDelete : AssetDeleteResult # 0
    FailedDelete : AssetDeleteResult # 1
    DidDelete : AssetDeleteResult # 2


class AssetImporter(Object):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    def AddRemap(self, identifier: AssetImporter.SourceAssetIdentifier, externalObject: Object) -> None: ...
    @staticmethod
    def GetAtPath(path: str) -> AssetImporter: ...
    def GetExternalObjectMap(self) -> Dictionary_2[AssetImporter.SourceAssetIdentifier, Object]: ...
    @staticmethod
    def GetImportLog(path: str) -> ImportLog: ...
    def RemoveRemap(self, identifier: AssetImporter.SourceAssetIdentifier) -> bool: ...
    def SaveAndReimport(self) -> None: ...
    def SetAssetBundleNameAndVariant(self, assetBundleName: str, assetBundleVariant: str) -> None: ...
    def SupportsRemappedAssetType(self, type: typing.Type[typing.Any]) -> bool: ...

    class SourceAssetIdentifier:
        @typing.overload
        def __init__(self, asset: Object) -> None: ...
        @typing.overload
        def __init__(self, type: typing.Type[typing.Any], name: str) -> None: ...
        name : str
        type : typing.Type[typing.Any]



class AssetModificationProcessor:
    def __init__(self) -> None: ...


class AssetMoveResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DidNotMove : AssetMoveResult # 0
    FailedMove : AssetMoveResult # 1
    DidMove : AssetMoveResult # 2


class AssetPathToGUIDOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    IncludeRecentlyDeletedAssets : AssetPathToGUIDOptions # 0
    OnlyExistingAssets : AssetPathToGUIDOptions # 1


class AssetPipelineMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Version1 : AssetPipelineMode # 0
    Version2 : AssetPipelineMode # 1


class AssetPostprocessor:
    def __init__(self) -> None: ...
    @property
    def assetImporter(self) -> AssetImporter: ...
    @property
    def assetPath(self) -> str: ...
    @assetPath.setter
    def assetPath(self, value: str) -> str: ...
    @property
    def context(self) -> AssetImportContext: ...
    @context.setter
    def context(self, value: AssetImportContext) -> AssetImportContext: ...
    @property
    def preview(self) -> Texture2D: ...
    @preview.setter
    def preview(self, value: Texture2D) -> Texture2D: ...
    def GetPostprocessOrder(self) -> int: ...
    def GetVersion(self) -> int: ...
    # Skipped LogError due to it being static, abstract and generic.

    LogError : LogError_MethodGroup
    class LogError_MethodGroup:
        @typing.overload
        def __call__(self, warning: str) -> None:...
        @typing.overload
        def __call__(self, warning: str, context: Object) -> None:...

    # Skipped LogWarning due to it being static, abstract and generic.

    LogWarning : LogWarning_MethodGroup
    class LogWarning_MethodGroup:
        @typing.overload
        def __call__(self, warning: str) -> None:...
        @typing.overload
        def __call__(self, warning: str, context: Object) -> None:...



class AssetPreview:
    def __init__(self) -> None: ...
    @staticmethod
    def GetAssetPreview(asset: Object) -> Texture2D: ...
    @staticmethod
    def GetMiniThumbnail(obj: Object) -> Texture2D: ...
    @staticmethod
    def GetMiniTypeThumbnail(type: typing.Type[typing.Any]) -> Texture2D: ...
    @staticmethod
    def IsLoadingAssetPreview(instanceID: int) -> bool: ...
    @staticmethod
    def IsLoadingAssetPreviews() -> bool: ...
    @staticmethod
    def SetPreviewTextureCacheSize(size: int) -> None: ...


class AssetSettingsProvider(SettingsProvider):
    @typing.overload
    def __init__(self, settingsWindowPath: str, editorCreator: Func_1[Editor], keywords: IEnumerable_1[str] = ...) -> None: ...
    @typing.overload
    def __init__(self, settingsWindowPath: str, settingsGetter: Func_1[Object]) -> None: ...
    @property
    def activateHandler(self) -> Action_2[str, VisualElement]: ...
    @activateHandler.setter
    def activateHandler(self, value: Action_2[str, VisualElement]) -> Action_2[str, VisualElement]: ...
    @property
    def deactivateHandler(self) -> Action: ...
    @deactivateHandler.setter
    def deactivateHandler(self, value: Action) -> Action: ...
    @property
    def footerBarGuiHandler(self) -> Action: ...
    @footerBarGuiHandler.setter
    def footerBarGuiHandler(self, value: Action) -> Action: ...
    @property
    def guiHandler(self) -> Action_1[str]: ...
    @guiHandler.setter
    def guiHandler(self, value: Action_1[str]) -> Action_1[str]: ...
    @property
    def hasSearchInterestHandler(self) -> Func_2[str, bool]: ...
    @hasSearchInterestHandler.setter
    def hasSearchInterestHandler(self, value: Func_2[str, bool]) -> Func_2[str, bool]: ...
    @property
    def inspectorUpdateHandler(self) -> Action: ...
    @inspectorUpdateHandler.setter
    def inspectorUpdateHandler(self, value: Action) -> Action: ...
    @property
    def keywords(self) -> IEnumerable_1[str]: ...
    @keywords.setter
    def keywords(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def scope(self) -> SettingsScope: ...
    @property
    def settingsEditor(self) -> Editor: ...
    @settingsEditor.setter
    def settingsEditor(self, value: Editor) -> Editor: ...
    @property
    def settingsPath(self) -> str: ...
    @property
    def titleBarGuiHandler(self) -> Action: ...
    @titleBarGuiHandler.setter
    def titleBarGuiHandler(self, value: Action) -> Action: ...
    @staticmethod
    def CreateProviderFromAssetPath(settingsWindowPath: str, assetPath: str, keywords: IEnumerable_1[str] = ...) -> AssetSettingsProvider: ...
    @staticmethod
    def CreateProviderFromObject(settingsWindowPath: str, settingsObj: Object, keywords: IEnumerable_1[str] = ...) -> AssetSettingsProvider: ...
    @staticmethod
    def CreateProviderFromResourcePath(settingsWindowPath: str, resourcePath: str, keywords: IEnumerable_1[str] = ...) -> AssetSettingsProvider: ...
    def OnActivate(self, searchContext: str, rootElement: VisualElement) -> None: ...
    def OnDeactivate(self) -> None: ...
    def OnFooterBarGUI(self) -> None: ...
    def OnGUI(self, searchContext: str) -> None: ...
    def OnTitleBarGUI(self) -> None: ...


class AssetsItem:
    def __init__(self) -> None: ...
    assetIsDir : int
    changeFlags : int
    enabled : int
    exists : int
    exportedAssetPath : str
    guid : str
    guidFolder : str
    message : str
    pathName : str
    previewPath : str


class AssetStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ClientOnly : AssetStatus # 0
    ServerOnly : AssetStatus # 1
    Unchanged : AssetStatus # 2
    Conflict : AssetStatus # 3
    Same : AssetStatus # 4
    NewVersionAvailable : AssetStatus # 5
    NewLocalVersion : AssetStatus # 6
    RestoredFromTrash : AssetStatus # 7
    Ignored : AssetStatus # 8
    BadState : AssetStatus # 9
    Calculating : AssetStatus # -1


class AssetStoreAsset:
    def __init__(self) -> None: ...
    className : str
    displayName : str
    dynamicPreviewURL : str
    id : int
    name : str
    packageID : int
    previewImage : Texture2D
    price : str
    staticPreviewURL : str
    @property
    def HasLivePreview(self) -> bool: ...
    @property
    def Preview(self) -> Object: ...
    def Dispose(self) -> None: ...


class AudioCurveRendering:
    def __init__(self) -> None: ...
    kAudioOrange : Color
    @staticmethod
    def BeginCurveFrame(r: Rect) -> Rect: ...
    @staticmethod
    def DrawCurve(r: Rect, eval: AudioCurveRendering.AudioCurveEvaluator, curveColor: Color) -> None: ...
    @staticmethod
    def DrawCurveBackground(r: Rect) -> None: ...
    @staticmethod
    def DrawCurveFrame(r: Rect) -> Rect: ...
    @staticmethod
    def DrawGradientRect(r: Rect, c1: Color, c2: Color, blend: float, horizontal: bool) -> None: ...
    @staticmethod
    def DrawMinMaxFilledCurve(r: Rect, eval: AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator) -> None: ...
    @staticmethod
    def DrawSymmetricFilledCurve(r: Rect, eval: AudioCurveRendering.AudioCurveAndColorEvaluator) -> None: ...
    @staticmethod
    def EndCurveFrame() -> None: ...
    # Skipped DrawFilledCurve due to it being static, abstract and generic.

    DrawFilledCurve : DrawFilledCurve_MethodGroup
    class DrawFilledCurve_MethodGroup:
        @typing.overload
        def __call__(self, r: Rect, eval: AudioCurveRendering.AudioCurveAndColorEvaluator) -> None:...
        @typing.overload
        def __call__(self, r: Rect, eval: AudioCurveRendering.AudioCurveEvaluator, curveColor: Color) -> None:...


    class AudioCurveAndColorEvaluator(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, x: float, col: clr.Reference[Color], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, col: clr.Reference[Color], result: IAsyncResult) -> float: ...
        def Invoke(self, x: float, col: clr.Reference[Color]) -> float: ...


    class AudioCurveEvaluator(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, x: float, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> float: ...
        def Invoke(self, x: float) -> float: ...


    class AudioMinMaxCurveAndColorEvaluator(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, x: float, col: clr.Reference[Color], minValue: clr.Reference[float], maxValue: clr.Reference[float], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, col: clr.Reference[Color], minValue: clr.Reference[float], maxValue: clr.Reference[float], result: IAsyncResult) -> None: ...
        def Invoke(self, x: float, col: clr.Reference[Color], minValue: clr.Reference[float], maxValue: clr.Reference[float]) -> None: ...



class AudioImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def ambisonic(self) -> bool: ...
    @ambisonic.setter
    def ambisonic(self, value: bool) -> bool: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def channels(self) -> AudioImporterChannels: ...
    @channels.setter
    def channels(self, value: AudioImporterChannels) -> AudioImporterChannels: ...
    @property
    def compressionBitrate(self) -> int: ...
    @compressionBitrate.setter
    def compressionBitrate(self, value: int) -> int: ...
    @property
    def defaultSampleSettings(self) -> AudioImporterSampleSettings: ...
    @defaultSampleSettings.setter
    def defaultSampleSettings(self, value: AudioImporterSampleSettings) -> AudioImporterSampleSettings: ...
    @property
    def forceToMono(self) -> bool: ...
    @forceToMono.setter
    def forceToMono(self, value: bool) -> bool: ...
    @property
    def hardware(self) -> bool: ...
    @hardware.setter
    def hardware(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def loadInBackground(self) -> bool: ...
    @loadInBackground.setter
    def loadInBackground(self, value: bool) -> bool: ...
    @property
    def loopable(self) -> bool: ...
    @loopable.setter
    def loopable(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def preloadAudioData(self) -> bool: ...
    @preloadAudioData.setter
    def preloadAudioData(self, value: bool) -> bool: ...
    @property
    def threeD(self) -> bool: ...
    @threeD.setter
    def threeD(self, value: bool) -> bool: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    # Skipped ClearSampleSettingOverride due to it being static, abstract and generic.

    ClearSampleSettingOverride : ClearSampleSettingOverride_MethodGroup
    class ClearSampleSettingOverride_MethodGroup:
        @typing.overload
        def __call__(self, platformGroup: BuildTargetGroup) -> bool:...
        @typing.overload
        def __call__(self, platform: str) -> bool:...

    # Skipped ContainsSampleSettingsOverride due to it being static, abstract and generic.

    ContainsSampleSettingsOverride : ContainsSampleSettingsOverride_MethodGroup
    class ContainsSampleSettingsOverride_MethodGroup:
        @typing.overload
        def __call__(self, platformGroup: BuildTargetGroup) -> bool:...
        @typing.overload
        def __call__(self, platform: str) -> bool:...

    # Skipped GetOverrideSampleSettings due to it being static, abstract and generic.

    GetOverrideSampleSettings : GetOverrideSampleSettings_MethodGroup
    class GetOverrideSampleSettings_MethodGroup:
        @typing.overload
        def __call__(self, platformGroup: BuildTargetGroup) -> AudioImporterSampleSettings:...
        @typing.overload
        def __call__(self, platform: str) -> AudioImporterSampleSettings:...

    # Skipped SetOverrideSampleSettings due to it being static, abstract and generic.

    SetOverrideSampleSettings : SetOverrideSampleSettings_MethodGroup
    class SetOverrideSampleSettings_MethodGroup:
        @typing.overload
        def __call__(self, platformGroup: BuildTargetGroup, settings: AudioImporterSampleSettings) -> bool:...
        @typing.overload
        def __call__(self, platform: str, settings: AudioImporterSampleSettings) -> bool:...



class AudioImporterChannels(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Automatic : AudioImporterChannels # 0
    Mono : AudioImporterChannels # 1
    Stereo : AudioImporterChannels # 2


class AudioImporterFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Compressed : AudioImporterFormat # 0
    Native : AudioImporterFormat # -1


class AudioImporterLoadType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DecompressOnLoad : AudioImporterLoadType # -1
    CompressedInMemory : AudioImporterLoadType # -1
    StreamFromDisc : AudioImporterLoadType # -1


class AudioImporterSampleSettings:
    compressionFormat : AudioCompressionFormat
    conversionMode : int
    loadType : AudioClipLoadType
    preloadAudioData : bool
    quality : float
    sampleRateOverride : int
    sampleRateSetting : AudioSampleRateSetting


class AudioSampleRateSetting(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PreserveSampleRate : AudioSampleRateSetting # 0
    OptimizeSampleRate : AudioSampleRateSetting # 1
    OverrideSampleRate : AudioSampleRateSetting # 2


class BodyPart(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Avatar : BodyPart # 0
    Body : BodyPart # 1
    Head : BodyPart # 2
    LeftArm : BodyPart # 3
    LeftFingers : BodyPart # 4
    RightArm : BodyPart # 5
    RightFingers : BodyPart # 6
    LeftLeg : BodyPart # 7
    RightLeg : BodyPart # 8
    Last : BodyPart # 9
    None_ : BodyPart # -1


class BoneState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BoneState # 0
    NotFound : BoneState # 1
    Duplicate : BoneState # 2
    InvalidHierarchy : BoneState # 3
    BoneLenghtIsZero : BoneState # 4
    Valid : BoneState # 5


class BrokenPrefabAsset(DefaultAsset):
    @property
    def brokenPrefabParent(self) -> BrokenPrefabAsset: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isPrefabFileValid(self) -> bool: ...
    @property
    def isVariant(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class BuildAssetBundleOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BuildAssetBundleOptions # 0
    UncompressedAssetBundle : BuildAssetBundleOptions # 1
    CollectDependencies : BuildAssetBundleOptions # 2
    CompleteAssets : BuildAssetBundleOptions # 4
    DisableWriteTypeTree : BuildAssetBundleOptions # 8
    DeterministicAssetBundle : BuildAssetBundleOptions # 16
    ForceRebuildAssetBundle : BuildAssetBundleOptions # 32
    IgnoreTypeTreeChanges : BuildAssetBundleOptions # 64
    AppendHashToAssetBundleName : BuildAssetBundleOptions # 128
    ChunkBasedCompression : BuildAssetBundleOptions # 256
    StrictMode : BuildAssetBundleOptions # 512
    DryRunBuild : BuildAssetBundleOptions # 1024
    DisableLoadAssetByFileName : BuildAssetBundleOptions # 4096
    DisableLoadAssetByFileNameWithExtension : BuildAssetBundleOptions # 8192
    AssetBundleStripUnityVersion : BuildAssetBundleOptions # 32768
    UseContentHash : BuildAssetBundleOptions # 65536
    RecurseDependencies : BuildAssetBundleOptions # 131072


class BuildAssetBundlesParameters:
    @property
    def bundleDefinitions(self) -> Array_1[AssetBundleBuild]: ...
    @bundleDefinitions.setter
    def bundleDefinitions(self, value: Array_1[AssetBundleBuild]) -> Array_1[AssetBundleBuild]: ...
    @property
    def options(self) -> BuildAssetBundleOptions: ...
    @options.setter
    def options(self, value: BuildAssetBundleOptions) -> BuildAssetBundleOptions: ...
    @property
    def outputPath(self) -> str: ...
    @outputPath.setter
    def outputPath(self, value: str) -> str: ...
    @property
    def subtarget(self) -> int: ...
    @subtarget.setter
    def subtarget(self, value: int) -> int: ...
    @property
    def targetPlatform(self) -> BuildTarget: ...
    @targetPlatform.setter
    def targetPlatform(self, value: BuildTarget) -> BuildTarget: ...


class BuildOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CompressTextures : BuildOptions # 0
    StripDebugSymbols : BuildOptions # 0
    None_ : BuildOptions # 0
    Il2CPP : BuildOptions # 0
    ForceOptimizeScriptCompilation : BuildOptions # 0
    Development : BuildOptions # 1
    AutoRunPlayer : BuildOptions # 4
    ShowBuiltPlayer : BuildOptions # 8
    BuildAdditionalStreamedScenes : BuildOptions # 16
    AcceptExternalModificationsToPlayer : BuildOptions # 32
    InstallInBuildFolder : BuildOptions # 64
    CleanBuildCache : BuildOptions # 128
    ConnectWithProfiler : BuildOptions # 256
    AllowDebugging : BuildOptions # 512
    SymlinkLibraries : BuildOptions # 1024
    SymlinkSources : BuildOptions # 1024
    UncompressedAssetBundle : BuildOptions # 2048
    ConnectToHost : BuildOptions # 4096
    CustomConnectionID : BuildOptions # 8192
    EnableHeadlessMode : BuildOptions # 16384
    BuildScriptsOnly : BuildOptions # 32768
    PatchPackage : BuildOptions # 65536
    ForceEnableAssertions : BuildOptions # 131072
    CompressWithLz4 : BuildOptions # 262144
    CompressWithLz4HC : BuildOptions # 524288
    ComputeCRC : BuildOptions # 1048576
    StrictMode : BuildOptions # 2097152
    IncludeTestAssemblies : BuildOptions # 4194304
    NoUniqueIdentifier : BuildOptions # 8388608
    WaitForPlayerConnection : BuildOptions # 33554432
    EnableCodeCoverage : BuildOptions # 67108864
    EnableDeepProfilingSupport : BuildOptions # 268435456
    DetailedBuildReport : BuildOptions # 536870912
    ShaderLivelinkSupport : BuildOptions # 1073741824


class BuildPipeline:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def isBuildingPlayer(cls) -> bool: ...
    @staticmethod
    def BuildCanBeAppended(target: BuildTarget, location: str) -> CanAppendBuild: ...
    @staticmethod
    def GetBuildTargetGroup(platform: BuildTarget) -> BuildTargetGroup: ...
    @staticmethod
    def GetBuildTargetName(targetPlatform: BuildTarget) -> str: ...
    @staticmethod
    def GetCRCForAssetBundle(targetPath: str, crc: clr.Reference[int]) -> bool: ...
    @staticmethod
    def GetHashForAssetBundle(targetPath: str, hash: clr.Reference[Hash128]) -> bool: ...
    @staticmethod
    def GetPlayerConnectionInitiateMode(targetPlatform: BuildTarget, buildOptions: BuildOptions) -> PlayerConnectionInitiateMode: ...
    @staticmethod
    def IsBuildTargetSupported(buildTargetGroup: BuildTargetGroup, target: BuildTarget) -> bool: ...
    @staticmethod
    def PopAssetDependencies() -> None: ...
    @staticmethod
    def PushAssetDependencies() -> None: ...
    @staticmethod
    def WriteBootConfig(outputFile: str, target: BuildTarget, options: BuildOptions) -> None: ...
    # Skipped BuildAssetBundle due to it being static, abstract and generic.

    BuildAssetBundle : BuildAssetBundle_MethodGroup
    class BuildAssetBundle_MethodGroup:
        @typing.overload
        def __call__(self, mainAsset: Object, assets: Array_1[Object], pathName: str, assetBundleOptions: BuildAssetBundleOptions, targetPlatform: BuildTarget) -> bool:...
        @typing.overload
        def __call__(self, mainAsset: Object, assets: Array_1[Object], pathName: str, crc: clr.Reference[int], assetBundleOptions: BuildAssetBundleOptions, targetPlatform: BuildTarget) -> bool:...

    # Skipped BuildAssetBundleExplicitAssetNames due to it being static, abstract and generic.

    BuildAssetBundleExplicitAssetNames : BuildAssetBundleExplicitAssetNames_MethodGroup
    class BuildAssetBundleExplicitAssetNames_MethodGroup:
        @typing.overload
        def __call__(self, assets: Array_1[Object], assetNames: Array_1[str], pathName: str, assetBundleOptions: BuildAssetBundleOptions, targetPlatform: BuildTarget) -> bool:...
        @typing.overload
        def __call__(self, assets: Array_1[Object], assetNames: Array_1[str], pathName: str, crc: clr.Reference[int], assetBundleOptions: BuildAssetBundleOptions, targetPlatform: BuildTarget) -> bool:...

    # Skipped BuildAssetBundles due to it being static, abstract and generic.

    BuildAssetBundles : BuildAssetBundles_MethodGroup
    class BuildAssetBundles_MethodGroup:
        @typing.overload
        def __call__(self, buildParameters: BuildAssetBundlesParameters) -> AssetBundleManifest:...
        @typing.overload
        def __call__(self, outputPath: str, assetBundleOptions: BuildAssetBundleOptions, targetPlatform: BuildTarget) -> AssetBundleManifest:...
        @typing.overload
        def __call__(self, outputPath: str, builds: Array_1[AssetBundleBuild], assetBundleOptions: BuildAssetBundleOptions, targetPlatform: BuildTarget) -> AssetBundleManifest:...

    # Skipped BuildPlayer due to it being static, abstract and generic.

    BuildPlayer : BuildPlayer_MethodGroup
    class BuildPlayer_MethodGroup:
        @typing.overload
        def __call__(self, buildPlayerOptions: BuildPlayerOptions) -> BuildReport:...
        @typing.overload
        def __call__(self, levels: Array_1[str], locationPathName: str, target: BuildTarget, options: BuildOptions) -> BuildReport:...
        @typing.overload
        def __call__(self, levels: Array_1[EditorBuildSettingsScene], locationPathName: str, target: BuildTarget, options: BuildOptions) -> BuildReport:...

    # Skipped BuildStreamedSceneAssetBundle due to it being static, abstract and generic.

    BuildStreamedSceneAssetBundle : BuildStreamedSceneAssetBundle_MethodGroup
    class BuildStreamedSceneAssetBundle_MethodGroup:
        @typing.overload
        def __call__(self, levels: Array_1[str], locationPath: str, target: BuildTarget) -> str:...
        @typing.overload
        def __call__(self, levels: Array_1[str], locationPath: str, target: BuildTarget, options: BuildOptions) -> str:...
        @typing.overload
        def __call__(self, levels: Array_1[str], locationPath: str, target: BuildTarget, crc: clr.Reference[int]) -> str:...
        @typing.overload
        def __call__(self, levels: Array_1[str], locationPath: str, target: BuildTarget, crc: clr.Reference[int], options: BuildOptions) -> str:...

    # Skipped GetPlaybackEngineDirectory due to it being static, abstract and generic.

    GetPlaybackEngineDirectory : GetPlaybackEngineDirectory_MethodGroup
    class GetPlaybackEngineDirectory_MethodGroup:
        @typing.overload
        def __call__(self, target: BuildTarget, options: BuildOptions) -> str:...
        @typing.overload
        def __call__(self, buildTargetGroup: BuildTargetGroup, target: BuildTarget, options: BuildOptions) -> str:...
        @typing.overload
        def __call__(self, target: BuildTarget, options: BuildOptions, assertUnsupportedPlatforms: bool) -> str:...
        @typing.overload
        def __call__(self, buildTargetGroup: BuildTargetGroup, target: BuildTarget, options: BuildOptions, assertUnsupportedPlatforms: bool) -> str:...



class BuildPlayerOptions:
    @property
    def assetBundleManifestPath(self) -> str: ...
    @assetBundleManifestPath.setter
    def assetBundleManifestPath(self, value: str) -> str: ...
    @property
    def extraScriptingDefines(self) -> Array_1[str]: ...
    @extraScriptingDefines.setter
    def extraScriptingDefines(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def locationPathName(self) -> str: ...
    @locationPathName.setter
    def locationPathName(self, value: str) -> str: ...
    @property
    def options(self) -> BuildOptions: ...
    @options.setter
    def options(self, value: BuildOptions) -> BuildOptions: ...
    @property
    def scenes(self) -> Array_1[str]: ...
    @scenes.setter
    def scenes(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def subtarget(self) -> int: ...
    @subtarget.setter
    def subtarget(self, value: int) -> int: ...
    @property
    def target(self) -> BuildTarget: ...
    @target.setter
    def target(self, value: BuildTarget) -> BuildTarget: ...
    @property
    def targetGroup(self) -> BuildTargetGroup: ...
    @targetGroup.setter
    def targetGroup(self, value: BuildTargetGroup) -> BuildTargetGroup: ...


class BuildPlayerWindow(EditorWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    @staticmethod
    def GetPlaybackEngineDownloadURL(moduleName: str) -> str: ...
    @staticmethod
    def RegisterBuildPlayerHandler(func: Action_1[BuildPlayerOptions]) -> None: ...
    @staticmethod
    def RegisterGetBuildPlayerOptionsHandler(func: Func_2[BuildPlayerOptions, BuildPlayerOptions]) -> None: ...
    @staticmethod
    def ShowBuildPlayerWindow() -> None: ...

    class BuildMethodException(Exception):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, message: str) -> None: ...
        @property
        def Data(self) -> IDictionary: ...
        @property
        def HelpLink(self) -> str: ...
        @HelpLink.setter
        def HelpLink(self, value: str) -> str: ...
        @property
        def HResult(self) -> int: ...
        @HResult.setter
        def HResult(self, value: int) -> int: ...
        @property
        def InnerException(self) -> Exception: ...
        @property
        def Message(self) -> str: ...
        @property
        def Source(self) -> str: ...
        @Source.setter
        def Source(self, value: str) -> str: ...
        @property
        def StackTrace(self) -> str: ...
        @property
        def TargetSite(self) -> MethodBase: ...


    class DefaultBuildMethods(abc.ABC):
        @staticmethod
        def BuildPlayer(options: BuildPlayerOptions) -> None: ...
        @staticmethod
        def GetBuildPlayerOptions(defaultBuildPlayerOptions: BuildPlayerOptions) -> BuildPlayerOptions: ...



class BuildTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    StandaloneOSX : BuildTarget # 2
    StandaloneOSXUniversal : BuildTarget # 3
    StandaloneOSXIntel : BuildTarget # 4
    StandaloneWindows : BuildTarget # 5
    WebPlayer : BuildTarget # 6
    WebPlayerStreamed : BuildTarget # 7
    iOS : BuildTarget # 9
    PS3 : BuildTarget # 10
    XBOX360 : BuildTarget # 11
    Android : BuildTarget # 13
    StandaloneLinux : BuildTarget # 17
    StandaloneWindows64 : BuildTarget # 19
    WebGL : BuildTarget # 20
    WSAPlayer : BuildTarget # 21
    StandaloneLinux64 : BuildTarget # 24
    StandaloneLinuxUniversal : BuildTarget # 25
    WP8Player : BuildTarget # 26
    StandaloneOSXIntel64 : BuildTarget # 27
    BlackBerry : BuildTarget # 28
    Tizen : BuildTarget # 29
    PSP2 : BuildTarget # 30
    PS4 : BuildTarget # 31
    PSM : BuildTarget # 32
    XboxOne : BuildTarget # 33
    SamsungTV : BuildTarget # 34
    N3DS : BuildTarget # 35
    WiiU : BuildTarget # 36
    tvOS : BuildTarget # 37
    Switch : BuildTarget # 38
    Lumin : BuildTarget # 39
    Stadia : BuildTarget # 40
    LinuxHeadlessSimulation : BuildTarget # 41
    CloudRendering : BuildTarget # 41
    GameCoreXboxSeries : BuildTarget # 42
    GameCoreScarlett : BuildTarget # 42
    GameCoreXboxOne : BuildTarget # 43
    PS5 : BuildTarget # 44
    EmbeddedLinux : BuildTarget # 45
    QNX : BuildTarget # 46
    VisionOS : BuildTarget # 47
    NoTarget : BuildTarget # -2
    iPhone : BuildTarget # -1
    MetroPlayer : BuildTarget # -1
    BB10 : BuildTarget # -1


class BuildTargetGroup(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : BuildTargetGroup # 0
    Standalone : BuildTargetGroup # 1
    WebPlayer : BuildTargetGroup # 2
    iPhone : BuildTargetGroup # 4
    iOS : BuildTargetGroup # 4
    PS3 : BuildTargetGroup # 5
    XBOX360 : BuildTargetGroup # 6
    Android : BuildTargetGroup # 7
    WebGL : BuildTargetGroup # 13
    WSA : BuildTargetGroup # 14
    Metro : BuildTargetGroup # 14
    WP8 : BuildTargetGroup # 15
    BlackBerry : BuildTargetGroup # 16
    Tizen : BuildTargetGroup # 17
    PSP2 : BuildTargetGroup # 18
    PS4 : BuildTargetGroup # 19
    PSM : BuildTargetGroup # 20
    XboxOne : BuildTargetGroup # 21
    SamsungTV : BuildTargetGroup # 22
    N3DS : BuildTargetGroup # 23
    WiiU : BuildTargetGroup # 24
    tvOS : BuildTargetGroup # 25
    Facebook : BuildTargetGroup # 26
    Switch : BuildTargetGroup # 27
    Lumin : BuildTargetGroup # 28
    Stadia : BuildTargetGroup # 29
    CloudRendering : BuildTargetGroup # 30
    LinuxHeadlessSimulation : BuildTargetGroup # 30
    GameCoreScarlett : BuildTargetGroup # 31
    GameCoreXboxSeries : BuildTargetGroup # 31
    GameCoreXboxOne : BuildTargetGroup # 32
    PS5 : BuildTargetGroup # 33
    EmbeddedLinux : BuildTargetGroup # 34
    QNX : BuildTargetGroup # 35
    VisionOS : BuildTargetGroup # 36


class CacheServerConnectionChangedParameters:
    pass


class CacheServerMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AsPreferences : CacheServerMode # 0
    Enabled : CacheServerMode # 1
    Disabled : CacheServerMode # 2


class CacheServerValidationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : CacheServerValidationMode # 0
    UploadOnly : CacheServerValidationMode # 1
    Enabled : CacheServerValidationMode # 2
    Required : CacheServerValidationMode # 3


class CallbackOrderAttribute(Attribute):
    @property
    def TypeId(self) -> typing.Any: ...


class CameraEditor(Editor):
    def __init__(self) -> None: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    def CreatePreviewOverlay(self, cam: Camera) -> Overlay: ...
    def OnDestroy(self) -> None: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    def OnInspectorGUI(self) -> None: ...
    def OnOverlayGUI(self, target: Object, sceneView: SceneView) -> None: ...
    def OnSceneGUI(self) -> None: ...

    class Settings:
        def __init__(self, so: SerializedObject) -> None: ...
        @property
        def allowDynamicResolution(self) -> SerializedProperty: ...
        @allowDynamicResolution.setter
        def allowDynamicResolution(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def allowMSAA(self) -> SerializedProperty: ...
        @allowMSAA.setter
        def allowMSAA(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def anamorphism(self) -> SerializedProperty: ...
        @anamorphism.setter
        def anamorphism(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def aperture(self) -> SerializedProperty: ...
        @aperture.setter
        def aperture(self, value: SerializedProperty) -> SerializedProperty: ...
        @classmethod
        @property
        def ApertureFormatNames(cls) -> IEnumerable_1[str]: ...
        @classmethod
        @property
        def ApertureFormatValues(cls) -> IEnumerable_1[Vector2]: ...
        @property
        def backgroundColor(self) -> SerializedProperty: ...
        @backgroundColor.setter
        def backgroundColor(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def barrelClipping(self) -> SerializedProperty: ...
        @barrelClipping.setter
        def barrelClipping(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def bladeCount(self) -> SerializedProperty: ...
        @bladeCount.setter
        def bladeCount(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def clearFlags(self) -> SerializedProperty: ...
        @clearFlags.setter
        def clearFlags(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def cullingMask(self) -> SerializedProperty: ...
        @cullingMask.setter
        def cullingMask(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def curvature(self) -> SerializedProperty: ...
        @curvature.setter
        def curvature(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def depth(self) -> SerializedProperty: ...
        @depth.setter
        def depth(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def farClippingPlane(self) -> SerializedProperty: ...
        @farClippingPlane.setter
        def farClippingPlane(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def focalLength(self) -> SerializedProperty: ...
        @focalLength.setter
        def focalLength(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def focusDistance(self) -> SerializedProperty: ...
        @focusDistance.setter
        def focusDistance(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def fovAxisMode(self) -> SerializedProperty: ...
        @fovAxisMode.setter
        def fovAxisMode(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def gateFit(self) -> SerializedProperty: ...
        @gateFit.setter
        def gateFit(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def HDR(self) -> SerializedProperty: ...
        @HDR.setter
        def HDR(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def iso(self) -> SerializedProperty: ...
        @iso.setter
        def iso(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def lensShift(self) -> SerializedProperty: ...
        @lensShift.setter
        def lensShift(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def nearClippingPlane(self) -> SerializedProperty: ...
        @nearClippingPlane.setter
        def nearClippingPlane(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def normalizedViewPortRect(self) -> SerializedProperty: ...
        @normalizedViewPortRect.setter
        def normalizedViewPortRect(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def occlusionCulling(self) -> SerializedProperty: ...
        @occlusionCulling.setter
        def occlusionCulling(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def orthographic(self) -> SerializedProperty: ...
        @orthographic.setter
        def orthographic(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def orthographicSize(self) -> SerializedProperty: ...
        @orthographicSize.setter
        def orthographicSize(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def renderingPath(self) -> SerializedProperty: ...
        @renderingPath.setter
        def renderingPath(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def sensorSize(self) -> SerializedProperty: ...
        @sensorSize.setter
        def sensorSize(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shutterSpeed(self) -> SerializedProperty: ...
        @shutterSpeed.setter
        def shutterSpeed(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def stereoConvergence(self) -> SerializedProperty: ...
        @stereoConvergence.setter
        def stereoConvergence(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def stereoSeparation(self) -> SerializedProperty: ...
        @stereoSeparation.setter
        def stereoSeparation(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def targetDisplay(self) -> SerializedProperty: ...
        @targetDisplay.setter
        def targetDisplay(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def targetEye(self) -> SerializedProperty: ...
        @targetEye.setter
        def targetEye(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def targetTexture(self) -> SerializedProperty: ...
        @targetTexture.setter
        def targetTexture(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def verticalFOV(self) -> SerializedProperty: ...
        @verticalFOV.setter
        def verticalFOV(self, value: SerializedProperty) -> SerializedProperty: ...
        def ApplyModifiedProperties(self) -> None: ...
        def DrawBackgroundColor(self) -> None: ...
        @staticmethod
        def DrawCameraWarnings(camera: Camera) -> None: ...
        def DrawClearFlags(self) -> None: ...
        def DrawClippingPlanes(self) -> None: ...
        def DrawCullingMask(self) -> None: ...
        def DrawDepth(self) -> None: ...
        def DrawDynamicResolution(self) -> None: ...
        def DrawHDR(self) -> None: ...
        def DrawMSAA(self) -> None: ...
        def DrawMultiDisplay(self) -> None: ...
        def DrawNormalizedViewPort(self) -> None: ...
        def DrawOcclusionCulling(self) -> None: ...
        def DrawProjection(self) -> None: ...
        def DrawRenderingPath(self) -> None: ...
        def DrawTargetEye(self) -> None: ...
        def DrawTargetTexture(self, deferred: bool) -> None: ...
        def DrawVR(self) -> None: ...
        def OnEnable(self) -> None: ...
        def Update(self) -> None: ...



class CameraEditorUtils(abc.ABC):
    @classmethod
    @property
    def GameViewAspectRatio(cls) -> float: ...
    @staticmethod
    def DrawFrustumGizmo(camera: Camera) -> None: ...
    @staticmethod
    def GetFrustumAspectRatio(camera: Camera) -> float: ...
    @staticmethod
    def GetFrustumPlaneAt(clipToWorld: Matrix4x4, viewPosition: Vector3, distance: float, points: Array_1[Vector3]) -> None: ...
    @staticmethod
    def HandleFrustum(c: Camera, cameraEditorTargetIndex: int) -> None: ...
    @staticmethod
    def IsViewportRectValidToRender(normalizedViewPortRect: Rect) -> bool: ...
    @staticmethod
    def PerspectiveClipToWorld(clipToWorld: Matrix4x4, viewPositionWS: Vector3, positionCS: Vector3) -> Vector3: ...
    @staticmethod
    def TryGetFrustum(camera: Camera, near: Array_1[Vector3], far: Array_1[Vector3], frustumAspect: clr.Reference[float]) -> bool: ...
    @staticmethod
    def TryGetSensorGateFrustum(camera: Camera, near: Array_1[Vector3], far: Array_1[Vector3], frustumAspect: clr.Reference[float]) -> bool: ...


class CameraProjectionCache:
    def __init__(self, camera: Camera) -> None: ...
    def GUIToScreenPoint(self, guiPoint: Vector2) -> Vector2: ...
    def ScreenToGUIPoint(self, screenPoint: Vector2) -> Vector2: ...
    def WorldToGUIPoint(self, worldPoint: Vector3) -> Vector2: ...
    def WorldToScreenPoint(self, worldPoint: Vector3) -> Vector2: ...


class CanAppendBuild(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unsupported : CanAppendBuild # 0
    Yes : CanAppendBuild # 1
    No : CanAppendBuild # 2


class CanEditMultipleObjects(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ChangeAssetObjectPropertiesEventArgs:
    def __init__(self, guid: GUID, instanceId: int, scene: Scene) -> None: ...
    @property
    def guid(self) -> GUID: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class ChangeChildrenOrderEventArgs:
    def __init__(self, instanceId: int, scene: Scene) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class ChangeGameObjectOrComponentPropertiesEventArgs:
    def __init__(self, instanceId: int, scene: Scene) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class ChangeGameObjectParentEventArgs:
    def __init__(self, instanceId: int, previousScene: Scene, previousParentInstanceId: int, newScene: Scene, newParentInstanceId: int) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def newParentInstanceId(self) -> int: ...
    @property
    def newScene(self) -> Scene: ...
    @property
    def previousParentInstanceId(self) -> int: ...
    @property
    def previousScene(self) -> Scene: ...


class ChangeGameObjectStructureEventArgs:
    def __init__(self, instanceId: int, scene: Scene) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class ChangeGameObjectStructureHierarchyEventArgs:
    def __init__(self, instanceId: int, scene: Scene) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class ChangeSceneEventArgs:
    def __init__(self, scene: Scene) -> None: ...
    @property
    def scene(self) -> Scene: ...


class ClipAnimationInfoCurve:
    curve : AnimationCurve
    name : str


class ClipAnimationMaskType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CreateFromThisModel : ClipAnimationMaskType # 0
    CopyFromOther : ClipAnimationMaskType # 1
    None_ : ClipAnimationMaskType # 3


class ClipboardUtility(abc.ABC):
    canCopyGameObject : Func_2[GameObject, bool]
    canCutGameObject : Func_2[GameObject, bool]
    canDuplicateGameObject : Func_2[GameObject, bool]


class CloudProjectSettings:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def accessToken(cls) -> str: ...
    @classmethod
    @property
    def coppaCompliance(cls) -> CoppaCompliance: ...
    @classmethod
    @property
    def organizationId(cls) -> str: ...
    @classmethod
    @property
    def organizationKey(cls) -> str: ...
    @classmethod
    @property
    def organizationName(cls) -> str: ...
    @classmethod
    @property
    def projectBound(cls) -> bool: ...
    @classmethod
    @property
    def projectId(cls) -> str: ...
    @classmethod
    @property
    def projectName(cls) -> str: ...
    @classmethod
    @property
    def userId(cls) -> str: ...
    @classmethod
    @property
    def userName(cls) -> str: ...
    @staticmethod
    def RefreshAccessToken(refresh: Action_1[bool]) -> None: ...
    @staticmethod
    def ShowLogin() -> None: ...


class CloudProjectSettingsEventManager:
    @classmethod
    @property
    def instance(cls) -> CloudProjectSettingsEventManager: ...


class ColorPickerHDRConfig:
    def __init__(self, minBrightness: float, maxBrightness: float, minExposureValue: float, maxExposureValue: float) -> None: ...
    maxBrightness : float
    maxExposureValue : float
    minBrightness : float
    minExposureValue : float


class CommandExecuteContext:
    def __init__(self) -> None: ...
    args : Array_1[typing.Any]
    hint : CommandHint
    result : typing.Any
    @property
    def data(self) -> typing.Any: ...
    # Skipped GetArgument due to it being static, abstract and generic.

    GetArgument : GetArgument_MethodGroup
    class GetArgument_MethodGroup:
        def __getitem__(self, t:typing.Type[GetArgument_1_T1]) -> GetArgument_1[GetArgument_1_T1]: ...

        GetArgument_1_T1 = typing.TypeVar('GetArgument_1_T1')
        class GetArgument_1(typing.Generic[GetArgument_1_T1]):
            GetArgument_1_T = CommandExecuteContext.GetArgument_MethodGroup.GetArgument_1_T1
            def __call__(self, index: int, defaultValue: GetArgument_1_T = ...) -> GetArgument_1_T:...




class CommandHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, context: CommandExecuteContext, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, context: CommandExecuteContext) -> None: ...


class CommandHandlerAttribute(Attribute):
    @typing.overload
    def __init__(self, id: str) -> None: ...
    @typing.overload
    def __init__(self, id: str, hint: CommandHint) -> None: ...
    @typing.overload
    def __init__(self, id: str, label: str) -> None: ...
    @typing.overload
    def __init__(self, id: str, label: str, hint: CommandHint) -> None: ...
    @property
    def hint(self) -> CommandHint: ...
    @property
    def id(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CommandHint(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CommandHint # 0
    Event : CommandHint # 1
    Menu : CommandHint # 2
    Shortcut : CommandHint # 4
    Shelf : CommandHint # 8
    UI : CommandHint # 1048576
    OnGUI : CommandHint # 3145728
    UIElements : CommandHint # 5242880
    Validate : CommandHint # 1073741824
    UserDefined : CommandHint # -2147483648
    Undefined : CommandHint # -1
    Any : CommandHint # -1


class CommandService(abc.ABC):
    @staticmethod
    def Exists(id: str) -> bool: ...
    @staticmethod
    def GetCommandLabel(commandId: str) -> str: ...
    @staticmethod
    def UnregisterCommand(id: str) -> bool: ...
    # Skipped Execute due to it being static, abstract and generic.

    Execute : Execute_MethodGroup
    class Execute_MethodGroup:
        @typing.overload
        def __call__(self, id: str) -> typing.Any:...
        @typing.overload
        def __call__(self, id: str, hint: CommandHint) -> typing.Any:...
        @typing.overload
        def __call__(self, id: str, hint: CommandHint, args: Array_1[typing.Any]) -> typing.Any:...

    # Skipped RegisterCommand due to it being static, abstract and generic.

    RegisterCommand : RegisterCommand_MethodGroup
    class RegisterCommand_MethodGroup:
        @typing.overload
        def __call__(self, id: str, handler: CommandHandler, hint: CommandHint = ...) -> None:...
        @typing.overload
        def __call__(self, id: str, label: str, handler: CommandHandler, hint: CommandHint = ...) -> None:...



class ComputeShaderImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def preprocessorOverride(self) -> PreprocessorOverride: ...
    @preprocessorOverride.setter
    def preprocessorOverride(self, value: PreprocessorOverride) -> PreprocessorOverride: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...


class ConvertToPrefabInstanceSettings:
    def __init__(self) -> None: ...
    @property
    def changeRootNameToAssetName(self) -> bool: ...
    @changeRootNameToAssetName.setter
    def changeRootNameToAssetName(self, value: bool) -> bool: ...
    @property
    def componentsNotMatchedBecomesOverride(self) -> bool: ...
    @componentsNotMatchedBecomesOverride.setter
    def componentsNotMatchedBecomesOverride(self, value: bool) -> bool: ...
    @property
    def gameObjectsNotMatchedBecomesOverride(self) -> bool: ...
    @gameObjectsNotMatchedBecomesOverride.setter
    def gameObjectsNotMatchedBecomesOverride(self, value: bool) -> bool: ...
    @property
    def logInfo(self) -> bool: ...
    @logInfo.setter
    def logInfo(self, value: bool) -> bool: ...
    @property
    def objectMatchMode(self) -> ObjectMatchMode: ...
    @objectMatchMode.setter
    def objectMatchMode(self, value: ObjectMatchMode) -> ObjectMatchMode: ...
    @property
    def recordPropertyOverridesOfMatches(self) -> bool: ...
    @recordPropertyOverridesOfMatches.setter
    def recordPropertyOverridesOfMatches(self, value: bool) -> bool: ...


class CoppaCompliance(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CoppaUndefined : CoppaCompliance # 0
    CoppaCompliant : CoppaCompliance # 1
    CoppaNotCompliant : CoppaCompliance # 2


class CreateAssetObjectEventArgs:
    def __init__(self, guid: GUID, instanceId: int, scene: Scene) -> None: ...
    @property
    def guid(self) -> GUID: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class CreateGameObjectHierarchyEventArgs:
    def __init__(self, instanceId: int, scene: Scene) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class CustomEditor(Attribute):
    @typing.overload
    def __init__(self, inspectedType: typing.Type[typing.Any]) -> None: ...
    @typing.overload
    def __init__(self, inspectedType: typing.Type[typing.Any], editorForChildClasses: bool) -> None: ...
    @property
    def isFallback(self) -> bool: ...
    @isFallback.setter
    def isFallback(self, value: bool) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CustomEditorForRenderPipelineAttribute(CustomEditor):
    @typing.overload
    def __init__(self, inspectedType: typing.Type[typing.Any], renderPipeline: typing.Type[typing.Any]) -> None: ...
    @typing.overload
    def __init__(self, inspectedType: typing.Type[typing.Any], renderPipeline: typing.Type[typing.Any], editorForChildClasses: bool) -> None: ...
    @property
    def isFallback(self) -> bool: ...
    @isFallback.setter
    def isFallback(self, value: bool) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CustomPreviewAttribute(Attribute):
    def __init__(self, type: typing.Type[typing.Any]) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class CustomPropertyDrawer(Attribute):
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any]) -> None: ...
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any], useForChildren: bool) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class D3D11FullscreenMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ExclusiveMode : D3D11FullscreenMode # 0
    FullscreenWindow : D3D11FullscreenMode # 1


class D3D9FullscreenMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ExclusiveMode : D3D9FullscreenMode # 0
    FullscreenWindow : D3D9FullscreenMode # 1


class DataMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : DataMode # 0
    Authoring : DataMode # 1
    Mixed : DataMode # 2
    Runtime : DataMode # 3


class DataModeChangeEventArgs:
    def __init__(self, nextDataMode: DataMode, changedThroughUI: bool) -> None: ...
    changedThroughUI : bool
    nextDataMode : DataMode


class DDSImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def isReadable(self) -> bool: ...
    @isReadable.setter
    def isReadable(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...


class DecoratorDrawer(GUIDrawer):
    @property
    def attribute(self) -> PropertyAttribute: ...
    def CanCacheInspectorGUI(self) -> bool: ...
    def CreatePropertyGUI(self) -> VisualElement: ...
    def GetHeight(self) -> float: ...
    def OnGUI(self, position: Rect) -> None: ...


class DefaultAsset(Object):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class DefaultLightingExplorerExtension(ILightingExplorerExtension):
    def __init__(self) -> None: ...
    def GetContentTabs(self) -> Array_1[LightingExplorerTab]: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...


class DestroyAssetObjectEventArgs:
    def __init__(self, guid: GUID, instanceId: int, scene: Scene) -> None: ...
    @property
    def guid(self) -> GUID: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class DestroyGameObjectHierarchyEventArgs:
    @typing.overload
    def __init__(self, instanceId: int, parentInstanceId: int, scene: Scene) -> None: ...
    @typing.overload
    def __init__(self, instanceId: int, scene: Scene) -> None: ...
    @property
    def instanceId(self) -> int: ...
    @property
    def parentInstanceId(self) -> int: ...
    @property
    def scene(self) -> Scene: ...


class DialogOptOutDecisionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ForThisMachine : DialogOptOutDecisionType # 0
    ForThisSession : DialogOptOutDecisionType # 1


class DragAndDrop:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def activeControlID(cls) -> int: ...
    @classmethod
    @activeControlID.setter
    def activeControlID(cls, value: int) -> int: ...
    @classmethod
    @property
    def objectReferences(cls) -> Array_1[Object]: ...
    @classmethod
    @objectReferences.setter
    def objectReferences(cls, value: Array_1[Object]) -> Array_1[Object]: ...
    @classmethod
    @property
    def paths(cls) -> Array_1[str]: ...
    @classmethod
    @paths.setter
    def paths(cls, value: Array_1[str]) -> Array_1[str]: ...
    @classmethod
    @property
    def visualMode(cls) -> DragAndDropVisualMode: ...
    @classmethod
    @visualMode.setter
    def visualMode(cls, value: DragAndDropVisualMode) -> DragAndDropVisualMode: ...
    @staticmethod
    def AcceptDrag() -> None: ...
    @staticmethod
    def GetGenericData(type: str) -> typing.Any: ...
    @staticmethod
    def HasHandler(dropDstId: int, handler: Delegate) -> bool: ...
    @staticmethod
    def PrepareStartDrag() -> None: ...
    @staticmethod
    def SetGenericData(type: str, data: typing.Any) -> None: ...
    @staticmethod
    def StartDrag(title: str) -> None: ...
    # Skipped AddDropHandler due to it being static, abstract and generic.

    AddDropHandler : AddDropHandler_MethodGroup
    class AddDropHandler_MethodGroup:
        @typing.overload
        def __call__(self, handler: DragAndDrop.ProjectBrowserDropHandler) -> None:...
        @typing.overload
        def __call__(self, handler: DragAndDrop.SceneDropHandler) -> None:...
        @typing.overload
        def __call__(self, handler: DragAndDrop.HierarchyDropHandler) -> None:...
        @typing.overload
        def __call__(self, handler: DragAndDrop.InspectorDropHandler) -> None:...

    # Skipped RemoveDropHandler due to it being static, abstract and generic.

    RemoveDropHandler : RemoveDropHandler_MethodGroup
    class RemoveDropHandler_MethodGroup:
        @typing.overload
        def __call__(self, handler: DragAndDrop.ProjectBrowserDropHandler) -> None:...
        @typing.overload
        def __call__(self, handler: DragAndDrop.SceneDropHandler) -> None:...
        @typing.overload
        def __call__(self, handler: DragAndDrop.HierarchyDropHandler) -> None:...
        @typing.overload
        def __call__(self, handler: DragAndDrop.InspectorDropHandler) -> None:...


    class HierarchyDropHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, dropTargetInstanceID: int, dropMode: HierarchyDropFlags, parentForDraggedObjects: Transform, perform: bool, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> DragAndDropVisualMode: ...
        def Invoke(self, dropTargetInstanceID: int, dropMode: HierarchyDropFlags, parentForDraggedObjects: Transform, perform: bool) -> DragAndDropVisualMode: ...


    class InspectorDropHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, targets: Array_1[Object], perform: bool, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> DragAndDropVisualMode: ...
        def Invoke(self, targets: Array_1[Object], perform: bool) -> DragAndDropVisualMode: ...


    class ProjectBrowserDropHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, dragInstanceId: int, dropUponPath: str, perform: bool, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> DragAndDropVisualMode: ...
        def Invoke(self, dragInstanceId: int, dropUponPath: str, perform: bool) -> DragAndDropVisualMode: ...


    class SceneDropHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, dropUpon: Object, worldPosition: Vector3, viewportPosition: Vector2, parentForDraggedObjects: Transform, perform: bool, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> DragAndDropVisualMode: ...
        def Invoke(self, dropUpon: Object, worldPosition: Vector3, viewportPosition: Vector2, parentForDraggedObjects: Transform, perform: bool) -> DragAndDropVisualMode: ...



class DragAndDropVisualMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DragAndDropVisualMode # 0
    Copy : DragAndDropVisualMode # 1
    Link : DragAndDropVisualMode # 2
    Generic : DragAndDropVisualMode # 4
    Move : DragAndDropVisualMode # 16
    Rejected : DragAndDropVisualMode # 32


class DragAndDropWindowTarget:
    hierarchy : int
    inspector : int
    projectBrowser : int
    sceneView : int


class DrawCameraMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Textured : DrawCameraMode # 0
    Wireframe : DrawCameraMode # 1
    TexturedWire : DrawCameraMode # 2
    ShadowCascades : DrawCameraMode # 3
    RenderPaths : DrawCameraMode # 4
    AlphaChannel : DrawCameraMode # 5
    Overdraw : DrawCameraMode # 6
    Mipmaps : DrawCameraMode # 7
    DeferredDiffuse : DrawCameraMode # 8
    DeferredSpecular : DrawCameraMode # 9
    DeferredSmoothness : DrawCameraMode # 10
    DeferredNormal : DrawCameraMode # 11
    RealtimeCharting : DrawCameraMode # 12
    Systems : DrawCameraMode # 13
    RealtimeAlbedo : DrawCameraMode # 14
    RealtimeEmissive : DrawCameraMode # 15
    RealtimeIndirect : DrawCameraMode # 16
    RealtimeDirectionality : DrawCameraMode # 17
    BakedLightmap : DrawCameraMode # 18
    Clustering : DrawCameraMode # 19
    LitClustering : DrawCameraMode # 20
    ValidateAlbedo : DrawCameraMode # 21
    ValidateMetalSpecular : DrawCameraMode # 22
    ShadowMasks : DrawCameraMode # 23
    LightOverlap : DrawCameraMode # 24
    BakedAlbedo : DrawCameraMode # 25
    BakedEmissive : DrawCameraMode # 26
    BakedDirectionality : DrawCameraMode # 27
    BakedTexelValidity : DrawCameraMode # 28
    BakedIndices : DrawCameraMode # 29
    BakedCharting : DrawCameraMode # 30
    SpriteMask : DrawCameraMode # 31
    BakedUVOverlap : DrawCameraMode # 32
    TextureStreaming : DrawCameraMode # 33
    BakedLightmapCulling : DrawCameraMode # 34
    GIContributorsReceivers : DrawCameraMode # 35
    UserDefined : DrawCameraMode # -2147483648
    Baked : DrawCameraMode # -18
    Directionality : DrawCameraMode # -17
    Irradiance : DrawCameraMode # -16
    Emissive : DrawCameraMode # -15
    Albedo : DrawCameraMode # -14
    Charting : DrawCameraMode # -12
    Normal : DrawCameraMode # -1


class DrawGizmo(Attribute):
    @typing.overload
    def __init__(self, gizmo: GizmoType) -> None: ...
    @typing.overload
    def __init__(self, gizmo: GizmoType, drawnGizmoType: typing.Type[typing.Any]) -> None: ...
    drawnType : typing.Type[typing.Any]
    drawOptions : GizmoType
    @property
    def TypeId(self) -> typing.Any: ...


class Editor(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    def Cleanup(self) -> None: ...
    def CreateInspectorGUI(self) -> VisualElement: ...
    def DiscardChanges(self) -> None: ...
    def DrawDefaultInspector(self) -> bool: ...
    @staticmethod
    def DrawFoldoutInspector(target: Object, editor: clr.Reference[Editor]) -> None: ...
    def DrawHeader(self) -> None: ...
    def DrawPreview(self, previewArea: Rect) -> None: ...
    def GetInfoString(self) -> str: ...
    def GetPreviewTitle(self) -> GUIContent: ...
    def HasPreviewGUI(self) -> bool: ...
    def Initialize(self, targets: Array_1[Object]) -> None: ...
    def MoveNextTarget(self) -> bool: ...
    def OnInspectorGUI(self) -> None: ...
    def OnInteractivePreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def OnPreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def OnPreviewSettings(self) -> None: ...
    def ReloadPreviewInstances(self) -> None: ...
    def RenderStaticPreview(self, assetPath: str, subAssets: Array_1[Object], width: int, height: int) -> Texture2D: ...
    def Repaint(self) -> None: ...
    def RequiresConstantRepaint(self) -> bool: ...
    def ResetTarget(self) -> None: ...
    def SaveChanges(self) -> None: ...
    def UseDefaultMargins(self) -> bool: ...
    # Skipped CreateCachedEditor due to it being static, abstract and generic.

    CreateCachedEditor : CreateCachedEditor_MethodGroup
    class CreateCachedEditor_MethodGroup:
        @typing.overload
        def __call__(self, targetObjects: Array_1[Object], editorType: typing.Type[typing.Any], previousEditor: clr.Reference[Editor]) -> None:...
        @typing.overload
        def __call__(self, targetObject: Object, editorType: typing.Type[typing.Any], previousEditor: clr.Reference[Editor]) -> None:...

    # Skipped CreateCachedEditorWithContext due to it being static, abstract and generic.

    CreateCachedEditorWithContext : CreateCachedEditorWithContext_MethodGroup
    class CreateCachedEditorWithContext_MethodGroup:
        @typing.overload
        def __call__(self, targetObjects: Array_1[Object], context: Object, editorType: typing.Type[typing.Any], previousEditor: clr.Reference[Editor]) -> None:...
        @typing.overload
        def __call__(self, targetObject: Object, context: Object, editorType: typing.Type[typing.Any], previousEditor: clr.Reference[Editor]) -> None:...

    # Skipped CreateEditor due to it being static, abstract and generic.

    CreateEditor : CreateEditor_MethodGroup
    class CreateEditor_MethodGroup:
        @typing.overload
        def __call__(self, targetObjects: Array_1[Object]) -> Editor:...
        @typing.overload
        def __call__(self, targetObject: Object) -> Editor:...
        @typing.overload
        def __call__(self, targetObjects: Array_1[Object], editorType: typing.Type[typing.Any]) -> Editor:...
        @typing.overload
        def __call__(self, targetObject: Object, editorType: typing.Type[typing.Any]) -> Editor:...

    # Skipped CreateEditorWithContext due to it being static, abstract and generic.

    CreateEditorWithContext : CreateEditorWithContext_MethodGroup
    class CreateEditorWithContext_MethodGroup:
        @typing.overload
        def __call__(self, targetObjects: Array_1[Object], context: Object) -> Editor:...
        @typing.overload
        def __call__(self, targetObjects: Array_1[Object], context: Object, editorType: typing.Type[typing.Any]) -> Editor:...



class EditorAnalytics(abc.ABC):
    @classmethod
    @property
    def enabled(cls) -> bool: ...
    @classmethod
    @enabled.setter
    def enabled(cls, value: bool) -> bool: ...
    @staticmethod
    def SetEventWithLimitEndPoint(eventName: str, endPoint: str, ver: int) -> AnalyticsResult: ...
    @staticmethod
    def SetEventWithLimitPriority(eventName: str, eventPriority: AnalyticsEventPriority, ver: int) -> AnalyticsResult: ...
    # Skipped RegisterEventWithLimit due to it being static, abstract and generic.

    RegisterEventWithLimit : RegisterEventWithLimit_MethodGroup
    class RegisterEventWithLimit_MethodGroup:
        @typing.overload
        def __call__(self, eventName: str, maxEventPerHour: int, maxItems: int, vendorKey: str) -> AnalyticsResult:...
        @typing.overload
        def __call__(self, eventName: str, maxEventPerHour: int, maxItems: int, vendorKey: str, ver: int) -> AnalyticsResult:...

    # Skipped SendEventWithLimit due to it being static, abstract and generic.

    SendEventWithLimit : SendEventWithLimit_MethodGroup
    class SendEventWithLimit_MethodGroup:
        @typing.overload
        def __call__(self, eventName: str, parameters: typing.Any) -> AnalyticsResult:...
        @typing.overload
        def __call__(self, eventName: str, parameters: typing.Any, ver: int) -> AnalyticsResult:...



class EditorAnalyticsSessionInfo(abc.ABC):
    @classmethod
    @property
    def activeElapsedTime(cls) -> int: ...
    @classmethod
    @property
    def elapsedTime(cls) -> int: ...
    @classmethod
    @property
    def focusedElapsedTime(cls) -> int: ...
    @classmethod
    @property
    def id(cls) -> int: ...
    @classmethod
    @property
    def playbackElapsedTime(cls) -> int: ...
    @classmethod
    @property
    def sessionCount(cls) -> int: ...
    @classmethod
    @property
    def userId(cls) -> str: ...


class EditorApplication:
    def __init__(self) -> None: ...
    contextualPropertyMenu : EditorApplication.SerializedPropertyCallbackFunction
    delayCall : EditorApplication.CallbackFunction
    hierarchyWindowChanged : EditorApplication.CallbackFunction
    hierarchyWindowItemOnGUI : EditorApplication.HierarchyWindowItemCallback
    modifierKeysChanged : EditorApplication.CallbackFunction
    playmodeStateChanged : EditorApplication.CallbackFunction
    projectWindowChanged : EditorApplication.CallbackFunction
    projectWindowItemInstanceOnGUI : EditorApplication.ProjectWindowItemInstanceCallback
    projectWindowItemOnGUI : EditorApplication.ProjectWindowItemCallback
    searchChanged : EditorApplication.CallbackFunction
    update : EditorApplication.CallbackFunction
    @classmethod
    @property
    def applicationContentsPath(cls) -> str: ...
    @classmethod
    @property
    def applicationPath(cls) -> str: ...
    @classmethod
    @property
    def currentScene(cls) -> str: ...
    @classmethod
    @currentScene.setter
    def currentScene(cls, value: str) -> str: ...
    @classmethod
    @property
    def isCompiling(cls) -> bool: ...
    @classmethod
    @property
    def isFocused(cls) -> bool: ...
    @classmethod
    @isFocused.setter
    def isFocused(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def isPaused(cls) -> bool: ...
    @classmethod
    @isPaused.setter
    def isPaused(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def isPlaying(cls) -> bool: ...
    @classmethod
    @isPlaying.setter
    def isPlaying(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def isPlayingOrWillChangePlaymode(cls) -> bool: ...
    @classmethod
    @property
    def isRemoteConnected(cls) -> bool: ...
    @classmethod
    @property
    def isSceneDirty(cls) -> bool: ...
    @classmethod
    @property
    def isTemporaryProject(cls) -> bool: ...
    @classmethod
    @property
    def isUpdating(cls) -> bool: ...
    @classmethod
    @property
    def scriptingRuntimeVersion(cls) -> ScriptingRuntimeVersion: ...
    @classmethod
    @property
    def timeSinceStartup(cls) -> float: ...
    @staticmethod
    def Beep() -> None: ...
    @staticmethod
    def DirtyHierarchyWindowSorting() -> None: ...
    @staticmethod
    def EnterPlaymode() -> None: ...
    @staticmethod
    def ExecuteMenuItem(menuItemPath: str) -> bool: ...
    @staticmethod
    def Exit(returnValue: int) -> None: ...
    @staticmethod
    def ExitPlaymode() -> None: ...
    @staticmethod
    def LoadLevelAdditiveAsyncInPlayMode(path: str) -> AsyncOperation: ...
    @staticmethod
    def LoadLevelAdditiveInPlayMode(path: str) -> None: ...
    @staticmethod
    def LoadLevelAsyncInPlayMode(path: str) -> AsyncOperation: ...
    @staticmethod
    def LoadLevelInPlayMode(path: str) -> None: ...
    @staticmethod
    def LockReloadAssemblies() -> None: ...
    @staticmethod
    def MarkSceneDirty() -> None: ...
    @staticmethod
    def NewEmptyScene() -> None: ...
    @staticmethod
    def NewScene() -> None: ...
    @staticmethod
    def OpenProject(projectPath: str, args: Array_1[str]) -> None: ...
    @staticmethod
    def OpenScene(path: str) -> bool: ...
    @staticmethod
    def OpenSceneAdditive(path: str) -> None: ...
    @staticmethod
    def QueuePlayerLoopUpdate() -> None: ...
    @staticmethod
    def RepaintAnimationWindow() -> None: ...
    @staticmethod
    def RepaintHierarchyWindow() -> None: ...
    @staticmethod
    def RepaintProjectWindow() -> None: ...
    @staticmethod
    def SaveAssets() -> None: ...
    @staticmethod
    def SaveCurrentSceneIfUserWantsTo() -> bool: ...
    @staticmethod
    def SetTemporaryProjectKeepPath(path: str) -> None: ...
    @staticmethod
    def Step() -> None: ...
    @staticmethod
    def UnlockReloadAssemblies() -> None: ...
    # Skipped SaveScene due to it being static, abstract and generic.

    SaveScene : SaveScene_MethodGroup
    class SaveScene_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, path: str) -> bool:...
        @typing.overload
        def __call__(self, path: str, saveAsCopy: bool) -> bool:...


    class CallbackFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...


    class HierarchyWindowItemCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, instanceID: int, selectionRect: Rect, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, instanceID: int, selectionRect: Rect) -> None: ...


    class ProjectWindowItemCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, guid: str, selectionRect: Rect, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, guid: str, selectionRect: Rect) -> None: ...


    class ProjectWindowItemInstanceCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, instanceID: int, selectionRect: Rect, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, instanceID: int, selectionRect: Rect) -> None: ...


    class SerializedPropertyCallbackFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, menu: GenericMenu, property: SerializedProperty, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, menu: GenericMenu, property: SerializedProperty) -> None: ...



class EditorBehaviorMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mode3D : EditorBehaviorMode # 0
    Mode2D : EditorBehaviorMode # 1


class EditorBuildSettings(Object):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def scenes(cls) -> Array_1[EditorBuildSettingsScene]: ...
    @classmethod
    @scenes.setter
    def scenes(cls, value: Array_1[EditorBuildSettingsScene]) -> Array_1[EditorBuildSettingsScene]: ...
    @staticmethod
    def AddConfigObject(name: str, obj: Object, overwrite: bool) -> None: ...
    @staticmethod
    def GetConfigObjectNames() -> Array_1[str]: ...
    @staticmethod
    def RemoveConfigObject(name: str) -> bool: ...
    # Skipped TryGetConfigObject due to it being static, abstract and generic.

    TryGetConfigObject : TryGetConfigObject_MethodGroup
    class TryGetConfigObject_MethodGroup:
        def __getitem__(self, t:typing.Type[TryGetConfigObject_1_T1]) -> TryGetConfigObject_1[TryGetConfigObject_1_T1]: ...

        TryGetConfigObject_1_T1 = typing.TypeVar('TryGetConfigObject_1_T1')
        class TryGetConfigObject_1(typing.Generic[TryGetConfigObject_1_T1]):
            TryGetConfigObject_1_T = EditorBuildSettings.TryGetConfigObject_MethodGroup.TryGetConfigObject_1_T1
            def __call__(self, name: str, result: clr.Reference[TryGetConfigObject_1_T]) -> bool:...




class EditorBuildSettingsScene(IComparable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, guid: GUID, enabled: bool) -> None: ...
    @typing.overload
    def __init__(self, path: str, enabled: bool) -> None: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def guid(self) -> GUID: ...
    @guid.setter
    def guid(self, value: GUID) -> GUID: ...
    @property
    def path(self) -> str: ...
    @path.setter
    def path(self, value: str) -> str: ...
    def CompareTo(self, obj: typing.Any) -> int: ...
    @staticmethod
    def GetActiveSceneList(scenes: Array_1[EditorBuildSettingsScene]) -> Array_1[str]: ...


class EditorCurveBinding(IEquatable_1[EditorCurveBinding]):
    path : str
    propertyName : str
    @property
    def isDiscreteCurve(self) -> bool: ...
    @property
    def isPPtrCurve(self) -> bool: ...
    @property
    def isSerializeReferenceCurve(self) -> bool: ...
    @property
    def type(self) -> typing.Type[typing.Any]: ...
    @type.setter
    def type(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @staticmethod
    def DiscreteCurve(inPath: str, inType: typing.Type[typing.Any], inPropertyName: str) -> EditorCurveBinding: ...
    @staticmethod
    def FloatCurve(inPath: str, inType: typing.Type[typing.Any], inPropertyName: str) -> EditorCurveBinding: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: EditorCurveBinding, rhs: EditorCurveBinding) -> bool: ...
    def __ne__(self, lhs: EditorCurveBinding, rhs: EditorCurveBinding) -> bool: ...
    @staticmethod
    def PPtrCurve(inPath: str, inType: typing.Type[typing.Any], inPropertyName: str) -> EditorCurveBinding: ...
    @staticmethod
    def SerializeReferenceCurve(inPath: str, inType: typing.Type[typing.Any], refID: int, inPropertyName: str, isPPtr: bool, isDiscrete: bool) -> EditorCurveBinding: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: EditorCurveBinding) -> bool:...
        @typing.overload
        def __call__(self, other: typing.Any) -> bool:...



class EditorGUI:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def actionKey(cls) -> bool: ...
    @classmethod
    @property
    def indentLevel(cls) -> int: ...
    @classmethod
    @indentLevel.setter
    def indentLevel(cls, value: int) -> int: ...
    @classmethod
    @property
    def showMixedValue(cls) -> bool: ...
    @classmethod
    @showMixedValue.setter
    def showMixedValue(cls, value: bool) -> bool: ...
    @staticmethod
    def BeginChangeCheck() -> None: ...
    @staticmethod
    def BeginDisabledGroup(disabled: bool) -> None: ...
    @staticmethod
    def BeginProperty(totalPosition: Rect, label: GUIContent, property: SerializedProperty) -> GUIContent: ...
    @staticmethod
    def CanCacheInspectorGUI(property: SerializedProperty) -> bool: ...
    @staticmethod
    def DrawRect(rect: Rect, color: Color) -> None: ...
    @staticmethod
    def EndChangeCheck() -> bool: ...
    @staticmethod
    def EndDisabledGroup() -> None: ...
    @staticmethod
    def EndFoldoutHeaderGroup() -> None: ...
    @staticmethod
    def EndProperty() -> None: ...
    @staticmethod
    def FocusTextInControl(name: str) -> None: ...
    @staticmethod
    def HelpBox(position: Rect, message: str, type: MessageType) -> None: ...
    @staticmethod
    def IndentedRect(source: Rect) -> Rect: ...
    @staticmethod
    def MultiIntField(position: Rect, subLabels: Array_1[GUIContent], values: Array_1[int]) -> None: ...
    @staticmethod
    def ProgressBar(position: Rect, value: float, text: str) -> None: ...
    # Skipped BeginFoldoutHeaderGroup due to it being static, abstract and generic.

    BeginFoldoutHeaderGroup : BeginFoldoutHeaderGroup_MethodGroup
    class BeginFoldoutHeaderGroup_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: str, style: GUIStyle = ..., menuAction: Action_1[Rect] = ..., menuIcon: GUIStyle = ...) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: GUIContent, style: GUIStyle = ..., menuAction: Action_1[Rect] = ..., menuIcon: GUIStyle = ...) -> bool:...

    # Skipped BoundsField due to it being static, abstract and generic.

    BoundsField : BoundsField_MethodGroup
    class BoundsField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: Bounds) -> Bounds:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Bounds) -> Bounds:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Bounds) -> Bounds:...

    # Skipped BoundsIntField due to it being static, abstract and generic.

    BoundsIntField : BoundsIntField_MethodGroup
    class BoundsIntField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: BoundsInt) -> BoundsInt:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: BoundsInt) -> BoundsInt:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: BoundsInt) -> BoundsInt:...

    # Skipped ColorField due to it being static, abstract and generic.

    ColorField : ColorField_MethodGroup
    class ColorField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: Color) -> Color:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Color) -> Color:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Color) -> Color:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Color, showEyedropper: bool, showAlpha: bool, hdr: bool) -> Color:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Color, showEyedropper: bool, showAlpha: bool, hdr: bool, hdrConfig: ColorPickerHDRConfig) -> Color:...

    # Skipped CurveField due to it being static, abstract and generic.

    CurveField : CurveField_MethodGroup
    class CurveField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: AnimationCurve) -> AnimationCurve:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: AnimationCurve) -> AnimationCurve:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: AnimationCurve) -> AnimationCurve:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, color: Color, ranges: Rect) -> None:...
        @typing.overload
        def __call__(self, position: Rect, value: AnimationCurve, color: Color, ranges: Rect) -> AnimationCurve:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: AnimationCurve, color: Color, ranges: Rect) -> AnimationCurve:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, color: Color, ranges: Rect, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: AnimationCurve, color: Color, ranges: Rect) -> AnimationCurve:...

    # Skipped DelayedDoubleField due to it being static, abstract and generic.

    DelayedDoubleField : DelayedDoubleField_MethodGroup
    class DelayedDoubleField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float, style: GUIStyle) -> float:...

    # Skipped DelayedFloatField due to it being static, abstract and generic.

    DelayedFloatField : DelayedFloatField_MethodGroup
    class DelayedFloatField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, position: Rect, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float, style: GUIStyle) -> float:...

    # Skipped DelayedIntField due to it being static, abstract and generic.

    DelayedIntField : DelayedIntField_MethodGroup
    class DelayedIntField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, position: Rect, value: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int, style: GUIStyle) -> int:...

    # Skipped DelayedTextField due to it being static, abstract and generic.

    DelayedTextField : DelayedTextField_MethodGroup
    class DelayedTextField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, text: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, text: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, controlId: int, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, text: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, controlId: int, text: str, style: GUIStyle) -> str:...

    # Skipped DoPasswordField due to it being static, abstract and generic.

    DoPasswordField : DoPasswordField_MethodGroup
    class DoPasswordField_MethodGroup:
        @typing.overload
        def __call__(self, id: int, position: Rect, password: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, id: int, position: Rect, label: GUIContent, password: str, style: GUIStyle) -> str:...

    # Skipped DoubleField due to it being static, abstract and generic.

    DoubleField : DoubleField_MethodGroup
    class DoubleField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float, style: GUIStyle) -> float:...

    # Skipped DrawPreviewTexture due to it being static, abstract and generic.

    DrawPreviewTexture : DrawPreviewTexture_MethodGroup
    class DrawPreviewTexture_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, image: Texture) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, mat: Material) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, mat: Material, scaleMode: ScaleMode) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, mat: Material, scaleMode: ScaleMode, imageAspect: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, mat: Material, scaleMode: ScaleMode, imageAspect: float, mipLevel: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, mat: Material, scaleMode: ScaleMode, imageAspect: float, mipLevel: float, colorWriteMask: ColorWriteMask) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, mat: Material, scaleMode: ScaleMode, imageAspect: float, mipLevel: float, colorWriteMask: ColorWriteMask, exposure: float) -> None:...

    # Skipped DrawTextureAlpha due to it being static, abstract and generic.

    DrawTextureAlpha : DrawTextureAlpha_MethodGroup
    class DrawTextureAlpha_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, image: Texture) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode, imageAspect: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode, imageAspect: float, mipLevel: float) -> None:...

    # Skipped DrawTextureTransparent due to it being static, abstract and generic.

    DrawTextureTransparent : DrawTextureTransparent_MethodGroup
    class DrawTextureTransparent_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, image: Texture) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode, imageAspect: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode, imageAspect: float, mipLevel: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode, imageAspect: float, mipLevel: float, colorWriteMask: ColorWriteMask) -> None:...
        @typing.overload
        def __call__(self, position: Rect, image: Texture, scaleMode: ScaleMode, imageAspect: float, mipLevel: float, colorWriteMask: ColorWriteMask, exposure: float) -> None:...

    # Skipped DropdownButton due to it being static, abstract and generic.

    DropdownButton : DropdownButton_MethodGroup
    class DropdownButton_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, content: GUIContent, focusType: FocusType) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, content: GUIContent, focusType: FocusType, style: GUIStyle) -> bool:...

    # Skipped DropShadowLabel due to it being static, abstract and generic.

    DropShadowLabel : DropShadowLabel_MethodGroup
    class DropShadowLabel_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, text: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, content: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, text: str, style: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, position: Rect, content: GUIContent, style: GUIStyle) -> None:...

    # Skipped EnumFlagsField due to it being static, abstract and generic.

    EnumFlagsField : EnumFlagsField_MethodGroup
    class EnumFlagsField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, enumValue: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, enumValue: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, enumValue: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, enumValue: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, enumValue: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, enumValue: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, enumValue: Enum, includeObsolete: bool, style: GUIStyle = ...) -> Enum:...

    # Skipped EnumMaskField due to it being static, abstract and generic.

    EnumMaskField : EnumMaskField_MethodGroup
    class EnumMaskField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, enumValue: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, enumValue: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, enumValue: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, enumValue: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, enumValue: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, enumValue: Enum, style: GUIStyle) -> Enum:...

    # Skipped EnumMaskPopup due to it being static, abstract and generic.

    EnumMaskPopup : EnumMaskPopup_MethodGroup
    class EnumMaskPopup_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, selected: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selected: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selected: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selected: Enum, style: GUIStyle) -> Enum:...

    # Skipped EnumPopup due to it being static, abstract and generic.

    EnumPopup : EnumPopup_MethodGroup
    class EnumPopup_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, selected: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selected: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, selected: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selected: Enum) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selected: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selected: Enum, style: GUIStyle) -> Enum:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selected: Enum, checkEnabled: Func_2[Enum, bool], includeObsolete: bool = ..., style: GUIStyle = ...) -> Enum:...

    # Skipped FloatField due to it being static, abstract and generic.

    FloatField : FloatField_MethodGroup
    class FloatField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float, style: GUIStyle) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float, style: GUIStyle) -> float:...

    # Skipped Foldout due to it being static, abstract and generic.

    Foldout : Foldout_MethodGroup
    class Foldout_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: str) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: GUIContent) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: str, toggleOnLabelClick: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: str, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: GUIContent, toggleOnLabelClick: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: GUIContent, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: str, toggleOnLabelClick: bool, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, content: GUIContent, toggleOnLabelClick: bool, style: GUIStyle) -> bool:...

    # Skipped GetPropertyHeight due to it being static, abstract and generic.

    GetPropertyHeight : GetPropertyHeight_MethodGroup
    class GetPropertyHeight_MethodGroup:
        @typing.overload
        def __call__(self, property: SerializedProperty) -> float:...
        @typing.overload
        def __call__(self, type: SerializedPropertyType, label: GUIContent) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, includeChildren: bool) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, includeChildren: bool) -> float:...

    # Skipped GradientField due to it being static, abstract and generic.

    GradientField : GradientField_MethodGroup
    class GradientField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, gradient: Gradient) -> Gradient:...
        @typing.overload
        def __call__(self, position: Rect, label: str, gradient: Gradient) -> Gradient:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, gradient: Gradient) -> Gradient:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, gradient: Gradient, hdr: bool) -> Gradient:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, gradient: Gradient, hdr: bool, colorSpace: ColorSpace) -> Gradient:...

    # Skipped HandlePrefixLabel due to it being static, abstract and generic.

    HandlePrefixLabel : HandlePrefixLabel_MethodGroup
    class HandlePrefixLabel_MethodGroup:
        @typing.overload
        def __call__(self, totalPosition: Rect, labelPosition: Rect, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, totalPosition: Rect, labelPosition: Rect, label: GUIContent, id: int) -> None:...
        @typing.overload
        def __call__(self, totalPosition: Rect, labelPosition: Rect, label: GUIContent, id: int, style: GUIStyle) -> None:...

    # Skipped InspectorTitlebar due to it being static, abstract and generic.

    InspectorTitlebar : InspectorTitlebar_MethodGroup
    class InspectorTitlebar_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, targetObjs: Array_1[Object]) -> None:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, editor: Editor) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, targetObjs: Array_1[Object], expandable: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, foldout: bool, targetObj: Object, expandable: bool) -> bool:...

    # Skipped IntField due to it being static, abstract and generic.

    IntField : IntField_MethodGroup
    class IntField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, value: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int, style: GUIStyle) -> int:...

    # Skipped IntPopup due to it being static, abstract and generic.

    IntPopup : IntPopup_MethodGroup
    class IntPopup_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int]) -> None:...
        @typing.overload
        def __call__(self, position: Rect, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], style: GUIStyle) -> int:...

    # Skipped IntSlider due to it being static, abstract and generic.

    IntSlider : IntSlider_MethodGroup
    class IntSlider_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: int, leftValue: int, rightValue: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, leftValue: int, rightValue: int) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int, leftValue: int, rightValue: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int, leftValue: int, rightValue: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, leftValue: int, rightValue: int, label: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, leftValue: int, rightValue: int, label: GUIContent) -> None:...

    # Skipped LabelField due to it being static, abstract and generic.

    LabelField : LabelField_MethodGroup
    class LabelField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, label2: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, style: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, label2: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, style: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, label2: str, style: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, label2: GUIContent, style: GUIStyle) -> None:...

    # Skipped LayerField due to it being static, abstract and generic.

    LayerField : LayerField_MethodGroup
    class LayerField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, layer: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, layer: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, layer: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, layer: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, layer: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, layer: int, style: GUIStyle) -> int:...

    # Skipped LinkButton due to it being static, abstract and generic.

    LinkButton : LinkButton_MethodGroup
    class LinkButton_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent) -> bool:...

    # Skipped LongField due to it being static, abstract and generic.

    LongField : LongField_MethodGroup
    class LongField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, value: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: int, style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: int, style: GUIStyle) -> int:...

    # Skipped MaskField due to it being static, abstract and generic.

    MaskField : MaskField_MethodGroup
    class MaskField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, mask: int, displayedOptions: Array_1[str]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, mask: int, displayedOptions: Array_1[str], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, mask: int, displayedOptions: Array_1[str]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, mask: int, displayedOptions: Array_1[str]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, mask: int, displayedOptions: Array_1[str], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, mask: int, displayedOptions: Array_1[str], style: GUIStyle) -> int:...

    # Skipped MinMaxSlider due to it being static, abstract and generic.

    MinMaxSlider : MinMaxSlider_MethodGroup
    class MinMaxSlider_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, position: Rect, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float) -> None:...

    # Skipped MultiFloatField due to it being static, abstract and generic.

    MultiFloatField : MultiFloatField_MethodGroup
    class MultiFloatField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, subLabels: Array_1[GUIContent], values: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, subLabels: Array_1[GUIContent], values: Array_1[float]) -> None:...

    # Skipped MultiPropertyField due to it being static, abstract and generic.

    MultiPropertyField : MultiPropertyField_MethodGroup
    class MultiPropertyField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, subLabels: Array_1[GUIContent], valuesIterator: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, position: Rect, subLabels: Array_1[GUIContent], valuesIterator: SerializedProperty, visibility: EditorGUI.PropertyVisibility) -> None:...
        @typing.overload
        def __call__(self, position: Rect, subLabels: Array_1[GUIContent], valuesIterator: SerializedProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, subLabels: Array_1[GUIContent], valuesIterator: SerializedProperty, label: GUIContent, visibility: EditorGUI.PropertyVisibility) -> None:...

    # Skipped ObjectField due to it being static, abstract and generic.

    ObjectField : ObjectField_MethodGroup
    class ObjectField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, position: Rect, obj: Object, objType: typing.Type[typing.Any]) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, objType: typing.Type[typing.Any]) -> None:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, obj: Object, objType: typing.Type[typing.Any]) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, obj: Object, objType: typing.Type[typing.Any], allowSceneObjects: bool) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, obj: Object, objType: typing.Type[typing.Any], targetBeingEdited: Object) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, objType: typing.Type[typing.Any], label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, obj: Object, objType: typing.Type[typing.Any]) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, label: str, obj: Object, objType: typing.Type[typing.Any], allowSceneObjects: bool) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, label: str, obj: Object, objType: typing.Type[typing.Any], targetBeingEdited: Object) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, obj: Object, objType: typing.Type[typing.Any], allowSceneObjects: bool) -> Object:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, obj: Object, objType: typing.Type[typing.Any], targetBeingEdited: Object) -> Object:...

    # Skipped PasswordField due to it being static, abstract and generic.

    PasswordField : PasswordField_MethodGroup
    class PasswordField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, password: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: str, password: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, password: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, password: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: str, password: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, password: str, style: GUIStyle) -> str:...

    # Skipped Popup due to it being static, abstract and generic.

    Popup : Popup_MethodGroup
    class Popup_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, selectedIndex: int, displayedOptions: Array_1[str]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, selectedIndex: int, displayedOptions: Array_1[GUIContent]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, selectedIndex: int, displayedOptions: Array_1[str], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, selectedIndex: int, displayedOptions: Array_1[GUIContent], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selectedIndex: int, displayedOptions: Array_1[str]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selectedIndex: int, displayedOptions: Array_1[GUIContent]) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: str, selectedIndex: int, displayedOptions: Array_1[str], style: GUIStyle) -> int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, selectedIndex: int, displayedOptions: Array_1[GUIContent], style: GUIStyle) -> int:...

    # Skipped PrefixLabel due to it being static, abstract and generic.

    PrefixLabel : PrefixLabel_MethodGroup
    class PrefixLabel_MethodGroup:
        @typing.overload
        def __call__(self, totalPosition: Rect, label: GUIContent) -> Rect:...
        @typing.overload
        def __call__(self, totalPosition: Rect, id: int, label: GUIContent) -> Rect:...
        @typing.overload
        def __call__(self, totalPosition: Rect, label: GUIContent, style: GUIStyle) -> Rect:...
        @typing.overload
        def __call__(self, totalPosition: Rect, id: int, label: GUIContent, style: GUIStyle) -> Rect:...

    # Skipped PropertyField due to it being static, abstract and generic.

    PropertyField : PropertyField_MethodGroup
    class PropertyField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, includeChildren: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, label: GUIContent, includeChildren: bool) -> bool:...

    # Skipped RectField due to it being static, abstract and generic.

    RectField : RectField_MethodGroup
    class RectField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: Rect) -> Rect:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Rect) -> Rect:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Rect) -> Rect:...

    # Skipped RectIntField due to it being static, abstract and generic.

    RectIntField : RectIntField_MethodGroup
    class RectIntField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: RectInt) -> RectInt:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: RectInt) -> RectInt:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: RectInt) -> RectInt:...

    # Skipped SelectableLabel due to it being static, abstract and generic.

    SelectableLabel : SelectableLabel_MethodGroup
    class SelectableLabel_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, text: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, text: str, style: GUIStyle) -> None:...

    # Skipped Slider due to it being static, abstract and generic.

    Slider : Slider_MethodGroup
    class Slider_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: float, leftValue: float, rightValue: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, leftValue: float, rightValue: float) -> None:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: float, leftValue: float, rightValue: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: float, leftValue: float, rightValue: float) -> float:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, leftValue: float, rightValue: float, label: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, leftValue: float, rightValue: float, label: GUIContent) -> None:...

    # Skipped TagField due to it being static, abstract and generic.

    TagField : TagField_MethodGroup
    class TagField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, tag: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: str, tag: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, tag: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, tag: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: str, tag: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, tag: str, style: GUIStyle) -> str:...

    # Skipped TextArea due to it being static, abstract and generic.

    TextArea : TextArea_MethodGroup
    class TextArea_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, text: str, style: GUIStyle) -> str:...

    # Skipped TextField due to it being static, abstract and generic.

    TextField : TextField_MethodGroup
    class TextField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: str, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, text: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, text: str) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: str, text: str, style: GUIStyle) -> str:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, text: str, style: GUIStyle) -> str:...

    # Skipped Toggle due to it being static, abstract and generic.

    Toggle : Toggle_MethodGroup
    class Toggle_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, value: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, value: bool, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: bool, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: bool, style: GUIStyle) -> bool:...

    # Skipped ToggleLeft due to it being static, abstract and generic.

    ToggleLeft : ToggleLeft_MethodGroup
    class ToggleLeft_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, value: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: bool) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: str, value: bool, labelStyle: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: bool, labelStyle: GUIStyle) -> bool:...

    # Skipped Vector2Field due to it being static, abstract and generic.

    Vector2Field : Vector2Field_MethodGroup
    class Vector2Field_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Vector2) -> Vector2:...

    # Skipped Vector2IntField due to it being static, abstract and generic.

    Vector2IntField : Vector2IntField_MethodGroup
    class Vector2IntField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Vector2Int) -> Vector2Int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Vector2Int) -> Vector2Int:...

    # Skipped Vector3Field due to it being static, abstract and generic.

    Vector3Field : Vector3Field_MethodGroup
    class Vector3Field_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Vector3) -> Vector3:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Vector3) -> Vector3:...

    # Skipped Vector3IntField due to it being static, abstract and generic.

    Vector3IntField : Vector3IntField_MethodGroup
    class Vector3IntField_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Vector3Int) -> Vector3Int:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Vector3Int) -> Vector3Int:...

    # Skipped Vector4Field due to it being static, abstract and generic.

    Vector4Field : Vector4Field_MethodGroup
    class Vector4Field_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, label: str, value: Vector4) -> Vector4:...
        @typing.overload
        def __call__(self, position: Rect, label: GUIContent, value: Vector4) -> Vector4:...


    class ChangeCheckScope(GUI.Scope):
        def __init__(self) -> None: ...
        @property
        def changed(self) -> bool: ...


    class DisabledGroupScope(GUI.Scope):
        def __init__(self, disabled: bool) -> None: ...


    class DisabledScope(IDisposable):
        def __init__(self, disabled: bool) -> None: ...
        def Dispose(self) -> None: ...


    class IndentLevelScope(GUI.Scope):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, increment: int) -> None: ...


    class PropertyScope(GUI.Scope):
        def __init__(self, totalPosition: Rect, label: GUIContent, property: SerializedProperty) -> None: ...
        @property
        def content(self) -> GUIContent: ...
        @content.setter
        def content(self, value: GUIContent) -> GUIContent: ...


    class PropertyVisibility(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        All : EditorGUI.PropertyVisibility # 0
        OnlyVisible : EditorGUI.PropertyVisibility # 1



class EditorGUILayout:
    def __init__(self) -> None: ...
    @staticmethod
    def BeginBuildTargetSelectionGrouping() -> BuildTargetGroup: ...
    @staticmethod
    def BeginFadeGroup(value: float) -> bool: ...
    @staticmethod
    def EndBuildTargetSelectionGrouping() -> None: ...
    @staticmethod
    def EndFadeGroup() -> None: ...
    @staticmethod
    def EndFoldoutHeaderGroup() -> None: ...
    @staticmethod
    def EndHorizontal() -> None: ...
    @staticmethod
    def EndScrollView() -> None: ...
    @staticmethod
    def EndToggleGroup() -> None: ...
    @staticmethod
    def EndVertical() -> None: ...
    @staticmethod
    def Knob(knobSize: Vector2, value: float, minValue: float, maxValue: float, unit: str, backgroundColor: Color, activeColor: Color, showValue: bool, options: Array_1[GUILayoutOption]) -> float: ...
    @staticmethod
    def Separator() -> None: ...
    @staticmethod
    def ToolContextToolbarForTarget(content: GUIContent, target: Object) -> None: ...
    # Skipped BeginFoldoutHeaderGroup due to it being static, abstract and generic.

    BeginFoldoutHeaderGroup : BeginFoldoutHeaderGroup_MethodGroup
    class BeginFoldoutHeaderGroup_MethodGroup:
        @typing.overload
        def __call__(self, foldout: bool, content: str, style: GUIStyle = ..., menuAction: Action_1[Rect] = ..., menuIcon: GUIStyle = ...) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: GUIContent, style: GUIStyle = ..., menuAction: Action_1[Rect] = ..., menuIcon: GUIStyle = ...) -> bool:...

    # Skipped BeginHorizontal due to it being static, abstract and generic.

    BeginHorizontal : BeginHorizontal_MethodGroup
    class BeginHorizontal_MethodGroup:
        @typing.overload
        def __call__(self, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Rect:...

    # Skipped BeginScrollView due to it being static, abstract and generic.

    BeginScrollView : BeginScrollView_MethodGroup
    class BeginScrollView_MethodGroup:
        @typing.overload
        def __call__(self, scrollPosition: Vector2, options: Array_1[GUILayoutOption]) -> Vector2:...
        @typing.overload
        def __call__(self, scrollPosition: Vector2, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Vector2:...
        @typing.overload
        def __call__(self, scrollPosition: Vector2, alwaysShowHorizontal: bool, alwaysShowVertical: bool, options: Array_1[GUILayoutOption]) -> Vector2:...
        @typing.overload
        def __call__(self, scrollPosition: Vector2, horizontalScrollbar: GUIStyle, verticalScrollbar: GUIStyle, options: Array_1[GUILayoutOption]) -> Vector2:...
        @typing.overload
        def __call__(self, scrollPosition: Vector2, alwaysShowHorizontal: bool, alwaysShowVertical: bool, horizontalScrollbar: GUIStyle, verticalScrollbar: GUIStyle, background: GUIStyle, options: Array_1[GUILayoutOption]) -> Vector2:...

    # Skipped BeginToggleGroup due to it being static, abstract and generic.

    BeginToggleGroup : BeginToggleGroup_MethodGroup
    class BeginToggleGroup_MethodGroup:
        @typing.overload
        def __call__(self, label: str, toggle: bool) -> bool:...
        @typing.overload
        def __call__(self, label: GUIContent, toggle: bool) -> bool:...

    # Skipped BeginVertical due to it being static, abstract and generic.

    BeginVertical : BeginVertical_MethodGroup
    class BeginVertical_MethodGroup:
        @typing.overload
        def __call__(self, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Rect:...

    # Skipped BoundsField due to it being static, abstract and generic.

    BoundsField : BoundsField_MethodGroup
    class BoundsField_MethodGroup:
        @typing.overload
        def __call__(self, value: Bounds, options: Array_1[GUILayoutOption]) -> Bounds:...
        @typing.overload
        def __call__(self, label: str, value: Bounds, options: Array_1[GUILayoutOption]) -> Bounds:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Bounds, options: Array_1[GUILayoutOption]) -> Bounds:...

    # Skipped BoundsIntField due to it being static, abstract and generic.

    BoundsIntField : BoundsIntField_MethodGroup
    class BoundsIntField_MethodGroup:
        @typing.overload
        def __call__(self, value: BoundsInt, options: Array_1[GUILayoutOption]) -> BoundsInt:...
        @typing.overload
        def __call__(self, label: str, value: BoundsInt, options: Array_1[GUILayoutOption]) -> BoundsInt:...
        @typing.overload
        def __call__(self, label: GUIContent, value: BoundsInt, options: Array_1[GUILayoutOption]) -> BoundsInt:...

    # Skipped ColorField due to it being static, abstract and generic.

    ColorField : ColorField_MethodGroup
    class ColorField_MethodGroup:
        @typing.overload
        def __call__(self, value: Color, options: Array_1[GUILayoutOption]) -> Color:...
        @typing.overload
        def __call__(self, label: str, value: Color, options: Array_1[GUILayoutOption]) -> Color:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Color, options: Array_1[GUILayoutOption]) -> Color:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Color, showEyedropper: bool, showAlpha: bool, hdr: bool, options: Array_1[GUILayoutOption]) -> Color:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Color, showEyedropper: bool, showAlpha: bool, hdr: bool, hdrConfig: ColorPickerHDRConfig, options: Array_1[GUILayoutOption]) -> Color:...

    # Skipped CurveField due to it being static, abstract and generic.

    CurveField : CurveField_MethodGroup
    class CurveField_MethodGroup:
        @typing.overload
        def __call__(self, value: AnimationCurve, options: Array_1[GUILayoutOption]) -> AnimationCurve:...
        @typing.overload
        def __call__(self, label: str, value: AnimationCurve, options: Array_1[GUILayoutOption]) -> AnimationCurve:...
        @typing.overload
        def __call__(self, label: GUIContent, value: AnimationCurve, options: Array_1[GUILayoutOption]) -> AnimationCurve:...
        @typing.overload
        def __call__(self, property: SerializedProperty, color: Color, ranges: Rect, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, value: AnimationCurve, color: Color, ranges: Rect, options: Array_1[GUILayoutOption]) -> AnimationCurve:...
        @typing.overload
        def __call__(self, label: str, value: AnimationCurve, color: Color, ranges: Rect, options: Array_1[GUILayoutOption]) -> AnimationCurve:...
        @typing.overload
        def __call__(self, property: SerializedProperty, color: Color, ranges: Rect, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, value: AnimationCurve, color: Color, ranges: Rect, options: Array_1[GUILayoutOption]) -> AnimationCurve:...

    # Skipped DelayedDoubleField due to it being static, abstract and generic.

    DelayedDoubleField : DelayedDoubleField_MethodGroup
    class DelayedDoubleField_MethodGroup:
        @typing.overload
        def __call__(self, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...

    # Skipped DelayedFloatField due to it being static, abstract and generic.

    DelayedFloatField : DelayedFloatField_MethodGroup
    class DelayedFloatField_MethodGroup:
        @typing.overload
        def __call__(self, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...

    # Skipped DelayedIntField due to it being static, abstract and generic.

    DelayedIntField : DelayedIntField_MethodGroup
    class DelayedIntField_MethodGroup:
        @typing.overload
        def __call__(self, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...

    # Skipped DelayedTextField due to it being static, abstract and generic.

    DelayedTextField : DelayedTextField_MethodGroup
    class DelayedTextField_MethodGroup:
        @typing.overload
        def __call__(self, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, property: SerializedProperty, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...

    # Skipped DoubleField due to it being static, abstract and generic.

    DoubleField : DoubleField_MethodGroup
    class DoubleField_MethodGroup:
        @typing.overload
        def __call__(self, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...

    # Skipped DropdownButton due to it being static, abstract and generic.

    DropdownButton : DropdownButton_MethodGroup
    class DropdownButton_MethodGroup:
        @typing.overload
        def __call__(self, content: GUIContent, focusType: FocusType, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, content: GUIContent, focusType: FocusType, style: GUIStyle, options: Array_1[GUILayoutOption]) -> bool:...

    # Skipped EditorToolbar due to it being static, abstract and generic.

    EditorToolbar : EditorToolbar_MethodGroup
    class EditorToolbar_MethodGroup:
        def __getitem__(self, t:typing.Type[EditorToolbar_1_T1]) -> EditorToolbar_1[EditorToolbar_1_T1]: ...

        EditorToolbar_1_T1 = typing.TypeVar('EditorToolbar_1_T1')
        class EditorToolbar_1(typing.Generic[EditorToolbar_1_T1]):
            EditorToolbar_1_T = EditorGUILayout.EditorToolbar_MethodGroup.EditorToolbar_1_T1
            def __call__(self, tools: IList_1[EditorToolbar_1_T]) -> None:...

        def __call__(self, tools: Array_1[EditorTool]) -> None:...

    # Skipped EditorToolbarForTarget due to it being static, abstract and generic.

    EditorToolbarForTarget : EditorToolbarForTarget_MethodGroup
    class EditorToolbarForTarget_MethodGroup:
        @typing.overload
        def __call__(self, target: Object) -> None:...
        @typing.overload
        def __call__(self, content: GUIContent, target: Object) -> None:...

    # Skipped EnumFlagsField due to it being static, abstract and generic.

    EnumFlagsField : EnumFlagsField_MethodGroup
    class EnumFlagsField_MethodGroup:
        @typing.overload
        def __call__(self, enumValue: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, enumValue: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, enumValue: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, enumValue: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, enumValue: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, enumValue: Enum, includeObsolete: bool, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, enumValue: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, enumValue: Enum, includeObsolete: bool, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...

    # Skipped EnumMaskField due to it being static, abstract and generic.

    EnumMaskField : EnumMaskField_MethodGroup
    class EnumMaskField_MethodGroup:
        @typing.overload
        def __call__(self, enumValue: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, enumValue: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, enumValue: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, enumValue: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, enumValue: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, enumValue: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...

    # Skipped EnumMaskPopup due to it being static, abstract and generic.

    EnumMaskPopup : EnumMaskPopup_MethodGroup
    class EnumMaskPopup_MethodGroup:
        @typing.overload
        def __call__(self, label: str, selected: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, selected: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, selected: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, selected: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...

    # Skipped EnumPopup due to it being static, abstract and generic.

    EnumPopup : EnumPopup_MethodGroup
    class EnumPopup_MethodGroup:
        @typing.overload
        def __call__(self, selected: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, selected: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, selected: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, selected: Enum, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: str, selected: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, selected: Enum, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, selected: Enum, checkEnabled: Func_2[Enum, bool], includeObsolete: bool, options: Array_1[GUILayoutOption]) -> Enum:...
        @typing.overload
        def __call__(self, label: GUIContent, selected: Enum, checkEnabled: Func_2[Enum, bool], includeObsolete: bool, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Enum:...

    # Skipped FloatField due to it being static, abstract and generic.

    FloatField : FloatField_MethodGroup
    class FloatField_MethodGroup:
        @typing.overload
        def __call__(self, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: str, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> float:...

    # Skipped Foldout due to it being static, abstract and generic.

    Foldout : Foldout_MethodGroup
    class Foldout_MethodGroup:
        @typing.overload
        def __call__(self, foldout: bool, content: str) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: GUIContent) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: str, toggleOnLabelClick: bool) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: str, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: GUIContent, toggleOnLabelClick: bool) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: GUIContent, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: str, toggleOnLabelClick: bool, style: GUIStyle) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, content: GUIContent, toggleOnLabelClick: bool, style: GUIStyle) -> bool:...

    # Skipped GetControlRect due to it being static, abstract and generic.

    GetControlRect : GetControlRect_MethodGroup
    class GetControlRect_MethodGroup:
        @typing.overload
        def __call__(self, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, hasLabel: bool, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, hasLabel: bool, height: float, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, hasLabel: bool, height: float, style: GUIStyle, options: Array_1[GUILayoutOption]) -> Rect:...

    # Skipped GradientField due to it being static, abstract and generic.

    GradientField : GradientField_MethodGroup
    class GradientField_MethodGroup:
        @typing.overload
        def __call__(self, value: Gradient, options: Array_1[GUILayoutOption]) -> Gradient:...
        @typing.overload
        def __call__(self, label: str, value: Gradient, options: Array_1[GUILayoutOption]) -> Gradient:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Gradient, options: Array_1[GUILayoutOption]) -> Gradient:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Gradient, hdr: bool, options: Array_1[GUILayoutOption]) -> Gradient:...

    # Skipped HelpBox due to it being static, abstract and generic.

    HelpBox : HelpBox_MethodGroup
    class HelpBox_MethodGroup:
        @typing.overload
        def __call__(self, message: str, type: MessageType) -> None:...
        @typing.overload
        def __call__(self, content: GUIContent, wide: bool = ...) -> None:...
        @typing.overload
        def __call__(self, message: str, type: MessageType, wide: bool) -> None:...

    # Skipped InspectorTitlebar due to it being static, abstract and generic.

    InspectorTitlebar : InspectorTitlebar_MethodGroup
    class InspectorTitlebar_MethodGroup:
        @typing.overload
        def __call__(self, targetObjs: Array_1[Object]) -> None:...
        @typing.overload
        def __call__(self, foldout: bool, targetObjs: Array_1[Object]) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, editor: Editor) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, targetObj: Object) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, targetObjs: Array_1[Object], expandable: bool) -> bool:...
        @typing.overload
        def __call__(self, foldout: bool, targetObj: Object, expandable: bool) -> bool:...

    # Skipped IntField due to it being static, abstract and generic.

    IntField : IntField_MethodGroup
    class IntField_MethodGroup:
        @typing.overload
        def __call__(self, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...

    # Skipped IntPopup due to it being static, abstract and generic.

    IntPopup : IntPopup_MethodGroup
    class IntPopup_MethodGroup:
        @typing.overload
        def __call__(self, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, selectedValue: int, displayedOptions: Array_1[str], optionValues: Array_1[int], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, selectedValue: int, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, displayedOptions: Array_1[GUIContent], optionValues: Array_1[int], label: GUIContent, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None:...

    # Skipped IntSlider due to it being static, abstract and generic.

    IntSlider : IntSlider_MethodGroup
    class IntSlider_MethodGroup:
        @typing.overload
        def __call__(self, value: int, leftValue: int, rightValue: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, leftValue: int, rightValue: int, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, value: int, leftValue: int, rightValue: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, leftValue: int, rightValue: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, property: SerializedProperty, leftValue: int, rightValue: int, label: str, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, property: SerializedProperty, leftValue: int, rightValue: int, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...

    # Skipped LabelField due to it being static, abstract and generic.

    LabelField : LabelField_MethodGroup
    class LabelField_MethodGroup:
        @typing.overload
        def __call__(self, label: str, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, label2: str, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, label2: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, label2: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, label2: GUIContent, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None:...

    # Skipped LayerField due to it being static, abstract and generic.

    LayerField : LayerField_MethodGroup
    class LayerField_MethodGroup:
        @typing.overload
        def __call__(self, layer: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, layer: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, layer: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, layer: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, layer: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, layer: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...

    # Skipped LinkButton due to it being static, abstract and generic.

    LinkButton : LinkButton_MethodGroup
    class LinkButton_MethodGroup:
        @typing.overload
        def __call__(self, label: str, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: GUIContent, options: Array_1[GUILayoutOption]) -> bool:...

    # Skipped LongField due to it being static, abstract and generic.

    LongField : LongField_MethodGroup
    class LongField_MethodGroup:
        @typing.overload
        def __call__(self, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: int, style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...

    # Skipped MaskField due to it being static, abstract and generic.

    MaskField : MaskField_MethodGroup
    class MaskField_MethodGroup:
        @typing.overload
        def __call__(self, mask: int, displayedOptions: Array_1[str], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, mask: int, displayedOptions: Array_1[str], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, mask: int, displayedOptions: Array_1[str], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, mask: int, displayedOptions: Array_1[str], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, mask: int, displayedOptions: Array_1[str], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, mask: int, displayedOptions: Array_1[str], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...

    # Skipped MinMaxSlider due to it being static, abstract and generic.

    MinMaxSlider : MinMaxSlider_MethodGroup
    class MinMaxSlider_MethodGroup:
        @typing.overload
        def __call__(self, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, minValue: clr.Reference[float], maxValue: clr.Reference[float], minLimit: float, maxLimit: float, options: Array_1[GUILayoutOption]) -> None:...

    # Skipped ObjectField due to it being static, abstract and generic.

    ObjectField : ObjectField_MethodGroup
    class ObjectField_MethodGroup:
        @typing.overload
        def __call__(self, property: SerializedProperty, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, obj: Object, objType: typing.Type[typing.Any], options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, property: SerializedProperty, objType: typing.Type[typing.Any], options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, obj: Object, objType: typing.Type[typing.Any], options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, obj: Object, objType: typing.Type[typing.Any], allowSceneObjects: bool, options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, obj: Object, objType: typing.Type[typing.Any], targetBeingEdited: Object, options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, property: SerializedProperty, objType: typing.Type[typing.Any], label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, obj: Object, objType: typing.Type[typing.Any], options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, label: str, obj: Object, objType: typing.Type[typing.Any], allowSceneObjects: bool, options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, label: str, obj: Object, objType: typing.Type[typing.Any], targetBeingEdited: Object, options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, label: GUIContent, obj: Object, objType: typing.Type[typing.Any], allowSceneObjects: bool, options: Array_1[GUILayoutOption]) -> Object:...
        @typing.overload
        def __call__(self, label: GUIContent, obj: Object, objType: typing.Type[typing.Any], targetBeingEdited: Object, options: Array_1[GUILayoutOption]) -> Object:...

    # Skipped PasswordField due to it being static, abstract and generic.

    PasswordField : PasswordField_MethodGroup
    class PasswordField_MethodGroup:
        @typing.overload
        def __call__(self, password: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: str, password: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, password: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, password: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: str, password: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, password: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...

    # Skipped Popup due to it being static, abstract and generic.

    Popup : Popup_MethodGroup
    class Popup_MethodGroup:
        @typing.overload
        def __call__(self, selectedIndex: int, displayedOptions: Array_1[str], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, selectedIndex: int, displayedOptions: Array_1[GUIContent], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, selectedIndex: int, displayedOptions: Array_1[str], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, selectedIndex: int, displayedOptions: Array_1[GUIContent], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, selectedIndex: int, displayedOptions: Array_1[str], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, selectedIndex: int, displayedOptions: Array_1[str], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, selectedIndex: int, displayedOptions: Array_1[GUIContent], options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: str, selectedIndex: int, displayedOptions: Array_1[str], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...
        @typing.overload
        def __call__(self, label: GUIContent, selectedIndex: int, displayedOptions: Array_1[GUIContent], style: GUIStyle, options: Array_1[GUILayoutOption]) -> int:...

    # Skipped PrefixLabel due to it being static, abstract and generic.

    PrefixLabel : PrefixLabel_MethodGroup
    class PrefixLabel_MethodGroup:
        @typing.overload
        def __call__(self, label: str) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, label: str, followingStyle: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, followingStyle: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, label: str, followingStyle: GUIStyle, labelStyle: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, label: GUIContent, followingStyle: GUIStyle, labelStyle: GUIStyle) -> None:...

    # Skipped PropertyField due to it being static, abstract and generic.

    PropertyField : PropertyField_MethodGroup
    class PropertyField_MethodGroup:
        @typing.overload
        def __call__(self, property: SerializedProperty, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, property: SerializedProperty, includeChildren: bool, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, property: SerializedProperty, label: GUIContent, includeChildren: bool, options: Array_1[GUILayoutOption]) -> bool:...

    # Skipped RectField due to it being static, abstract and generic.

    RectField : RectField_MethodGroup
    class RectField_MethodGroup:
        @typing.overload
        def __call__(self, value: Rect, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, label: str, value: Rect, options: Array_1[GUILayoutOption]) -> Rect:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Rect, options: Array_1[GUILayoutOption]) -> Rect:...

    # Skipped RectIntField due to it being static, abstract and generic.

    RectIntField : RectIntField_MethodGroup
    class RectIntField_MethodGroup:
        @typing.overload
        def __call__(self, value: RectInt, options: Array_1[GUILayoutOption]) -> RectInt:...
        @typing.overload
        def __call__(self, label: str, value: RectInt, options: Array_1[GUILayoutOption]) -> RectInt:...
        @typing.overload
        def __call__(self, label: GUIContent, value: RectInt, options: Array_1[GUILayoutOption]) -> RectInt:...

    # Skipped SelectableLabel due to it being static, abstract and generic.

    SelectableLabel : SelectableLabel_MethodGroup
    class SelectableLabel_MethodGroup:
        @typing.overload
        def __call__(self, text: str, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None:...

    # Skipped Slider due to it being static, abstract and generic.

    Slider : Slider_MethodGroup
    class Slider_MethodGroup:
        @typing.overload
        def __call__(self, value: float, leftValue: float, rightValue: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, leftValue: float, rightValue: float, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, label: str, value: float, leftValue: float, rightValue: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, label: GUIContent, value: float, leftValue: float, rightValue: float, options: Array_1[GUILayoutOption]) -> float:...
        @typing.overload
        def __call__(self, property: SerializedProperty, leftValue: float, rightValue: float, label: str, options: Array_1[GUILayoutOption]) -> None:...
        @typing.overload
        def __call__(self, property: SerializedProperty, leftValue: float, rightValue: float, label: GUIContent, options: Array_1[GUILayoutOption]) -> None:...

    # Skipped Space due to it being static, abstract and generic.

    Space : Space_MethodGroup
    class Space_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, width: float) -> None:...
        @typing.overload
        def __call__(self, width: float, expand: bool) -> None:...

    # Skipped TagField due to it being static, abstract and generic.

    TagField : TagField_MethodGroup
    class TagField_MethodGroup:
        @typing.overload
        def __call__(self, tag: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: str, tag: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, tag: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, tag: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: str, tag: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, tag: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...

    # Skipped TextArea due to it being static, abstract and generic.

    TextArea : TextArea_MethodGroup
    class TextArea_MethodGroup:
        @typing.overload
        def __call__(self, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...

    # Skipped TextField due to it being static, abstract and generic.

    TextField : TextField_MethodGroup
    class TextField_MethodGroup:
        @typing.overload
        def __call__(self, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: str, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, text: str, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: str, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...
        @typing.overload
        def __call__(self, label: GUIContent, text: str, style: GUIStyle, options: Array_1[GUILayoutOption]) -> str:...

    # Skipped Toggle due to it being static, abstract and generic.

    Toggle : Toggle_MethodGroup
    class Toggle_MethodGroup:
        @typing.overload
        def __call__(self, value: bool, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: str, value: bool, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, value: bool, style: GUIStyle, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: GUIContent, value: bool, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: str, value: bool, style: GUIStyle, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: GUIContent, value: bool, style: GUIStyle, options: Array_1[GUILayoutOption]) -> bool:...

    # Skipped ToggleLeft due to it being static, abstract and generic.

    ToggleLeft : ToggleLeft_MethodGroup
    class ToggleLeft_MethodGroup:
        @typing.overload
        def __call__(self, label: str, value: bool, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: GUIContent, value: bool, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: str, value: bool, labelStyle: GUIStyle, options: Array_1[GUILayoutOption]) -> bool:...
        @typing.overload
        def __call__(self, label: GUIContent, value: bool, labelStyle: GUIStyle, options: Array_1[GUILayoutOption]) -> bool:...

    # Skipped ToolContextToolbar due to it being static, abstract and generic.

    ToolContextToolbar : ToolContextToolbar_MethodGroup
    class ToolContextToolbar_MethodGroup:
        def __getitem__(self, t:typing.Type[ToolContextToolbar_1_T1]) -> ToolContextToolbar_1[ToolContextToolbar_1_T1]: ...

        ToolContextToolbar_1_T1 = typing.TypeVar('ToolContextToolbar_1_T1')
        class ToolContextToolbar_1(typing.Generic[ToolContextToolbar_1_T1]):
            ToolContextToolbar_1_T = EditorGUILayout.ToolContextToolbar_MethodGroup.ToolContextToolbar_1_T1
            def __call__(self, content: GUIContent, contexts: IList_1[ToolContextToolbar_1_T]) -> None:...


    # Skipped Vector2Field due to it being static, abstract and generic.

    Vector2Field : Vector2Field_MethodGroup
    class Vector2Field_MethodGroup:
        @typing.overload
        def __call__(self, label: str, value: Vector2, options: Array_1[GUILayoutOption]) -> Vector2:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Vector2, options: Array_1[GUILayoutOption]) -> Vector2:...

    # Skipped Vector2IntField due to it being static, abstract and generic.

    Vector2IntField : Vector2IntField_MethodGroup
    class Vector2IntField_MethodGroup:
        @typing.overload
        def __call__(self, label: str, value: Vector2Int, options: Array_1[GUILayoutOption]) -> Vector2Int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Vector2Int, options: Array_1[GUILayoutOption]) -> Vector2Int:...

    # Skipped Vector3Field due to it being static, abstract and generic.

    Vector3Field : Vector3Field_MethodGroup
    class Vector3Field_MethodGroup:
        @typing.overload
        def __call__(self, label: str, value: Vector3, options: Array_1[GUILayoutOption]) -> Vector3:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Vector3, options: Array_1[GUILayoutOption]) -> Vector3:...

    # Skipped Vector3IntField due to it being static, abstract and generic.

    Vector3IntField : Vector3IntField_MethodGroup
    class Vector3IntField_MethodGroup:
        @typing.overload
        def __call__(self, label: str, value: Vector3Int, options: Array_1[GUILayoutOption]) -> Vector3Int:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Vector3Int, options: Array_1[GUILayoutOption]) -> Vector3Int:...

    # Skipped Vector4Field due to it being static, abstract and generic.

    Vector4Field : Vector4Field_MethodGroup
    class Vector4Field_MethodGroup:
        @typing.overload
        def __call__(self, label: str, value: Vector4, options: Array_1[GUILayoutOption]) -> Vector4:...
        @typing.overload
        def __call__(self, label: GUIContent, value: Vector4, options: Array_1[GUILayoutOption]) -> Vector4:...


    class FadeGroupScope(GUI.Scope):
        def __init__(self, value: float) -> None: ...
        @property
        def visible(self) -> bool: ...
        @visible.setter
        def visible(self, value: bool) -> bool: ...


    class HorizontalScope(GUI.Scope):
        @typing.overload
        def __init__(self, options: Array_1[GUILayoutOption]) -> None: ...
        @typing.overload
        def __init__(self, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None: ...
        @property
        def rect(self) -> Rect: ...
        @rect.setter
        def rect(self, value: Rect) -> Rect: ...


    class ScrollViewScope(GUI.Scope):
        @typing.overload
        def __init__(self, scrollPosition: Vector2, alwaysShowHorizontal: bool, alwaysShowVertical: bool, horizontalScrollbar: GUIStyle, verticalScrollbar: GUIStyle, background: GUIStyle, options: Array_1[GUILayoutOption]) -> None: ...
        @typing.overload
        def __init__(self, scrollPosition: Vector2, alwaysShowHorizontal: bool, alwaysShowVertical: bool, options: Array_1[GUILayoutOption]) -> None: ...
        @typing.overload
        def __init__(self, scrollPosition: Vector2, horizontalScrollbar: GUIStyle, verticalScrollbar: GUIStyle, options: Array_1[GUILayoutOption]) -> None: ...
        @typing.overload
        def __init__(self, scrollPosition: Vector2, options: Array_1[GUILayoutOption]) -> None: ...
        @typing.overload
        def __init__(self, scrollPosition: Vector2, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None: ...
        @property
        def handleScrollWheel(self) -> bool: ...
        @handleScrollWheel.setter
        def handleScrollWheel(self, value: bool) -> bool: ...
        @property
        def scrollPosition(self) -> Vector2: ...
        @scrollPosition.setter
        def scrollPosition(self, value: Vector2) -> Vector2: ...


    class ToggleGroupScope(GUI.Scope):
        @typing.overload
        def __init__(self, label: str, toggle: bool) -> None: ...
        @typing.overload
        def __init__(self, label: GUIContent, toggle: bool) -> None: ...
        @property
        def enabled(self) -> bool: ...
        @enabled.setter
        def enabled(self, value: bool) -> bool: ...


    class VerticalScope(GUI.Scope):
        @typing.overload
        def __init__(self, options: Array_1[GUILayoutOption]) -> None: ...
        @typing.overload
        def __init__(self, style: GUIStyle, options: Array_1[GUILayoutOption]) -> None: ...
        @property
        def rect(self) -> Rect: ...
        @rect.setter
        def rect(self, value: Rect) -> Rect: ...



class EditorGUIUtility(GUIUtility):
    def __init__(self) -> None: ...
    native : FocusType
    @classmethod
    @property
    def currentViewWidth(cls) -> float: ...
    @classmethod
    @currentViewWidth.setter
    def currentViewWidth(cls, value: float) -> float: ...
    @classmethod
    @property
    def editingTextField(cls) -> bool: ...
    @classmethod
    @editingTextField.setter
    def editingTextField(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def fieldWidth(cls) -> float: ...
    @classmethod
    @fieldWidth.setter
    def fieldWidth(cls, value: float) -> float: ...
    @classmethod
    @property
    def hierarchyMode(cls) -> bool: ...
    @classmethod
    @hierarchyMode.setter
    def hierarchyMode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def isProSkin(cls) -> bool: ...
    @classmethod
    @property
    def labelWidth(cls) -> float: ...
    @classmethod
    @labelWidth.setter
    def labelWidth(cls, value: float) -> float: ...
    @classmethod
    @property
    def pixelsPerPoint(cls) -> float: ...
    @classmethod
    @property
    def singleLineHeight(cls) -> float: ...
    @classmethod
    @property
    def standardVerticalSpacing(cls) -> float: ...
    @classmethod
    @property
    def systemCopyBuffer(cls) -> str: ...
    @classmethod
    @systemCopyBuffer.setter
    def systemCopyBuffer(cls, value: str) -> str: ...
    @classmethod
    @property
    def textFieldHasSelection(cls) -> bool: ...
    @classmethod
    @property
    def whiteTexture(cls) -> Texture2D: ...
    @classmethod
    @property
    def wideMode(cls) -> bool: ...
    @classmethod
    @wideMode.setter
    def wideMode(cls, value: bool) -> bool: ...
    @staticmethod
    def CommandEvent(commandName: str) -> Event: ...
    @staticmethod
    def DrawColorSwatch(position: Rect, color: Color) -> None: ...
    @staticmethod
    def FindTexture(name: str) -> Texture2D: ...
    @staticmethod
    def GetBuiltinSkin(skin: EditorSkin) -> GUISkin: ...
    @staticmethod
    def GetFlowLayoutedRects(rect: Rect, style: GUIStyle, horizontalSpacing: float, verticalSpacing: float, items: List_1[str]) -> List_1[Rect]: ...
    @staticmethod
    def GetIconForObject(obj: Object) -> Texture2D: ...
    @staticmethod
    def GetIconSize() -> Vector2: ...
    @staticmethod
    def GetMainWindowPosition() -> Rect: ...
    @staticmethod
    def GetObjectPickerControlID() -> int: ...
    @staticmethod
    def GetObjectPickerObject() -> Object: ...
    @staticmethod
    def HasObjectThumbnail(objType: typing.Type[typing.Any]) -> bool: ...
    @staticmethod
    def IsDisplayReferencedByCameras(displayIndex: int) -> bool: ...
    @staticmethod
    def Load(path: str) -> Object: ...
    @staticmethod
    def LoadRequired(path: str) -> Object: ...
    @staticmethod
    def LookLikeInspector() -> None: ...
    @staticmethod
    def ObjectContent(obj: Object, type: typing.Type[typing.Any]) -> GUIContent: ...
    @staticmethod
    def QueueGameViewInputEvent(evt: Event) -> None: ...
    @staticmethod
    def RGBToHSV(rgbColor: Color, H: clr.Reference[float], S: clr.Reference[float], V: clr.Reference[float]) -> None: ...
    @staticmethod
    def SerializeMainMenuToString() -> str: ...
    @staticmethod
    def SetIconForObject(obj: Object, icon: Texture2D) -> None: ...
    @staticmethod
    def SetIconSize(size: Vector2) -> None: ...
    @staticmethod
    def SetMainWindowPosition(position: Rect) -> None: ...
    @staticmethod
    def SetMenuLocalizationTestMode(onoff: bool) -> None: ...
    @staticmethod
    def SetWantsMouseJumping(wantz: int) -> None: ...
    # Skipped AddCursorRect due to it being static, abstract and generic.

    AddCursorRect : AddCursorRect_MethodGroup
    class AddCursorRect_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, mouse: MouseCursor) -> None:...
        @typing.overload
        def __call__(self, position: Rect, mouse: MouseCursor, controlID: int) -> None:...

    # Skipped DrawCurveSwatch due to it being static, abstract and generic.

    DrawCurveSwatch : DrawCurveSwatch_MethodGroup
    class DrawCurveSwatch_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, curve: AnimationCurve, property: SerializedProperty, color: Color, bgColor: Color) -> None:...
        @typing.overload
        def __call__(self, position: Rect, curve: AnimationCurve, property: SerializedProperty, color: Color, bgColor: Color, curveRanges: Rect) -> None:...
        @typing.overload
        def __call__(self, position: Rect, curve: AnimationCurve, property: SerializedProperty, color: Color, bgColor: Color, topFillColor: Color, bottomFillColor: Color) -> None:...
        @typing.overload
        def __call__(self, position: Rect, curve: AnimationCurve, property: SerializedProperty, color: Color, bgColor: Color, topFillColor: Color, bottomFillColor: Color, curveRanges: Rect) -> None:...

    # Skipped DrawRegionSwatch due to it being static, abstract and generic.

    DrawRegionSwatch : DrawRegionSwatch_MethodGroup
    class DrawRegionSwatch_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, curve: AnimationCurve, curve2: AnimationCurve, color: Color, bgColor: Color, curveRanges: Rect) -> None:...
        @typing.overload
        def __call__(self, position: Rect, property: SerializedProperty, property2: SerializedProperty, color: Color, bgColor: Color, curveRanges: Rect) -> None:...

    # Skipped HSVToRGB due to it being static, abstract and generic.

    HSVToRGB : HSVToRGB_MethodGroup
    class HSVToRGB_MethodGroup:
        @typing.overload
        def __call__(self, H: float, S: float, V: float) -> Color:...
        @typing.overload
        def __call__(self, H: float, S: float, V: float, hdr: bool) -> Color:...

    # Skipped IconContent due to it being static, abstract and generic.

    IconContent : IconContent_MethodGroup
    class IconContent_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> GUIContent:...
        @typing.overload
        def __call__(self, name: str, text: str) -> GUIContent:...

    # Skipped LookLikeControls due to it being static, abstract and generic.

    LookLikeControls : LookLikeControls_MethodGroup
    class LookLikeControls_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, _labelWidth: float) -> None:...
        @typing.overload
        def __call__(self, _labelWidth: float, _fieldWidth: float) -> None:...

    # Skipped PingObject due to it being static, abstract and generic.

    PingObject : PingObject_MethodGroup
    class PingObject_MethodGroup:
        @typing.overload
        def __call__(self, targetInstanceID: int) -> None:...
        @typing.overload
        def __call__(self, obj: Object) -> None:...

    # Skipped PixelsToPoints due to it being static, abstract and generic.

    PixelsToPoints : PixelsToPoints_MethodGroup
    class PixelsToPoints_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, rect: Rect) -> Rect:...

    # Skipped PointsToPixels due to it being static, abstract and generic.

    PointsToPixels : PointsToPixels_MethodGroup
    class PointsToPixels_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, rect: Rect) -> Rect:...

    # Skipped RenderGameViewCameras due to it being static, abstract and generic.

    RenderGameViewCameras : RenderGameViewCameras_MethodGroup
    class RenderGameViewCameras_MethodGroup:
        @typing.overload
        def __call__(self, cameraRect: Rect, gizmos: bool, gui: bool) -> None:...
        @typing.overload
        def __call__(self, cameraRect: Rect, statsRect: Rect, gizmos: bool, gui: bool) -> None:...
        @typing.overload
        def __call__(self, target: RenderTexture, targetDisplay: int, screenRect: Rect, mousePosition: Vector2, gizmos: bool) -> None:...

    # Skipped ShowObjectPicker due to it being static, abstract and generic.

    ShowObjectPicker : ShowObjectPicker_MethodGroup
    class ShowObjectPicker_MethodGroup:
        def __getitem__(self, t:typing.Type[ShowObjectPicker_1_T1]) -> ShowObjectPicker_1[ShowObjectPicker_1_T1]: ...

        ShowObjectPicker_1_T1 = typing.TypeVar('ShowObjectPicker_1_T1')
        class ShowObjectPicker_1(typing.Generic[ShowObjectPicker_1_T1]):
            ShowObjectPicker_1_T = EditorGUIUtility.ShowObjectPicker_MethodGroup.ShowObjectPicker_1_T1
            def __call__(self, obj: Object, allowSceneObjects: bool, searchFilter: str, controlID: int) -> None:...


    # Skipped TrIconContent due to it being static, abstract and generic.

    TrIconContent : TrIconContent_MethodGroup
    class TrIconContent_MethodGroup:
        @typing.overload
        def __call__(self, iconName: str, tooltip: str = ...) -> GUIContent:...
        @typing.overload
        def __call__(self, icon: Texture, tooltip: str = ...) -> GUIContent:...

    # Skipped TrTempContent due to it being static, abstract and generic.

    TrTempContent : TrTempContent_MethodGroup
    class TrTempContent_MethodGroup:
        @typing.overload
        def __call__(self, texts: Array_1[str]) -> Array_1[GUIContent]:...
        @typing.overload
        def __call__(self, t: str) -> GUIContent:...
        @typing.overload
        def __call__(self, texts: Array_1[str], tooltips: Array_1[str]) -> Array_1[GUIContent]:...

    # Skipped TrTextContent due to it being static, abstract and generic.

    TrTextContent : TrTextContent_MethodGroup
    class TrTextContent_MethodGroup:
        @typing.overload
        def __call__(self, text: str, icon: Texture) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str = ..., icon: Texture = ...) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, iconName: str) -> GUIContent:...
        @typing.overload
        def __call__(self, key: str, text: str, tooltip: str, icon: Texture) -> GUIContent:...

    # Skipped TrTextContentWithIcon due to it being static, abstract and generic.

    TrTextContentWithIcon : TrTextContentWithIcon_MethodGroup
    class TrTextContentWithIcon_MethodGroup:
        @typing.overload
        def __call__(self, text: str, messageType: MessageType) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, icon: Texture) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, iconName: str) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, messageType: MessageType) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, icon: Texture) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, iconName: str) -> GUIContent:...


    class IconSizeScope(GUI.Scope):
        def __init__(self, iconSizeWithinScope: Vector2) -> None: ...


    class PropertyCallbackScope(IDisposable):
        def __init__(self, callback: Action_2[Rect, SerializedProperty]) -> None: ...
        def Dispose(self) -> None: ...



class EditorJsonUtility(abc.ABC):
    @staticmethod
    def FromJsonOverwrite(json: str, objectToOverwrite: typing.Any) -> None: ...
    # Skipped ToJson due to it being static, abstract and generic.

    ToJson : ToJson_MethodGroup
    class ToJson_MethodGroup:
        @typing.overload
        def __call__(self, obj: typing.Any) -> str:...
        @typing.overload
        def __call__(self, obj: typing.Any, prettyPrint: bool) -> str:...



class EditorMaterialUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def IsBackgroundMaterial(material: Material) -> bool: ...
    @staticmethod
    def ResetDefaultTextures(material: Material, overrideSetTextures: bool) -> None: ...
    @staticmethod
    def SetShaderDefaults(shader: Shader, name: Array_1[str], textures: Array_1[Texture]) -> None: ...
    @staticmethod
    def SetShaderNonModifiableDefaults(shader: Shader, name: Array_1[str], textures: Array_1[Texture]) -> None: ...


class EditorPrefs:
    def __init__(self) -> None: ...
    @staticmethod
    def DeleteAll() -> None: ...
    @staticmethod
    def DeleteKey(key: str) -> None: ...
    @staticmethod
    def HasKey(key: str) -> bool: ...
    @staticmethod
    def SetBool(key: str, value: bool) -> None: ...
    @staticmethod
    def SetFloat(key: str, value: float) -> None: ...
    @staticmethod
    def SetInt(key: str, value: int) -> None: ...
    @staticmethod
    def SetString(key: str, value: str) -> None: ...
    # Skipped GetBool due to it being static, abstract and generic.

    GetBool : GetBool_MethodGroup
    class GetBool_MethodGroup:
        @typing.overload
        def __call__(self, key: str) -> bool:...
        @typing.overload
        def __call__(self, key: str, defaultValue: bool) -> bool:...

    # Skipped GetFloat due to it being static, abstract and generic.

    GetFloat : GetFloat_MethodGroup
    class GetFloat_MethodGroup:
        @typing.overload
        def __call__(self, key: str) -> float:...
        @typing.overload
        def __call__(self, key: str, defaultValue: float) -> float:...

    # Skipped GetInt due to it being static, abstract and generic.

    GetInt : GetInt_MethodGroup
    class GetInt_MethodGroup:
        @typing.overload
        def __call__(self, key: str) -> int:...
        @typing.overload
        def __call__(self, key: str, defaultValue: int) -> int:...

    # Skipped GetString due to it being static, abstract and generic.

    GetString : GetString_MethodGroup
    class GetString_MethodGroup:
        @typing.overload
        def __call__(self, key: str) -> str:...
        @typing.overload
        def __call__(self, key: str, defaultValue: str) -> str:...



class EditorSelectedRenderState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Hidden : EditorSelectedRenderState # 0
    Wireframe : EditorSelectedRenderState # 1
    Highlight : EditorSelectedRenderState # 2


class EditorSettings(Object):
    @classmethod
    @property
    def assetNamingUsesSpace(cls) -> bool: ...
    @classmethod
    @assetNamingUsesSpace.setter
    def assetNamingUsesSpace(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def assetPipelineMode(cls) -> AssetPipelineMode: ...
    @classmethod
    @property
    def asyncShaderCompilation(cls) -> bool: ...
    @classmethod
    @asyncShaderCompilation.setter
    def asyncShaderCompilation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def cacheServerDownloadBatchSize(cls) -> int: ...
    @classmethod
    @cacheServerDownloadBatchSize.setter
    def cacheServerDownloadBatchSize(cls, value: int) -> int: ...
    @classmethod
    @property
    def cacheServerEnableAuth(cls) -> bool: ...
    @classmethod
    @cacheServerEnableAuth.setter
    def cacheServerEnableAuth(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def cacheServerEnableDownload(cls) -> bool: ...
    @classmethod
    @cacheServerEnableDownload.setter
    def cacheServerEnableDownload(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def cacheServerEnableTls(cls) -> bool: ...
    @classmethod
    @cacheServerEnableTls.setter
    def cacheServerEnableTls(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def cacheServerEnableUpload(cls) -> bool: ...
    @classmethod
    @cacheServerEnableUpload.setter
    def cacheServerEnableUpload(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def cacheServerEndpoint(cls) -> str: ...
    @classmethod
    @cacheServerEndpoint.setter
    def cacheServerEndpoint(cls, value: str) -> str: ...
    @classmethod
    @property
    def cacheServerMode(cls) -> CacheServerMode: ...
    @classmethod
    @cacheServerMode.setter
    def cacheServerMode(cls, value: CacheServerMode) -> CacheServerMode: ...
    @classmethod
    @property
    def cacheServerNamespacePrefix(cls) -> str: ...
    @classmethod
    @cacheServerNamespacePrefix.setter
    def cacheServerNamespacePrefix(cls, value: str) -> str: ...
    @classmethod
    @property
    def cacheServerValidationMode(cls) -> CacheServerValidationMode: ...
    @classmethod
    @cacheServerValidationMode.setter
    def cacheServerValidationMode(cls, value: CacheServerValidationMode) -> CacheServerValidationMode: ...
    @classmethod
    @property
    def cachingShaderPreprocessor(cls) -> bool: ...
    @classmethod
    @cachingShaderPreprocessor.setter
    def cachingShaderPreprocessor(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def defaultBehaviorMode(cls) -> EditorBehaviorMode: ...
    @classmethod
    @defaultBehaviorMode.setter
    def defaultBehaviorMode(cls, value: EditorBehaviorMode) -> EditorBehaviorMode: ...
    @classmethod
    @property
    def disableCookiesInLightmapper(cls) -> bool: ...
    @classmethod
    @disableCookiesInLightmapper.setter
    def disableCookiesInLightmapper(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableCookiesInLightmapper(cls) -> bool: ...
    @classmethod
    @enableCookiesInLightmapper.setter
    def enableCookiesInLightmapper(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableEnlightenBakedGI(cls) -> bool: ...
    @classmethod
    @enableEnlightenBakedGI.setter
    def enableEnlightenBakedGI(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableTextureStreamingInEditMode(cls) -> bool: ...
    @classmethod
    @enableTextureStreamingInEditMode.setter
    def enableTextureStreamingInEditMode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableTextureStreamingInPlayMode(cls) -> bool: ...
    @classmethod
    @enableTextureStreamingInPlayMode.setter
    def enableTextureStreamingInPlayMode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enterPlayModeOptions(cls) -> EnterPlayModeOptions: ...
    @classmethod
    @enterPlayModeOptions.setter
    def enterPlayModeOptions(cls, value: EnterPlayModeOptions) -> EnterPlayModeOptions: ...
    @classmethod
    @property
    def enterPlayModeOptionsEnabled(cls) -> bool: ...
    @classmethod
    @enterPlayModeOptionsEnabled.setter
    def enterPlayModeOptionsEnabled(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def etcTextureBestCompressor(cls) -> int: ...
    @classmethod
    @etcTextureBestCompressor.setter
    def etcTextureBestCompressor(cls, value: int) -> int: ...
    @classmethod
    @property
    def etcTextureCompressorBehavior(cls) -> int: ...
    @classmethod
    @etcTextureCompressorBehavior.setter
    def etcTextureCompressorBehavior(cls, value: int) -> int: ...
    @classmethod
    @property
    def etcTextureFastCompressor(cls) -> int: ...
    @classmethod
    @etcTextureFastCompressor.setter
    def etcTextureFastCompressor(cls, value: int) -> int: ...
    @classmethod
    @property
    def etcTextureNormalCompressor(cls) -> int: ...
    @classmethod
    @etcTextureNormalCompressor.setter
    def etcTextureNormalCompressor(cls, value: int) -> int: ...
    @classmethod
    @property
    def externalVersionControl(cls) -> str: ...
    @classmethod
    @externalVersionControl.setter
    def externalVersionControl(cls, value: str) -> str: ...
    @classmethod
    @property
    def gameObjectNamingDigits(cls) -> int: ...
    @classmethod
    @gameObjectNamingDigits.setter
    def gameObjectNamingDigits(cls, value: int) -> int: ...
    @classmethod
    @property
    def gameObjectNamingScheme(cls) -> EditorSettings.NamingScheme: ...
    @classmethod
    @gameObjectNamingScheme.setter
    def gameObjectNamingScheme(cls, value: EditorSettings.NamingScheme) -> EditorSettings.NamingScheme: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def lineEndingsForNewScripts(cls) -> LineEndingsMode: ...
    @classmethod
    @lineEndingsForNewScripts.setter
    def lineEndingsForNewScripts(cls, value: LineEndingsMode) -> LineEndingsMode: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def prefabModeAllowAutoSave(cls) -> bool: ...
    @classmethod
    @prefabModeAllowAutoSave.setter
    def prefabModeAllowAutoSave(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def prefabRegularEnvironment(cls) -> SceneAsset: ...
    @classmethod
    @prefabRegularEnvironment.setter
    def prefabRegularEnvironment(cls, value: SceneAsset) -> SceneAsset: ...
    @classmethod
    @property
    def prefabUIEnvironment(cls) -> SceneAsset: ...
    @classmethod
    @prefabUIEnvironment.setter
    def prefabUIEnvironment(cls, value: SceneAsset) -> SceneAsset: ...
    @classmethod
    @property
    def projectGenerationBuiltinExtensions(cls) -> Array_1[str]: ...
    @classmethod
    @property
    def projectGenerationRootNamespace(cls) -> str: ...
    @classmethod
    @projectGenerationRootNamespace.setter
    def projectGenerationRootNamespace(cls, value: str) -> str: ...
    @classmethod
    @property
    def projectGenerationUserExtensions(cls) -> Array_1[str]: ...
    @classmethod
    @projectGenerationUserExtensions.setter
    def projectGenerationUserExtensions(cls, value: Array_1[str]) -> Array_1[str]: ...
    @classmethod
    @property
    def refreshImportMode(cls) -> AssetDatabase.RefreshImportMode: ...
    @classmethod
    @refreshImportMode.setter
    def refreshImportMode(cls, value: AssetDatabase.RefreshImportMode) -> AssetDatabase.RefreshImportMode: ...
    @classmethod
    @property
    def serializationMode(cls) -> SerializationMode: ...
    @classmethod
    @serializationMode.setter
    def serializationMode(cls, value: SerializationMode) -> SerializationMode: ...
    @classmethod
    @property
    def serializeInlineMappingsOnOneLine(cls) -> bool: ...
    @classmethod
    @serializeInlineMappingsOnOneLine.setter
    def serializeInlineMappingsOnOneLine(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def spritePackerMode(cls) -> SpritePackerMode: ...
    @classmethod
    @spritePackerMode.setter
    def spritePackerMode(cls, value: SpritePackerMode) -> SpritePackerMode: ...
    @classmethod
    @property
    def spritePackerPaddingPower(cls) -> int: ...
    @classmethod
    @spritePackerPaddingPower.setter
    def spritePackerPaddingPower(cls, value: int) -> int: ...
    @classmethod
    @property
    def unityRemoteCompression(cls) -> str: ...
    @classmethod
    @unityRemoteCompression.setter
    def unityRemoteCompression(cls, value: str) -> str: ...
    @classmethod
    @property
    def unityRemoteDevice(cls) -> str: ...
    @classmethod
    @unityRemoteDevice.setter
    def unityRemoteDevice(cls, value: str) -> str: ...
    @classmethod
    @property
    def unityRemoteJoystickSource(cls) -> str: ...
    @classmethod
    @unityRemoteJoystickSource.setter
    def unityRemoteJoystickSource(cls, value: str) -> str: ...
    @classmethod
    @property
    def unityRemoteResolution(cls) -> str: ...
    @classmethod
    @unityRemoteResolution.setter
    def unityRemoteResolution(cls, value: str) -> str: ...
    @classmethod
    @property
    def useLegacyProbeSampleCount(cls) -> bool: ...
    @classmethod
    @useLegacyProbeSampleCount.setter
    def useLegacyProbeSampleCount(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def webSecurityEmulationEnabled(cls) -> bool: ...
    @classmethod
    @webSecurityEmulationEnabled.setter
    def webSecurityEmulationEnabled(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def webSecurityEmulationHostUrl(cls) -> str: ...
    @classmethod
    @webSecurityEmulationHostUrl.setter
    def webSecurityEmulationHostUrl(cls, value: str) -> str: ...

    class NamingScheme(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        SpaceParenthesis : EditorSettings.NamingScheme # 0
        Dot : EditorSettings.NamingScheme # 1
        Underscore : EditorSettings.NamingScheme # 2



class EditorSkin(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Game : EditorSkin # 0
    Inspector : EditorSkin # 1
    Scene : EditorSkin # 2


class EditorSnapSettings(abc.ABC):
    @classmethod
    @property
    def gridSize(cls) -> Vector3: ...
    @classmethod
    @gridSize.setter
    def gridSize(cls, value: Vector3) -> Vector3: ...
    @classmethod
    @property
    def gridSnapActive(cls) -> bool: ...
    @classmethod
    @property
    def gridSnapEnabled(cls) -> bool: ...
    @classmethod
    @gridSnapEnabled.setter
    def gridSnapEnabled(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def incrementalSnapActive(cls) -> bool: ...
    @classmethod
    @property
    def move(cls) -> Vector3: ...
    @classmethod
    @move.setter
    def move(cls, value: Vector3) -> Vector3: ...
    @classmethod
    @property
    def rotate(cls) -> float: ...
    @classmethod
    @rotate.setter
    def rotate(cls, value: float) -> float: ...
    @classmethod
    @property
    def scale(cls) -> float: ...
    @classmethod
    @scale.setter
    def scale(cls, value: float) -> float: ...
    @staticmethod
    def ResetSnapSettings() -> None: ...


class EditorStyles:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def boldFont(cls) -> Font: ...
    @classmethod
    @property
    def boldLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def centeredGreyMiniLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def colorField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def foldout(cls) -> GUIStyle: ...
    @classmethod
    @property
    def foldoutHeader(cls) -> GUIStyle: ...
    @classmethod
    @property
    def foldoutHeaderIcon(cls) -> GUIStyle: ...
    @classmethod
    @property
    def foldoutPreDrop(cls) -> GUIStyle: ...
    @classmethod
    @property
    def helpBox(cls) -> GUIStyle: ...
    @classmethod
    @property
    def iconButton(cls) -> GUIStyle: ...
    @classmethod
    @property
    def inspectorDefaultMargins(cls) -> GUIStyle: ...
    @classmethod
    @property
    def inspectorFullWidthMargins(cls) -> GUIStyle: ...
    @classmethod
    @property
    def label(cls) -> GUIStyle: ...
    @classmethod
    @property
    def largeLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def layerMaskField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def linkLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniBoldFont(cls) -> Font: ...
    @classmethod
    @property
    def miniBoldLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniButton(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniButtonLeft(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniButtonMid(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniButtonRight(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniFont(cls) -> Font: ...
    @classmethod
    @property
    def miniLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniPullDown(cls) -> GUIStyle: ...
    @classmethod
    @property
    def miniTextField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def numberField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def objectField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def objectFieldMiniThumb(cls) -> GUIStyle: ...
    @classmethod
    @property
    def objectFieldThumb(cls) -> GUIStyle: ...
    @classmethod
    @property
    def popup(cls) -> GUIStyle: ...
    @classmethod
    @property
    def radioButton(cls) -> GUIStyle: ...
    @classmethod
    @property
    def selectionRect(cls) -> GUIStyle: ...
    @classmethod
    @property
    def standardFont(cls) -> Font: ...
    @classmethod
    @property
    def structHeadingLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def textArea(cls) -> GUIStyle: ...
    @classmethod
    @property
    def textField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toggle(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toggleGroup(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toolbar(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toolbarButton(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toolbarDropDown(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toolbarPopup(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toolbarSearchField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def toolbarTextField(cls) -> GUIStyle: ...
    @classmethod
    @property
    def whiteBoldLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def whiteLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def whiteLargeLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def whiteMiniLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def wordWrappedLabel(cls) -> GUIStyle: ...
    @classmethod
    @property
    def wordWrappedMiniLabel(cls) -> GUIStyle: ...
    @staticmethod
    def ApplyUSS(style: GUIStyle, ussStyleRuleName: str, ussInPlaceStyleOverride: str = ...) -> GUIStyle: ...
    # Skipped FromUSS due to it being static, abstract and generic.

    FromUSS : FromUSS_MethodGroup
    class FromUSS_MethodGroup:
        @typing.overload
        def __call__(self, ussStyleRuleName: str, ussInPlaceStyleOverride: str = ...) -> GUIStyle:...
        @typing.overload
        def __call__(self, baseStyle: GUIStyle, ussStyleRuleName: str, ussInPlaceStyleOverride: str = ...) -> GUIStyle:...



class EditorUserBuildSettings(Object):
    activeBuildTargetChanged : Action
    @classmethod
    @property
    def activeBuildTarget(cls) -> BuildTarget: ...
    @classmethod
    @property
    def activeScriptCompilationDefines(cls) -> Array_1[str]: ...
    @classmethod
    @property
    def allowDebugging(cls) -> bool: ...
    @classmethod
    @allowDebugging.setter
    def allowDebugging(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def androidBuildSubtarget(cls) -> MobileTextureSubtarget: ...
    @classmethod
    @androidBuildSubtarget.setter
    def androidBuildSubtarget(cls, value: MobileTextureSubtarget) -> MobileTextureSubtarget: ...
    @classmethod
    @property
    def androidBuildSystem(cls) -> AndroidBuildSystem: ...
    @classmethod
    @androidBuildSystem.setter
    def androidBuildSystem(cls, value: AndroidBuildSystem) -> AndroidBuildSystem: ...
    @classmethod
    @property
    def androidBuildType(cls) -> AndroidBuildType: ...
    @classmethod
    @androidBuildType.setter
    def androidBuildType(cls, value: AndroidBuildType) -> AndroidBuildType: ...
    @classmethod
    @property
    def androidCreateSymbols(cls) -> AndroidCreateSymbols: ...
    @classmethod
    @androidCreateSymbols.setter
    def androidCreateSymbols(cls, value: AndroidCreateSymbols) -> AndroidCreateSymbols: ...
    @classmethod
    @property
    def androidCreateSymbolsZip(cls) -> bool: ...
    @classmethod
    @androidCreateSymbolsZip.setter
    def androidCreateSymbolsZip(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def androidDebugMinification(cls) -> AndroidMinification: ...
    @classmethod
    @androidDebugMinification.setter
    def androidDebugMinification(cls, value: AndroidMinification) -> AndroidMinification: ...
    @classmethod
    @property
    def androidETC2Fallback(cls) -> AndroidETC2Fallback: ...
    @classmethod
    @androidETC2Fallback.setter
    def androidETC2Fallback(cls, value: AndroidETC2Fallback) -> AndroidETC2Fallback: ...
    @classmethod
    @property
    def androidReleaseMinification(cls) -> AndroidMinification: ...
    @classmethod
    @androidReleaseMinification.setter
    def androidReleaseMinification(cls, value: AndroidMinification) -> AndroidMinification: ...
    @classmethod
    @property
    def androidUseLegacySdkTools(cls) -> bool: ...
    @classmethod
    @androidUseLegacySdkTools.setter
    def androidUseLegacySdkTools(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def buildAppBundle(cls) -> bool: ...
    @classmethod
    @buildAppBundle.setter
    def buildAppBundle(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def buildScriptsOnly(cls) -> bool: ...
    @classmethod
    @buildScriptsOnly.setter
    def buildScriptsOnly(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def buildWithDeepProfilingSupport(cls) -> bool: ...
    @classmethod
    @buildWithDeepProfilingSupport.setter
    def buildWithDeepProfilingSupport(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def compressFilesInPackage(cls) -> bool: ...
    @classmethod
    @compressFilesInPackage.setter
    def compressFilesInPackage(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def compressWithPsArc(cls) -> bool: ...
    @classmethod
    @compressWithPsArc.setter
    def compressWithPsArc(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def connectProfiler(cls) -> bool: ...
    @classmethod
    @connectProfiler.setter
    def connectProfiler(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def development(cls) -> bool: ...
    @classmethod
    @development.setter
    def development(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableHeadlessMode(cls) -> bool: ...
    @classmethod
    @enableHeadlessMode.setter
    def enableHeadlessMode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def explicitArrayBoundsChecks(cls) -> bool: ...
    @classmethod
    @explicitArrayBoundsChecks.setter
    def explicitArrayBoundsChecks(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def explicitDivideByZeroChecks(cls) -> bool: ...
    @classmethod
    @explicitDivideByZeroChecks.setter
    def explicitDivideByZeroChecks(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def explicitNullChecks(cls) -> bool: ...
    @classmethod
    @explicitNullChecks.setter
    def explicitNullChecks(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def exportAsGoogleAndroidProject(cls) -> bool: ...
    @classmethod
    @exportAsGoogleAndroidProject.setter
    def exportAsGoogleAndroidProject(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def forceInstallation(cls) -> bool: ...
    @classmethod
    @forceInstallation.setter
    def forceInstallation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def forceOptimizeScriptCompilation(cls) -> bool: ...
    @classmethod
    @property
    def generateNintendoSwitchShaderInfo(cls) -> bool: ...
    @classmethod
    @generateNintendoSwitchShaderInfo.setter
    def generateNintendoSwitchShaderInfo(cls, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def il2CppCodeGeneration(cls) -> Il2CppCodeGeneration: ...
    @classmethod
    @il2CppCodeGeneration.setter
    def il2CppCodeGeneration(cls, value: Il2CppCodeGeneration) -> Il2CppCodeGeneration: ...
    @classmethod
    @property
    def installInBuildFolder(cls) -> bool: ...
    @classmethod
    @installInBuildFolder.setter
    def installInBuildFolder(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def iOSBuildConfigType(cls) -> iOSBuildType: ...
    @classmethod
    @iOSBuildConfigType.setter
    def iOSBuildConfigType(cls, value: iOSBuildType) -> iOSBuildType: ...
    @classmethod
    @property
    def iOSXcodeBuildConfig(cls) -> XcodeBuildConfig: ...
    @classmethod
    @iOSXcodeBuildConfig.setter
    def iOSXcodeBuildConfig(cls, value: XcodeBuildConfig) -> XcodeBuildConfig: ...
    @classmethod
    @property
    def macOSXcodeBuildConfig(cls) -> XcodeBuildConfig: ...
    @classmethod
    @macOSXcodeBuildConfig.setter
    def macOSXcodeBuildConfig(cls, value: XcodeBuildConfig) -> XcodeBuildConfig: ...
    @classmethod
    @property
    def managedDebuggerFixedPort(cls) -> int: ...
    @classmethod
    @managedDebuggerFixedPort.setter
    def managedDebuggerFixedPort(cls, value: int) -> int: ...
    @classmethod
    @property
    def movePackageToDiscOuterEdge(cls) -> bool: ...
    @classmethod
    @movePackageToDiscOuterEdge.setter
    def movePackageToDiscOuterEdge(cls, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def needSubmissionMaterials(cls) -> bool: ...
    @classmethod
    @needSubmissionMaterials.setter
    def needSubmissionMaterials(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def overrideMaxTextureSize(cls) -> int: ...
    @classmethod
    @overrideMaxTextureSize.setter
    def overrideMaxTextureSize(cls, value: int) -> int: ...
    @classmethod
    @property
    def overrideTextureCompression(cls) -> OverrideTextureCompression: ...
    @classmethod
    @overrideTextureCompression.setter
    def overrideTextureCompression(cls, value: OverrideTextureCompression) -> OverrideTextureCompression: ...
    @classmethod
    @property
    def pathOnRemoteDevice(cls) -> str: ...
    @classmethod
    @pathOnRemoteDevice.setter
    def pathOnRemoteDevice(cls, value: str) -> str: ...
    @classmethod
    @property
    def ps4BuildSubtarget(cls) -> PS4BuildSubtarget: ...
    @classmethod
    @ps4BuildSubtarget.setter
    def ps4BuildSubtarget(cls, value: PS4BuildSubtarget) -> PS4BuildSubtarget: ...
    @classmethod
    @property
    def ps4HardwareTarget(cls) -> PS4HardwareTarget: ...
    @classmethod
    @ps4HardwareTarget.setter
    def ps4HardwareTarget(cls, value: PS4HardwareTarget) -> PS4HardwareTarget: ...
    @classmethod
    @property
    def remoteDeviceAddress(cls) -> str: ...
    @classmethod
    @remoteDeviceAddress.setter
    def remoteDeviceAddress(cls, value: str) -> str: ...
    @classmethod
    @property
    def remoteDeviceExports(cls) -> str: ...
    @classmethod
    @remoteDeviceExports.setter
    def remoteDeviceExports(cls, value: str) -> str: ...
    @classmethod
    @property
    def remoteDeviceInfo(cls) -> bool: ...
    @classmethod
    @remoteDeviceInfo.setter
    def remoteDeviceInfo(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def remoteDeviceUsername(cls) -> str: ...
    @classmethod
    @remoteDeviceUsername.setter
    def remoteDeviceUsername(cls, value: str) -> str: ...
    @classmethod
    @property
    def selectedBuildTargetGroup(cls) -> BuildTargetGroup: ...
    @classmethod
    @selectedBuildTargetGroup.setter
    def selectedBuildTargetGroup(cls, value: BuildTargetGroup) -> BuildTargetGroup: ...
    @classmethod
    @property
    def selectedEmbeddedLinuxArchitecture(cls) -> EmbeddedLinuxArchitecture: ...
    @classmethod
    @selectedEmbeddedLinuxArchitecture.setter
    def selectedEmbeddedLinuxArchitecture(cls, value: EmbeddedLinuxArchitecture) -> EmbeddedLinuxArchitecture: ...
    @classmethod
    @property
    def selectedQnxArchitecture(cls) -> QNXArchitecture: ...
    @classmethod
    @selectedQnxArchitecture.setter
    def selectedQnxArchitecture(cls, value: QNXArchitecture) -> QNXArchitecture: ...
    @classmethod
    @property
    def selectedQnxOsVersion(cls) -> QNXOsVersion: ...
    @classmethod
    @selectedQnxOsVersion.setter
    def selectedQnxOsVersion(cls, value: QNXOsVersion) -> QNXOsVersion: ...
    @classmethod
    @property
    def selectedStandaloneTarget(cls) -> BuildTarget: ...
    @classmethod
    @selectedStandaloneTarget.setter
    def selectedStandaloneTarget(cls, value: BuildTarget) -> BuildTarget: ...
    @classmethod
    @property
    def standaloneBuildSubtarget(cls) -> StandaloneBuildSubtarget: ...
    @classmethod
    @standaloneBuildSubtarget.setter
    def standaloneBuildSubtarget(cls, value: StandaloneBuildSubtarget) -> StandaloneBuildSubtarget: ...
    @classmethod
    @property
    def streamingInstallLaunchRange(cls) -> int: ...
    @classmethod
    @streamingInstallLaunchRange.setter
    def streamingInstallLaunchRange(cls, value: int) -> int: ...
    @classmethod
    @property
    def switchCreateRomFile(cls) -> bool: ...
    @classmethod
    @switchCreateRomFile.setter
    def switchCreateRomFile(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchEnableDebugPad(cls) -> bool: ...
    @classmethod
    @switchEnableDebugPad.setter
    def switchEnableDebugPad(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchEnableMemoryTracker(cls) -> bool: ...
    @classmethod
    @switchEnableMemoryTracker.setter
    def switchEnableMemoryTracker(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchEnableRomCompression(cls) -> bool: ...
    @classmethod
    @switchEnableRomCompression.setter
    def switchEnableRomCompression(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchHTCSScriptDebugging(cls) -> bool: ...
    @classmethod
    @switchHTCSScriptDebugging.setter
    def switchHTCSScriptDebugging(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchNVNDrawValidation(cls) -> bool: ...
    @classmethod
    @switchNVNDrawValidation.setter
    def switchNVNDrawValidation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchNVNDrawValidation_Heavy(cls) -> bool: ...
    @classmethod
    @switchNVNDrawValidation_Heavy.setter
    def switchNVNDrawValidation_Heavy(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchNVNDrawValidation_Light(cls) -> bool: ...
    @classmethod
    @switchNVNDrawValidation_Light.setter
    def switchNVNDrawValidation_Light(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchNVNGraphicsDebugger(cls) -> bool: ...
    @classmethod
    @switchNVNGraphicsDebugger.setter
    def switchNVNGraphicsDebugger(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchNVNShaderDebugging(cls) -> bool: ...
    @classmethod
    @switchNVNShaderDebugging.setter
    def switchNVNShaderDebugging(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchRedirectWritesToHostMount(cls) -> bool: ...
    @classmethod
    @switchRedirectWritesToHostMount.setter
    def switchRedirectWritesToHostMount(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchRomCompressionConfig(cls) -> str: ...
    @classmethod
    @switchRomCompressionConfig.setter
    def switchRomCompressionConfig(cls, value: str) -> str: ...
    @classmethod
    @property
    def switchRomCompressionLevel(cls) -> int: ...
    @classmethod
    @switchRomCompressionLevel.setter
    def switchRomCompressionLevel(cls, value: int) -> int: ...
    @classmethod
    @property
    def switchRomCompressionType(cls) -> SwitchRomCompressionType: ...
    @classmethod
    @switchRomCompressionType.setter
    def switchRomCompressionType(cls, value: SwitchRomCompressionType) -> SwitchRomCompressionType: ...
    @classmethod
    @property
    def switchSaveADF(cls) -> bool: ...
    @classmethod
    @switchSaveADF.setter
    def switchSaveADF(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchUseLegacyNvnPoolAllocator(cls) -> bool: ...
    @classmethod
    @switchUseLegacyNvnPoolAllocator.setter
    def switchUseLegacyNvnPoolAllocator(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def switchWaitForMemoryTrackerOnStartup(cls) -> bool: ...
    @classmethod
    @switchWaitForMemoryTrackerOnStartup.setter
    def switchWaitForMemoryTrackerOnStartup(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def symlinkLibraries(cls) -> bool: ...
    @classmethod
    @symlinkLibraries.setter
    def symlinkLibraries(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def symlinkSources(cls) -> bool: ...
    @classmethod
    @symlinkSources.setter
    def symlinkSources(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def waitForManagedDebugger(cls) -> bool: ...
    @classmethod
    @waitForManagedDebugger.setter
    def waitForManagedDebugger(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def waitForPlayerConnection(cls) -> bool: ...
    @classmethod
    @waitForPlayerConnection.setter
    def waitForPlayerConnection(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def webGLBuildSubtarget(cls) -> WebGLTextureSubtarget: ...
    @classmethod
    @webGLBuildSubtarget.setter
    def webGLBuildSubtarget(cls, value: WebGLTextureSubtarget) -> WebGLTextureSubtarget: ...
    @classmethod
    @property
    def webGLUsePreBuiltUnityEngine(cls) -> bool: ...
    @classmethod
    @webGLUsePreBuiltUnityEngine.setter
    def webGLUsePreBuiltUnityEngine(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def windowsDevicePortalAddress(cls) -> str: ...
    @classmethod
    @windowsDevicePortalAddress.setter
    def windowsDevicePortalAddress(cls, value: str) -> str: ...
    @classmethod
    @property
    def windowsDevicePortalPassword(cls) -> str: ...
    @classmethod
    @windowsDevicePortalPassword.setter
    def windowsDevicePortalPassword(cls, value: str) -> str: ...
    @classmethod
    @property
    def windowsDevicePortalUsername(cls) -> str: ...
    @classmethod
    @windowsDevicePortalUsername.setter
    def windowsDevicePortalUsername(cls, value: str) -> str: ...
    @classmethod
    @property
    def wsaArchitecture(cls) -> str: ...
    @classmethod
    @wsaArchitecture.setter
    def wsaArchitecture(cls, value: str) -> str: ...
    @classmethod
    @property
    def wsaBuildAndRunDeployTarget(cls) -> WSABuildAndRunDeployTarget: ...
    @classmethod
    @wsaBuildAndRunDeployTarget.setter
    def wsaBuildAndRunDeployTarget(cls, value: WSABuildAndRunDeployTarget) -> WSABuildAndRunDeployTarget: ...
    @classmethod
    @property
    def wsaMinUWPSDK(cls) -> str: ...
    @classmethod
    @wsaMinUWPSDK.setter
    def wsaMinUWPSDK(cls, value: str) -> str: ...
    @classmethod
    @property
    def wsaSDK(cls) -> WSASDK: ...
    @classmethod
    @wsaSDK.setter
    def wsaSDK(cls, value: WSASDK) -> WSASDK: ...
    @classmethod
    @property
    def wsaSubtarget(cls) -> WSASubtarget: ...
    @classmethod
    @wsaSubtarget.setter
    def wsaSubtarget(cls, value: WSASubtarget) -> WSASubtarget: ...
    @classmethod
    @property
    def wsaUWPBuildType(cls) -> WSAUWPBuildType: ...
    @classmethod
    @wsaUWPBuildType.setter
    def wsaUWPBuildType(cls, value: WSAUWPBuildType) -> WSAUWPBuildType: ...
    @classmethod
    @property
    def wsaUWPSDK(cls) -> str: ...
    @classmethod
    @wsaUWPSDK.setter
    def wsaUWPSDK(cls, value: str) -> str: ...
    @classmethod
    @property
    def wsaUWPVisualStudioVersion(cls) -> str: ...
    @classmethod
    @wsaUWPVisualStudioVersion.setter
    def wsaUWPVisualStudioVersion(cls, value: str) -> str: ...
    @classmethod
    @property
    def xboxBuildSubtarget(cls) -> XboxBuildSubtarget: ...
    @classmethod
    @xboxBuildSubtarget.setter
    def xboxBuildSubtarget(cls, value: XboxBuildSubtarget) -> XboxBuildSubtarget: ...
    @classmethod
    @property
    def xboxOneAdditionalDebugPorts(cls) -> str: ...
    @classmethod
    @xboxOneAdditionalDebugPorts.setter
    def xboxOneAdditionalDebugPorts(cls, value: str) -> str: ...
    @classmethod
    @property
    def xboxOneDeployDrive(cls) -> XboxOneDeployDrive: ...
    @classmethod
    @xboxOneDeployDrive.setter
    def xboxOneDeployDrive(cls, value: XboxOneDeployDrive) -> XboxOneDeployDrive: ...
    @classmethod
    @property
    def xboxOneDeployMethod(cls) -> XboxOneDeployMethod: ...
    @classmethod
    @xboxOneDeployMethod.setter
    def xboxOneDeployMethod(cls, value: XboxOneDeployMethod) -> XboxOneDeployMethod: ...
    @classmethod
    @property
    def xboxOneNetworkSharePath(cls) -> str: ...
    @classmethod
    @xboxOneNetworkSharePath.setter
    def xboxOneNetworkSharePath(cls, value: str) -> str: ...
    @classmethod
    @property
    def xboxOneRebootIfDeployFailsAndRetry(cls) -> bool: ...
    @classmethod
    @xboxOneRebootIfDeployFailsAndRetry.setter
    def xboxOneRebootIfDeployFailsAndRetry(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def xboxOneUsername(cls) -> str: ...
    @classmethod
    @xboxOneUsername.setter
    def xboxOneUsername(cls, value: str) -> str: ...
    @staticmethod
    def GetBuildLocation(target: BuildTarget) -> str: ...
    @staticmethod
    def SetBuildLocation(target: BuildTarget, location: str) -> None: ...
    @staticmethod
    def SwitchActiveBuildTargetAsync(targetGroup: BuildTargetGroup, target: BuildTarget) -> bool: ...
    # Skipped GetPlatformSettings due to it being static, abstract and generic.

    GetPlatformSettings : GetPlatformSettings_MethodGroup
    class GetPlatformSettings_MethodGroup:
        @typing.overload
        def __call__(self, platformName: str, name: str) -> str:...
        @typing.overload
        def __call__(self, buildTargetGroup: str, platformName: str, name: str) -> str:...

    # Skipped SetPlatformSettings due to it being static, abstract and generic.

    SetPlatformSettings : SetPlatformSettings_MethodGroup
    class SetPlatformSettings_MethodGroup:
        @typing.overload
        def __call__(self, platformName: str, name: str, value: str) -> None:...
        @typing.overload
        def __call__(self, buildTargetGroup: str, buildTarget: str, name: str, value: str) -> None:...

    # Skipped SwitchActiveBuildTarget due to it being static, abstract and generic.

    SwitchActiveBuildTarget : SwitchActiveBuildTarget_MethodGroup
    class SwitchActiveBuildTarget_MethodGroup:
        @typing.overload
        def __call__(self, target: BuildTarget) -> bool:...
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, target: BuildTarget) -> bool:...
        @typing.overload
        def __call__(self, namedBuildTarget: NamedBuildTarget, target: BuildTarget) -> bool:...



class EditorUserSettings(Object):
    @classmethod
    @property
    def allowAsyncStatusUpdate(cls) -> bool: ...
    @classmethod
    @allowAsyncStatusUpdate.setter
    def allowAsyncStatusUpdate(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def artifactGarbageCollection(cls) -> bool: ...
    @classmethod
    @artifactGarbageCollection.setter
    def artifactGarbageCollection(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def AutomaticAdd(cls) -> bool: ...
    @classmethod
    @AutomaticAdd.setter
    def AutomaticAdd(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def desiredImportWorkerCount(cls) -> int: ...
    @classmethod
    @desiredImportWorkerCount.setter
    def desiredImportWorkerCount(cls, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def hierarchyOverlayIcons(cls) -> bool: ...
    @classmethod
    @hierarchyOverlayIcons.setter
    def hierarchyOverlayIcons(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def idleImportWorkerShutdownDelayMilliseconds(cls) -> int: ...
    @classmethod
    @idleImportWorkerShutdownDelayMilliseconds.setter
    def idleImportWorkerShutdownDelayMilliseconds(cls, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def otherOverlayIcons(cls) -> bool: ...
    @classmethod
    @otherOverlayIcons.setter
    def otherOverlayIcons(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def overlayIcons(cls) -> bool: ...
    @classmethod
    @overlayIcons.setter
    def overlayIcons(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def overwriteFailedCheckoutAssets(cls) -> bool: ...
    @classmethod
    @overwriteFailedCheckoutAssets.setter
    def overwriteFailedCheckoutAssets(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def semanticMergeMode(cls) -> SemanticMergeMode: ...
    @classmethod
    @semanticMergeMode.setter
    def semanticMergeMode(cls, value: SemanticMergeMode) -> SemanticMergeMode: ...
    @classmethod
    @property
    def showFailedCheckout(cls) -> bool: ...
    @classmethod
    @showFailedCheckout.setter
    def showFailedCheckout(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def standbyImportWorkerCount(cls) -> int: ...
    @classmethod
    @standbyImportWorkerCount.setter
    def standbyImportWorkerCount(cls, value: int) -> int: ...
    @classmethod
    @property
    def WorkOffline(cls) -> bool: ...
    @classmethod
    @WorkOffline.setter
    def WorkOffline(cls, value: bool) -> bool: ...
    @staticmethod
    def GetConfigValue(name: str) -> str: ...
    @staticmethod
    def SetConfigValue(name: str, value: str) -> None: ...


class EditorUtility:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def audioMasterMute(cls) -> bool: ...
    @classmethod
    @audioMasterMute.setter
    def audioMasterMute(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def scriptCompilationFailed(cls) -> bool: ...
    @staticmethod
    def BuildResourceFile(selection: Array_1[Object], pathName: str) -> bool: ...
    @staticmethod
    def ClearDirty(target: Object) -> None: ...
    @staticmethod
    def ClearProgressBar() -> None: ...
    @staticmethod
    def CollectDeepHierarchy(roots: Array_1[Object]) -> Array_1[Object]: ...
    @staticmethod
    def CollectDependencies(roots: Array_1[Object]) -> Array_1[Object]: ...
    @staticmethod
    def CompileCSharp(scripts: Array_1[str], references: Array_1[str], defines: Array_1[str], outputAssembly: str) -> Array_1[str]: ...
    @staticmethod
    def CopySerialized(source: Object, dest: Object) -> None: ...
    @staticmethod
    def CopySerializedIfDifferent(source: Object, dest: Object) -> None: ...
    @staticmethod
    def CopySerializedManagedFieldsOnly(source: typing.Any, dest: typing.Any) -> None: ...
    @staticmethod
    def CreateEmptyPrefab(path: str) -> Object: ...
    @staticmethod
    def CreateGameObjectWithHideFlags(name: str, flags: HideFlags, components: Array_1[typing.Type[typing.Any]]) -> GameObject: ...
    @staticmethod
    def DisplayCancelableProgressBar(title: str, info: str, progress: float) -> bool: ...
    @staticmethod
    def DisplayCustomMenuWithSeparators(position: Rect, options: Array_1[str], enabled: Array_1[bool], separator: Array_1[bool], selected: Array_1[int], callback: EditorUtility.SelectMenuItemFunction, userData: typing.Any) -> None: ...
    @staticmethod
    def DisplayDialogComplex(title: str, message: str, ok: str, cancel: str, alt: str) -> int: ...
    @staticmethod
    def DisplayPopupMenu(position: Rect, menuItemPath: str, command: MenuCommand) -> None: ...
    @staticmethod
    def DisplayProgressBar(title: str, info: str, progress: float) -> None: ...
    @staticmethod
    def ExtractOggFile(obj: Object, path: str) -> bool: ...
    @staticmethod
    def FindAsset(path: str, type: typing.Type[typing.Any]) -> Object: ...
    @staticmethod
    def FindPrefabRoot(source: GameObject) -> GameObject: ...
    @staticmethod
    def FocusProjectWindow() -> None: ...
    @staticmethod
    def GetAssetPath(asset: Object) -> str: ...
    @staticmethod
    def GetDialogOptOutDecision(dialogOptOutDecisionType: DialogOptOutDecisionType, dialogOptOutDecisionStorageKey: str) -> bool: ...
    @staticmethod
    def GetObjectEnabled(target: Object) -> int: ...
    @staticmethod
    def GetPrefabParent(source: Object) -> Object: ...
    @staticmethod
    def GetPrefabType(target: Object) -> PrefabType: ...
    @staticmethod
    def InstanceIDToObject(instanceID: int) -> Object: ...
    @staticmethod
    def InstantiatePrefab(target: Object) -> Object: ...
    @staticmethod
    def InvokeDiffTool(leftTitle: str, leftFile: str, rightTitle: str, rightFile: str, ancestorTitle: str, ancestorFile: str) -> str: ...
    @staticmethod
    def IsPersistent(target: Object) -> bool: ...
    @staticmethod
    def IsRunningUnderCPUEmulation() -> bool: ...
    @staticmethod
    def IsUnityExtensionsInitialized() -> bool: ...
    @staticmethod
    def IsValidUnityYAML(yaml: str) -> bool: ...
    @staticmethod
    def LoadWindowLayout(path: str) -> bool: ...
    @staticmethod
    def NaturalCompare(a: str, b: str) -> int: ...
    @staticmethod
    def OpenFilePanel(title: str, directory: str, extension: str) -> str: ...
    @staticmethod
    def OpenFilePanelWithFilters(title: str, directory: str, filters: Array_1[str]) -> str: ...
    @staticmethod
    def OpenFolderPanel(title: str, folder: str, defaultName: str) -> str: ...
    @staticmethod
    def OpenPropertyEditor(obj: Object) -> None: ...
    @staticmethod
    def OpenWithDefaultApp(fileName: str) -> None: ...
    @staticmethod
    def ReconnectToLastPrefab(go: GameObject) -> bool: ...
    @staticmethod
    def RequestScriptReload() -> None: ...
    @staticmethod
    def ResetToPrefabState(source: Object) -> bool: ...
    @staticmethod
    def RevealInFinder(path: str) -> None: ...
    @staticmethod
    def SaveFilePanel(title: str, directory: str, defaultName: str, extension: str) -> str: ...
    @staticmethod
    def SaveFolderPanel(title: str, folder: str, defaultName: str) -> str: ...
    @staticmethod
    def SetCameraAnimateMaterials(camera: Camera, animate: bool) -> None: ...
    @staticmethod
    def SetCameraAnimateMaterialsTime(camera: Camera, time: float) -> None: ...
    @staticmethod
    def SetCustomDiffTool(path: str, twoWayDiff: str, threeWayDiff: str, mergeCommand: str, forceEnableCustomTool: bool = ...) -> None: ...
    @staticmethod
    def SetDefaultParentObject(defaultParentObject: GameObject) -> None: ...
    @staticmethod
    def SetDialogOptOutDecision(dialogOptOutDecisionType: DialogOptOutDecisionType, dialogOptOutDecisionStorageKey: str, optOutDecision: bool) -> None: ...
    @staticmethod
    def SetDirty(target: Object) -> None: ...
    @staticmethod
    def SetObjectEnabled(target: Object, enabled: bool) -> None: ...
    @staticmethod
    def SetSelectedRenderState(renderer: Renderer, renderState: EditorSelectedRenderState) -> None: ...
    @staticmethod
    def SetSelectedWireframeHidden(renderer: Renderer, enabled: bool) -> None: ...
    @staticmethod
    def UnloadUnusedAssets() -> None: ...
    @staticmethod
    def UnloadUnusedAssetsIgnoreManagedReferences() -> None: ...
    @staticmethod
    def UpdateGlobalShaderProperties(time: float) -> None: ...
    @staticmethod
    def WarnPrefab(target: Object, title: str, warning: str, okButton: str) -> bool: ...
    # Skipped ClearDefaultParentObject due to it being static, abstract and generic.

    ClearDefaultParentObject : ClearDefaultParentObject_MethodGroup
    class ClearDefaultParentObject_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, scene: Scene) -> None:...

    # Skipped CompressCubemapTexture due to it being static, abstract and generic.

    CompressCubemapTexture : CompressCubemapTexture_MethodGroup
    class CompressCubemapTexture_MethodGroup:
        @typing.overload
        def __call__(self, texture: Cubemap, format: TextureFormat, quality: int) -> None:...
        @typing.overload
        def __call__(self, texture: Cubemap, format: TextureFormat, quality: TextureCompressionQuality) -> None:...

    # Skipped CompressTexture due to it being static, abstract and generic.

    CompressTexture : CompressTexture_MethodGroup
    class CompressTexture_MethodGroup:
        @typing.overload
        def __call__(self, texture: Texture2D, format: TextureFormat, quality: int) -> None:...
        @typing.overload
        def __call__(self, texture: Texture2D, format: TextureFormat, quality: TextureCompressionQuality) -> None:...

    # Skipped DisplayCustomMenu due to it being static, abstract and generic.

    DisplayCustomMenu : DisplayCustomMenu_MethodGroup
    class DisplayCustomMenu_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, options: Array_1[GUIContent], selected: int, callback: EditorUtility.SelectMenuItemFunction, userData: typing.Any) -> None:...
        @typing.overload
        def __call__(self, position: Rect, options: Array_1[GUIContent], selected: int, callback: EditorUtility.SelectMenuItemFunction, userData: typing.Any, showHotkey: bool) -> None:...
        @typing.overload
        def __call__(self, position: Rect, options: Array_1[GUIContent], checkEnabled: Func_2[int, bool], selected: int, callback: EditorUtility.SelectMenuItemFunction, userData: typing.Any, showHotkey: bool = ...) -> None:...

    # Skipped DisplayDialog due to it being static, abstract and generic.

    DisplayDialog : DisplayDialog_MethodGroup
    class DisplayDialog_MethodGroup:
        @typing.overload
        def __call__(self, title: str, message: str, ok: str) -> bool:...
        @typing.overload
        def __call__(self, title: str, message: str, ok: str, cancel: str) -> bool:...
        @typing.overload
        def __call__(self, title: str, message: str, ok: str, dialogOptOutDecisionType: DialogOptOutDecisionType, dialogOptOutDecisionStorageKey: str) -> bool:...
        @typing.overload
        def __call__(self, title: str, message: str, ok: str, cancel: str, dialogOptOutDecisionType: DialogOptOutDecisionType, dialogOptOutDecisionStorageKey: str) -> bool:...

    # Skipped FormatBytes due to it being static, abstract and generic.

    FormatBytes : FormatBytes_MethodGroup
    class FormatBytes_MethodGroup:
        def __call__(self, bytes: int) -> str:...
        # Method FormatBytes(bytes : Int64) was skipped since it collides with above method

    # Skipped GetDirtyCount due to it being static, abstract and generic.

    GetDirtyCount : GetDirtyCount_MethodGroup
    class GetDirtyCount_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> int:...
        @typing.overload
        def __call__(self, target: Object) -> int:...

    # Skipped IsDirty due to it being static, abstract and generic.

    IsDirty : IsDirty_MethodGroup
    class IsDirty_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, target: Object) -> bool:...

    # Skipped ReplacePrefab due to it being static, abstract and generic.

    ReplacePrefab : ReplacePrefab_MethodGroup
    class ReplacePrefab_MethodGroup:
        @typing.overload
        def __call__(self, go: GameObject, targetPrefab: Object) -> GameObject:...
        @typing.overload
        def __call__(self, go: GameObject, targetPrefab: Object, options: ReplacePrefabOptions) -> GameObject:...

    # Skipped SaveFilePanelInProject due to it being static, abstract and generic.

    SaveFilePanelInProject : SaveFilePanelInProject_MethodGroup
    class SaveFilePanelInProject_MethodGroup:
        @typing.overload
        def __call__(self, title: str, defaultName: str, extension: str, message: str) -> str:...
        @typing.overload
        def __call__(self, title: str, defaultName: str, extension: str, message: str, path: str) -> str:...

    # Skipped UnloadUnusedAssetsImmediate due to it being static, abstract and generic.

    UnloadUnusedAssetsImmediate : UnloadUnusedAssetsImmediate_MethodGroup
    class UnloadUnusedAssetsImmediate_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, includeMonoReferencesAsRoots: bool) -> None:...


    class SelectMenuItemFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, userData: typing.Any, options: Array_1[str], selected: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, userData: typing.Any, options: Array_1[str], selected: int) -> None: ...



class EditorWindow(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @classmethod
    @property
    def focusedWindow(cls) -> EditorWindow: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @classmethod
    @property
    def mouseOverWindow(cls) -> EditorWindow: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def BeginWindows(self) -> None: ...
    def Close(self) -> None: ...
    def DiscardChanges(self) -> None: ...
    def EndWindows(self) -> None: ...
    def Focus(self) -> None: ...
    def GetExtraPaneTypes(self) -> IEnumerable_1[typing.Type[typing.Any]]: ...
    def RemoveNotification(self) -> None: ...
    def Repaint(self) -> None: ...
    def SaveChanges(self) -> None: ...
    def SendEvent(self, e: Event) -> bool: ...
    def ShowAsDropDown(self, buttonRect: Rect, windowSize: Vector2) -> None: ...
    def ShowAuxWindow(self) -> None: ...
    def ShowModal(self) -> None: ...
    def ShowModalUtility(self) -> None: ...
    def ShowPopup(self) -> None: ...
    def ShowTab(self) -> None: ...
    def ShowUtility(self) -> None: ...
    def TryGetOverlay(self, id: str, match: clr.Reference[Overlay]) -> bool: ...
    # Skipped CreateWindow due to it being static, abstract and generic.

    CreateWindow : CreateWindow_MethodGroup
    class CreateWindow_MethodGroup:
        def __getitem__(self, t:typing.Type[CreateWindow_1_T1]) -> CreateWindow_1[CreateWindow_1_T1]: ...

        CreateWindow_1_T1 = typing.TypeVar('CreateWindow_1_T1')
        class CreateWindow_1(typing.Generic[CreateWindow_1_T1]):
            CreateWindow_1_T = EditorWindow.CreateWindow_MethodGroup.CreateWindow_1_T1
            @typing.overload
            def __call__(self, desiredDockNextTo: Array_1[typing.Type[typing.Any]]) -> CreateWindow_1_T:...
            @typing.overload
            def __call__(self, title: str, desiredDockNextTo: Array_1[typing.Type[typing.Any]]) -> CreateWindow_1_T:...


    # Skipped FocusWindowIfItsOpen due to it being static, abstract and generic.

    FocusWindowIfItsOpen : FocusWindowIfItsOpen_MethodGroup
    class FocusWindowIfItsOpen_MethodGroup:
        def __getitem__(self, t:typing.Type[FocusWindowIfItsOpen_1_T1]) -> FocusWindowIfItsOpen_1[FocusWindowIfItsOpen_1_T1]: ...

        FocusWindowIfItsOpen_1_T1 = typing.TypeVar('FocusWindowIfItsOpen_1_T1')
        class FocusWindowIfItsOpen_1(typing.Generic[FocusWindowIfItsOpen_1_T1]):
            FocusWindowIfItsOpen_1_T = EditorWindow.FocusWindowIfItsOpen_MethodGroup.FocusWindowIfItsOpen_1_T1
            def __call__(self) -> None:...

        def __call__(self, t: typing.Type[typing.Any]) -> None:...

    # Skipped GetWindow due to it being static, abstract and generic.

    GetWindow : GetWindow_MethodGroup
    class GetWindow_MethodGroup:
        def __getitem__(self, t:typing.Type[GetWindow_1_T1]) -> GetWindow_1[GetWindow_1_T1]: ...

        GetWindow_1_T1 = typing.TypeVar('GetWindow_1_T1')
        class GetWindow_1(typing.Generic[GetWindow_1_T1]):
            GetWindow_1_T = EditorWindow.GetWindow_MethodGroup.GetWindow_1_T1
            @typing.overload
            def __call__(self) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, desiredDockNextTo: Array_1[typing.Type[typing.Any]]) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, title: str) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, utility: bool) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, title: str, desiredDockNextTo: Array_1[typing.Type[typing.Any]]) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, title: str, focus: bool) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, utility: bool, title: str) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, title: str, focus: bool, desiredDockNextTo: Array_1[typing.Type[typing.Any]]) -> GetWindow_1_T:...
            @typing.overload
            def __call__(self, utility: bool, title: str, focus: bool) -> GetWindow_1_T:...

        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any]) -> EditorWindow:...
        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any], utility: bool) -> EditorWindow:...
        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any], utility: bool, title: str) -> EditorWindow:...
        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any], utility: bool, title: str, focus: bool) -> EditorWindow:...

    # Skipped GetWindowWithRect due to it being static, abstract and generic.

    GetWindowWithRect : GetWindowWithRect_MethodGroup
    class GetWindowWithRect_MethodGroup:
        def __getitem__(self, t:typing.Type[GetWindowWithRect_1_T1]) -> GetWindowWithRect_1[GetWindowWithRect_1_T1]: ...

        GetWindowWithRect_1_T1 = typing.TypeVar('GetWindowWithRect_1_T1')
        class GetWindowWithRect_1(typing.Generic[GetWindowWithRect_1_T1]):
            GetWindowWithRect_1_T = EditorWindow.GetWindowWithRect_MethodGroup.GetWindowWithRect_1_T1
            @typing.overload
            def __call__(self, rect: Rect) -> GetWindowWithRect_1_T:...
            @typing.overload
            def __call__(self, rect: Rect, utility: bool) -> GetWindowWithRect_1_T:...
            @typing.overload
            def __call__(self, rect: Rect, utility: bool, title: str) -> GetWindowWithRect_1_T:...
            @typing.overload
            def __call__(self, rect: Rect, utility: bool, title: str, focus: bool) -> GetWindowWithRect_1_T:...

        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any], rect: Rect) -> EditorWindow:...
        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any], rect: Rect, utility: bool) -> EditorWindow:...
        @typing.overload
        def __call__(self, windowType: typing.Type[typing.Any], rect: Rect, utility: bool, title: str) -> EditorWindow:...

    # Skipped HasOpenInstances due to it being static, abstract and generic.

    HasOpenInstances : HasOpenInstances_MethodGroup
    class HasOpenInstances_MethodGroup:
        def __getitem__(self, t:typing.Type[HasOpenInstances_1_T1]) -> HasOpenInstances_1[HasOpenInstances_1_T1]: ...

        HasOpenInstances_1_T1 = typing.TypeVar('HasOpenInstances_1_T1')
        class HasOpenInstances_1(typing.Generic[HasOpenInstances_1_T1]):
            HasOpenInstances_1_T = EditorWindow.HasOpenInstances_MethodGroup.HasOpenInstances_1_T1
            def __call__(self) -> bool:...


    # Skipped Show due to it being static, abstract and generic.

    Show : Show_MethodGroup
    class Show_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, immediateDisplay: bool) -> None:...

    # Skipped ShowNotification due to it being static, abstract and generic.

    ShowNotification : ShowNotification_MethodGroup
    class ShowNotification_MethodGroup:
        @typing.overload
        def __call__(self, notification: GUIContent) -> None:...
        @typing.overload
        def __call__(self, notification: GUIContent, fadeoutWait: float) -> None:...



class EditorWindowTitleAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def icon(self) -> str: ...
    @icon.setter
    def icon(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def useTypeNameAsIconName(self) -> bool: ...
    @useTypeNameAsIconName.setter
    def useTypeNameAsIconName(self, value: bool) -> bool: ...


class EmbeddedLinuxArchitecture(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Arm64 : EmbeddedLinuxArchitecture # 0
    Arm32 : EmbeddedLinuxArchitecture # 1
    X64 : EmbeddedLinuxArchitecture # 2
    X86 : EmbeddedLinuxArchitecture # 3


class EnterPlayModeOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : EnterPlayModeOptions # 0
    DisableDomainReload : EnterPlayModeOptions # 1
    DisableSceneReload : EnterPlayModeOptions # 2
    DisableSceneBackupUnlessDirty : EnterPlayModeOptions # 4


class ExportPackageOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : ExportPackageOptions # 0
    Interactive : ExportPackageOptions # 1
    Recurse : ExportPackageOptions # 2
    IncludeDependencies : ExportPackageOptions # 4
    IncludeLibraryAssets : ExportPackageOptions # 8


class ExternalVersionControl:
    def __init__(self, value: str) -> None: ...
    AssetServer : str
    AutoDetect : str
    Disabled : str
    Generic : str
    # Operator not supported op_Implicit(d: ExternalVersionControl)
    # Operator not supported op_Implicit(d: String)
    def ToString(self) -> str: ...


class FilePathAttribute(Attribute):
    def __init__(self, relativePath: str, location: FilePathAttribute.Location) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

    class Location(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        PreferencesFolder : FilePathAttribute.Location # 0
        ProjectFolder : FilePathAttribute.Location # 1



class FileUtil:
    def __init__(self) -> None: ...
    @staticmethod
    def CopyFileOrDirectory(source: str, dest: str) -> None: ...
    @staticmethod
    def CopyFileOrDirectoryFollowSymlinks(source: str, dest: str) -> None: ...
    @staticmethod
    def DeleteFileOrDirectory(path: str) -> bool: ...
    @staticmethod
    def GetLogicalPath(path: str) -> str: ...
    @staticmethod
    def GetPhysicalPath(path: str) -> str: ...
    @staticmethod
    def GetProjectRelativePath(path: str) -> str: ...
    @staticmethod
    def GetUniqueTempPathInProject() -> str: ...
    @staticmethod
    def MoveFileOrDirectory(source: str, dest: str) -> None: ...
    @staticmethod
    def ReplaceDirectory(src: str, dst: str) -> None: ...
    @staticmethod
    def ReplaceFile(src: str, dst: str) -> None: ...


class FontRenderingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Smooth : FontRenderingMode # 0
    HintedSmooth : FontRenderingMode # 1
    HintedRaster : FontRenderingMode # 2
    OSDefault : FontRenderingMode # 3


class FontTextureCase(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ASCII : FontTextureCase # 0
    ASCIIUpperCase : FontTextureCase # 1
    ASCIILowerCase : FontTextureCase # 2
    CustomSet : FontTextureCase # 3
    Dynamic : FontTextureCase # -2
    Unicode : FontTextureCase # -1


class ForceReserializeAssetsOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReserializeAssets : ForceReserializeAssetsOptions # 1
    ReserializeMetadata : ForceReserializeAssetsOptions # 2
    ReserializeAssetsAndMetadata : ForceReserializeAssetsOptions # 3


class GameObjectUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def AreStaticEditorFlagsSet(go: GameObject, flags: StaticEditorFlags) -> bool: ...
    @staticmethod
    def EnsureUniqueNameForSibling(self: GameObject) -> None: ...
    @staticmethod
    def GetMonoBehavioursWithMissingScriptCount(go: GameObject) -> int: ...
    @staticmethod
    def GetNavMeshArea(go: GameObject) -> int: ...
    @staticmethod
    def GetNavMeshAreaFromName(name: str) -> int: ...
    @staticmethod
    def GetNavMeshAreaNames() -> Array_1[str]: ...
    @staticmethod
    def GetNavMeshLayer(go: GameObject) -> int: ...
    @staticmethod
    def GetNavMeshLayerFromName(name: str) -> int: ...
    @staticmethod
    def GetNavMeshLayerNames() -> Array_1[str]: ...
    @staticmethod
    def GetStaticEditorFlags(go: GameObject) -> StaticEditorFlags: ...
    @staticmethod
    def GetUniqueNameForSibling(parent: Transform, name: str) -> str: ...
    @staticmethod
    def ModifyMaskIfGameObjectIsHiddenForPrefabModeInContext(sceneCullingMask: int, gameObject: GameObject) -> int: ...
    @staticmethod
    def RemoveMonoBehavioursWithMissingScript(go: GameObject) -> int: ...
    @staticmethod
    def SetNavMeshArea(go: GameObject, areaIndex: int) -> None: ...
    @staticmethod
    def SetNavMeshLayer(go: GameObject, areaIndex: int) -> None: ...
    @staticmethod
    def SetParentAndAlign(child: GameObject, parent: GameObject) -> None: ...
    @staticmethod
    def SetStaticEditorFlags(go: GameObject, flags: StaticEditorFlags) -> None: ...


class GameViewSizeGroupType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Standalone : GameViewSizeGroupType # 0
    WebPlayer : GameViewSizeGroupType # 1
    iOS : GameViewSizeGroupType # 2
    Android : GameViewSizeGroupType # 3
    PS3 : GameViewSizeGroupType # 4
    WiiU : GameViewSizeGroupType # 5
    Tizen : GameViewSizeGroupType # 6
    WP8 : GameViewSizeGroupType # 7
    N3DS : GameViewSizeGroupType # 8
    HMD : GameViewSizeGroupType # 9


class GenericMenu:
    def __init__(self) -> None: ...
    @property
    def allowDuplicateNames(self) -> bool: ...
    @allowDuplicateNames.setter
    def allowDuplicateNames(self, value: bool) -> bool: ...
    def AddSeparator(self, path: str) -> None: ...
    def DropDown(self, position: Rect) -> None: ...
    def GetItemCount(self) -> int: ...
    def ShowAsContext(self) -> None: ...
    # Skipped AddDisabledItem due to it being static, abstract and generic.

    AddDisabledItem : AddDisabledItem_MethodGroup
    class AddDisabledItem_MethodGroup:
        @typing.overload
        def __call__(self, content: GUIContent) -> None:...
        @typing.overload
        def __call__(self, content: GUIContent, on: bool) -> None:...

    # Skipped AddItem due to it being static, abstract and generic.

    AddItem : AddItem_MethodGroup
    class AddItem_MethodGroup:
        @typing.overload
        def __call__(self, content: GUIContent, on: bool, func: GenericMenu.MenuFunction) -> None:...
        @typing.overload
        def __call__(self, content: GUIContent, on: bool, func: GenericMenu.MenuFunction2, userData: typing.Any) -> None:...


    class MenuFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...


    class MenuFunction2(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, userData: typing.Any, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, userData: typing.Any) -> None: ...



class GizmoInfo(IComparable):
    @property
    def gizmoEnabled(self) -> bool: ...
    @gizmoEnabled.setter
    def gizmoEnabled(self, value: bool) -> bool: ...
    @property
    def hasGizmo(self) -> bool: ...
    @property
    def hasIcon(self) -> bool: ...
    @property
    def iconEnabled(self) -> bool: ...
    @iconEnabled.setter
    def iconEnabled(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def script(self) -> Object: ...
    @property
    def thumb(self) -> Texture2D: ...
    def CompareTo(self, obj: typing.Any) -> int: ...


class GizmoType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Pickable : GizmoType # 1
    NotInSelectionHierarchy : GizmoType # 2
    Selected : GizmoType # 4
    Active : GizmoType # 8
    InSelectionHierarchy : GizmoType # 16
    NonSelected : GizmoType # 32
    NotSelected : GizmoType # -127
    SelectedOrChild : GizmoType # -127


class GizmoUtility(abc.ABC):
    @classmethod
    @property
    def iconSize(cls) -> float: ...
    @classmethod
    @iconSize.setter
    def iconSize(cls, value: float) -> float: ...
    @classmethod
    @property
    def use3dIcons(cls) -> bool: ...
    @classmethod
    @use3dIcons.setter
    def use3dIcons(cls, value: bool) -> bool: ...
    @staticmethod
    def ApplyGizmoInfo(info: GizmoInfo, addToRecentlyChanged: bool = ...) -> None: ...
    @staticmethod
    def GetGizmoInfo() -> Array_1[GizmoInfo]: ...
    @staticmethod
    def SetGizmoEnabled(type: typing.Type[typing.Any], enabled: bool, addToRecentlyChanged: bool = ...) -> None: ...
    @staticmethod
    def SetIconEnabled(type: typing.Type[typing.Any], enabled: bool) -> None: ...
    @staticmethod
    def TryGetGizmoInfo(type: typing.Type[typing.Any], info: clr.Reference[GizmoInfo]) -> bool: ...


class GlobalObjectId(IEquatable_1[GlobalObjectId]):
    @property
    def assetGUID(self) -> GUID: ...
    @property
    def identifierType(self) -> int: ...
    @property
    def targetObjectId(self) -> int: ...
    @property
    def targetPrefabId(self) -> int: ...
    def Equals(self, other: GlobalObjectId) -> bool: ...
    @staticmethod
    def GlobalObjectIdentifiersToInstanceIDsSlow(identifiers: Array_1[GlobalObjectId], outputInstanceIDs: Array_1[int]) -> None: ...
    @staticmethod
    def GlobalObjectIdentifiersToObjectsSlow(identifiers: Array_1[GlobalObjectId], outputObjects: Array_1[Object]) -> None: ...
    @staticmethod
    def GlobalObjectIdentifierToInstanceIDSlow(id: GlobalObjectId) -> int: ...
    @staticmethod
    def GlobalObjectIdentifierToObjectSlow(id: GlobalObjectId) -> Object: ...
    def ToString(self) -> str: ...
    @staticmethod
    def TryParse(stringValue: str, id: clr.Reference[GlobalObjectId]) -> bool: ...
    # Skipped GetGlobalObjectIdSlow due to it being static, abstract and generic.

    GetGlobalObjectIdSlow : GetGlobalObjectIdSlow_MethodGroup
    class GetGlobalObjectIdSlow_MethodGroup:
        @typing.overload
        def __call__(self, instanceId: int) -> GlobalObjectId:...
        @typing.overload
        def __call__(self, targetObject: Object) -> GlobalObjectId:...

    # Skipped GetGlobalObjectIdsSlow due to it being static, abstract and generic.

    GetGlobalObjectIdsSlow : GetGlobalObjectIdsSlow_MethodGroup
    class GetGlobalObjectIdsSlow_MethodGroup:
        @typing.overload
        def __call__(self, instanceIds: Array_1[int], outputIdentifiers: Array_1[GlobalObjectId]) -> None:...
        @typing.overload
        def __call__(self, objects: Array_1[Object], outputIdentifiers: Array_1[GlobalObjectId]) -> None:...



class GraphicsJobMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Native : GraphicsJobMode # 0
    Legacy : GraphicsJobMode # 1


class GridPalette(ScriptableObject):
    def __init__(self) -> None: ...
    cellSizing : GridPalette.CellSizing
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def transparencySortAxis(self) -> Vector3: ...
    @transparencySortAxis.setter
    def transparencySortAxis(self, value: Vector3) -> Vector3: ...
    @property
    def transparencySortMode(self) -> TransparencySortMode: ...
    @transparencySortMode.setter
    def transparencySortMode(self, value: TransparencySortMode) -> TransparencySortMode: ...

    class CellSizing(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Automatic : GridPalette.CellSizing # 0
        Manual : GridPalette.CellSizing # 100



class GUID(IEquatable_1[GUID], IComparable_1[GUID], IComparable):
    def __init__(self, hexRepresentation: str) -> None: ...
    def Empty(self) -> bool: ...
    @staticmethod
    def Generate() -> GUID: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, x: GUID, y: GUID) -> bool: ...
    def __gt__(self, x: GUID, y: GUID) -> bool: ...
    def __ne__(self, x: GUID, y: GUID) -> bool: ...
    def __lt__(self, x: GUID, y: GUID) -> bool: ...
    def ParseExact(self, hex: str) -> bool: ...
    def ToString(self) -> str: ...
    @staticmethod
    def TryParse(hex: str, result: clr.Reference[GUID]) -> bool: ...
    # Skipped CompareTo due to it being static, abstract and generic.

    CompareTo : CompareTo_MethodGroup
    class CompareTo_MethodGroup:
        @typing.overload
        def __call__(self, rhs: GUID) -> int:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> int:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, obj: GUID) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class GUIDrawer(abc.ABC):
    pass


class Handles:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def centerColor(cls) -> Color: ...
    @classmethod
    @property
    def color(cls) -> Color: ...
    @classmethod
    @color.setter
    def color(cls, value: Color) -> Color: ...
    @property
    def currentCamera(self) -> Camera: ...
    @currentCamera.setter
    def currentCamera(self, value: Camera) -> Camera: ...
    @classmethod
    @property
    def elementColor(cls) -> Color: ...
    @classmethod
    @property
    def elementPreselectionColor(cls) -> Color: ...
    @classmethod
    @property
    def elementSelectionColor(cls) -> Color: ...
    @classmethod
    @property
    def inverseMatrix(cls) -> Matrix4x4: ...
    @classmethod
    @property
    def lighting(cls) -> bool: ...
    @classmethod
    @lighting.setter
    def lighting(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def lineThickness(cls) -> float: ...
    @classmethod
    @property
    def matrix(cls) -> Matrix4x4: ...
    @classmethod
    @matrix.setter
    def matrix(cls, value: Matrix4x4) -> Matrix4x4: ...
    @classmethod
    @property
    def preselectionColor(cls) -> Color: ...
    @classmethod
    @property
    def secondaryColor(cls) -> Color: ...
    @classmethod
    @property
    def selectedColor(cls) -> Color: ...
    @classmethod
    @property
    def UIColliderHandleColor(cls) -> Color: ...
    @classmethod
    @property
    def xAxisColor(cls) -> Color: ...
    @classmethod
    @property
    def yAxisColor(cls) -> Color: ...
    @classmethod
    @property
    def zAxisColor(cls) -> Color: ...
    @classmethod
    @property
    def zTest(cls) -> CompareFunction: ...
    @classmethod
    @zTest.setter
    def zTest(cls, value: CompareFunction) -> CompareFunction: ...
    @staticmethod
    def ArrowHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def Button(position: Vector3, direction: Quaternion, size: float, pickSize: float, capFunction: Handles.CapFunction) -> bool: ...
    @staticmethod
    def CircleHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def ClearCamera(position: Rect, camera: Camera) -> None: ...
    @staticmethod
    def ConeHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def CubeHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def CylinderHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def DoPositionHandle(position: Vector3, rotation: Quaternion) -> Vector3: ...
    @staticmethod
    def DoRotationHandle(rotation: Quaternion, position: Vector3) -> Quaternion: ...
    @staticmethod
    def DoScaleHandle(scale: Vector3, position: Vector3, rotation: Quaternion, size: float) -> Vector3: ...
    @staticmethod
    def DotHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def DrawAAConvexPolygon(points: Array_1[Vector3]) -> None: ...
    @staticmethod
    def DrawBezier(startPosition: Vector3, endPosition: Vector3, startTangent: Vector3, endTangent: Vector3, color: Color, texture: Texture2D, width: float) -> None: ...
    @staticmethod
    def DrawDottedLine(p1: Vector3, p2: Vector3, screenSpaceSize: float) -> None: ...
    @staticmethod
    def DrawGizmos(camera: Camera) -> None: ...
    @staticmethod
    def DrawPolyLine(points: Array_1[Vector3]) -> None: ...
    @staticmethod
    def DrawSelectionFrame(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def DrawSolidArc(center: Vector3, normal: Vector3, from_: Vector3, angle: float, radius: float) -> None: ...
    @staticmethod
    def DrawSolidDisc(center: Vector3, normal: Vector3, radius: float) -> None: ...
    @staticmethod
    def DrawTexture3DSDF(texture: Texture, stepScale: float = ..., surfaceOffset: float = ..., customColorRamp: Gradient = ...) -> None: ...
    @staticmethod
    def DrawTexture3DSlice(texture: Texture, slicePositions: Vector3, filterMode: FilterMode = ..., useColorRamp: bool = ..., customColorRamp: Gradient = ...) -> None: ...
    @staticmethod
    def DrawTexture3DVolume(texture: Texture, opacity: float = ..., qualityModifier: float = ..., filterMode: FilterMode = ..., useColorRamp: bool = ..., customColorRamp: Gradient = ...) -> None: ...
    @staticmethod
    def DrawWireCube(center: Vector3, size: Vector3) -> None: ...
    @staticmethod
    def EndGUI() -> None: ...
    @staticmethod
    def GetMainGameViewSize() -> Vector2: ...
    @staticmethod
    def MakeBezierPoints(startPosition: Vector3, endPosition: Vector3, startTangent: Vector3, endTangent: Vector3, division: int) -> Array_1[Vector3]: ...
    @staticmethod
    def RectangleHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    @staticmethod
    def SelectionFrame(controlID: int, position: Vector3, rotation: Quaternion, size: float) -> None: ...
    @staticmethod
    def ShouldRenderGizmos() -> bool: ...
    @staticmethod
    def SphereHandleCap(controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...
    # Skipped BeginGUI due to it being static, abstract and generic.

    BeginGUI : BeginGUI_MethodGroup
    class BeginGUI_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, position: Rect) -> None:...

    # Skipped Disc due to it being static, abstract and generic.

    Disc : Disc_MethodGroup
    class Disc_MethodGroup:
        @typing.overload
        def __call__(self, rotation: Quaternion, position: Vector3, axis: Vector3, size: float, cutoffPlane: bool, snap: float) -> Quaternion:...
        @typing.overload
        def __call__(self, id: int, rotation: Quaternion, position: Vector3, axis: Vector3, size: float, cutoffPlane: bool, snap: float) -> Quaternion:...

    # Skipped DrawAAPolyLine due to it being static, abstract and generic.

    DrawAAPolyLine : DrawAAPolyLine_MethodGroup
    class DrawAAPolyLine_MethodGroup:
        @typing.overload
        def __call__(self, points: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, width: float, points: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, colors: Array_1[Color], points: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, lineTex: Texture2D, points: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, width: float, actualNumberOfPoints: int, points: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, width: float, colors: Array_1[Color], points: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, lineTex: Texture2D, width: float, points: Array_1[Vector3]) -> None:...

    # Skipped DrawCamera due to it being static, abstract and generic.

    DrawCamera : DrawCamera_MethodGroup
    class DrawCamera_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, camera: Camera) -> None:...
        @typing.overload
        def __call__(self, position: Rect, camera: Camera, drawMode: DrawCameraMode) -> None:...
        @typing.overload
        def __call__(self, position: Rect, camera: Camera, drawMode: DrawCameraMode, drawGizmos: bool) -> None:...

    # Skipped DrawDottedLines due to it being static, abstract and generic.

    DrawDottedLines : DrawDottedLines_MethodGroup
    class DrawDottedLines_MethodGroup:
        @typing.overload
        def __call__(self, lineSegments: Array_1[Vector3], screenSpaceSize: float) -> None:...
        @typing.overload
        def __call__(self, points: Array_1[Vector3], segmentIndices: Array_1[int], screenSpaceSize: float) -> None:...

    # Skipped DrawLine due to it being static, abstract and generic.

    DrawLine : DrawLine_MethodGroup
    class DrawLine_MethodGroup:
        @typing.overload
        def __call__(self, p1: Vector3, p2: Vector3) -> None:...
        @typing.overload
        def __call__(self, p1: Vector3, p2: Vector3, thickness: float) -> None:...

    # Skipped DrawLines due to it being static, abstract and generic.

    DrawLines : DrawLines_MethodGroup
    class DrawLines_MethodGroup:
        @typing.overload
        def __call__(self, lineSegments: Array_1[Vector3]) -> None:...
        @typing.overload
        def __call__(self, points: Array_1[Vector3], segmentIndices: Array_1[int]) -> None:...

    # Skipped DrawOutline due to it being static, abstract and generic.

    DrawOutline : DrawOutline_MethodGroup
    class DrawOutline_MethodGroup:
        @typing.overload
        def __call__(self, renderers: Array_1[int], color: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, renderers: Array_1[Renderer], color: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, objects: Array_1[GameObject], color: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, objects: List_1[GameObject], color: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, renderers: Array_1[Renderer], parentNodeColor: Color, childNodeColor: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, objects: Array_1[GameObject], parentNodeColor: Color, childNodeColor: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, objects: List_1[GameObject], parentNodeColor: Color, childNodeColor: Color, fillOpacity: float = ...) -> None:...
        @typing.overload
        def __call__(self, parentRenderers: Array_1[int], childRenderers: Array_1[int], parentNodeColor: Color, childNodeColor: Color, fillOpacity: float = ...) -> None:...

    # Skipped DrawSolidRectangleWithOutline due to it being static, abstract and generic.

    DrawSolidRectangleWithOutline : DrawSolidRectangleWithOutline_MethodGroup
    class DrawSolidRectangleWithOutline_MethodGroup:
        @typing.overload
        def __call__(self, verts: Array_1[Vector3], faceColor: Color, outlineColor: Color) -> None:...
        @typing.overload
        def __call__(self, rectangle: Rect, faceColor: Color, outlineColor: Color) -> None:...

    # Skipped DrawWireArc due to it being static, abstract and generic.

    DrawWireArc : DrawWireArc_MethodGroup
    class DrawWireArc_MethodGroup:
        @typing.overload
        def __call__(self, center: Vector3, normal: Vector3, from_: Vector3, angle: float, radius: float) -> None:...
        @typing.overload
        def __call__(self, center: Vector3, normal: Vector3, from_: Vector3, angle: float, radius: float, thickness: float) -> None:...

    # Skipped DrawWireDisc due to it being static, abstract and generic.

    DrawWireDisc : DrawWireDisc_MethodGroup
    class DrawWireDisc_MethodGroup:
        @typing.overload
        def __call__(self, center: Vector3, normal: Vector3, radius: float) -> None:...
        @typing.overload
        def __call__(self, center: Vector3, normal: Vector3, radius: float, thickness: float) -> None:...

    # Skipped FreeMoveHandle due to it being static, abstract and generic.

    FreeMoveHandle : FreeMoveHandle_MethodGroup
    class FreeMoveHandle_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector3, size: float, snap: Vector3, capFunction: Handles.CapFunction) -> Vector3:...
        @typing.overload
        def __call__(self, controlID: int, position: Vector3, size: float, snap: Vector3, capFunction: Handles.CapFunction) -> Vector3:...
        @typing.overload
        def __call__(self, position: Vector3, rotation: Quaternion, size: float, snap: Vector3, capFunction: Handles.CapFunction) -> Vector3:...
        @typing.overload
        def __call__(self, controlID: int, position: Vector3, rotation: Quaternion, size: float, snap: Vector3, capFunction: Handles.CapFunction) -> Vector3:...

    # Skipped FreeRotateHandle due to it being static, abstract and generic.

    FreeRotateHandle : FreeRotateHandle_MethodGroup
    class FreeRotateHandle_MethodGroup:
        @typing.overload
        def __call__(self, rotation: Quaternion, position: Vector3, size: float) -> Quaternion:...
        @typing.overload
        def __call__(self, id: int, rotation: Quaternion, position: Vector3, size: float) -> Quaternion:...

    # Skipped Label due to it being static, abstract and generic.

    Label : Label_MethodGroup
    class Label_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector3, image: Texture) -> None:...
        @typing.overload
        def __call__(self, position: Vector3, text: str) -> None:...
        @typing.overload
        def __call__(self, position: Vector3, content: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Vector3, text: str, style: GUIStyle) -> None:...
        @typing.overload
        def __call__(self, position: Vector3, content: GUIContent, style: GUIStyle) -> None:...

    # Skipped PositionHandle due to it being static, abstract and generic.

    PositionHandle : PositionHandle_MethodGroup
    class PositionHandle_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector3, rotation: Quaternion) -> Vector3:...
        @typing.overload
        def __call__(self, ids: Handles.PositionHandleIds, position: Vector3, rotation: Quaternion) -> Vector3:...

    # Skipped RadiusHandle due to it being static, abstract and generic.

    RadiusHandle : RadiusHandle_MethodGroup
    class RadiusHandle_MethodGroup:
        @typing.overload
        def __call__(self, rotation: Quaternion, position: Vector3, radius: float) -> float:...
        @typing.overload
        def __call__(self, rotation: Quaternion, position: Vector3, radius: float, handlesOnly: bool) -> float:...

    # Skipped RotationHandle due to it being static, abstract and generic.

    RotationHandle : RotationHandle_MethodGroup
    class RotationHandle_MethodGroup:
        @typing.overload
        def __call__(self, rotation: Quaternion, position: Vector3) -> Quaternion:...
        @typing.overload
        def __call__(self, ids: Handles.RotationHandleIds, rotation: Quaternion, position: Vector3) -> Quaternion:...

    # Skipped ScaleHandle due to it being static, abstract and generic.

    ScaleHandle : ScaleHandle_MethodGroup
    class ScaleHandle_MethodGroup:
        @typing.overload
        def __call__(self, scale: Vector3, position: Vector3, rotation: Quaternion) -> Vector3:...
        @typing.overload
        def __call__(self, scale: Vector3, position: Vector3, rotation: Quaternion, size: float) -> Vector3:...

    # Skipped ScaleSlider due to it being static, abstract and generic.

    ScaleSlider : ScaleSlider_MethodGroup
    class ScaleSlider_MethodGroup:
        @typing.overload
        def __call__(self, scale: float, position: Vector3, direction: Vector3, rotation: Quaternion, size: float, snap: float) -> float:...
        @typing.overload
        def __call__(self, id: int, scale: float, position: Vector3, direction: Vector3, rotation: Quaternion, size: float, snap: float) -> float:...

    # Skipped ScaleValueHandle due to it being static, abstract and generic.

    ScaleValueHandle : ScaleValueHandle_MethodGroup
    class ScaleValueHandle_MethodGroup:
        @typing.overload
        def __call__(self, value: float, position: Vector3, rotation: Quaternion, size: float, capFunction: Handles.CapFunction, snap: float) -> float:...
        @typing.overload
        def __call__(self, controlID: int, value: float, position: Vector3, rotation: Quaternion, size: float, capFunction: Handles.CapFunction, snap: float) -> float:...

    # Skipped SetCamera due to it being static, abstract and generic.

    SetCamera : SetCamera_MethodGroup
    class SetCamera_MethodGroup:
        @typing.overload
        def __call__(self, camera: Camera) -> None:...
        @typing.overload
        def __call__(self, position: Rect, camera: Camera) -> None:...

    # Skipped Slider due to it being static, abstract and generic.

    Slider : Slider_MethodGroup
    class Slider_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector3, direction: Vector3) -> Vector3:...
        @typing.overload
        def __call__(self, position: Vector3, direction: Vector3, size: float, capFunction: Handles.CapFunction, snap: float) -> Vector3:...
        @typing.overload
        def __call__(self, controlID: int, position: Vector3, direction: Vector3, size: float, capFunction: Handles.CapFunction, snap: float) -> Vector3:...
        @typing.overload
        def __call__(self, controlID: int, position: Vector3, offset: Vector3, direction: Vector3, size: float, capFunction: Handles.CapFunction, snap: float) -> Vector3:...

    # Skipped Slider2D due to it being static, abstract and generic.

    Slider2D : Slider2D_MethodGroup
    class Slider2D_MethodGroup:
        @typing.overload
        def __call__(self, handlePos: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: float) -> Vector3:...
        @typing.overload
        def __call__(self, handlePos: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: Vector2) -> Vector3:...
        @typing.overload
        def __call__(self, id: int, handlePos: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: Vector2) -> Vector3:...
        @typing.overload
        def __call__(self, handlePos: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: float, drawHelper: bool) -> Vector3:...
        @typing.overload
        def __call__(self, handlePos: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: Vector2, drawHelper: bool) -> Vector3:...
        @typing.overload
        def __call__(self, id: int, handlePos: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: Vector2, drawHelper: bool) -> Vector3:...
        @typing.overload
        def __call__(self, id: int, handlePos: Vector3, offset: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: Vector2) -> Vector3:...
        @typing.overload
        def __call__(self, id: int, handlePos: Vector3, offset: Vector3, handleDir: Vector3, slideDir1: Vector3, slideDir2: Vector3, handleSize: float, capFunction: Handles.CapFunction, snap: Vector2, drawHelper: bool) -> Vector3:...

    # Skipped SnapToGrid due to it being static, abstract and generic.

    SnapToGrid : SnapToGrid_MethodGroup
    class SnapToGrid_MethodGroup:
        @typing.overload
        def __call__(self, transforms: Array_1[Transform], axis: SnapAxis = ...) -> None:...
        @typing.overload
        def __call__(self, positions: Array_1[Vector3], axis: SnapAxis = ...) -> None:...

    # Skipped SnapValue due to it being static, abstract and generic.

    SnapValue : SnapValue_MethodGroup
    class SnapValue_MethodGroup:
        @typing.overload
        def __call__(self, value: float, snap: float) -> float:...
        @typing.overload
        def __call__(self, value: Vector2, snap: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, value: Vector3, snap: Vector3) -> Vector3:...

    # Skipped TransformHandle due to it being static, abstract and generic.

    TransformHandle : TransformHandle_MethodGroup
    class TransformHandle_MethodGroup:
        @typing.overload
        def __call__(self, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion]) -> None:...
        @typing.overload
        def __call__(self, position: Vector3, rotation: clr.Reference[Quaternion], uniformScale: clr.Reference[float]) -> None:...
        @typing.overload
        def __call__(self, position: Vector3, rotation: clr.Reference[Quaternion], scale: clr.Reference[Vector3]) -> None:...
        @typing.overload
        def __call__(self, position: clr.Reference[Vector3], rotation: Quaternion, uniformScale: clr.Reference[float]) -> None:...
        @typing.overload
        def __call__(self, position: clr.Reference[Vector3], rotation: Quaternion, scale: clr.Reference[Vector3]) -> None:...
        @typing.overload
        def __call__(self, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion], uniformScale: clr.Reference[float]) -> None:...
        @typing.overload
        def __call__(self, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion], scale: clr.Reference[Vector3]) -> None:...


    class CapFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, controlID: int, position: Vector3, rotation: Quaternion, size: float, eventType: EventType) -> None: ...


    class DrawingScope(IDisposable):
        @typing.overload
        def __init__(self, color: Color) -> None: ...
        @typing.overload
        def __init__(self, color: Color, matrix: Matrix4x4) -> None: ...
        @typing.overload
        def __init__(self, matrix: Matrix4x4) -> None: ...
        @property
        def originalColor(self) -> Color: ...
        @property
        def originalMatrix(self) -> Matrix4x4: ...
        def Dispose(self) -> None: ...


    class PositionHandleIds:
        x : int
        xy : int
        xyz : int
        xz : int
        y : int
        yz : int
        z : int
        @classmethod
        @property
        def default(cls) -> Handles.PositionHandleIds: ...
        def Equals(self, obj: typing.Any) -> bool: ...
        def GetHashCode(self) -> int: ...


    class RotationHandleIds:
        cameraAxis : int
        x : int
        xyz : int
        y : int
        z : int
        @classmethod
        @property
        def default(cls) -> Handles.RotationHandleIds: ...
        def Equals(self, obj: typing.Any) -> bool: ...
        def GetHashCode(self) -> int: ...


    class SizeFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, position: Vector3, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> float: ...
        def Invoke(self, position: Vector3) -> float: ...



class HandleUtility:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def acceleration(cls) -> float: ...
    @classmethod
    @property
    def handleMaterial(cls) -> Material: ...
    @classmethod
    @property
    def nearestControl(cls) -> int: ...
    @classmethod
    @nearestControl.setter
    def nearestControl(cls, value: int) -> int: ...
    @classmethod
    @property
    def niceMouseDelta(cls) -> float: ...
    @classmethod
    @property
    def niceMouseDeltaZoom(cls) -> float: ...
    @staticmethod
    def AddControl(controlId: int, distance: float) -> None: ...
    @staticmethod
    def AddDefaultControl(controlId: int) -> None: ...
    @staticmethod
    def CalcLineTranslation(src: Vector2, dest: Vector2, srcPosition: Vector3, constraintDir: Vector3) -> float: ...
    @staticmethod
    def ClosestPointToArc(center: Vector3, normal: Vector3, from_: Vector3, angle: float, radius: float) -> Vector3: ...
    @staticmethod
    def ClosestPointToDisc(center: Vector3, normal: Vector3, radius: float) -> Vector3: ...
    @staticmethod
    def ClosestPointToPolyLine(vertices: Array_1[Vector3]) -> Vector3: ...
    @staticmethod
    def DistancePointBezier(point: Vector3, startPosition: Vector3, endPosition: Vector3, startTangent: Vector3, endTangent: Vector3) -> float: ...
    @staticmethod
    def DistancePointLine(point: Vector3, lineStart: Vector3, lineEnd: Vector3) -> float: ...
    @staticmethod
    def DistancePointToLine(p: Vector2, a: Vector2, b: Vector2) -> float: ...
    @staticmethod
    def DistancePointToLineSegment(p: Vector2, a: Vector2, b: Vector2) -> float: ...
    @staticmethod
    def DistanceToArc(center: Vector3, normal: Vector3, from_: Vector3, angle: float, radius: float) -> float: ...
    @staticmethod
    def DistanceToCone(position: Vector3, rotation: Quaternion, size: float) -> float: ...
    @staticmethod
    def DistanceToCube(position: Vector3, rotation: Quaternion, size: float) -> float: ...
    @staticmethod
    def DistanceToDisc(center: Vector3, normal: Vector3, radius: float) -> float: ...
    @staticmethod
    def DistanceToLine(p1: Vector3, p2: Vector3) -> float: ...
    @staticmethod
    def DistanceToPolyLine(points: Array_1[Vector3]) -> float: ...
    @staticmethod
    def DistanceToRectangle(position: Vector3, rotation: Quaternion, size: float) -> float: ...
    @staticmethod
    def GetHandleSize(position: Vector3) -> float: ...
    @staticmethod
    def GetPickingIncludeExcludeList(allocator: Allocator = ...) -> PickingIncludeExcludeList: ...
    @staticmethod
    def GetSelectionOutlineIncludeExcludeList(allocator: Allocator = ...) -> PickingIncludeExcludeList: ...
    @staticmethod
    def GUIPointToScreenPixelCoordinate(guiPoint: Vector2) -> Vector2: ...
    @staticmethod
    def GUIPointToWorldRay(position: Vector2) -> Ray: ...
    @staticmethod
    def PlaceObject(guiPosition: Vector2, position: clr.Reference[Vector3], normal: clr.Reference[Vector3]) -> bool: ...
    @staticmethod
    def PointOnLineParameter(point: Vector3, linePoint: Vector3, lineDirection: Vector3) -> float: ...
    @staticmethod
    def PopCamera(camera: Camera) -> None: ...
    @staticmethod
    def ProjectPointLine(point: Vector3, lineStart: Vector3, lineEnd: Vector3) -> Vector3: ...
    @staticmethod
    def PushCamera(camera: Camera) -> None: ...
    @staticmethod
    def RaySnap(ray: Ray) -> typing.Any: ...
    @staticmethod
    def Repaint() -> None: ...
    @staticmethod
    def WorldPointToSizedRect(position: Vector3, content: GUIContent, style: GUIStyle) -> Rect: ...
    @staticmethod
    def WorldToGUIPoint(world: Vector3) -> Vector2: ...
    # Skipped DistanceToCircle due to it being static, abstract and generic.

    DistanceToCircle : DistanceToCircle_MethodGroup
    class DistanceToCircle_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector3, radius: float) -> float:...
        @typing.overload
        def __call__(self, projection: CameraProjectionCache, position: Vector3, radius: float) -> float:...

    # Skipped FindNearestVertex due to it being static, abstract and generic.

    FindNearestVertex : FindNearestVertex_MethodGroup
    class FindNearestVertex_MethodGroup:
        @typing.overload
        def __call__(self, guiPoint: Vector2, vertex: clr.Reference[Vector3]) -> bool:...
        @typing.overload
        def __call__(self, guiPoint: Vector2, objectsToSearch: Array_1[Transform], vertex: clr.Reference[Vector3]) -> bool:...
        @typing.overload
        def __call__(self, guiPoint: Vector2, vertex: clr.Reference[Vector3], gameObject: clr.Reference[GameObject]) -> bool:...
        @typing.overload
        def __call__(self, guiPoint: Vector2, objectsToSearch: Array_1[Transform], objectsToIgnore: Array_1[Transform], vertex: clr.Reference[Vector3]) -> bool:...
        @typing.overload
        def __call__(self, guiPoint: Vector2, objectsToSearch: Array_1[Transform], vertex: clr.Reference[Vector3], gameObject: clr.Reference[GameObject]) -> bool:...
        @typing.overload
        def __call__(self, guiPoint: Vector2, objectsToSearch: Array_1[Transform], objectsToIgnore: Array_1[Transform], vertex: clr.Reference[Vector3], gameObject: clr.Reference[GameObject]) -> bool:...

    # Skipped PickGameObject due to it being static, abstract and generic.

    PickGameObject : PickGameObject_MethodGroup
    class PickGameObject_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector2, selectPrefabRoot: bool) -> GameObject:...
        @typing.overload
        def __call__(self, position: Vector2, materialIndex: clr.Reference[int]) -> GameObject:...
        @typing.overload
        def __call__(self, position: Vector2, ignore: Array_1[GameObject], materialIndex: clr.Reference[int]) -> GameObject:...
        @typing.overload
        def __call__(self, position: Vector2, selectPrefabRoot: bool, ignore: Array_1[GameObject]) -> GameObject:...
        @typing.overload
        def __call__(self, position: Vector2, ignore: Array_1[GameObject], selection: Array_1[GameObject], materialIndex: clr.Reference[int]) -> GameObject:...
        @typing.overload
        def __call__(self, position: Vector2, selectPrefabRoot: bool, ignore: Array_1[GameObject], filter: Array_1[GameObject]) -> GameObject:...
        @typing.overload
        def __call__(self, position: Vector2, selectPrefabRoot: bool, ignore: Array_1[GameObject], filter: Array_1[GameObject], materialIndex: clr.Reference[int]) -> GameObject:...

    # Skipped PickRectObjects due to it being static, abstract and generic.

    PickRectObjects : PickRectObjects_MethodGroup
    class PickRectObjects_MethodGroup:
        @typing.overload
        def __call__(self, rect: Rect) -> Array_1[GameObject]:...
        @typing.overload
        def __call__(self, rect: Rect, selectPrefabRootsOnly: bool) -> Array_1[GameObject]:...

    # Skipped WorldToGUIPointWithDepth due to it being static, abstract and generic.

    WorldToGUIPointWithDepth : WorldToGUIPointWithDepth_MethodGroup
    class WorldToGUIPointWithDepth_MethodGroup:
        @typing.overload
        def __call__(self, world: Vector3) -> Vector3:...
        @typing.overload
        def __call__(self, camera: Camera, world: Vector3) -> Vector3:...


    class PickGameObjectCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, cam: Camera, layers: int, position: Vector2, ignore: Array_1[GameObject], filter: Array_1[GameObject], materialIndex: clr.Reference[int], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, materialIndex: clr.Reference[int], result: IAsyncResult) -> GameObject: ...
        def Invoke(self, cam: Camera, layers: int, position: Vector2, ignore: Array_1[GameObject], filter: Array_1[GameObject], materialIndex: clr.Reference[int]) -> GameObject: ...


    class PlaceObjectDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, guiPosition: Vector2, position: clr.Reference[Vector3], normal: clr.Reference[Vector3], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, position: clr.Reference[Vector3], normal: clr.Reference[Vector3], result: IAsyncResult) -> bool: ...
        def Invoke(self, guiPosition: Vector2, position: clr.Reference[Vector3], normal: clr.Reference[Vector3]) -> bool: ...



class Help:
    def __init__(self) -> None: ...
    @staticmethod
    def BrowseURL(url: str) -> None: ...
    @staticmethod
    def GetHelpURLForObject(obj: Object) -> str: ...
    @staticmethod
    def HasHelpForObject(obj: Object) -> bool: ...
    @staticmethod
    def ShowHelpForObject(obj: Object) -> None: ...
    @staticmethod
    def ShowHelpPage(page: str) -> None: ...


class HierarchyDropFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : HierarchyDropFlags # 0
    DropUpon : HierarchyDropFlags # 1
    DropBetween : HierarchyDropFlags # 2
    DropAfterParent : HierarchyDropFlags # 4
    SearchActive : HierarchyDropFlags # 8
    DropAbove : HierarchyDropFlags # 16


class HierarchyProperty:
    @typing.overload
    def __init__(self, hierarchyType: HierarchyType) -> None: ...
    @typing.overload
    def __init__(self, hierarchyType: HierarchyType, forceImport: bool) -> None: ...
    @typing.overload
    def __init__(self, hierarchyType: HierarchyType, rootPath: str, forceImport: bool) -> None: ...
    @typing.overload
    def __init__(self, rootPath: str) -> None: ...
    @typing.overload
    def __init__(self, rootPath: str, forceImport: bool) -> None: ...
    @property
    def alphaSorted(self) -> bool: ...
    @alphaSorted.setter
    def alphaSorted(self, value: bool) -> bool: ...
    @property
    def ancestors(self) -> Array_1[int]: ...
    @property
    def colorCode(self) -> int: ...
    @property
    def depth(self) -> int: ...
    @property
    def dynamicDependencies(self) -> Array_1[GUID]: ...
    @property
    def guid(self) -> str: ...
    @property
    def hasChildren(self) -> bool: ...
    @property
    def hasFullPreviewImage(self) -> bool: ...
    @property
    def icon(self) -> Texture2D: ...
    @property
    def iconDrawStyle(self) -> IconDrawStyle: ...
    @property
    def instanceID(self) -> int: ...
    @property
    def isFolder(self) -> bool: ...
    @property
    def isMainRepresentation(self) -> bool: ...
    @property
    def isSceneHeader(self) -> bool: ...
    @property
    def isValid(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def pptrValue(self) -> Object: ...
    @property
    def row(self) -> int: ...
    @property
    def showSceneHeaders(self) -> bool: ...
    @showSceneHeaders.setter
    def showSceneHeaders(self, value: bool) -> bool: ...
    @staticmethod
    def ClearSceneObjectsFilter() -> None: ...
    def CountRemaining(self, expanded: Array_1[int]) -> int: ...
    @staticmethod
    def FilterSingleSceneObject(instanceID: int, otherVisibilityState: bool) -> None: ...
    def Find(self, instanceID: int, expanded: Array_1[int]) -> bool: ...
    def FindAllAncestors(self, instanceIDs: Array_1[int]) -> Array_1[int]: ...
    def GetInstanceIDIfImported(self) -> int: ...
    def GetScene(self) -> Scene: ...
    def IsExpanded(self, expanded: Array_1[int]) -> bool: ...
    def Next(self, expanded: Array_1[int]) -> bool: ...
    def NextWithDepthCheck(self, expanded: Array_1[int], minDepth: int) -> bool: ...
    def Parent(self) -> bool: ...
    def Previous(self, expanded: Array_1[int]) -> bool: ...
    def Reset(self) -> None: ...
    def SetCustomScenes(self, sceneHandles: Array_1[int]) -> None: ...
    def SetSearchFilter(self, searchString: str, mode: int) -> None: ...
    def SetSubScenes(self, subScenes: Array_1[SceneHierarchyHooks.SubSceneInfo]) -> None: ...
    def Skip(self, count: int, expanded: Array_1[int]) -> bool: ...


class HierarchyType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Assets : HierarchyType # 1
    GameObjects : HierarchyType # 2


class Highlighter:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def active(cls) -> bool: ...
    @classmethod
    @active.setter
    def active(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def activeRect(cls) -> Rect: ...
    @classmethod
    @activeRect.setter
    def activeRect(cls, value: Rect) -> Rect: ...
    @classmethod
    @property
    def activeText(cls) -> str: ...
    @classmethod
    @activeText.setter
    def activeText(cls, value: str) -> str: ...
    @classmethod
    @property
    def activeVisible(cls) -> bool: ...
    @classmethod
    @activeVisible.setter
    def activeVisible(cls, value: bool) -> bool: ...
    @staticmethod
    def HighlightIdentifier(position: Rect, identifier: str) -> None: ...
    @staticmethod
    def Stop() -> None: ...
    # Skipped Highlight due to it being static, abstract and generic.

    Highlight : Highlight_MethodGroup
    class Highlight_MethodGroup:
        @typing.overload
        def __call__(self, windowTitle: str, text: str) -> bool:...
        @typing.overload
        def __call__(self, windowTitle: str, text: str, mode: HighlightSearchMode) -> bool:...



class HighlightSearchMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : HighlightSearchMode # 0
    Auto : HighlightSearchMode # 1
    Identifier : HighlightSearchMode # 2
    PrefixLabel : HighlightSearchMode # 3
    Content : HighlightSearchMode # 4


class HumanTemplate(Object):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def ClearTemplate(self) -> None: ...
    def Find(self, name: str) -> str: ...
    def Insert(self, name: str, templateName: str) -> None: ...


class HyperLinkClickedEventArgs:
    @property
    def hyperLinkData(self) -> Dictionary_2[str, str]: ...
    @hyperLinkData.setter
    def hyperLinkData(self, value: Dictionary_2[str, str]) -> Dictionary_2[str, str]: ...


class IApplyRevertPropertyContextMenuItemProvider(typing.Protocol):
    @abc.abstractmethod
    def GetSourceName(self, comp: Component) -> str: ...
    @abc.abstractmethod
    def GetSourceTerm(self) -> str: ...
    @abc.abstractmethod
    def TryGetApplyMethodForFieldName(self, property: SerializedProperty, applyMethod: clr.Reference[Action_1[SerializedProperty]]) -> bool: ...
    @abc.abstractmethod
    def TryGetRevertMethodForFieldName(self, property: SerializedProperty, revertMethod: clr.Reference[Action_1[SerializedProperty]]) -> bool: ...


class IAudioEffectPlugin(abc.ABC):
    @abc.abstractmethod
    def GetFloatBuffer(self, name: str, data: clr.Reference[Array_1[float]], numsamples: int) -> bool: ...
    @abc.abstractmethod
    def GetFloatParameter(self, name: str, value: clr.Reference[float]) -> bool: ...
    @abc.abstractmethod
    def GetFloatParameterInfo(self, name: str, minRange: clr.Reference[float], maxRange: clr.Reference[float], defaultValue: clr.Reference[float]) -> bool: ...
    @abc.abstractmethod
    def GetSampleRate(self) -> int: ...
    @abc.abstractmethod
    def IsPluginEditableAndEnabled(self) -> bool: ...
    @abc.abstractmethod
    def SetFloatParameter(self, name: str, value: float) -> bool: ...


class IAudioEffectPluginGUI(abc.ABC):
    @property
    def Description(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Vendor(self) -> str: ...
    @abc.abstractmethod
    def OnGUI(self, plugin: IAudioEffectPlugin) -> bool: ...


class IconDrawStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NonTexture : IconDrawStyle # 0
    Texture : IconDrawStyle # 1


class IconKind(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Application : IconKind # 0
    Settings : IconKind # 1
    Notification : IconKind # 2
    Spotlight : IconKind # 3
    Store : IconKind # 4
    Any : IconKind # -1


class IDataModeController(typing.Protocol):
    @property
    def dataMode(self) -> DataMode: ...
    @abc.abstractmethod
    def TryChangeDataMode(self, newDataMode: DataMode) -> bool: ...
    @abc.abstractmethod
    def UpdateSupportedDataModes(self, supportedDataMode: IList_1[DataMode], preferredDataMode: DataMode) -> None: ...


class IDataModeHandler(typing.Protocol):
    @property
    def dataMode(self) -> DataMode: ...
    @property
    def supportedDataModes(self) -> IReadOnlyList_1[DataMode]: ...
    @abc.abstractmethod
    def IsDataModeSupported(self, mode: DataMode) -> bool: ...
    @abc.abstractmethod
    def SwitchToDataMode(self, mode: DataMode) -> None: ...
    @abc.abstractmethod
    def SwitchToDefaultDataMode(self) -> None: ...
    @abc.abstractmethod
    def SwitchToNextDataMode(self) -> None: ...


class IDataModeHandlerAndDispatcher(IDataModeHandler, typing.Protocol):
    pass


class IHasCustomMenu(typing.Protocol):
    @abc.abstractmethod
    def AddItemsToMenu(self, menu: GenericMenu) -> None: ...


class IHVImageFormatImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def filterMode(self) -> FilterMode: ...
    @filterMode.setter
    def filterMode(self, value: FilterMode) -> FilterMode: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def ignoreMipmapLimit(self) -> bool: ...
    @ignoreMipmapLimit.setter
    def ignoreMipmapLimit(self, value: bool) -> bool: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def isReadable(self) -> bool: ...
    @isReadable.setter
    def isReadable(self, value: bool) -> bool: ...
    @property
    def mipmapLimitGroupName(self) -> str: ...
    @mipmapLimitGroupName.setter
    def mipmapLimitGroupName(self, value: str) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def streamingMipmaps(self) -> bool: ...
    @streamingMipmaps.setter
    def streamingMipmaps(self, value: bool) -> bool: ...
    @property
    def streamingMipmapsPriority(self) -> int: ...
    @streamingMipmapsPriority.setter
    def streamingMipmapsPriority(self, value: int) -> int: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @property
    def wrapMode(self) -> TextureWrapMode: ...
    @wrapMode.setter
    def wrapMode(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeU(self) -> TextureWrapMode: ...
    @wrapModeU.setter
    def wrapModeU(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeV(self) -> TextureWrapMode: ...
    @wrapModeV.setter
    def wrapModeV(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeW(self) -> TextureWrapMode: ...
    @wrapModeW.setter
    def wrapModeW(self, value: TextureWrapMode) -> TextureWrapMode: ...


class Il2CppCompilerConfiguration(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Debug : Il2CppCompilerConfiguration # 0
    Release : Il2CppCompilerConfiguration # 1
    Master : Il2CppCompilerConfiguration # 2


class ILightingExplorerExtension(typing.Protocol):
    @abc.abstractmethod
    def GetContentTabs(self) -> Array_1[LightingExplorerTab]: ...
    @abc.abstractmethod
    def OnDisable(self) -> None: ...
    @abc.abstractmethod
    def OnEnable(self) -> None: ...


class ImportAssetOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : ImportAssetOptions # 0
    ForceUpdate : ImportAssetOptions # 1
    ForceSynchronousImport : ImportAssetOptions # 8
    ImportRecursive : ImportAssetOptions # 256
    DontDownloadFromCacheServer : ImportAssetOptions # 8192
    ForceUncompressedImport : ImportAssetOptions # 16384


class InitializeOnEnterPlayModeAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class InitializeOnLoadAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class InitializeOnLoadMethodAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class InsecureHttpOption(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotAllowed : InsecureHttpOption # 0
    DevelopmentOnly : InsecureHttpOption # 1
    AlwaysAllowed : InsecureHttpOption # 2


class InspectorMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : InspectorMode # 0
    Debug : InspectorMode # 1
    DebugInternal : InspectorMode # 2


class InteractionMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AutomatedAction : InteractionMode # 0
    UserAction : InteractionMode # 1


class iOSAppInBackgroundBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Suspend : iOSAppInBackgroundBehavior # 0
    Exit : iOSAppInBackgroundBehavior # 1
    Custom : iOSAppInBackgroundBehavior # -1


class iOSBackgroundMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : iOSBackgroundMode # 0
    Audio : iOSBackgroundMode # 1
    Location : iOSBackgroundMode # 2
    VOIP : iOSBackgroundMode # 4
    NewsstandContent : iOSBackgroundMode # 8
    ExternalAccessory : iOSBackgroundMode # 16
    BluetoothCentral : iOSBackgroundMode # 32
    BluetoothPeripheral : iOSBackgroundMode # 64
    Fetch : iOSBackgroundMode # 128
    RemoteNotification : iOSBackgroundMode # 256
    Processing : iOSBackgroundMode # 512


class iOSBuildType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Debug : iOSBuildType # 0
    Release : iOSBuildType # 1


class iOSDeviceRequirement:
    def __init__(self) -> None: ...
    @property
    def values(self) -> IDictionary_2[str, str]: ...


class iOSLaunchScreenImageType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    iPhonePortraitImage : iOSLaunchScreenImageType # 0
    iPhoneLandscapeImage : iOSLaunchScreenImageType # 1
    iPadImage : iOSLaunchScreenImageType # 2


class iOSLaunchScreenType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : iOSLaunchScreenType # 0
    ImageAndBackgroundRelative : iOSLaunchScreenType # 1
    CustomXib : iOSLaunchScreenType # 2
    None_ : iOSLaunchScreenType # 3
    ImageAndBackgroundConstant : iOSLaunchScreenType # 4
    CustomStoryboard : iOSLaunchScreenType # 5


class iOSSdkVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DeviceSDK : iOSSdkVersion # 988
    SimulatorSDK : iOSSdkVersion # 989


class iOSShowActivityIndicatorOnLoading(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    WhiteLarge : iOSShowActivityIndicatorOnLoading # 0
    White : iOSShowActivityIndicatorOnLoading # 1
    Gray : iOSShowActivityIndicatorOnLoading # 2
    DontShow : iOSShowActivityIndicatorOnLoading # -1


class iOSStatusBarStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : iOSStatusBarStyle # 0
    LightContent : iOSStatusBarStyle # 1
    BlackTranslucent : iOSStatusBarStyle # -1
    BlackOpaque : iOSStatusBarStyle # -1


class iOSSystemGestureDeferMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : iOSSystemGestureDeferMode # 0
    TopEdge : iOSSystemGestureDeferMode # 1
    LeftEdge : iOSSystemGestureDeferMode # 2
    BottomEdge : iOSSystemGestureDeferMode # 4
    RightEdge : iOSSystemGestureDeferMode # 8
    All : iOSSystemGestureDeferMode # 15


class iOSTargetDevice(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    iPhoneOnly : iOSTargetDevice # 0
    iPadOnly : iOSTargetDevice # 1
    iPhoneAndiPad : iOSTargetDevice # 2


class iOSTargetOSVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    iOS_4_0 : iOSTargetOSVersion # 10
    iOS_4_1 : iOSTargetOSVersion # 12
    iOS_4_2 : iOSTargetOSVersion # 14
    iOS_4_3 : iOSTargetOSVersion # 16
    iOS_5_0 : iOSTargetOSVersion # 18
    iOS_5_1 : iOSTargetOSVersion # 20
    iOS_6_0 : iOSTargetOSVersion # 22
    iOS_7_0 : iOSTargetOSVersion # 24
    iOS_7_1 : iOSTargetOSVersion # 26
    iOS_8_0 : iOSTargetOSVersion # 28
    iOS_8_1 : iOSTargetOSVersion # 30
    Unknown : iOSTargetOSVersion # 999


class iOSTargetResolution(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Native : iOSTargetResolution # 0
    ResolutionAutoPerformance : iOSTargetResolution # 3
    ResolutionAutoQuality : iOSTargetResolution # 4
    Resolution320p : iOSTargetResolution # 5
    Resolution640p : iOSTargetResolution # 6
    Resolution768p : iOSTargetResolution # 7


class ITerrainLayerCustomUI(typing.Protocol):
    @abc.abstractmethod
    def OnTerrainLayerGUI(self, terrainLayer: TerrainLayer, terrain: Terrain) -> bool: ...


class L10n(abc.ABC):
    @staticmethod
    def TrPath(path: str) -> str: ...
    # Skipped IconContent due to it being static, abstract and generic.

    IconContent : IconContent_MethodGroup
    class IconContent_MethodGroup:
        @typing.overload
        def __call__(self, iconName: str, tooltip: str = ...) -> GUIContent:...
        @typing.overload
        def __call__(self, icon: Texture, tooltip: str = ...) -> GUIContent:...

    # Skipped TempContent due to it being static, abstract and generic.

    TempContent : TempContent_MethodGroup
    class TempContent_MethodGroup:
        @typing.overload
        def __call__(self, texts: Array_1[str]) -> Array_1[GUIContent]:...
        @typing.overload
        def __call__(self, t: str) -> GUIContent:...
        @typing.overload
        def __call__(self, texts: Array_1[str], tooltips: Array_1[str]) -> Array_1[GUIContent]:...

    # Skipped TextContent due to it being static, abstract and generic.

    TextContent : TextContent_MethodGroup
    class TextContent_MethodGroup:
        @typing.overload
        def __call__(self, text: str, icon: Texture) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str = ..., icon: Texture = ...) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, iconName: str) -> GUIContent:...

    # Skipped TextContentWithIcon due to it being static, abstract and generic.

    TextContentWithIcon : TextContentWithIcon_MethodGroup
    class TextContentWithIcon_MethodGroup:
        @typing.overload
        def __call__(self, text: str, messageType: MessageType) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, icon: Texture) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, iconName: str) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, messageType: MessageType) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, icon: Texture) -> GUIContent:...
        @typing.overload
        def __call__(self, text: str, tooltip: str, iconName: str) -> GUIContent:...

    # Skipped Tr due to it being static, abstract and generic.

    Tr : Tr_MethodGroup
    class Tr_MethodGroup:
        @typing.overload
        def __call__(self, str_list: Array_1[str]) -> Array_1[str]:...
        @typing.overload
        def __call__(self, str: str) -> str:...
        @typing.overload
        def __call__(self, str: str, groupName: str) -> str:...



class LightEditor(Editor):
    def __init__(self) -> None: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    def OnInspectorGUI(self) -> None: ...

    class Settings:
        def __init__(self, so: SerializedObject) -> None: ...
        @property
        def areaSizeX(self) -> SerializedProperty: ...
        @areaSizeX.setter
        def areaSizeX(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def areaSizeY(self) -> SerializedProperty: ...
        @areaSizeY.setter
        def areaSizeY(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def bakedShadowAngleProp(self) -> SerializedProperty: ...
        @bakedShadowAngleProp.setter
        def bakedShadowAngleProp(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def bakedShadowRadiusProp(self) -> SerializedProperty: ...
        @bakedShadowRadiusProp.setter
        def bakedShadowRadiusProp(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def bounceIntensity(self) -> SerializedProperty: ...
        @bounceIntensity.setter
        def bounceIntensity(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def color(self) -> SerializedProperty: ...
        @color.setter
        def color(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def colorTemperature(self) -> SerializedProperty: ...
        @colorTemperature.setter
        def colorTemperature(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def cookie(self) -> Texture: ...
        @property
        def cookieProp(self) -> SerializedProperty: ...
        @cookieProp.setter
        def cookieProp(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def cookieSize(self) -> SerializedProperty: ...
        @cookieSize.setter
        def cookieSize(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def cullingMask(self) -> SerializedProperty: ...
        @cullingMask.setter
        def cullingMask(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def flare(self) -> SerializedProperty: ...
        @flare.setter
        def flare(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def halo(self) -> SerializedProperty: ...
        @halo.setter
        def halo(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def innerSpotAngle(self) -> SerializedProperty: ...
        @innerSpotAngle.setter
        def innerSpotAngle(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def intensity(self) -> SerializedProperty: ...
        @intensity.setter
        def intensity(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def isAreaLightType(self) -> bool: ...
        @property
        def isBakedOrMixed(self) -> bool: ...
        @property
        def isCompletelyBaked(self) -> bool: ...
        @property
        def isMixed(self) -> bool: ...
        @property
        def isRealtime(self) -> bool: ...
        @property
        def light(self) -> Light: ...
        @property
        def lightmapping(self) -> SerializedProperty: ...
        @lightmapping.setter
        def lightmapping(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def lightShape(self) -> SerializedProperty: ...
        @lightShape.setter
        def lightShape(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def lightType(self) -> SerializedProperty: ...
        @lightType.setter
        def lightType(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def range(self) -> SerializedProperty: ...
        @range.setter
        def range(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def renderingLayerMask(self) -> SerializedProperty: ...
        @renderingLayerMask.setter
        def renderingLayerMask(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def renderMode(self) -> SerializedProperty: ...
        @renderMode.setter
        def renderMode(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shadowsBias(self) -> SerializedProperty: ...
        @shadowsBias.setter
        def shadowsBias(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shadowsNearPlane(self) -> SerializedProperty: ...
        @shadowsNearPlane.setter
        def shadowsNearPlane(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shadowsNormalBias(self) -> SerializedProperty: ...
        @shadowsNormalBias.setter
        def shadowsNormalBias(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shadowsResolution(self) -> SerializedProperty: ...
        @shadowsResolution.setter
        def shadowsResolution(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shadowsStrength(self) -> SerializedProperty: ...
        @shadowsStrength.setter
        def shadowsStrength(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def shadowsType(self) -> SerializedProperty: ...
        @shadowsType.setter
        def shadowsType(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def spotAngle(self) -> SerializedProperty: ...
        @spotAngle.setter
        def spotAngle(self, value: SerializedProperty) -> SerializedProperty: ...
        @property
        def useColorTemperature(self) -> SerializedProperty: ...
        @useColorTemperature.setter
        def useColorTemperature(self, value: SerializedProperty) -> SerializedProperty: ...
        def ApplyModifiedProperties(self) -> None: ...
        def DrawArea(self) -> None: ...
        def DrawBakedShadowAngle(self) -> None: ...
        def DrawBakedShadowRadius(self) -> None: ...
        def DrawBounceIntensity(self) -> None: ...
        def DrawColor(self) -> None: ...
        def DrawCookie(self) -> None: ...
        def DrawCookieProperty(self, cookieProperty: SerializedProperty, content: GUIContent, cookieLightType: LightType) -> None: ...
        def DrawCookieSize(self) -> None: ...
        def DrawCullingMask(self) -> None: ...
        def DrawFlare(self) -> None: ...
        def DrawHalo(self) -> None: ...
        def DrawInnerAndOuterSpotAngle(self) -> None: ...
        def DrawIntensity(self) -> None: ...
        def DrawLightmapping(self) -> None: ...
        def DrawLightType(self) -> None: ...
        def DrawRenderingLayerMask(self) -> None: ...
        def DrawRenderMode(self) -> None: ...
        def DrawRuntimeShadow(self) -> None: ...
        def DrawShadowsType(self) -> None: ...
        def DrawSpotAngle(self) -> None: ...
        def OnDestroy(self) -> None: ...
        def OnEnable(self) -> None: ...
        def Update(self) -> None: ...
        # Skipped DrawRange due to it being static, abstract and generic.

        DrawRange : DrawRange_MethodGroup
        class DrawRange_MethodGroup:
            @typing.overload
            def __call__(self) -> None:...
            @typing.overload
            def __call__(self, showAreaOptions: bool) -> None:...




class LightingDataAsset(Object):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class LightingExplorerExtensionAttribute(ScriptableRenderPipelineExtensionAttribute):
    def __init__(self, renderPipeline: typing.Type[typing.Any]) -> None: ...
    @property
    def inUse(self) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...


class LightingExplorerTab:
    @typing.overload
    def __init__(self, title: str, objects: Func_1[Array_1[Object]], columns: Func_1[Array_1[LightingExplorerTableColumn]]) -> None: ...
    @typing.overload
    def __init__(self, title: str, objects: Func_1[Array_1[Object]], columns: Func_1[Array_1[LightingExplorerTableColumn]], showFilterGUI: bool) -> None: ...


class LightingExplorerTableColumn:
    def __init__(self, type: LightingExplorerTableColumn.DataType, headerContent: GUIContent, propertyName: str = ..., width: int = ..., onGUIDelegate: LightingExplorerTableColumn.OnGUIDelegate = ..., compareDelegate: LightingExplorerTableColumn.ComparePropertiesDelegate = ..., copyDelegate: LightingExplorerTableColumn.CopyPropertiesDelegate = ..., dependencyIndices: Array_1[int] = ...) -> None: ...

    class ComparePropertiesDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, lhs: SerializedProperty, rhs: SerializedProperty, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> int: ...
        def Invoke(self, lhs: SerializedProperty, rhs: SerializedProperty) -> int: ...


    class CopyPropertiesDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, target: SerializedProperty, source: SerializedProperty, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, target: SerializedProperty, source: SerializedProperty) -> None: ...


    class DataType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Name : LightingExplorerTableColumn.DataType # 0
        Checkbox : LightingExplorerTableColumn.DataType # 1
        Enum : LightingExplorerTableColumn.DataType # 2
        Int : LightingExplorerTableColumn.DataType # 3
        Float : LightingExplorerTableColumn.DataType # 4
        Color : LightingExplorerTableColumn.DataType # 5
        Custom : LightingExplorerTableColumn.DataType # 20


    class OnGUIDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, r: Rect, prop: SerializedProperty, dependencies: Array_1[SerializedProperty], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, r: Rect, prop: SerializedProperty, dependencies: Array_1[SerializedProperty]) -> None: ...



class LightingWindowEnvironmentSection(abc.ABC):
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    def OnInspectorGUI(self) -> None: ...


class LightmapBakeQuality(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    High : LightmapBakeQuality # 0
    Low : LightmapBakeQuality # 1


class LightmapEditorSettings(abc.ABC):
    @classmethod
    @property
    def aoAmount(cls) -> float: ...
    @classmethod
    @aoAmount.setter
    def aoAmount(cls, value: float) -> float: ...
    @classmethod
    @property
    def aoContrast(cls) -> float: ...
    @classmethod
    @aoContrast.setter
    def aoContrast(cls, value: float) -> float: ...
    @classmethod
    @property
    def aoExponentDirect(cls) -> float: ...
    @classmethod
    @aoExponentDirect.setter
    def aoExponentDirect(cls, value: float) -> float: ...
    @classmethod
    @property
    def aoExponentIndirect(cls) -> float: ...
    @classmethod
    @aoExponentIndirect.setter
    def aoExponentIndirect(cls, value: float) -> float: ...
    @classmethod
    @property
    def aoMaxDistance(cls) -> float: ...
    @classmethod
    @aoMaxDistance.setter
    def aoMaxDistance(cls, value: float) -> float: ...
    @classmethod
    @property
    def bakeResolution(cls) -> float: ...
    @classmethod
    @bakeResolution.setter
    def bakeResolution(cls, value: float) -> float: ...
    @classmethod
    @property
    def bounceBoost(cls) -> float: ...
    @classmethod
    @bounceBoost.setter
    def bounceBoost(cls, value: float) -> float: ...
    @classmethod
    @property
    def bounceIntensity(cls) -> float: ...
    @classmethod
    @bounceIntensity.setter
    def bounceIntensity(cls, value: float) -> float: ...
    @classmethod
    @property
    def bounces(cls) -> int: ...
    @classmethod
    @bounces.setter
    def bounces(cls, value: int) -> int: ...
    @classmethod
    @property
    def denoiserTypeAO(cls) -> LightmapEditorSettings.DenoiserType: ...
    @classmethod
    @denoiserTypeAO.setter
    def denoiserTypeAO(cls, value: LightmapEditorSettings.DenoiserType) -> LightmapEditorSettings.DenoiserType: ...
    @classmethod
    @property
    def denoiserTypeDirect(cls) -> LightmapEditorSettings.DenoiserType: ...
    @classmethod
    @denoiserTypeDirect.setter
    def denoiserTypeDirect(cls, value: LightmapEditorSettings.DenoiserType) -> LightmapEditorSettings.DenoiserType: ...
    @classmethod
    @property
    def denoiserTypeIndirect(cls) -> LightmapEditorSettings.DenoiserType: ...
    @classmethod
    @denoiserTypeIndirect.setter
    def denoiserTypeIndirect(cls, value: LightmapEditorSettings.DenoiserType) -> LightmapEditorSettings.DenoiserType: ...
    @classmethod
    @property
    def directSampleCount(cls) -> int: ...
    @classmethod
    @directSampleCount.setter
    def directSampleCount(cls, value: int) -> int: ...
    @classmethod
    @property
    def enableAmbientOcclusion(cls) -> bool: ...
    @classmethod
    @enableAmbientOcclusion.setter
    def enableAmbientOcclusion(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def environmentSampleCount(cls) -> int: ...
    @classmethod
    @environmentSampleCount.setter
    def environmentSampleCount(cls, value: int) -> int: ...
    @classmethod
    @property
    def exportTrainingData(cls) -> bool: ...
    @classmethod
    @exportTrainingData.setter
    def exportTrainingData(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def filteringAtrousPositionSigmaAO(cls) -> float: ...
    @classmethod
    @filteringAtrousPositionSigmaAO.setter
    def filteringAtrousPositionSigmaAO(cls, value: float) -> float: ...
    @classmethod
    @property
    def filteringAtrousPositionSigmaDirect(cls) -> float: ...
    @classmethod
    @filteringAtrousPositionSigmaDirect.setter
    def filteringAtrousPositionSigmaDirect(cls, value: float) -> float: ...
    @classmethod
    @property
    def filteringAtrousPositionSigmaIndirect(cls) -> float: ...
    @classmethod
    @filteringAtrousPositionSigmaIndirect.setter
    def filteringAtrousPositionSigmaIndirect(cls, value: float) -> float: ...
    @classmethod
    @property
    def filteringGaussRadiusAO(cls) -> int: ...
    @classmethod
    @filteringGaussRadiusAO.setter
    def filteringGaussRadiusAO(cls, value: int) -> int: ...
    @classmethod
    @property
    def filteringGaussRadiusDirect(cls) -> int: ...
    @classmethod
    @filteringGaussRadiusDirect.setter
    def filteringGaussRadiusDirect(cls, value: int) -> int: ...
    @classmethod
    @property
    def filteringGaussRadiusIndirect(cls) -> int: ...
    @classmethod
    @filteringGaussRadiusIndirect.setter
    def filteringGaussRadiusIndirect(cls, value: int) -> int: ...
    @classmethod
    @property
    def filteringMode(cls) -> LightmapEditorSettings.FilterMode: ...
    @classmethod
    @filteringMode.setter
    def filteringMode(cls, value: LightmapEditorSettings.FilterMode) -> LightmapEditorSettings.FilterMode: ...
    @classmethod
    @property
    def filterTypeAO(cls) -> LightmapEditorSettings.FilterType: ...
    @classmethod
    @filterTypeAO.setter
    def filterTypeAO(cls, value: LightmapEditorSettings.FilterType) -> LightmapEditorSettings.FilterType: ...
    @classmethod
    @property
    def filterTypeDirect(cls) -> LightmapEditorSettings.FilterType: ...
    @classmethod
    @filterTypeDirect.setter
    def filterTypeDirect(cls, value: LightmapEditorSettings.FilterType) -> LightmapEditorSettings.FilterType: ...
    @classmethod
    @property
    def filterTypeIndirect(cls) -> LightmapEditorSettings.FilterType: ...
    @classmethod
    @filterTypeIndirect.setter
    def filterTypeIndirect(cls, value: LightmapEditorSettings.FilterType) -> LightmapEditorSettings.FilterType: ...
    @classmethod
    @property
    def finalGatherContrastThreshold(cls) -> float: ...
    @classmethod
    @finalGatherContrastThreshold.setter
    def finalGatherContrastThreshold(cls, value: float) -> float: ...
    @classmethod
    @property
    def finalGatherGradientThreshold(cls) -> float: ...
    @classmethod
    @finalGatherGradientThreshold.setter
    def finalGatherGradientThreshold(cls, value: float) -> float: ...
    @classmethod
    @property
    def finalGatherInterpolationPoints(cls) -> int: ...
    @classmethod
    @finalGatherInterpolationPoints.setter
    def finalGatherInterpolationPoints(cls, value: int) -> int: ...
    @classmethod
    @property
    def finalGatherRays(cls) -> int: ...
    @classmethod
    @finalGatherRays.setter
    def finalGatherRays(cls, value: int) -> int: ...
    @classmethod
    @property
    def giBakeBackend(cls) -> LightmapEditorSettings.GIBakeBackend: ...
    @classmethod
    @giBakeBackend.setter
    def giBakeBackend(cls, value: LightmapEditorSettings.GIBakeBackend) -> LightmapEditorSettings.GIBakeBackend: ...
    @classmethod
    @property
    def giPathTracerFilter(cls) -> LightmapEditorSettings.PathTracerFilter: ...
    @classmethod
    @giPathTracerFilter.setter
    def giPathTracerFilter(cls, value: LightmapEditorSettings.PathTracerFilter) -> LightmapEditorSettings.PathTracerFilter: ...
    @classmethod
    @property
    def giPathTracerSampling(cls) -> LightmapEditorSettings.PathTracerSampling: ...
    @classmethod
    @giPathTracerSampling.setter
    def giPathTracerSampling(cls, value: LightmapEditorSettings.PathTracerSampling) -> LightmapEditorSettings.PathTracerSampling: ...
    @classmethod
    @property
    def indirectSampleCount(cls) -> int: ...
    @classmethod
    @indirectSampleCount.setter
    def indirectSampleCount(cls, value: int) -> int: ...
    @classmethod
    @property
    def lastUsedResolution(cls) -> float: ...
    @classmethod
    @lastUsedResolution.setter
    def lastUsedResolution(cls, value: float) -> float: ...
    @classmethod
    @property
    def lightmapper(cls) -> LightmapEditorSettings.Lightmapper: ...
    @classmethod
    @lightmapper.setter
    def lightmapper(cls, value: LightmapEditorSettings.Lightmapper) -> LightmapEditorSettings.Lightmapper: ...
    @classmethod
    @property
    def lightmapsMode(cls) -> LightmapsMode: ...
    @classmethod
    @lightmapsMode.setter
    def lightmapsMode(cls, value: LightmapsMode) -> LightmapsMode: ...
    @classmethod
    @property
    def lockAtlas(cls) -> bool: ...
    @classmethod
    @lockAtlas.setter
    def lockAtlas(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def maxAtlasHeight(cls) -> int: ...
    @classmethod
    @maxAtlasHeight.setter
    def maxAtlasHeight(cls, value: int) -> int: ...
    @classmethod
    @property
    def maxAtlasSize(cls) -> int: ...
    @classmethod
    @maxAtlasSize.setter
    def maxAtlasSize(cls, value: int) -> int: ...
    @classmethod
    @property
    def maxAtlasWidth(cls) -> int: ...
    @classmethod
    @maxAtlasWidth.setter
    def maxAtlasWidth(cls, value: int) -> int: ...
    @classmethod
    @property
    def mixedBakeMode(cls) -> MixedLightingMode: ...
    @classmethod
    @mixedBakeMode.setter
    def mixedBakeMode(cls, value: MixedLightingMode) -> MixedLightingMode: ...
    @classmethod
    @property
    def padding(cls) -> int: ...
    @classmethod
    @padding.setter
    def padding(cls, value: int) -> int: ...
    @classmethod
    @property
    def prioritizeView(cls) -> bool: ...
    @classmethod
    @prioritizeView.setter
    def prioritizeView(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def quality(cls) -> LightmapBakeQuality: ...
    @classmethod
    @quality.setter
    def quality(cls, value: LightmapBakeQuality) -> LightmapBakeQuality: ...
    @classmethod
    @property
    def realtimeResolution(cls) -> float: ...
    @classmethod
    @realtimeResolution.setter
    def realtimeResolution(cls, value: float) -> float: ...
    @classmethod
    @property
    def reflectionCubemapCompression(cls) -> ReflectionCubemapCompression: ...
    @classmethod
    @reflectionCubemapCompression.setter
    def reflectionCubemapCompression(cls, value: ReflectionCubemapCompression) -> ReflectionCubemapCompression: ...
    @classmethod
    @property
    def resolution(cls) -> float: ...
    @classmethod
    @resolution.setter
    def resolution(cls, value: float) -> float: ...
    @classmethod
    @property
    def sampling(cls) -> LightmapEditorSettings.Sampling: ...
    @classmethod
    @sampling.setter
    def sampling(cls, value: LightmapEditorSettings.Sampling) -> LightmapEditorSettings.Sampling: ...
    @classmethod
    @property
    def skyLightColor(cls) -> Color: ...
    @classmethod
    @skyLightColor.setter
    def skyLightColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def skyLightIntensity(cls) -> float: ...
    @classmethod
    @skyLightIntensity.setter
    def skyLightIntensity(cls, value: float) -> float: ...
    @classmethod
    @property
    def textureCompression(cls) -> bool: ...
    @classmethod
    @textureCompression.setter
    def textureCompression(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def trainingDataDestination(cls) -> str: ...
    @classmethod
    @trainingDataDestination.setter
    def trainingDataDestination(cls, value: str) -> str: ...

    class DenoiserType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : LightmapEditorSettings.DenoiserType # 0
        Optix : LightmapEditorSettings.DenoiserType # 1
        OpenImage : LightmapEditorSettings.DenoiserType # 2
        RadeonPro : LightmapEditorSettings.DenoiserType # 3


    class FilterMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : LightmapEditorSettings.FilterMode # 0
        Auto : LightmapEditorSettings.FilterMode # 1
        Advanced : LightmapEditorSettings.FilterMode # 2


    class FilterType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Gaussian : LightmapEditorSettings.FilterType # 0
        ATrous : LightmapEditorSettings.FilterType # 1
        None_ : LightmapEditorSettings.FilterType # 2


    class GIBakeBackend(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Radiosity : LightmapEditorSettings.GIBakeBackend # 0
        PathTracer : LightmapEditorSettings.GIBakeBackend # 1


    class Lightmapper(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Radiosity : LightmapEditorSettings.Lightmapper # 0
        Enlighten : LightmapEditorSettings.Lightmapper # 0
        PathTracer : LightmapEditorSettings.Lightmapper # 1
        ProgressiveCPU : LightmapEditorSettings.Lightmapper # 1
        ProgressiveGPU : LightmapEditorSettings.Lightmapper # 2


    class PathTracerFilter(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Gaussian : LightmapEditorSettings.PathTracerFilter # 0
        ATrous : LightmapEditorSettings.PathTracerFilter # 1


    class PathTracerSampling(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Auto : LightmapEditorSettings.PathTracerSampling # 0
        Fixed : LightmapEditorSettings.PathTracerSampling # 1


    class Sampling(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Auto : LightmapEditorSettings.Sampling # 0
        Fixed : LightmapEditorSettings.Sampling # 1



class LightmapParameters(Object):
    def __init__(self) -> None: ...
    @property
    def antiAliasingSamples(self) -> int: ...
    @antiAliasingSamples.setter
    def antiAliasingSamples(self, value: int) -> int: ...
    @property
    def AOAntiAliasingSamples(self) -> int: ...
    @AOAntiAliasingSamples.setter
    def AOAntiAliasingSamples(self, value: int) -> int: ...
    @property
    def AOQuality(self) -> int: ...
    @AOQuality.setter
    def AOQuality(self, value: int) -> int: ...
    @property
    def backFaceTolerance(self) -> float: ...
    @backFaceTolerance.setter
    def backFaceTolerance(self, value: float) -> float: ...
    @property
    def bakedLightmapTag(self) -> int: ...
    @bakedLightmapTag.setter
    def bakedLightmapTag(self, value: int) -> int: ...
    @property
    def blurRadius(self) -> int: ...
    @blurRadius.setter
    def blurRadius(self, value: int) -> int: ...
    @property
    def clusterResolution(self) -> float: ...
    @clusterResolution.setter
    def clusterResolution(self, value: float) -> float: ...
    @property
    def directLightQuality(self) -> int: ...
    @directLightQuality.setter
    def directLightQuality(self, value: int) -> int: ...
    @property
    def edgeStitching(self) -> float: ...
    @edgeStitching.setter
    def edgeStitching(self, value: float) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def irradianceBudget(self) -> int: ...
    @irradianceBudget.setter
    def irradianceBudget(self, value: int) -> int: ...
    @property
    def irradianceQuality(self) -> int: ...
    @irradianceQuality.setter
    def irradianceQuality(self, value: int) -> int: ...
    @property
    def isTransparent(self) -> bool: ...
    @isTransparent.setter
    def isTransparent(self, value: bool) -> bool: ...
    @property
    def limitLightmapCount(self) -> bool: ...
    @limitLightmapCount.setter
    def limitLightmapCount(self, value: bool) -> bool: ...
    @property
    def maxLightmapCount(self) -> int: ...
    @maxLightmapCount.setter
    def maxLightmapCount(self, value: int) -> int: ...
    @property
    def modellingTolerance(self) -> float: ...
    @modellingTolerance.setter
    def modellingTolerance(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def pushoff(self) -> float: ...
    @pushoff.setter
    def pushoff(self, value: float) -> float: ...
    @property
    def resolution(self) -> float: ...
    @resolution.setter
    def resolution(self, value: float) -> float: ...
    @property
    def stitchEdges(self) -> bool: ...
    @stitchEdges.setter
    def stitchEdges(self, value: bool) -> bool: ...
    @property
    def systemTag(self) -> int: ...
    @systemTag.setter
    def systemTag(self, value: int) -> int: ...
    def AssignToLightingSettings(self, lightingSettings: LightingSettings) -> None: ...
    @staticmethod
    def GetLightmapParametersForLightingSettings(lightingSettings: LightingSettings) -> LightmapParameters: ...
    @staticmethod
    def SetLightmapParametersForLightingSettings(parameters: LightmapParameters, lightingSettings: LightingSettings) -> None: ...


class Lightmapping(abc.ABC):
    completed : Lightmapping.OnCompletedFunction
    @classmethod
    @property
    def bakedGI(cls) -> bool: ...
    @classmethod
    @bakedGI.setter
    def bakedGI(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def bounceBoost(cls) -> float: ...
    @classmethod
    @bounceBoost.setter
    def bounceBoost(cls, value: float) -> float: ...
    @classmethod
    @property
    def buildProgress(cls) -> float: ...
    @classmethod
    @property
    def giWorkflowMode(cls) -> Lightmapping.GIWorkflowMode: ...
    @classmethod
    @giWorkflowMode.setter
    def giWorkflowMode(cls, value: Lightmapping.GIWorkflowMode) -> Lightmapping.GIWorkflowMode: ...
    @classmethod
    @property
    def indirectOutputScale(cls) -> float: ...
    @classmethod
    @indirectOutputScale.setter
    def indirectOutputScale(cls, value: float) -> float: ...
    @classmethod
    @property
    def isRunning(cls) -> bool: ...
    @classmethod
    @property
    def lightingDataAsset(cls) -> LightingDataAsset: ...
    @classmethod
    @lightingDataAsset.setter
    def lightingDataAsset(cls, value: LightingDataAsset) -> LightingDataAsset: ...
    @classmethod
    @property
    def lightingSettings(cls) -> LightingSettings: ...
    @classmethod
    @lightingSettings.setter
    def lightingSettings(cls, value: LightingSettings) -> LightingSettings: ...
    @classmethod
    @property
    def lightingSettingsDefaults(cls) -> LightingSettings: ...
    @classmethod
    @property
    def lightmapSnapshot(cls) -> LightmapSnapshot: ...
    @classmethod
    @lightmapSnapshot.setter
    def lightmapSnapshot(cls, value: LightmapSnapshot) -> LightmapSnapshot: ...
    @classmethod
    @property
    def realtimeGI(cls) -> bool: ...
    @classmethod
    @realtimeGI.setter
    def realtimeGI(cls, value: bool) -> bool: ...
    @staticmethod
    def Bake() -> bool: ...
    @staticmethod
    def BakeAsync() -> bool: ...
    @staticmethod
    def BakeLightProbesOnly() -> bool: ...
    @staticmethod
    def BakeLightProbesOnlyAsync() -> bool: ...
    @staticmethod
    def BakeMultipleScenes(paths: Array_1[str]) -> None: ...
    @staticmethod
    def BakeReflectionProbe(probe: ReflectionProbe, path: str) -> bool: ...
    @staticmethod
    def BakeSelected() -> bool: ...
    @staticmethod
    def BakeSelectedAsync() -> bool: ...
    @staticmethod
    def Cancel() -> None: ...
    @staticmethod
    def Clear() -> None: ...
    @staticmethod
    def ClearDiskCache() -> None: ...
    @staticmethod
    def ClearLightingDataAsset() -> None: ...
    @staticmethod
    def ForceStop() -> None: ...
    @staticmethod
    def GetLightingSettingsForScene(scene: Scene) -> LightingSettings: ...
    @staticmethod
    def GetTerrainGIChunks(terrain: Terrain, numChunksX: clr.Reference[int], numChunksY: clr.Reference[int]) -> None: ...
    @staticmethod
    def SetLightingSettingsForScene(scene: Scene, lightingSettings: LightingSettings) -> None: ...
    @staticmethod
    def SetLightingSettingsForScenes(scenes: Array_1[Scene], lightingSettings: LightingSettings) -> None: ...
    @staticmethod
    def Tetrahedralize(positions: Array_1[Vector3], outIndices: clr.Reference[Array_1[int]], outPositions: clr.Reference[Array_1[Vector3]]) -> None: ...
    @staticmethod
    def TryGetLightingSettings(settings: clr.Reference[LightingSettings]) -> bool: ...

    class GIWorkflowMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Iterative : Lightmapping.GIWorkflowMode # 0
        OnDemand : Lightmapping.GIWorkflowMode # 1
        Legacy : Lightmapping.GIWorkflowMode # 2


    class OnCompletedFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...


    class OnStartedFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...



class LightmapSnapshot(Object):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class LineEndingsMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OSNative : LineEndingsMode # 0
    Unix : LineEndingsMode # 1
    Windows : LineEndingsMode # 2


class LocalizationAttribute(Attribute):
    def __init__(self, locGroupName: str = ...) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class LocalizationGroup(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, behaviour: Behaviour) -> None: ...
    @typing.overload
    def __init__(self, obj: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any]) -> None: ...
    @property
    def locGroupName(self) -> str: ...
    def Dispose(self) -> None: ...


class LODUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def CalculateLODGroupBoundingBox(group: LODGroup) -> None: ...


class MacFullscreenMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CaptureDisplay : MacFullscreenMode # 0
    FullscreenWindow : MacFullscreenMode # 1
    FullscreenWindowWithDockAndMenuBar : MacFullscreenMode # 2


class ManagedReferenceMissingType(IComparable_1[ManagedReferenceMissingType], IEquatable_1[ManagedReferenceMissingType]):
    @property
    def assemblyName(self) -> str: ...
    @property
    def className(self) -> str: ...
    @property
    def namespaceName(self) -> str: ...
    @property
    def referenceId(self) -> int: ...
    @property
    def serializedData(self) -> str: ...
    def CompareTo(self, other: ManagedReferenceMissingType) -> int: ...
    def Equals(self, other: ManagedReferenceMissingType) -> bool: ...


class ManagedStrippingLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : ManagedStrippingLevel # 0
    Low : ManagedStrippingLevel # 1
    Medium : ManagedStrippingLevel # 2
    High : ManagedStrippingLevel # 3
    Minimal : ManagedStrippingLevel # 4


class MaterialEditor(Editor):
    def __init__(self) -> None: ...
    kMiniTextureFieldLabelIndentLevel : int
    @property
    def customShaderGUI(self) -> ShaderGUI: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isVisible(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    def Awake(self) -> None: ...
    def DefaultPreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def DefaultPreviewSettingsGUI(self) -> None: ...
    def DoubleSidedGIField(self) -> bool: ...
    def EmissionEnabledProperty(self) -> bool: ...
    def EndAnimatedCheck(self) -> None: ...
    @staticmethod
    def EndProperty() -> None: ...
    def GetColor(self, propertyName: str, hasMixedValue: clr.Reference[bool]) -> Color: ...
    @staticmethod
    def GetDefaultPropertyHeight(prop: MaterialProperty) -> float: ...
    @staticmethod
    def GetFlexibleRectBetweenFieldAndRightEdge(r: Rect) -> Rect: ...
    @staticmethod
    def GetFlexibleRectBetweenLabelAndField(r: Rect) -> Rect: ...
    def GetFloat(self, propertyName: str, hasMixedValue: clr.Reference[bool]) -> float: ...
    @staticmethod
    def GetLeftAlignedFieldRect(r: Rect) -> Rect: ...
    @staticmethod
    def GetMaterialProperties(mats: Array_1[Object]) -> Array_1[MaterialProperty]: ...
    @staticmethod
    def GetMaterialPropertyNames(mats: Array_1[Object]) -> Array_1[str]: ...
    @staticmethod
    def GetRectAfterLabelWidth(r: Rect) -> Rect: ...
    @staticmethod
    def GetRightAlignedFieldRect(r: Rect) -> Rect: ...
    def GetTexture(self, propertyName: str, hasMixedValue: clr.Reference[bool]) -> Texture: ...
    def GetTextureOffset(self, propertyName: str, hasMixedValueX: clr.Reference[bool], hasMixedValueY: clr.Reference[bool]) -> Vector2: ...
    def GetTexturePropertyCustomArea(self, position: Rect) -> Rect: ...
    def GetTextureScale(self, propertyName: str, hasMixedValueX: clr.Reference[bool], hasMixedValueY: clr.Reference[bool]) -> Vector2: ...
    def GetVector(self, propertyName: str, hasMixedValue: clr.Reference[bool]) -> Vector4: ...
    def HasPreviewGUI(self) -> bool: ...
    def HelpBoxWithButton(self, messageContent: GUIContent, buttonContent: GUIContent) -> bool: ...
    def IsInstancingEnabled(self) -> bool: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    def OnInspectorGUI(self) -> None: ...
    def OnInteractivePreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def OnPreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def OnPreviewSettings(self) -> None: ...
    @staticmethod
    def PrepareMaterialPropertiesForAnimationMode(properties: Array_1[MaterialProperty], isMaterialEditable: bool) -> Renderer: ...
    def PropertiesChanged(self) -> None: ...
    def PropertiesDefaultGUI(self, props: Array_1[MaterialProperty]) -> None: ...
    def PropertiesGUI(self) -> bool: ...
    def RegisterPropertyChangeUndo(self, label: str) -> None: ...
    def RenderStaticPreview(self, assetPath: str, subAssets: Array_1[Object], width: int, height: int) -> Texture2D: ...
    def RequiresConstantRepaint(self) -> bool: ...
    def SetColor(self, propertyName: str, value: Color) -> None: ...
    def SetDefaultGUIWidths(self) -> None: ...
    def SetFloat(self, propertyName: str, value: float) -> None: ...
    def SetTexture(self, propertyName: str, value: Texture) -> None: ...
    def SetTextureOffset(self, propertyName: str, value: Vector2, coord: int) -> None: ...
    def SetTextureScale(self, propertyName: str, value: Vector2, coord: int) -> None: ...
    def SetVector(self, propertyName: str, value: Vector4) -> None: ...
    def TextureCompatibilityWarning(self, prop: MaterialProperty) -> None: ...
    def TexturePropertyMiniThumbnail(self, position: Rect, prop: MaterialProperty, label: str, tooltip: str) -> Texture: ...
    def TexturePropertyTwoLines(self, label: GUIContent, textureProp: MaterialProperty, extraProperty1: MaterialProperty, label2: GUIContent, extraProperty2: MaterialProperty) -> Rect: ...
    # Skipped ApplyMaterialPropertyDrawers due to it being static, abstract and generic.

    ApplyMaterialPropertyDrawers : ApplyMaterialPropertyDrawers_MethodGroup
    class ApplyMaterialPropertyDrawers_MethodGroup:
        @typing.overload
        def __call__(self, targets: Array_1[Object]) -> None:...
        @typing.overload
        def __call__(self, material: Material) -> None:...

    # Skipped BeginAnimatedCheck due to it being static, abstract and generic.

    BeginAnimatedCheck : BeginAnimatedCheck_MethodGroup
    class BeginAnimatedCheck_MethodGroup:
        @typing.overload
        def __call__(self, prop: MaterialProperty) -> None:...
        @typing.overload
        def __call__(self, totalPosition: Rect, prop: MaterialProperty) -> None:...

    # Skipped BeginProperty due to it being static, abstract and generic.

    BeginProperty : BeginProperty_MethodGroup
    class BeginProperty_MethodGroup:
        @typing.overload
        def __call__(self, property: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, property: MaterialProperty) -> None:...
        @typing.overload
        def __call__(self, rect: Rect, property: SerializedProperty) -> None:...
        @typing.overload
        def __call__(self, rect: Rect, property: MaterialProperty) -> None:...

    # Skipped ColorProperty due to it being static, abstract and generic.

    ColorProperty : ColorProperty_MethodGroup
    class ColorProperty_MethodGroup:
        @typing.overload
        def __call__(self, propertyName: str, label: str) -> Color:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> Color:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> Color:...

    # Skipped DefaultShaderProperty due to it being static, abstract and generic.

    DefaultShaderProperty : DefaultShaderProperty_MethodGroup
    class DefaultShaderProperty_MethodGroup:
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> None:...

    # Skipped EnableInstancingField due to it being static, abstract and generic.

    EnableInstancingField : EnableInstancingField_MethodGroup
    class EnableInstancingField_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, r: Rect) -> None:...

    # Skipped FixupEmissiveFlag due to it being static, abstract and generic.

    FixupEmissiveFlag : FixupEmissiveFlag_MethodGroup
    class FixupEmissiveFlag_MethodGroup:
        @typing.overload
        def __call__(self, mat: Material) -> None:...
        @typing.overload
        def __call__(self, col: Color, flags: MaterialGlobalIlluminationFlags) -> MaterialGlobalIlluminationFlags:...

    # Skipped FloatProperty due to it being static, abstract and generic.

    FloatProperty : FloatProperty_MethodGroup
    class FloatProperty_MethodGroup:
        @typing.overload
        def __call__(self, propertyName: str, label: str) -> float:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> float:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> float:...

    # Skipped GetMaterialProperty due to it being static, abstract and generic.

    GetMaterialProperty : GetMaterialProperty_MethodGroup
    class GetMaterialProperty_MethodGroup:
        @typing.overload
        def __call__(self, mats: Array_1[Object], propertyIndex: int) -> MaterialProperty:...
        @typing.overload
        def __call__(self, mats: Array_1[Object], name: str) -> MaterialProperty:...

    # Skipped GetPropertyHeight due to it being static, abstract and generic.

    GetPropertyHeight : GetPropertyHeight_MethodGroup
    class GetPropertyHeight_MethodGroup:
        @typing.overload
        def __call__(self, prop: MaterialProperty) -> float:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> float:...

    # Skipped IntegerProperty due to it being static, abstract and generic.

    IntegerProperty : IntegerProperty_MethodGroup
    class IntegerProperty_MethodGroup:
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> int:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> int:...

    # Skipped LightmapEmissionFlagsProperty due to it being static, abstract and generic.

    LightmapEmissionFlagsProperty : LightmapEmissionFlagsProperty_MethodGroup
    class LightmapEmissionFlagsProperty_MethodGroup:
        @typing.overload
        def __call__(self, indent: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, indent: int, enabled: bool, ignoreEmissionColor: bool) -> None:...

    # Skipped LightmapEmissionProperty due to it being static, abstract and generic.

    LightmapEmissionProperty : LightmapEmissionProperty_MethodGroup
    class LightmapEmissionProperty_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, labelIndent: int) -> None:...
        @typing.overload
        def __call__(self, position: Rect, labelIndent: int) -> None:...

    # Skipped RangeProperty due to it being static, abstract and generic.

    RangeProperty : RangeProperty_MethodGroup
    class RangeProperty_MethodGroup:
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> float:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> float:...
        @typing.overload
        def __call__(self, propertyName: str, label: str, v2: float, v3: float) -> float:...

    # Skipped RenderQueueField due to it being static, abstract and generic.

    RenderQueueField : RenderQueueField_MethodGroup
    class RenderQueueField_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, r: Rect) -> None:...

    # Skipped SetShader due to it being static, abstract and generic.

    SetShader : SetShader_MethodGroup
    class SetShader_MethodGroup:
        @typing.overload
        def __call__(self, shader: Shader) -> None:...
        @typing.overload
        def __call__(self, newShader: Shader, registerUndo: bool) -> None:...

    # Skipped ShaderProperty due to it being static, abstract and generic.

    ShaderProperty : ShaderProperty_MethodGroup
    class ShaderProperty_MethodGroup:
        @typing.overload
        def __call__(self, shader: Shader, propertyIndex: int) -> None:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> None:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> None:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: GUIContent) -> None:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str, labelIndent: int) -> None:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: GUIContent, labelIndent: int) -> None:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str, labelIndent: int) -> None:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: GUIContent, labelIndent: int) -> None:...

    # Skipped TextureProperty due to it being static, abstract and generic.

    TextureProperty : TextureProperty_MethodGroup
    class TextureProperty_MethodGroup:
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> Texture:...
        @typing.overload
        def __call__(self, propertyName: str, label: str, texDim: ShaderUtil.ShaderPropertyTexDim) -> Texture:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> Texture:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: GUIContent) -> Texture:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str, scaleOffset: bool) -> Texture:...
        @typing.overload
        def __call__(self, propertyName: str, label: str, texDim: ShaderUtil.ShaderPropertyTexDim, scaleOffset: bool) -> Texture:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str, scaleOffset: bool) -> Texture:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: GUIContent, scaleOffset: bool) -> Texture:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str, tooltip: str, scaleOffset: bool) -> Texture:...

    # Skipped TexturePropertySingleLine due to it being static, abstract and generic.

    TexturePropertySingleLine : TexturePropertySingleLine_MethodGroup
    class TexturePropertySingleLine_MethodGroup:
        @typing.overload
        def __call__(self, label: GUIContent, textureProp: MaterialProperty) -> Rect:...
        @typing.overload
        def __call__(self, label: GUIContent, textureProp: MaterialProperty, extraProperty1: MaterialProperty) -> Rect:...
        @typing.overload
        def __call__(self, label: GUIContent, textureProp: MaterialProperty, extraProperty1: MaterialProperty, extraProperty2: MaterialProperty) -> Rect:...

    # Skipped TexturePropertyWithHDRColor due to it being static, abstract and generic.

    TexturePropertyWithHDRColor : TexturePropertyWithHDRColor_MethodGroup
    class TexturePropertyWithHDRColor_MethodGroup:
        @typing.overload
        def __call__(self, label: GUIContent, textureProp: MaterialProperty, colorProperty: MaterialProperty, showAlpha: bool) -> Rect:...
        @typing.overload
        def __call__(self, label: GUIContent, textureProp: MaterialProperty, colorProperty: MaterialProperty, hdrConfig: ColorPickerHDRConfig, showAlpha: bool) -> Rect:...

    # Skipped TextureScaleOffsetProperty due to it being static, abstract and generic.

    TextureScaleOffsetProperty : TextureScaleOffsetProperty_MethodGroup
    class TextureScaleOffsetProperty_MethodGroup:
        @typing.overload
        def __call__(self, property: MaterialProperty) -> None:...
        @typing.overload
        def __call__(self, position: Rect, scaleOffset: Vector4) -> Vector4:...
        @typing.overload
        def __call__(self, position: Rect, property: MaterialProperty) -> float:...
        @typing.overload
        def __call__(self, position: Rect, scaleOffset: Vector4, partOfTexturePropertyControl: bool) -> Vector4:...
        @typing.overload
        def __call__(self, position: Rect, property: MaterialProperty, partOfTexturePropertyControl: bool) -> float:...

    # Skipped UndoRedoPerformed due to it being static, abstract and generic.

    UndoRedoPerformed : UndoRedoPerformed_MethodGroup
    class UndoRedoPerformed_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, info: clr.Reference[UndoRedoInfo]) -> None:...

    # Skipped VectorProperty due to it being static, abstract and generic.

    VectorProperty : VectorProperty_MethodGroup
    class VectorProperty_MethodGroup:
        @typing.overload
        def __call__(self, propertyName: str, label: str) -> Vector4:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: str) -> Vector4:...
        @typing.overload
        def __call__(self, prop: MaterialProperty, label: GUIContent) -> Vector4:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str) -> Vector4:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: GUIContent) -> Vector4:...



class MaterialEditorExtensions(abc.ABC):
    @staticmethod
    def PerformBumpMapCheck(material: Material) -> None: ...


class MaterialProperty:
    def __init__(self) -> None: ...
    @property
    def applyPropertyCallback(self) -> MaterialProperty.ApplyPropertyCallback: ...
    @applyPropertyCallback.setter
    def applyPropertyCallback(self, value: MaterialProperty.ApplyPropertyCallback) -> MaterialProperty.ApplyPropertyCallback: ...
    @property
    def colorValue(self) -> Color: ...
    @colorValue.setter
    def colorValue(self, value: Color) -> Color: ...
    @property
    def displayName(self) -> str: ...
    @property
    def flags(self) -> MaterialProperty.PropFlags: ...
    @property
    def floatValue(self) -> float: ...
    @floatValue.setter
    def floatValue(self, value: float) -> float: ...
    @property
    def hasMixedValue(self) -> bool: ...
    @property
    def intValue(self) -> int: ...
    @intValue.setter
    def intValue(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def rangeLimits(self) -> Vector2: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    @property
    def textureDimension(self) -> TextureDimension: ...
    @property
    def textureScaleAndOffset(self) -> Vector4: ...
    @textureScaleAndOffset.setter
    def textureScaleAndOffset(self, value: Vector4) -> Vector4: ...
    @property
    def textureValue(self) -> Texture: ...
    @textureValue.setter
    def textureValue(self, value: Texture) -> Texture: ...
    @property
    def type(self) -> MaterialProperty.PropType: ...
    @property
    def vectorValue(self) -> Vector4: ...
    @vectorValue.setter
    def vectorValue(self, value: Vector4) -> Vector4: ...
    def ReadFromMaterialPropertyBlock(self, block: MaterialPropertyBlock) -> None: ...
    def WriteToMaterialPropertyBlock(self, materialblock: MaterialPropertyBlock, changedPropertyMask: int) -> None: ...

    class ApplyPropertyCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, prop: MaterialProperty, changeMask: int, previousValue: typing.Any, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, prop: MaterialProperty, changeMask: int, previousValue: typing.Any) -> bool: ...


    class PropFlags(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : MaterialProperty.PropFlags # 0
        HideInInspector : MaterialProperty.PropFlags # 1
        PerRendererData : MaterialProperty.PropFlags # 2
        NoScaleOffset : MaterialProperty.PropFlags # 4
        Normal : MaterialProperty.PropFlags # 8
        HDR : MaterialProperty.PropFlags # 16
        Gamma : MaterialProperty.PropFlags # 32
        NonModifiableTextureData : MaterialProperty.PropFlags # 64


    class PropType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Color : MaterialProperty.PropType # 0
        Vector : MaterialProperty.PropType # 1
        Float : MaterialProperty.PropType # 2
        Range : MaterialProperty.PropType # 3
        Texture : MaterialProperty.PropType # 4
        Int : MaterialProperty.PropType # 5


    class TexDim(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : MaterialProperty.TexDim # 0
        Tex2D : MaterialProperty.TexDim # 2
        Tex3D : MaterialProperty.TexDim # 3
        Cube : MaterialProperty.TexDim # 4
        Any : MaterialProperty.TexDim # 6
        Unknown : MaterialProperty.TexDim # -1



class MaterialPropertyDrawer(abc.ABC):
    def Apply(self, prop: MaterialProperty) -> None: ...
    def GetPropertyHeight(self, prop: MaterialProperty, label: str, editor: MaterialEditor) -> float: ...
    # Skipped OnGUI due to it being static, abstract and generic.

    OnGUI : OnGUI_MethodGroup
    class OnGUI_MethodGroup:
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: str, editor: MaterialEditor) -> None:...
        @typing.overload
        def __call__(self, position: Rect, prop: MaterialProperty, label: GUIContent, editor: MaterialEditor) -> None:...



class MathUtils:
    def __init__(self) -> None: ...
    @staticmethod
    def ClosestPtRaySphere(ray: Ray, sphereOrigin: Vector3, sphereRadius: float, t: clr.Reference[float], q: clr.Reference[Vector3]) -> bool: ...
    @staticmethod
    def ClosestPtSegmentRay(p1: Vector3, q1: Vector3, ray: Ray, squaredDist: clr.Reference[float], s: clr.Reference[float], closestRay: clr.Reference[Vector3]) -> Vector3: ...
    @staticmethod
    def Ease(t: float, k1: float, k2: float) -> float: ...
    @staticmethod
    def GetQuatConjugate(q: Quaternion) -> Quaternion: ...
    @staticmethod
    def GetQuatExp(q: Quaternion) -> Quaternion: ...
    @staticmethod
    def GetQuatLength(q: Quaternion) -> float: ...
    @staticmethod
    def GetQuatLog(q: Quaternion) -> Quaternion: ...
    @staticmethod
    def GetQuatSquad(t: float, q0: Quaternion, q1: Quaternion, a0: Quaternion, a1: Quaternion) -> Quaternion: ...
    @staticmethod
    def GetSquadIntermediate(q0: Quaternion, q1: Quaternion, q2: Quaternion) -> Quaternion: ...
    @staticmethod
    def IntersectRaySphere(ray: Ray, sphereOrigin: Vector3, sphereRadius: float, t: clr.Reference[float], q: clr.Reference[Vector3]) -> bool: ...
    @staticmethod
    def IntersectRayTriangle(ray: Ray, v0: Vector3, v1: Vector3, v2: Vector3, bidirectional: bool) -> typing.Any: ...
    @staticmethod
    def OrthogonalizeMatrix(m: Matrix4x4) -> Matrix4x4: ...
    @staticmethod
    def QuaternionFromMatrix(m: Matrix4x4) -> Quaternion: ...
    @staticmethod
    def QuaternionNormalize(q: clr.Reference[Quaternion]) -> None: ...
    @staticmethod
    def Slerp(p: Quaternion, q: Quaternion, t: float) -> Quaternion: ...


class Menu:
    def __init__(self) -> None: ...
    @staticmethod
    def GetChecked(menuPath: str) -> bool: ...
    @staticmethod
    def GetEnabled(menuPath: str) -> bool: ...
    @staticmethod
    def SetChecked(menuPath: str, isChecked: bool) -> None: ...


class MenuCommand:
    @typing.overload
    def __init__(self, inContext: Object) -> None: ...
    @typing.overload
    def __init__(self, inContext: Object, inUserData: int) -> None: ...
    context : Object
    userData : int


class MenuItem(Attribute):
    @typing.overload
    def __init__(self, itemName: str) -> None: ...
    @typing.overload
    def __init__(self, itemName: str, isValidateFunction: bool) -> None: ...
    @typing.overload
    def __init__(self, itemName: str, isValidateFunction: bool, priority: int) -> None: ...
    editorModes : Array_1[str]
    menuItem : str
    priority : int
    secondaryPriority : float
    validate : bool
    @property
    def TypeId(self) -> typing.Any: ...


class MeshOptimizationFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PolygonOrder : MeshOptimizationFlags # 1
    VertexOrder : MeshOptimizationFlags # 2
    Everything : MeshOptimizationFlags # -1


class MeshPreview(IDisposable):
    def __init__(self, target: Mesh) -> None: ...
    @property
    def mesh(self) -> Mesh: ...
    @mesh.setter
    def mesh(self, value: Mesh) -> Mesh: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def GetInfoString(mesh: Mesh) -> str: ...
    def OnPreviewGUI(self, rect: Rect, background: GUIStyle) -> None: ...
    def OnPreviewSettings(self) -> None: ...
    def RenderStaticPreview(self, width: int, height: int) -> Texture2D: ...


class MeshUtility:
    def __init__(self) -> None: ...
    @staticmethod
    def GetMeshCompression(mesh: Mesh) -> ModelImporterMeshCompression: ...
    @staticmethod
    def Optimize(mesh: Mesh) -> None: ...
    @staticmethod
    def SetMeshCompression(mesh: Mesh, compression: ModelImporterMeshCompression) -> None: ...
    @staticmethod
    def SetPerTriangleUV2(src: Mesh, triUV: Array_1[Vector2]) -> bool: ...
    # Skipped AcquireReadOnlyMeshData due to it being static, abstract and generic.

    AcquireReadOnlyMeshData : AcquireReadOnlyMeshData_MethodGroup
    class AcquireReadOnlyMeshData_MethodGroup:
        @typing.overload
        def __call__(self, meshes: Array_1[Mesh]) -> Mesh.MeshDataArray:...
        @typing.overload
        def __call__(self, meshes: List_1[Mesh]) -> Mesh.MeshDataArray:...
        @typing.overload
        def __call__(self, mesh: Mesh) -> Mesh.MeshDataArray:...



class MessageType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MessageType # 0
    Info : MessageType # 1
    Warning : MessageType # 2
    Error : MessageType # 3


class MobileTextureSubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Generic : MobileTextureSubtarget # 0
    DXT : MobileTextureSubtarget # 1
    PVRTC : MobileTextureSubtarget # 2
    ATC : MobileTextureSubtarget # 3
    ETC : MobileTextureSubtarget # 4
    ETC2 : MobileTextureSubtarget # 5
    ASTC : MobileTextureSubtarget # 6


class ModelImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def addCollider(self) -> bool: ...
    @addCollider.setter
    def addCollider(self, value: bool) -> bool: ...
    @property
    def animationCompression(self) -> ModelImporterAnimationCompression: ...
    @animationCompression.setter
    def animationCompression(self, value: ModelImporterAnimationCompression) -> ModelImporterAnimationCompression: ...
    @property
    def animationPositionError(self) -> float: ...
    @animationPositionError.setter
    def animationPositionError(self, value: float) -> float: ...
    @property
    def animationRotationError(self) -> float: ...
    @animationRotationError.setter
    def animationRotationError(self, value: float) -> float: ...
    @property
    def animationScaleError(self) -> float: ...
    @animationScaleError.setter
    def animationScaleError(self, value: float) -> float: ...
    @property
    def animationType(self) -> ModelImporterAnimationType: ...
    @animationType.setter
    def animationType(self, value: ModelImporterAnimationType) -> ModelImporterAnimationType: ...
    @property
    def animationWrapMode(self) -> WrapMode: ...
    @animationWrapMode.setter
    def animationWrapMode(self, value: WrapMode) -> WrapMode: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def autoGenerateAvatarMappingIfUnspecified(self) -> bool: ...
    @autoGenerateAvatarMappingIfUnspecified.setter
    def autoGenerateAvatarMappingIfUnspecified(self, value: bool) -> bool: ...
    @property
    def avatarSetup(self) -> ModelImporterAvatarSetup: ...
    @avatarSetup.setter
    def avatarSetup(self, value: ModelImporterAvatarSetup) -> ModelImporterAvatarSetup: ...
    @property
    def bakeAxisConversion(self) -> bool: ...
    @bakeAxisConversion.setter
    def bakeAxisConversion(self, value: bool) -> bool: ...
    @property
    def bakeIK(self) -> bool: ...
    @bakeIK.setter
    def bakeIK(self, value: bool) -> bool: ...
    @property
    def clipAnimations(self) -> Array_1[ModelImporterClipAnimation]: ...
    @clipAnimations.setter
    def clipAnimations(self, value: Array_1[ModelImporterClipAnimation]) -> Array_1[ModelImporterClipAnimation]: ...
    @property
    def defaultClipAnimations(self) -> Array_1[ModelImporterClipAnimation]: ...
    @property
    def extraExposedTransformPaths(self) -> Array_1[str]: ...
    @extraExposedTransformPaths.setter
    def extraExposedTransformPaths(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def extraUserProperties(self) -> Array_1[str]: ...
    @extraUserProperties.setter
    def extraUserProperties(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def fileScale(self) -> float: ...
    @property
    def generateAnimations(self) -> ModelImporterGenerateAnimations: ...
    @generateAnimations.setter
    def generateAnimations(self, value: ModelImporterGenerateAnimations) -> ModelImporterGenerateAnimations: ...
    @property
    def generateMaterials(self) -> ModelImporterGenerateMaterials: ...
    @property
    def generateSecondaryUV(self) -> bool: ...
    @generateSecondaryUV.setter
    def generateSecondaryUV(self, value: bool) -> bool: ...
    @property
    def globalScale(self) -> float: ...
    @globalScale.setter
    def globalScale(self, value: float) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def humanDescription(self) -> HumanDescription: ...
    @humanDescription.setter
    def humanDescription(self, value: HumanDescription) -> HumanDescription: ...
    @property
    def humanoidOversampling(self) -> ModelImporterHumanoidOversampling: ...
    @humanoidOversampling.setter
    def humanoidOversampling(self, value: ModelImporterHumanoidOversampling) -> ModelImporterHumanoidOversampling: ...
    @property
    def importAnimatedCustomProperties(self) -> bool: ...
    @importAnimatedCustomProperties.setter
    def importAnimatedCustomProperties(self, value: bool) -> bool: ...
    @property
    def importAnimation(self) -> bool: ...
    @importAnimation.setter
    def importAnimation(self, value: bool) -> bool: ...
    @property
    def importBlendShapeDeformPercent(self) -> bool: ...
    @importBlendShapeDeformPercent.setter
    def importBlendShapeDeformPercent(self, value: bool) -> bool: ...
    @property
    def importBlendShapeNormals(self) -> ModelImporterNormals: ...
    @importBlendShapeNormals.setter
    def importBlendShapeNormals(self, value: ModelImporterNormals) -> ModelImporterNormals: ...
    @property
    def importBlendShapes(self) -> bool: ...
    @importBlendShapes.setter
    def importBlendShapes(self, value: bool) -> bool: ...
    @property
    def importCameras(self) -> bool: ...
    @importCameras.setter
    def importCameras(self, value: bool) -> bool: ...
    @property
    def importConstraints(self) -> bool: ...
    @importConstraints.setter
    def importConstraints(self, value: bool) -> bool: ...
    @property
    def importedTakeInfos(self) -> Array_1[TakeInfo]: ...
    @property
    def importLights(self) -> bool: ...
    @importLights.setter
    def importLights(self, value: bool) -> bool: ...
    @property
    def importMaterials(self) -> bool: ...
    @property
    def importNormals(self) -> ModelImporterNormals: ...
    @importNormals.setter
    def importNormals(self, value: ModelImporterNormals) -> ModelImporterNormals: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def importTangents(self) -> ModelImporterTangents: ...
    @importTangents.setter
    def importTangents(self, value: ModelImporterTangents) -> ModelImporterTangents: ...
    @property
    def importVisibility(self) -> bool: ...
    @importVisibility.setter
    def importVisibility(self, value: bool) -> bool: ...
    @property
    def indexFormat(self) -> ModelImporterIndexFormat: ...
    @indexFormat.setter
    def indexFormat(self, value: ModelImporterIndexFormat) -> ModelImporterIndexFormat: ...
    @property
    def isBakeIKSupported(self) -> bool: ...
    @property
    def isFileScaleUsed(self) -> bool: ...
    @property
    def isReadable(self) -> bool: ...
    @isReadable.setter
    def isReadable(self, value: bool) -> bool: ...
    @property
    def isTangentImportSupported(self) -> bool: ...
    @property
    def isUseFileUnitsSupported(self) -> bool: ...
    @property
    def keepQuads(self) -> bool: ...
    @keepQuads.setter
    def keepQuads(self, value: bool) -> bool: ...
    @property
    def materialImportMode(self) -> ModelImporterMaterialImportMode: ...
    @materialImportMode.setter
    def materialImportMode(self, value: ModelImporterMaterialImportMode) -> ModelImporterMaterialImportMode: ...
    @property
    def materialLocation(self) -> ModelImporterMaterialLocation: ...
    @materialLocation.setter
    def materialLocation(self, value: ModelImporterMaterialLocation) -> ModelImporterMaterialLocation: ...
    @property
    def materialName(self) -> ModelImporterMaterialName: ...
    @materialName.setter
    def materialName(self, value: ModelImporterMaterialName) -> ModelImporterMaterialName: ...
    @property
    def materialSearch(self) -> ModelImporterMaterialSearch: ...
    @materialSearch.setter
    def materialSearch(self, value: ModelImporterMaterialSearch) -> ModelImporterMaterialSearch: ...
    @property
    def maxBonesPerVertex(self) -> int: ...
    @maxBonesPerVertex.setter
    def maxBonesPerVertex(self, value: int) -> int: ...
    @property
    def meshCompression(self) -> ModelImporterMeshCompression: ...
    @meshCompression.setter
    def meshCompression(self, value: ModelImporterMeshCompression) -> ModelImporterMeshCompression: ...
    @property
    def meshOptimizationFlags(self) -> MeshOptimizationFlags: ...
    @meshOptimizationFlags.setter
    def meshOptimizationFlags(self, value: MeshOptimizationFlags) -> MeshOptimizationFlags: ...
    @property
    def minBoneWeight(self) -> float: ...
    @minBoneWeight.setter
    def minBoneWeight(self, value: float) -> float: ...
    @property
    def motionNodeName(self) -> str: ...
    @motionNodeName.setter
    def motionNodeName(self, value: str) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def normalCalculationMode(self) -> ModelImporterNormalCalculationMode: ...
    @normalCalculationMode.setter
    def normalCalculationMode(self, value: ModelImporterNormalCalculationMode) -> ModelImporterNormalCalculationMode: ...
    @property
    def normalImportMode(self) -> ModelImporterTangentSpaceMode: ...
    @normalImportMode.setter
    def normalImportMode(self, value: ModelImporterTangentSpaceMode) -> ModelImporterTangentSpaceMode: ...
    @property
    def normalSmoothingAngle(self) -> float: ...
    @normalSmoothingAngle.setter
    def normalSmoothingAngle(self, value: float) -> float: ...
    @property
    def normalSmoothingSource(self) -> ModelImporterNormalSmoothingSource: ...
    @normalSmoothingSource.setter
    def normalSmoothingSource(self, value: ModelImporterNormalSmoothingSource) -> ModelImporterNormalSmoothingSource: ...
    @property
    def optimizeBones(self) -> bool: ...
    @optimizeBones.setter
    def optimizeBones(self, value: bool) -> bool: ...
    @property
    def optimizeGameObjects(self) -> bool: ...
    @optimizeGameObjects.setter
    def optimizeGameObjects(self, value: bool) -> bool: ...
    @property
    def optimizeMesh(self) -> bool: ...
    @optimizeMesh.setter
    def optimizeMesh(self, value: bool) -> bool: ...
    @property
    def optimizeMeshPolygons(self) -> bool: ...
    @optimizeMeshPolygons.setter
    def optimizeMeshPolygons(self, value: bool) -> bool: ...
    @property
    def optimizeMeshVertices(self) -> bool: ...
    @optimizeMeshVertices.setter
    def optimizeMeshVertices(self, value: bool) -> bool: ...
    @property
    def preserveHierarchy(self) -> bool: ...
    @preserveHierarchy.setter
    def preserveHierarchy(self, value: bool) -> bool: ...
    @property
    def referencedClips(self) -> Array_1[str]: ...
    @property
    def removeConstantScaleCurves(self) -> bool: ...
    @removeConstantScaleCurves.setter
    def removeConstantScaleCurves(self, value: bool) -> bool: ...
    @property
    def resampleCurves(self) -> bool: ...
    @resampleCurves.setter
    def resampleCurves(self, value: bool) -> bool: ...
    @property
    def resampleRotations(self) -> bool: ...
    @resampleRotations.setter
    def resampleRotations(self, value: bool) -> bool: ...
    @property
    def secondaryUVAngleDistortion(self) -> float: ...
    @secondaryUVAngleDistortion.setter
    def secondaryUVAngleDistortion(self, value: float) -> float: ...
    @property
    def secondaryUVAreaDistortion(self) -> float: ...
    @secondaryUVAreaDistortion.setter
    def secondaryUVAreaDistortion(self, value: float) -> float: ...
    @property
    def secondaryUVHardAngle(self) -> float: ...
    @secondaryUVHardAngle.setter
    def secondaryUVHardAngle(self, value: float) -> float: ...
    @property
    def secondaryUVMarginMethod(self) -> ModelImporterSecondaryUVMarginMethod: ...
    @secondaryUVMarginMethod.setter
    def secondaryUVMarginMethod(self, value: ModelImporterSecondaryUVMarginMethod) -> ModelImporterSecondaryUVMarginMethod: ...
    @property
    def secondaryUVMinLightmapResolution(self) -> float: ...
    @secondaryUVMinLightmapResolution.setter
    def secondaryUVMinLightmapResolution(self, value: float) -> float: ...
    @property
    def secondaryUVMinObjectScale(self) -> float: ...
    @secondaryUVMinObjectScale.setter
    def secondaryUVMinObjectScale(self, value: float) -> float: ...
    @property
    def secondaryUVPackMargin(self) -> float: ...
    @secondaryUVPackMargin.setter
    def secondaryUVPackMargin(self, value: float) -> float: ...
    @property
    def skinWeights(self) -> ModelImporterSkinWeights: ...
    @skinWeights.setter
    def skinWeights(self, value: ModelImporterSkinWeights) -> ModelImporterSkinWeights: ...
    @property
    def sortHierarchyByName(self) -> bool: ...
    @sortHierarchyByName.setter
    def sortHierarchyByName(self, value: bool) -> bool: ...
    @property
    def sourceAvatar(self) -> Avatar: ...
    @sourceAvatar.setter
    def sourceAvatar(self, value: Avatar) -> Avatar: ...
    @property
    def splitAnimations(self) -> bool: ...
    @splitAnimations.setter
    def splitAnimations(self, value: bool) -> bool: ...
    @property
    def splitTangentsAcrossSeams(self) -> bool: ...
    @splitTangentsAcrossSeams.setter
    def splitTangentsAcrossSeams(self, value: bool) -> bool: ...
    @property
    def strictVertexDataChecks(self) -> bool: ...
    @strictVertexDataChecks.setter
    def strictVertexDataChecks(self, value: bool) -> bool: ...
    @property
    def swapUVChannels(self) -> bool: ...
    @swapUVChannels.setter
    def swapUVChannels(self, value: bool) -> bool: ...
    @property
    def tangentImportMode(self) -> ModelImporterTangentSpaceMode: ...
    @tangentImportMode.setter
    def tangentImportMode(self, value: ModelImporterTangentSpaceMode) -> ModelImporterTangentSpaceMode: ...
    @property
    def transformPaths(self) -> Array_1[str]: ...
    @property
    def useFileScale(self) -> bool: ...
    @useFileScale.setter
    def useFileScale(self, value: bool) -> bool: ...
    @property
    def useFileUnits(self) -> bool: ...
    @useFileUnits.setter
    def useFileUnits(self, value: bool) -> bool: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @property
    def useSRGBMaterialColor(self) -> bool: ...
    @useSRGBMaterialColor.setter
    def useSRGBMaterialColor(self, value: bool) -> bool: ...
    @property
    def weldVertices(self) -> bool: ...
    @weldVertices.setter
    def weldVertices(self, value: bool) -> bool: ...
    def CreateDefaultMaskForClip(self, clip: ModelImporterClipAnimation) -> None: ...
    def ExtractTextures(self, folderPath: str) -> bool: ...
    def SearchAndRemapMaterials(self, nameOption: ModelImporterMaterialName, searchOption: ModelImporterMaterialSearch) -> bool: ...


class ModelImporterAnimationCompression(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : ModelImporterAnimationCompression # 0
    KeyframeReduction : ModelImporterAnimationCompression # 1
    KeyframeReductionAndCompression : ModelImporterAnimationCompression # 2
    Optimal : ModelImporterAnimationCompression # 3


class ModelImporterAnimationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ModelImporterAnimationType # 0
    Legacy : ModelImporterAnimationType # 1
    Generic : ModelImporterAnimationType # 2
    Human : ModelImporterAnimationType # 3


class ModelImporterAvatarSetup(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoAvatar : ModelImporterAvatarSetup # 0
    CreateFromThisModel : ModelImporterAvatarSetup # 1
    CopyFromOther : ModelImporterAvatarSetup # 2


class ModelImporterClipAnimation:
    def __init__(self) -> None: ...
    @property
    def additiveReferencePoseFrame(self) -> float: ...
    @additiveReferencePoseFrame.setter
    def additiveReferencePoseFrame(self, value: float) -> float: ...
    @property
    def curves(self) -> Array_1[ClipAnimationInfoCurve]: ...
    @curves.setter
    def curves(self, value: Array_1[ClipAnimationInfoCurve]) -> Array_1[ClipAnimationInfoCurve]: ...
    @property
    def cycleOffset(self) -> float: ...
    @cycleOffset.setter
    def cycleOffset(self, value: float) -> float: ...
    @property
    def events(self) -> Array_1[AnimationEvent]: ...
    @events.setter
    def events(self, value: Array_1[AnimationEvent]) -> Array_1[AnimationEvent]: ...
    @property
    def firstFrame(self) -> float: ...
    @firstFrame.setter
    def firstFrame(self, value: float) -> float: ...
    @property
    def hasAdditiveReferencePose(self) -> bool: ...
    @hasAdditiveReferencePose.setter
    def hasAdditiveReferencePose(self, value: bool) -> bool: ...
    @property
    def heightFromFeet(self) -> bool: ...
    @heightFromFeet.setter
    def heightFromFeet(self, value: bool) -> bool: ...
    @property
    def heightOffset(self) -> float: ...
    @heightOffset.setter
    def heightOffset(self, value: float) -> float: ...
    @property
    def keepOriginalOrientation(self) -> bool: ...
    @keepOriginalOrientation.setter
    def keepOriginalOrientation(self, value: bool) -> bool: ...
    @property
    def keepOriginalPositionXZ(self) -> bool: ...
    @keepOriginalPositionXZ.setter
    def keepOriginalPositionXZ(self, value: bool) -> bool: ...
    @property
    def keepOriginalPositionY(self) -> bool: ...
    @keepOriginalPositionY.setter
    def keepOriginalPositionY(self, value: bool) -> bool: ...
    @property
    def lastFrame(self) -> float: ...
    @lastFrame.setter
    def lastFrame(self, value: float) -> float: ...
    @property
    def lockRootHeightY(self) -> bool: ...
    @lockRootHeightY.setter
    def lockRootHeightY(self, value: bool) -> bool: ...
    @property
    def lockRootPositionXZ(self) -> bool: ...
    @lockRootPositionXZ.setter
    def lockRootPositionXZ(self, value: bool) -> bool: ...
    @property
    def lockRootRotation(self) -> bool: ...
    @lockRootRotation.setter
    def lockRootRotation(self, value: bool) -> bool: ...
    @property
    def loop(self) -> bool: ...
    @loop.setter
    def loop(self, value: bool) -> bool: ...
    @property
    def loopPose(self) -> bool: ...
    @loopPose.setter
    def loopPose(self, value: bool) -> bool: ...
    @property
    def loopTime(self) -> bool: ...
    @loopTime.setter
    def loopTime(self, value: bool) -> bool: ...
    @property
    def maskNeedsUpdating(self) -> bool: ...
    @property
    def maskSource(self) -> AvatarMask: ...
    @maskSource.setter
    def maskSource(self, value: AvatarMask) -> AvatarMask: ...
    @property
    def maskType(self) -> ClipAnimationMaskType: ...
    @maskType.setter
    def maskType(self, value: ClipAnimationMaskType) -> ClipAnimationMaskType: ...
    @property
    def mirror(self) -> bool: ...
    @mirror.setter
    def mirror(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def rotationOffset(self) -> float: ...
    @rotationOffset.setter
    def rotationOffset(self, value: float) -> float: ...
    @property
    def takeName(self) -> str: ...
    @takeName.setter
    def takeName(self, value: str) -> str: ...
    @property
    def wrapMode(self) -> WrapMode: ...
    @wrapMode.setter
    def wrapMode(self, value: WrapMode) -> WrapMode: ...
    def ConfigureClipFromMask(self, mask: AvatarMask) -> None: ...
    def ConfigureMaskFromClip(self, mask: clr.Reference[AvatarMask]) -> None: ...
    def Equals(self, o: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...


class ModelImporterGenerateAnimations(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ModelImporterGenerateAnimations # 0
    InOriginalRoots : ModelImporterGenerateAnimations # 1
    InNodes : ModelImporterGenerateAnimations # 2
    InRoot : ModelImporterGenerateAnimations # 3
    GenerateAnimations : ModelImporterGenerateAnimations # 4


class ModelImporterGenerateMaterials(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ModelImporterGenerateMaterials # 0
    PerTexture : ModelImporterGenerateMaterials # 1
    PerSourceMaterial : ModelImporterGenerateMaterials # 2


class ModelImporterHumanoidOversampling(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    X1 : ModelImporterHumanoidOversampling # 1
    X2 : ModelImporterHumanoidOversampling # 2
    X4 : ModelImporterHumanoidOversampling # 4
    X8 : ModelImporterHumanoidOversampling # 8


class ModelImporterIndexFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : ModelImporterIndexFormat # 0
    UInt16 : ModelImporterIndexFormat # 1
    UInt32 : ModelImporterIndexFormat # 2


class ModelImporterMaterialImportMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ModelImporterMaterialImportMode # 0
    ImportStandard : ModelImporterMaterialImportMode # 1
    LegacyImport : ModelImporterMaterialImportMode # 1
    ImportViaMaterialDescription : ModelImporterMaterialImportMode # 2
    Import : ModelImporterMaterialImportMode # 2


class ModelImporterMaterialLocation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    External : ModelImporterMaterialLocation # 0
    InPrefab : ModelImporterMaterialLocation # 1


class ModelImporterMaterialName(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BasedOnTextureName : ModelImporterMaterialName # 0
    BasedOnMaterialName : ModelImporterMaterialName # 1
    BasedOnModelNameAndMaterialName : ModelImporterMaterialName # 2
    BasedOnTextureName_Or_ModelNameAndMaterialName : ModelImporterMaterialName # 3


class ModelImporterMaterialSearch(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Local : ModelImporterMaterialSearch # 0
    RecursiveUp : ModelImporterMaterialSearch # 1
    Everywhere : ModelImporterMaterialSearch # 2


class ModelImporterMeshCompression(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : ModelImporterMeshCompression # 0
    Low : ModelImporterMeshCompression # 1
    Medium : ModelImporterMeshCompression # 2
    High : ModelImporterMeshCompression # 3


class ModelImporterNormalCalculationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unweighted_Legacy : ModelImporterNormalCalculationMode # 0
    Unweighted : ModelImporterNormalCalculationMode # 1
    AreaWeighted : ModelImporterNormalCalculationMode # 2
    AngleWeighted : ModelImporterNormalCalculationMode # 3
    AreaAndAngleWeighted : ModelImporterNormalCalculationMode # 4


class ModelImporterNormals(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Import : ModelImporterNormals # 0
    Calculate : ModelImporterNormals # 1
    None_ : ModelImporterNormals # 2


class ModelImporterNormalSmoothingSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PreferSmoothingGroups : ModelImporterNormalSmoothingSource # 0
    FromSmoothingGroups : ModelImporterNormalSmoothingSource # 1
    FromAngle : ModelImporterNormalSmoothingSource # 2
    None_ : ModelImporterNormalSmoothingSource # 3


class ModelImporterSecondaryUVMarginMethod(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Manual : ModelImporterSecondaryUVMarginMethod # 0
    Calculate : ModelImporterSecondaryUVMarginMethod # 1


class ModelImporterSkinWeights(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Standard : ModelImporterSkinWeights # 0
    Custom : ModelImporterSkinWeights # 1


class ModelImporterTangents(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Import : ModelImporterTangents # 0
    CalculateLegacy : ModelImporterTangents # 1
    None_ : ModelImporterTangents # 2
    CalculateMikk : ModelImporterTangents # 3
    CalculateLegacyWithSplitTangents : ModelImporterTangents # 4


class ModelImporterTangentSpaceMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Import : ModelImporterTangentSpaceMode # 0
    Calculate : ModelImporterTangentSpaceMode # 1
    None_ : ModelImporterTangentSpaceMode # 2


class ModeService(abc.ABC):
    @classmethod
    @property
    def currentId(cls) -> str: ...
    @classmethod
    @property
    def currentIndex(cls) -> int: ...
    @classmethod
    @currentIndex.setter
    def currentIndex(cls, value: int) -> int: ...
    @classmethod
    @property
    def modeCount(cls) -> int: ...
    @classmethod
    @property
    def modeNames(cls) -> Array_1[str]: ...
    @staticmethod
    def ChangeModeById(modeId: str) -> None: ...
    @staticmethod
    def HasContextMenu(menuId: str) -> bool: ...
    @staticmethod
    def PopupContextMenu(menuId: str) -> None: ...
    @staticmethod
    def Update() -> None: ...

    class ModeChangedArgs:
        nextIndex : int
        prevIndex : int



class MonoImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @staticmethod
    def GetAllRuntimeMonoScripts() -> Array_1[MonoScript]: ...
    def GetDefaultReference(self, name: str) -> Object: ...
    @staticmethod
    def GetExecutionOrder(script: MonoScript) -> int: ...
    def GetIcon(self) -> Texture2D: ...
    def GetScript(self) -> MonoScript: ...
    def SetDefaultReferences(self, name: Array_1[str], target: Array_1[Object]) -> None: ...
    @staticmethod
    def SetExecutionOrder(script: MonoScript, order: int) -> None: ...
    def SetIcon(self, icon: Texture2D) -> None: ...


class MonoScript(TextAsset):
    def __init__(self) -> None: ...
    @property
    def bytes(self) -> Array_1[int]: ...
    @property
    def dataSize(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def text(self) -> str: ...
    @staticmethod
    def FromMonoBehaviour(behaviour: MonoBehaviour) -> MonoScript: ...
    @staticmethod
    def FromScriptableObject(scriptableObject: ScriptableObject) -> MonoScript: ...
    def GetClass(self) -> typing.Type[typing.Any]: ...


class MouseCursor(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Arrow : MouseCursor # 0
    Text : MouseCursor # 1
    ResizeVertical : MouseCursor # 2
    ResizeHorizontal : MouseCursor # 3
    Link : MouseCursor # 4
    SlideArrow : MouseCursor # 5
    ResizeUpRight : MouseCursor # 6
    ResizeUpLeft : MouseCursor # 7
    MoveArrow : MouseCursor # 8
    RotateArrow : MouseCursor # 9
    ScaleArrow : MouseCursor # 10
    ArrowPlus : MouseCursor # 11
    ArrowMinus : MouseCursor # 12
    Pan : MouseCursor # 13
    Orbit : MouseCursor # 14
    Zoom : MouseCursor # 15
    FPS : MouseCursor # 16
    CustomCursor : MouseCursor # 17
    SplitResizeUpDown : MouseCursor # 18
    SplitResizeLeftRight : MouseCursor # 19


class MovieImporter:
    def __init__(self) -> None: ...
    @property
    def duration(self) -> float: ...
    @property
    def linearTexture(self) -> bool: ...
    @linearTexture.setter
    def linearTexture(self, value: bool) -> bool: ...
    @property
    def quality(self) -> float: ...
    @quality.setter
    def quality(self, value: float) -> float: ...


class NormalMapEncoding(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    XYZ : NormalMapEncoding # 0
    DXT5nm : NormalMapEncoding # 1


class ObjectChangeEvents(abc.ABC):

    class ObjectChangeEventsHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, stream: clr.Reference[ObjectChangeEventStream], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, stream: clr.Reference[ObjectChangeEventStream], result: IAsyncResult) -> None: ...
        def Invoke(self, stream: clr.Reference[ObjectChangeEventStream]) -> None: ...



class ObjectChangeEventStream(IDisposable):
    @property
    def isCreated(self) -> bool: ...
    @property
    def length(self) -> int: ...
    def Clone(self, allocator: Allocator) -> ObjectChangeEventStream: ...
    def Dispose(self) -> None: ...
    def GetChangeAssetObjectPropertiesEvent(self, eventIdx: int, data: clr.Reference[ChangeAssetObjectPropertiesEventArgs]) -> None: ...
    def GetChangeChildrenOrderEvent(self, eventIdx: int, data: clr.Reference[ChangeChildrenOrderEventArgs]) -> None: ...
    def GetChangeGameObjectOrComponentPropertiesEvent(self, eventIdx: int, data: clr.Reference[ChangeGameObjectOrComponentPropertiesEventArgs]) -> None: ...
    def GetChangeGameObjectParentEvent(self, eventIdx: int, data: clr.Reference[ChangeGameObjectParentEventArgs]) -> None: ...
    def GetChangeGameObjectStructureEvent(self, eventIdx: int, data: clr.Reference[ChangeGameObjectStructureEventArgs]) -> None: ...
    def GetChangeGameObjectStructureHierarchyEvent(self, eventIdx: int, data: clr.Reference[ChangeGameObjectStructureHierarchyEventArgs]) -> None: ...
    def GetChangeSceneEvent(self, eventIdx: int, data: clr.Reference[ChangeSceneEventArgs]) -> None: ...
    def GetCreateAssetObjectEvent(self, eventIdx: int, data: clr.Reference[CreateAssetObjectEventArgs]) -> None: ...
    def GetCreateGameObjectHierarchyEvent(self, eventIdx: int, data: clr.Reference[CreateGameObjectHierarchyEventArgs]) -> None: ...
    def GetDestroyAssetObjectEvent(self, eventIdx: int, data: clr.Reference[DestroyAssetObjectEventArgs]) -> None: ...
    def GetDestroyGameObjectHierarchyEvent(self, eventIdx: int, data: clr.Reference[DestroyGameObjectHierarchyEventArgs]) -> None: ...
    def GetEventType(self, eventIdx: int) -> ObjectChangeKind: ...
    def GetUpdatePrefabInstancesEvent(self, eventIdx: int, data: clr.Reference[UpdatePrefabInstancesEventArgs]) -> None: ...

    class Builder(IDisposable):
        def __init__(self, allocator: Allocator) -> None: ...
        @property
        def eventCount(self) -> int: ...
        def Dispose(self) -> None: ...
        def PushChangeAssetObjectPropertiesEvent(self, data: clr.Reference[ChangeAssetObjectPropertiesEventArgs]) -> None: ...
        def PushChangeGameObjectOrComponentPropertiesEvent(self, data: clr.Reference[ChangeGameObjectOrComponentPropertiesEventArgs]) -> None: ...
        def PushChangeGameObjectParentEvent(self, data: clr.Reference[ChangeGameObjectParentEventArgs]) -> None: ...
        def PushChangeGameObjectStructureEvent(self, data: clr.Reference[ChangeGameObjectStructureEventArgs]) -> None: ...
        def PushChangeGameObjectStructureHierarchyEvent(self, data: clr.Reference[ChangeGameObjectStructureHierarchyEventArgs]) -> None: ...
        def PushChangeSceneEvent(self, data: clr.Reference[ChangeSceneEventArgs]) -> None: ...
        def PushCreateAssetObjectEvent(self, data: clr.Reference[CreateAssetObjectEventArgs]) -> None: ...
        def PushCreateGameObjectHierarchyEvent(self, data: clr.Reference[CreateGameObjectHierarchyEventArgs]) -> None: ...
        def PushDestroyAssetObjectEvent(self, data: clr.Reference[DestroyAssetObjectEventArgs]) -> None: ...
        def PushDestroyGameObjectHierarchyEvent(self, data: clr.Reference[DestroyGameObjectHierarchyEventArgs]) -> None: ...
        def PushUpdatePrefabInstancesEvent(self, data: clr.Reference[UpdatePrefabInstancesEventArgs]) -> None: ...
        def ToStream(self, allocator: Allocator) -> ObjectChangeEventStream: ...



class ObjectChangeKind(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ObjectChangeKind # 0
    ChangeScene : ObjectChangeKind # 1
    CreateGameObjectHierarchy : ObjectChangeKind # 2
    ChangeGameObjectStructureHierarchy : ObjectChangeKind # 3
    ChangeGameObjectStructure : ObjectChangeKind # 4
    ChangeGameObjectParent : ObjectChangeKind # 5
    ChangeGameObjectOrComponentProperties : ObjectChangeKind # 6
    DestroyGameObjectHierarchy : ObjectChangeKind # 7
    CreateAssetObject : ObjectChangeKind # 8
    DestroyAssetObject : ObjectChangeKind # 9
    ChangeAssetObjectProperties : ObjectChangeKind # 10
    UpdatePrefabInstances : ObjectChangeKind # 11
    ChangeChildrenOrder : ObjectChangeKind # 12


class ObjectFactory(abc.ABC):
    @staticmethod
    def CreatePrimitive(type: PrimitiveType) -> GameObject: ...
    @staticmethod
    def PlaceGameObject(go: GameObject, parent: GameObject = ...) -> None: ...
    # Skipped AddComponent due to it being static, abstract and generic.

    AddComponent : AddComponent_MethodGroup
    class AddComponent_MethodGroup:
        def __getitem__(self, t:typing.Type[AddComponent_1_T1]) -> AddComponent_1[AddComponent_1_T1]: ...

        AddComponent_1_T1 = typing.TypeVar('AddComponent_1_T1')
        class AddComponent_1(typing.Generic[AddComponent_1_T1]):
            AddComponent_1_T = ObjectFactory.AddComponent_MethodGroup.AddComponent_1_T1
            def __call__(self, gameObject: GameObject) -> AddComponent_1_T:...

        def __call__(self, gameObject: GameObject, type: typing.Type[typing.Any]) -> Component:...

    # Skipped CreateGameObject due to it being static, abstract and generic.

    CreateGameObject : CreateGameObject_MethodGroup
    class CreateGameObject_MethodGroup:
        @typing.overload
        def __call__(self, name: str, types: Array_1[typing.Type[typing.Any]]) -> GameObject:...
        @typing.overload
        def __call__(self, scene: Scene, hideFlags: HideFlags, name: str, types: Array_1[typing.Type[typing.Any]]) -> GameObject:...

    # Skipped CreateInstance due to it being static, abstract and generic.

    CreateInstance : CreateInstance_MethodGroup
    class CreateInstance_MethodGroup:
        def __getitem__(self, t:typing.Type[CreateInstance_1_T1]) -> CreateInstance_1[CreateInstance_1_T1]: ...

        CreateInstance_1_T1 = typing.TypeVar('CreateInstance_1_T1')
        class CreateInstance_1(typing.Generic[CreateInstance_1_T1]):
            CreateInstance_1_T = ObjectFactory.CreateInstance_MethodGroup.CreateInstance_1_T1
            def __call__(self) -> CreateInstance_1_T:...

        def __call__(self, type: typing.Type[typing.Any]) -> Object:...



class ObjectMatchMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoMatchingPerformed : ObjectMatchMode # 0
    ByName : ObjectMatchMode # 1
    ByHierarchy : ObjectMatchMode # 2


class ObjectNames:
    def __init__(self) -> None: ...
    @staticmethod
    def GetClassName(obj: Object) -> str: ...
    @staticmethod
    def GetDragAndDropTitle(obj: Object) -> str: ...
    @staticmethod
    def GetPropertyEditorTitle(obj: Object) -> str: ...
    @staticmethod
    def GetUniqueName(existingNames: Array_1[str], name: str) -> str: ...
    @staticmethod
    def MangleVariableName(name: str) -> str: ...
    @staticmethod
    def NicifyVariableName(name: str) -> str: ...
    @staticmethod
    def SetNameSmart(obj: Object, name: str) -> None: ...
    # Skipped GetInspectorTitle due to it being static, abstract and generic.

    GetInspectorTitle : GetInspectorTitle_MethodGroup
    class GetInspectorTitle_MethodGroup:
        @typing.overload
        def __call__(self, obj: Object) -> str:...
        @typing.overload
        def __call__(self, obj: Object, multiObjectEditing: bool) -> str:...



class ObjectPreview:
    def __init__(self) -> None: ...
    @property
    def target(self) -> Object: ...
    def Cleanup(self) -> None: ...
    def DrawPreview(self, previewArea: Rect) -> None: ...
    def GetInfoString(self) -> str: ...
    def GetPreviewTitle(self) -> GUIContent: ...
    def HasPreviewGUI(self) -> bool: ...
    def Initialize(self, targets: Array_1[Object]) -> None: ...
    def MoveNextTarget(self) -> bool: ...
    def OnInteractivePreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def OnPreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def OnPreviewSettings(self) -> None: ...
    def ReloadPreviewInstances(self) -> None: ...
    def ResetTarget(self) -> None: ...


class ObjectReferenceKeyframe:
    time : float
    value : Object


class PackageInfo:
    iconURL : str
    jsonInfo : str
    packagePath : str


class PauseState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Paused : PauseState # 0
    Unpaused : PauseState # 1


class PhysicsDebugWindow(EditorWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    @staticmethod
    def ShowWindow() -> PhysicsDebugWindow: ...


class PhysicsVisualizationSettings(abc.ABC):
    @classmethod
    @property
    def articulationBodyColor(cls) -> Color: ...
    @classmethod
    @articulationBodyColor.setter
    def articulationBodyColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def baseAlpha(cls) -> float: ...
    @classmethod
    @baseAlpha.setter
    def baseAlpha(cls, value: float) -> float: ...
    @classmethod
    @property
    def centerOfMassUseScreenSize(cls) -> bool: ...
    @classmethod
    @centerOfMassUseScreenSize.setter
    def centerOfMassUseScreenSize(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def colorVariance(cls) -> float: ...
    @classmethod
    @colorVariance.setter
    def colorVariance(cls, value: float) -> float: ...
    @classmethod
    @property
    def contactColor(cls) -> Color: ...
    @classmethod
    @contactColor.setter
    def contactColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def contactImpulseColor(cls) -> Color: ...
    @classmethod
    @contactImpulseColor.setter
    def contactImpulseColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def contactSeparationColor(cls) -> Color: ...
    @classmethod
    @contactSeparationColor.setter
    def contactSeparationColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def devOptions(cls) -> bool: ...
    @classmethod
    @devOptions.setter
    def devOptions(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def dirtyCount(cls) -> int: ...
    @classmethod
    @property
    def dotAlpha(cls) -> float: ...
    @classmethod
    @dotAlpha.setter
    def dotAlpha(cls, value: float) -> float: ...
    @classmethod
    @property
    def enableMouseSelect(cls) -> bool: ...
    @classmethod
    @enableMouseSelect.setter
    def enableMouseSelect(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def filterWorkflow(cls) -> PhysicsVisualizationSettings.FilterWorkflow: ...
    @classmethod
    @filterWorkflow.setter
    def filterWorkflow(cls, value: PhysicsVisualizationSettings.FilterWorkflow) -> PhysicsVisualizationSettings.FilterWorkflow: ...
    @classmethod
    @property
    def forceDot(cls) -> bool: ...
    @classmethod
    @forceDot.setter
    def forceDot(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def forceOverdraw(cls) -> bool: ...
    @classmethod
    @forceOverdraw.setter
    def forceOverdraw(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def inertiaTensorScale(cls) -> float: ...
    @classmethod
    @inertiaTensorScale.setter
    def inertiaTensorScale(cls, value: float) -> float: ...
    @classmethod
    @property
    def kinematicColor(cls) -> Color: ...
    @classmethod
    @kinematicColor.setter
    def kinematicColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def maxNumberOfQueries(cls) -> int: ...
    @classmethod
    @maxNumberOfQueries.setter
    def maxNumberOfQueries(cls, value: int) -> int: ...
    @classmethod
    @property
    def queryColor(cls) -> Color: ...
    @classmethod
    @queryColor.setter
    def queryColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def rigidbodyColor(cls) -> Color: ...
    @classmethod
    @rigidbodyColor.setter
    def rigidbodyColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def showAllContacts(cls) -> bool: ...
    @classmethod
    @showAllContacts.setter
    def showAllContacts(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showCollisionGeometry(cls) -> bool: ...
    @classmethod
    @showCollisionGeometry.setter
    def showCollisionGeometry(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showContactImpulse(cls) -> bool: ...
    @classmethod
    @showContactImpulse.setter
    def showContactImpulse(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showContacts(cls) -> bool: ...
    @classmethod
    @showContacts.setter
    def showContacts(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showContactSeparation(cls) -> bool: ...
    @classmethod
    @showContactSeparation.setter
    def showContactSeparation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def sleepingBodyColor(cls) -> Color: ...
    @classmethod
    @sleepingBodyColor.setter
    def sleepingBodyColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def staticColor(cls) -> Color: ...
    @classmethod
    @staticColor.setter
    def staticColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def terrainTilesMax(cls) -> int: ...
    @classmethod
    @terrainTilesMax.setter
    def terrainTilesMax(cls, value: int) -> int: ...
    @classmethod
    @property
    def triggerColor(cls) -> Color: ...
    @classmethod
    @triggerColor.setter
    def triggerColor(cls, value: Color) -> Color: ...
    @classmethod
    @property
    def useContactFiltering(cls) -> bool: ...
    @classmethod
    @useContactFiltering.setter
    def useContactFiltering(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useSceneCam(cls) -> bool: ...
    @classmethod
    @useSceneCam.setter
    def useSceneCam(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useVariedContactColors(cls) -> bool: ...
    @classmethod
    @useVariedContactColors.setter
    def useVariedContactColors(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def viewDistance(cls) -> float: ...
    @classmethod
    @viewDistance.setter
    def viewDistance(cls, value: float) -> float: ...
    @staticmethod
    def ClearMouseHighlight() -> None: ...
    @staticmethod
    def DeinitDebugDraw() -> None: ...
    @staticmethod
    def GetQueryFilterState(filter: PhysicsVisualizationSettings.QueryFilter) -> bool: ...
    @staticmethod
    def GetShowArticulationBodies() -> bool: ...
    @staticmethod
    def GetShowUnitySceneMask() -> int: ...
    @staticmethod
    def HasMouseHighlight() -> bool: ...
    @staticmethod
    def InitDebugDraw() -> None: ...
    @staticmethod
    def PickClosestGameObject(cam: Camera, layers: int, position: Vector2, ignore: Array_1[GameObject], filter: Array_1[GameObject], materialIndex: clr.Reference[int]) -> GameObject: ...
    @staticmethod
    def Reset() -> None: ...
    @staticmethod
    def SetQueryFilterState(filter: PhysicsVisualizationSettings.QueryFilter, value: bool) -> None: ...
    @staticmethod
    def SetShowArticulationBodies(show: bool) -> None: ...
    @staticmethod
    def SetShowUnitySceneMask(mask: int) -> None: ...
    @staticmethod
    def UpdateMouseHighlight(screenPos: Vector2) -> None: ...
    # Skipped GetShowBoxColliders due to it being static, abstract and generic.

    GetShowBoxColliders : GetShowBoxColliders_MethodGroup
    class GetShowBoxColliders_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowCapsuleColliders due to it being static, abstract and generic.

    GetShowCapsuleColliders : GetShowCapsuleColliders_MethodGroup
    class GetShowCapsuleColliders_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowCollisionLayer due to it being static, abstract and generic.

    GetShowCollisionLayer : GetShowCollisionLayer_MethodGroup
    class GetShowCollisionLayer_MethodGroup:
        @typing.overload
        def __call__(self, layer: int) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, layer: int) -> bool:...

    # Skipped GetShowCollisionLayerMask due to it being static, abstract and generic.

    GetShowCollisionLayerMask : GetShowCollisionLayerMask_MethodGroup
    class GetShowCollisionLayerMask_MethodGroup:
        @typing.overload
        def __call__(self) -> int:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> int:...

    # Skipped GetShowKinematicBodies due to it being static, abstract and generic.

    GetShowKinematicBodies : GetShowKinematicBodies_MethodGroup
    class GetShowKinematicBodies_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowMeshColliders due to it being static, abstract and generic.

    GetShowMeshColliders : GetShowMeshColliders_MethodGroup
    class GetShowMeshColliders_MethodGroup:
        @typing.overload
        def __call__(self, colliderType: PhysicsVisualizationSettings.MeshColliderType) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, colliderType: PhysicsVisualizationSettings.MeshColliderType) -> bool:...

    # Skipped GetShowPhysicsSceneMask due to it being static, abstract and generic.

    GetShowPhysicsSceneMask : GetShowPhysicsSceneMask_MethodGroup
    class GetShowPhysicsSceneMask_MethodGroup:
        @typing.overload
        def __call__(self) -> int:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> int:...

    # Skipped GetShowRigidbodies due to it being static, abstract and generic.

    GetShowRigidbodies : GetShowRigidbodies_MethodGroup
    class GetShowRigidbodies_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowSleepingBodies due to it being static, abstract and generic.

    GetShowSleepingBodies : GetShowSleepingBodies_MethodGroup
    class GetShowSleepingBodies_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowSphereColliders due to it being static, abstract and generic.

    GetShowSphereColliders : GetShowSphereColliders_MethodGroup
    class GetShowSphereColliders_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowStaticColliders due to it being static, abstract and generic.

    GetShowStaticColliders : GetShowStaticColliders_MethodGroup
    class GetShowStaticColliders_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkFlow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowTerrainColliders due to it being static, abstract and generic.

    GetShowTerrainColliders : GetShowTerrainColliders_MethodGroup
    class GetShowTerrainColliders_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped GetShowTriggers due to it being static, abstract and generic.

    GetShowTriggers : GetShowTriggers_MethodGroup
    class GetShowTriggers_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow) -> bool:...

    # Skipped SetShowBoxColliders due to it being static, abstract and generic.

    SetShowBoxColliders : SetShowBoxColliders_MethodGroup
    class SetShowBoxColliders_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowCapsuleColliders due to it being static, abstract and generic.

    SetShowCapsuleColliders : SetShowCapsuleColliders_MethodGroup
    class SetShowCapsuleColliders_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowCollisionLayer due to it being static, abstract and generic.

    SetShowCollisionLayer : SetShowCollisionLayer_MethodGroup
    class SetShowCollisionLayer_MethodGroup:
        @typing.overload
        def __call__(self, layer: int, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, layer: int, show: bool) -> None:...

    # Skipped SetShowCollisionLayerMask due to it being static, abstract and generic.

    SetShowCollisionLayerMask : SetShowCollisionLayerMask_MethodGroup
    class SetShowCollisionLayerMask_MethodGroup:
        @typing.overload
        def __call__(self, mask: int) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, mask: int) -> None:...

    # Skipped SetShowForAllFilters due to it being static, abstract and generic.

    SetShowForAllFilters : SetShowForAllFilters_MethodGroup
    class SetShowForAllFilters_MethodGroup:
        @typing.overload
        def __call__(self, selected: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, selected: bool) -> None:...

    # Skipped SetShowKinematicBodies due to it being static, abstract and generic.

    SetShowKinematicBodies : SetShowKinematicBodies_MethodGroup
    class SetShowKinematicBodies_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowMeshColliders due to it being static, abstract and generic.

    SetShowMeshColliders : SetShowMeshColliders_MethodGroup
    class SetShowMeshColliders_MethodGroup:
        @typing.overload
        def __call__(self, colliderType: PhysicsVisualizationSettings.MeshColliderType, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, colliderType: PhysicsVisualizationSettings.MeshColliderType, show: bool) -> None:...

    # Skipped SetShowPhysicsSceneMask due to it being static, abstract and generic.

    SetShowPhysicsSceneMask : SetShowPhysicsSceneMask_MethodGroup
    class SetShowPhysicsSceneMask_MethodGroup:
        @typing.overload
        def __call__(self, mask: int) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, mask: int) -> None:...

    # Skipped SetShowRigidbodies due to it being static, abstract and generic.

    SetShowRigidbodies : SetShowRigidbodies_MethodGroup
    class SetShowRigidbodies_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowSleepingBodies due to it being static, abstract and generic.

    SetShowSleepingBodies : SetShowSleepingBodies_MethodGroup
    class SetShowSleepingBodies_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowSphereColliders due to it being static, abstract and generic.

    SetShowSphereColliders : SetShowSphereColliders_MethodGroup
    class SetShowSphereColliders_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowStaticColliders due to it being static, abstract and generic.

    SetShowStaticColliders : SetShowStaticColliders_MethodGroup
    class SetShowStaticColliders_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowTerrainColliders due to it being static, abstract and generic.

    SetShowTerrainColliders : SetShowTerrainColliders_MethodGroup
    class SetShowTerrainColliders_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...

    # Skipped SetShowTriggers due to it being static, abstract and generic.

    SetShowTriggers : SetShowTriggers_MethodGroup
    class SetShowTriggers_MethodGroup:
        @typing.overload
        def __call__(self, show: bool) -> None:...
        @typing.overload
        def __call__(self, filterWorkflow: PhysicsVisualizationSettings.FilterWorkflow, show: bool) -> None:...


    class FilterWorkflow(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        HideSelectedItems : PhysicsVisualizationSettings.FilterWorkflow # 0
        ShowSelectedItems : PhysicsVisualizationSettings.FilterWorkflow # 1


    class MeshColliderType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Convex : PhysicsVisualizationSettings.MeshColliderType # 0
        NonConvex : PhysicsVisualizationSettings.MeshColliderType # 1


    class QueryFilter(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : PhysicsVisualizationSettings.QueryFilter # 0
        Box : PhysicsVisualizationSettings.QueryFilter # 1
        Capsule : PhysicsVisualizationSettings.QueryFilter # 2
        Cast : PhysicsVisualizationSettings.QueryFilter # 4
        Check : PhysicsVisualizationSettings.QueryFilter # 8
        Overlap : PhysicsVisualizationSettings.QueryFilter # 16
        Ray : PhysicsVisualizationSettings.QueryFilter # 32
        ShowQueries : PhysicsVisualizationSettings.QueryFilter # 64
        Sphere : PhysicsVisualizationSettings.QueryFilter # 128
        All : PhysicsVisualizationSettings.QueryFilter # -1



class PickingIncludeExcludeList(IDisposable):
    def __init__(self, includeRendererInstanceIDs: List_1[int], excludeRendererInstanceIDs: List_1[int], includeEntityIndices: List_1[int], excludeEntityIndices: List_1[int], allocator: Allocator = ...) -> None: ...
    @property
    def ExcludeEntities(self) -> NativeArray_1[int]: ...
    @property
    def ExcludeRenderers(self) -> NativeArray_1[int]: ...
    @property
    def IncludeEntities(self) -> NativeArray_1[int]: ...
    @property
    def IncludeRenderers(self) -> NativeArray_1[int]: ...
    def Dispose(self) -> None: ...


class PivotMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Center : PivotMode # 0
    Pivot : PivotMode # 1


class PivotRotation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Local : PivotRotation # 0
    Global : PivotRotation # 1


class PlatformIcon:
    @property
    def height(self) -> int: ...
    @height.setter
    def height(self, value: int) -> int: ...
    @property
    def kind(self) -> PlatformIconKind: ...
    @kind.setter
    def kind(self, value: PlatformIconKind) -> PlatformIconKind: ...
    @property
    def layerCount(self) -> int: ...
    @layerCount.setter
    def layerCount(self, value: int) -> int: ...
    @property
    def maxLayerCount(self) -> int: ...
    @maxLayerCount.setter
    def maxLayerCount(self, value: int) -> int: ...
    @property
    def minLayerCount(self) -> int: ...
    @minLayerCount.setter
    def minLayerCount(self, value: int) -> int: ...
    @property
    def width(self) -> int: ...
    @width.setter
    def width(self, value: int) -> int: ...
    def GetTexture(self, layer: int = ...) -> Texture2D: ...
    def GetTextures(self) -> Array_1[Texture2D]: ...
    def SetTexture(self, texture: Texture2D, layer: int = ...) -> None: ...
    def SetTextures(self, textures: Array_1[Texture2D]) -> None: ...
    def ToString(self) -> str: ...


class PlatformIconKind:
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class PlayerConnectionInitiateMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : PlayerConnectionInitiateMode # 0
    PlayerConnectsToHost : PlayerConnectionInitiateMode # 1
    PlayerListens : PlayerConnectionInitiateMode # 2


class PlayerSettings(Object):
    @classmethod
    @property
    def accelerometerFrequency(cls) -> int: ...
    @classmethod
    @accelerometerFrequency.setter
    def accelerometerFrequency(cls, value: int) -> int: ...
    @classmethod
    @property
    def actionOnDotNetUnhandledException(cls) -> ActionOnDotNetUnhandledException: ...
    @classmethod
    @actionOnDotNetUnhandledException.setter
    def actionOnDotNetUnhandledException(cls, value: ActionOnDotNetUnhandledException) -> ActionOnDotNetUnhandledException: ...
    @classmethod
    @property
    def advancedLicense(cls) -> bool: ...
    @classmethod
    @property
    def allowedAutorotateToLandscapeLeft(cls) -> bool: ...
    @classmethod
    @allowedAutorotateToLandscapeLeft.setter
    def allowedAutorotateToLandscapeLeft(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def allowedAutorotateToLandscapeRight(cls) -> bool: ...
    @classmethod
    @allowedAutorotateToLandscapeRight.setter
    def allowedAutorotateToLandscapeRight(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def allowedAutorotateToPortrait(cls) -> bool: ...
    @classmethod
    @allowedAutorotateToPortrait.setter
    def allowedAutorotateToPortrait(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def allowedAutorotateToPortraitUpsideDown(cls) -> bool: ...
    @classmethod
    @allowedAutorotateToPortraitUpsideDown.setter
    def allowedAutorotateToPortraitUpsideDown(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def allowFullscreenSwitch(cls) -> bool: ...
    @classmethod
    @allowFullscreenSwitch.setter
    def allowFullscreenSwitch(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def allowHDRDisplaySupport(cls) -> bool: ...
    @classmethod
    @allowHDRDisplaySupport.setter
    def allowHDRDisplaySupport(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def allowUnsafeCode(cls) -> bool: ...
    @classmethod
    @allowUnsafeCode.setter
    def allowUnsafeCode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def alwaysDisplayWatermark(cls) -> bool: ...
    @classmethod
    @alwaysDisplayWatermark.setter
    def alwaysDisplayWatermark(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def aotOptions(cls) -> str: ...
    @classmethod
    @aotOptions.setter
    def aotOptions(cls, value: str) -> str: ...
    @classmethod
    @property
    def apiCompatibilityLevel(cls) -> ApiCompatibilityLevel: ...
    @classmethod
    @apiCompatibilityLevel.setter
    def apiCompatibilityLevel(cls, value: ApiCompatibilityLevel) -> ApiCompatibilityLevel: ...
    @classmethod
    @property
    def applicationIdentifier(cls) -> str: ...
    @classmethod
    @applicationIdentifier.setter
    def applicationIdentifier(cls, value: str) -> str: ...
    @classmethod
    @property
    def assemblyVersionValidation(cls) -> bool: ...
    @classmethod
    @assemblyVersionValidation.setter
    def assemblyVersionValidation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def bakeCollisionMeshes(cls) -> bool: ...
    @classmethod
    @bakeCollisionMeshes.setter
    def bakeCollisionMeshes(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def bundleIdentifier(cls) -> str: ...
    @classmethod
    @bundleIdentifier.setter
    def bundleIdentifier(cls, value: str) -> str: ...
    @classmethod
    @property
    def bundleVersion(cls) -> str: ...
    @classmethod
    @bundleVersion.setter
    def bundleVersion(cls, value: str) -> str: ...
    @classmethod
    @property
    def captureSingleScreen(cls) -> bool: ...
    @classmethod
    @captureSingleScreen.setter
    def captureSingleScreen(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def cloudProjectId(cls) -> str: ...
    @classmethod
    @property
    def colorSpace(cls) -> ColorSpace: ...
    @classmethod
    @colorSpace.setter
    def colorSpace(cls, value: ColorSpace) -> ColorSpace: ...
    @classmethod
    @property
    def companyName(cls) -> str: ...
    @classmethod
    @companyName.setter
    def companyName(cls, value: str) -> str: ...
    @classmethod
    @property
    def cursorHotspot(cls) -> Vector2: ...
    @classmethod
    @cursorHotspot.setter
    def cursorHotspot(cls, value: Vector2) -> Vector2: ...
    @classmethod
    @property
    def d3d11FullscreenMode(cls) -> D3D11FullscreenMode: ...
    @classmethod
    @d3d11FullscreenMode.setter
    def d3d11FullscreenMode(cls, value: D3D11FullscreenMode) -> D3D11FullscreenMode: ...
    @classmethod
    @property
    def d3d9FullscreenMode(cls) -> D3D9FullscreenMode: ...
    @classmethod
    @d3d9FullscreenMode.setter
    def d3d9FullscreenMode(cls, value: D3D9FullscreenMode) -> D3D9FullscreenMode: ...
    @classmethod
    @property
    def D3DHDRBitDepth(cls) -> D3DHDRDisplayBitDepth: ...
    @classmethod
    @D3DHDRBitDepth.setter
    def D3DHDRBitDepth(cls, value: D3DHDRDisplayBitDepth) -> D3DHDRDisplayBitDepth: ...
    @classmethod
    @property
    def dedicatedServerOptimizations(cls) -> bool: ...
    @classmethod
    @dedicatedServerOptimizations.setter
    def dedicatedServerOptimizations(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def defaultCursor(cls) -> Texture2D: ...
    @classmethod
    @defaultCursor.setter
    def defaultCursor(cls, value: Texture2D) -> Texture2D: ...
    @classmethod
    @property
    def defaultInterfaceOrientation(cls) -> UIOrientation: ...
    @classmethod
    @defaultInterfaceOrientation.setter
    def defaultInterfaceOrientation(cls, value: UIOrientation) -> UIOrientation: ...
    @classmethod
    @property
    def defaultIsFullScreen(cls) -> bool: ...
    @classmethod
    @defaultIsFullScreen.setter
    def defaultIsFullScreen(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def defaultIsNativeResolution(cls) -> bool: ...
    @classmethod
    @defaultIsNativeResolution.setter
    def defaultIsNativeResolution(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def defaultScreenHeight(cls) -> int: ...
    @classmethod
    @defaultScreenHeight.setter
    def defaultScreenHeight(cls, value: int) -> int: ...
    @classmethod
    @property
    def defaultScreenWidth(cls) -> int: ...
    @classmethod
    @defaultScreenWidth.setter
    def defaultScreenWidth(cls, value: int) -> int: ...
    @classmethod
    @property
    def defaultWebScreenHeight(cls) -> int: ...
    @classmethod
    @defaultWebScreenHeight.setter
    def defaultWebScreenHeight(cls, value: int) -> int: ...
    @classmethod
    @property
    def defaultWebScreenWidth(cls) -> int: ...
    @classmethod
    @defaultWebScreenWidth.setter
    def defaultWebScreenWidth(cls, value: int) -> int: ...
    @classmethod
    @property
    def displayResolutionDialog(cls) -> ResolutionDialogSetting: ...
    @classmethod
    @displayResolutionDialog.setter
    def displayResolutionDialog(cls, value: ResolutionDialogSetting) -> ResolutionDialogSetting: ...
    @classmethod
    @property
    def enable360StereoCapture(cls) -> bool: ...
    @classmethod
    @enable360StereoCapture.setter
    def enable360StereoCapture(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableCrashReportAPI(cls) -> bool: ...
    @classmethod
    @enableCrashReportAPI.setter
    def enableCrashReportAPI(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableFrameTimingStats(cls) -> bool: ...
    @classmethod
    @enableFrameTimingStats.setter
    def enableFrameTimingStats(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableInternalProfiler(cls) -> bool: ...
    @classmethod
    @enableInternalProfiler.setter
    def enableInternalProfiler(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableMetalAPIValidation(cls) -> bool: ...
    @classmethod
    @enableMetalAPIValidation.setter
    def enableMetalAPIValidation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableOpenGLProfilerGPURecorders(cls) -> bool: ...
    @classmethod
    @enableOpenGLProfilerGPURecorders.setter
    def enableOpenGLProfilerGPURecorders(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def firstStreamedLevelWithResources(cls) -> int: ...
    @classmethod
    @firstStreamedLevelWithResources.setter
    def firstStreamedLevelWithResources(cls, value: int) -> int: ...
    @classmethod
    @property
    def forceSingleInstance(cls) -> bool: ...
    @classmethod
    @forceSingleInstance.setter
    def forceSingleInstance(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def fullScreenMode(cls) -> FullScreenMode: ...
    @classmethod
    @fullScreenMode.setter
    def fullScreenMode(cls, value: FullScreenMode) -> FullScreenMode: ...
    @classmethod
    @property
    def gcIncremental(cls) -> bool: ...
    @classmethod
    @gcIncremental.setter
    def gcIncremental(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def gpuSkinning(cls) -> bool: ...
    @classmethod
    @gpuSkinning.setter
    def gpuSkinning(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def graphicsJobMode(cls) -> GraphicsJobMode: ...
    @classmethod
    @graphicsJobMode.setter
    def graphicsJobMode(cls, value: GraphicsJobMode) -> GraphicsJobMode: ...
    @classmethod
    @property
    def graphicsJobs(cls) -> bool: ...
    @classmethod
    @graphicsJobs.setter
    def graphicsJobs(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def hdrBitDepth(cls) -> HDRDisplayBitDepth: ...
    @classmethod
    @hdrBitDepth.setter
    def hdrBitDepth(cls, value: HDRDisplayBitDepth) -> HDRDisplayBitDepth: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def insecureHttpOption(cls) -> InsecureHttpOption: ...
    @classmethod
    @insecureHttpOption.setter
    def insecureHttpOption(cls, value: InsecureHttpOption) -> InsecureHttpOption: ...
    @classmethod
    @property
    def iPhoneBundleIdentifier(cls) -> str: ...
    @classmethod
    @iPhoneBundleIdentifier.setter
    def iPhoneBundleIdentifier(cls, value: str) -> str: ...
    @classmethod
    @property
    def keyaliasPass(cls) -> str: ...
    @classmethod
    @keyaliasPass.setter
    def keyaliasPass(cls, value: str) -> str: ...
    @classmethod
    @property
    def keystorePass(cls) -> str: ...
    @classmethod
    @keystorePass.setter
    def keystorePass(cls, value: str) -> str: ...
    @classmethod
    @property
    def legacyClampBlendShapeWeights(cls) -> bool: ...
    @classmethod
    @legacyClampBlendShapeWeights.setter
    def legacyClampBlendShapeWeights(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def locationUsageDescription(cls) -> str: ...
    @classmethod
    @locationUsageDescription.setter
    def locationUsageDescription(cls, value: str) -> str: ...
    @classmethod
    @property
    def logObjCUncaughtExceptions(cls) -> bool: ...
    @classmethod
    @logObjCUncaughtExceptions.setter
    def logObjCUncaughtExceptions(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def macFullscreenMode(cls) -> MacFullscreenMode: ...
    @classmethod
    @macFullscreenMode.setter
    def macFullscreenMode(cls, value: MacFullscreenMode) -> MacFullscreenMode: ...
    @classmethod
    @property
    def macRetinaSupport(cls) -> bool: ...
    @classmethod
    @macRetinaSupport.setter
    def macRetinaSupport(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def mipStripping(cls) -> bool: ...
    @classmethod
    @mipStripping.setter
    def mipStripping(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def mobileRenderingPath(cls) -> RenderingPath: ...
    @classmethod
    @mobileRenderingPath.setter
    def mobileRenderingPath(cls, value: RenderingPath) -> RenderingPath: ...
    @classmethod
    @property
    def MTRendering(cls) -> bool: ...
    @classmethod
    @MTRendering.setter
    def MTRendering(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def muteOtherAudioSources(cls) -> bool: ...
    @classmethod
    @muteOtherAudioSources.setter
    def muteOtherAudioSources(cls, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def openGLRequireES31(cls) -> bool: ...
    @classmethod
    @openGLRequireES31.setter
    def openGLRequireES31(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def openGLRequireES31AEP(cls) -> bool: ...
    @classmethod
    @openGLRequireES31AEP.setter
    def openGLRequireES31AEP(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def openGLRequireES32(cls) -> bool: ...
    @classmethod
    @openGLRequireES32.setter
    def openGLRequireES32(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def preserveFramebufferAlpha(cls) -> bool: ...
    @classmethod
    @preserveFramebufferAlpha.setter
    def preserveFramebufferAlpha(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def productGUID(cls) -> Guid: ...
    @classmethod
    @property
    def productName(cls) -> str: ...
    @classmethod
    @productName.setter
    def productName(cls, value: str) -> str: ...
    @classmethod
    @property
    def protectGraphicsMemory(cls) -> bool: ...
    @classmethod
    @protectGraphicsMemory.setter
    def protectGraphicsMemory(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def renderingPath(cls) -> RenderingPath: ...
    @classmethod
    @renderingPath.setter
    def renderingPath(cls, value: RenderingPath) -> RenderingPath: ...
    @classmethod
    @property
    def resetResolutionOnWindowResize(cls) -> bool: ...
    @classmethod
    @resetResolutionOnWindowResize.setter
    def resetResolutionOnWindowResize(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def resizableWindow(cls) -> bool: ...
    @classmethod
    @resizableWindow.setter
    def resizableWindow(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def resolutionDialogBanner(cls) -> Texture2D: ...
    @classmethod
    @resolutionDialogBanner.setter
    def resolutionDialogBanner(cls, value: Texture2D) -> Texture2D: ...
    @classmethod
    @property
    def runInBackground(cls) -> bool: ...
    @classmethod
    @runInBackground.setter
    def runInBackground(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def scriptingRuntimeVersion(cls) -> ScriptingRuntimeVersion: ...
    @classmethod
    @scriptingRuntimeVersion.setter
    def scriptingRuntimeVersion(cls, value: ScriptingRuntimeVersion) -> ScriptingRuntimeVersion: ...
    @classmethod
    @property
    def showUnitySplashScreen(cls) -> bool: ...
    @classmethod
    @showUnitySplashScreen.setter
    def showUnitySplashScreen(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def singlePassStereoRendering(cls) -> bool: ...
    @classmethod
    @singlePassStereoRendering.setter
    def singlePassStereoRendering(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def splashScreenStyle(cls) -> SplashScreenStyle: ...
    @classmethod
    @splashScreenStyle.setter
    def splashScreenStyle(cls, value: SplashScreenStyle) -> SplashScreenStyle: ...
    @classmethod
    @property
    def spriteBatchVertexThreshold(cls) -> int: ...
    @classmethod
    @spriteBatchVertexThreshold.setter
    def spriteBatchVertexThreshold(cls, value: int) -> int: ...
    @classmethod
    @property
    def statusBarHidden(cls) -> bool: ...
    @classmethod
    @statusBarHidden.setter
    def statusBarHidden(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def stereoRenderingPath(cls) -> StereoRenderingPath: ...
    @classmethod
    @stereoRenderingPath.setter
    def stereoRenderingPath(cls, value: StereoRenderingPath) -> StereoRenderingPath: ...
    @classmethod
    @property
    def stereoscopic3D(cls) -> bool: ...
    @classmethod
    @stereoscopic3D.setter
    def stereoscopic3D(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def strictShaderVariantMatching(cls) -> bool: ...
    @classmethod
    @strictShaderVariantMatching.setter
    def strictShaderVariantMatching(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def stripEngineCode(cls) -> bool: ...
    @classmethod
    @stripEngineCode.setter
    def stripEngineCode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def strippingLevel(cls) -> StrippingLevel: ...
    @classmethod
    @strippingLevel.setter
    def strippingLevel(cls, value: StrippingLevel) -> StrippingLevel: ...
    @classmethod
    @property
    def stripUnusedMeshComponents(cls) -> bool: ...
    @classmethod
    @stripUnusedMeshComponents.setter
    def stripUnusedMeshComponents(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def suppressCommonWarnings(cls) -> bool: ...
    @classmethod
    @suppressCommonWarnings.setter
    def suppressCommonWarnings(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def targetGlesGraphics(cls) -> TargetGlesGraphics: ...
    @classmethod
    @targetGlesGraphics.setter
    def targetGlesGraphics(cls, value: TargetGlesGraphics) -> TargetGlesGraphics: ...
    @classmethod
    @property
    def targetIOSGraphics(cls) -> TargetIOSGraphics: ...
    @classmethod
    @targetIOSGraphics.setter
    def targetIOSGraphics(cls, value: TargetIOSGraphics) -> TargetIOSGraphics: ...
    @classmethod
    @property
    def tvOSBundleVersion(cls) -> str: ...
    @classmethod
    @tvOSBundleVersion.setter
    def tvOSBundleVersion(cls, value: str) -> str: ...
    @classmethod
    @property
    def use32BitDisplayBuffer(cls) -> bool: ...
    @classmethod
    @use32BitDisplayBuffer.setter
    def use32BitDisplayBuffer(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useAnimatedAutorotation(cls) -> bool: ...
    @classmethod
    @useAnimatedAutorotation.setter
    def useAnimatedAutorotation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useDirect3D11(cls) -> bool: ...
    @classmethod
    @useDirect3D11.setter
    def useDirect3D11(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useFlipModelSwapchain(cls) -> bool: ...
    @classmethod
    @useFlipModelSwapchain.setter
    def useFlipModelSwapchain(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useHDRDisplay(cls) -> bool: ...
    @classmethod
    @useHDRDisplay.setter
    def useHDRDisplay(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useMacAppStoreValidation(cls) -> bool: ...
    @classmethod
    @useMacAppStoreValidation.setter
    def useMacAppStoreValidation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def usePlayerLog(cls) -> bool: ...
    @classmethod
    @usePlayerLog.setter
    def usePlayerLog(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useReferenceAssemblies(cls) -> bool: ...
    @classmethod
    @useReferenceAssemblies.setter
    def useReferenceAssemblies(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def virtualRealitySplashScreen(cls) -> Texture2D: ...
    @classmethod
    @virtualRealitySplashScreen.setter
    def virtualRealitySplashScreen(cls, value: Texture2D) -> Texture2D: ...
    @classmethod
    @property
    def virtualRealitySupported(cls) -> bool: ...
    @classmethod
    @virtualRealitySupported.setter
    def virtualRealitySupported(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def visibleInBackground(cls) -> bool: ...
    @classmethod
    @visibleInBackground.setter
    def visibleInBackground(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def visionOSBundleVersion(cls) -> str: ...
    @classmethod
    @visionOSBundleVersion.setter
    def visionOSBundleVersion(cls, value: str) -> str: ...
    @classmethod
    @property
    def vulkanEnableLateAcquireNextImage(cls) -> bool: ...
    @classmethod
    @vulkanEnableLateAcquireNextImage.setter
    def vulkanEnableLateAcquireNextImage(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def vulkanEnablePreTransform(cls) -> bool: ...
    @classmethod
    @vulkanEnablePreTransform.setter
    def vulkanEnablePreTransform(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def vulkanEnableSetSRGBWrite(cls) -> bool: ...
    @classmethod
    @vulkanEnableSetSRGBWrite.setter
    def vulkanEnableSetSRGBWrite(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def vulkanNumSwapchainBuffers(cls) -> int: ...
    @classmethod
    @vulkanNumSwapchainBuffers.setter
    def vulkanNumSwapchainBuffers(cls, value: int) -> int: ...
    @classmethod
    @property
    def vulkanUseSWCommandBuffers(cls) -> bool: ...
    @classmethod
    @vulkanUseSWCommandBuffers.setter
    def vulkanUseSWCommandBuffers(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def windowsGamepadBackendHint(cls) -> WindowsGamepadBackendHint: ...
    @classmethod
    @windowsGamepadBackendHint.setter
    def windowsGamepadBackendHint(cls, value: WindowsGamepadBackendHint) -> WindowsGamepadBackendHint: ...
    @classmethod
    @property
    def xboxAdditionalTitleMemorySize(cls) -> int: ...
    @classmethod
    @xboxAdditionalTitleMemorySize.setter
    def xboxAdditionalTitleMemorySize(cls, value: int) -> int: ...
    @classmethod
    @property
    def xboxDeployKinectHeadOrientation(cls) -> bool: ...
    @classmethod
    @xboxDeployKinectHeadOrientation.setter
    def xboxDeployKinectHeadOrientation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def xboxDeployKinectHeadPosition(cls) -> bool: ...
    @classmethod
    @xboxDeployKinectHeadPosition.setter
    def xboxDeployKinectHeadPosition(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def xboxDeployKinectResources(cls) -> bool: ...
    @classmethod
    @property
    def xboxEnableAvatar(cls) -> bool: ...
    @classmethod
    @property
    def xboxEnableGuest(cls) -> bool: ...
    @classmethod
    @property
    def xboxEnableKinect(cls) -> bool: ...
    @classmethod
    @property
    def xboxEnableKinectAutoTracking(cls) -> bool: ...
    @classmethod
    @property
    def xboxEnableSpeech(cls) -> bool: ...
    @classmethod
    @property
    def xboxGenerateSpa(cls) -> bool: ...
    @classmethod
    @property
    def xboxImageXexFilePath(cls) -> str: ...
    @classmethod
    @property
    def xboxOneResolution(cls) -> int: ...
    @classmethod
    @property
    def xboxPIXTextureCapture(cls) -> bool: ...
    @classmethod
    @property
    def xboxSpaFilePath(cls) -> str: ...
    @classmethod
    @property
    def xboxSpeechDB(cls) -> int: ...
    @classmethod
    @property
    def xboxSplashScreen(cls) -> Texture2D: ...
    @classmethod
    @property
    def xboxTitleId(cls) -> str: ...
    @classmethod
    @xboxTitleId.setter
    def xboxTitleId(cls, value: str) -> str: ...
    @staticmethod
    def GetAdditionalCompilerArguments(buildTarget: NamedBuildTarget) -> Array_1[str]: ...
    @staticmethod
    def GetAdditionalCompilerArgumentsForGroup(targetGroup: BuildTargetGroup) -> Array_1[str]: ...
    @staticmethod
    def GetAdditionalIl2CppArgs() -> str: ...
    @staticmethod
    def GetDefaultShaderChunkCount() -> int: ...
    @staticmethod
    def GetDefaultShaderChunkSizeInMB() -> int: ...
    @staticmethod
    def GetGraphicsAPIs(platform: BuildTarget) -> Array_1[GraphicsDeviceType]: ...
    @staticmethod
    def GetIcons(buildTarget: NamedBuildTarget, kind: IconKind) -> Array_1[Texture2D]: ...
    @staticmethod
    def GetIconSizes(buildTarget: NamedBuildTarget, kind: IconKind) -> Array_1[int]: ...
    @staticmethod
    def GetIl2CppCodeGeneration(buildTarget: NamedBuildTarget) -> Il2CppCodeGeneration: ...
    @staticmethod
    def GetOverrideShaderChunkSettingsForPlatform(buildTarget: BuildTarget) -> bool: ...
    @staticmethod
    def GetPreloadedAssets() -> Array_1[Object]: ...
    @staticmethod
    def GetShaderChunkCountForPlatform(buildTarget: BuildTarget) -> int: ...
    @staticmethod
    def GetShaderChunkSizeInMBForPlatform(buildTarget: BuildTarget) -> int: ...
    @staticmethod
    def GetShaderPrecisionModel() -> ShaderPrecisionModel: ...
    @staticmethod
    def GetStackTraceLogType(logType: LogType) -> StackTraceLogType: ...
    @staticmethod
    def GetSupportedIconKinds(buildTarget: NamedBuildTarget) -> Array_1[PlatformIconKind]: ...
    @staticmethod
    def GetSupportedIconKindsForPlatform(platform: BuildTargetGroup) -> Array_1[PlatformIconKind]: ...
    @staticmethod
    def GetTemplateCustomValue(name: str) -> str: ...
    @staticmethod
    def GetUseDefaultGraphicsAPIs(platform: BuildTarget) -> bool: ...
    @staticmethod
    def GetVirtualRealitySupported(targetGroup: BuildTargetGroup) -> bool: ...
    @staticmethod
    def GetVirtualTexturingSupportEnabled() -> bool: ...
    @staticmethod
    def GetWsaHolographicRemotingEnabled() -> bool: ...
    @staticmethod
    def HasAspectRatio(aspectRatio: AspectRatio) -> bool: ...
    @staticmethod
    def SetAdditionalCompilerArguments(buildTarget: NamedBuildTarget, additionalCompilerArguments: Array_1[str]) -> None: ...
    @staticmethod
    def SetAdditionalCompilerArgumentsForGroup(targetGroup: BuildTargetGroup, additionalCompilerArguments: Array_1[str]) -> None: ...
    @staticmethod
    def SetAdditionalIl2CppArgs(additionalArgs: str) -> None: ...
    @staticmethod
    def SetAspectRatio(aspectRatio: AspectRatio, enable: bool) -> None: ...
    @staticmethod
    def SetDefaultShaderChunkCount(chunkCount: int) -> None: ...
    @staticmethod
    def SetDefaultShaderChunkSizeInMB(sizeInMegabytes: int) -> None: ...
    @staticmethod
    def SetGraphicsAPIs(platform: BuildTarget, apis: Array_1[GraphicsDeviceType]) -> None: ...
    @staticmethod
    def SetIcons(buildTarget: NamedBuildTarget, icons: Array_1[Texture2D], kind: IconKind) -> None: ...
    @staticmethod
    def SetIl2CppCodeGeneration(buildTarget: NamedBuildTarget, value: Il2CppCodeGeneration) -> None: ...
    @staticmethod
    def SetOverrideShaderChunkSettingsForPlatform(buildTarget: BuildTarget, value: bool) -> None: ...
    @staticmethod
    def SetPreloadedAssets(assets: Array_1[Object]) -> None: ...
    @staticmethod
    def SetShaderChunkCountForPlatform(buildTarget: BuildTarget, chunkCount: int) -> None: ...
    @staticmethod
    def SetShaderChunkSizeInMBForPlatform(buildTarget: BuildTarget, sizeInMegabytes: int) -> None: ...
    @staticmethod
    def SetShaderPrecisionModel(model: ShaderPrecisionModel) -> None: ...
    @staticmethod
    def SetStackTraceLogType(logType: LogType, stackTraceType: StackTraceLogType) -> None: ...
    @staticmethod
    def SetTemplateCustomValue(name: str, value: str) -> None: ...
    @staticmethod
    def SetUseDefaultGraphicsAPIs(platform: BuildTarget, automatic: bool) -> None: ...
    @staticmethod
    def SetVirtualRealitySupported(targetGroup: BuildTargetGroup, value: bool) -> None: ...
    @staticmethod
    def SetVirtualTexturingSupportEnabled(enabled: bool) -> None: ...
    @staticmethod
    def SetWsaHolographicRemotingEnabled(enabled: bool) -> None: ...
    # Skipped GetApiCompatibilityLevel due to it being static, abstract and generic.

    GetApiCompatibilityLevel : GetApiCompatibilityLevel_MethodGroup
    class GetApiCompatibilityLevel_MethodGroup:
        @typing.overload
        def __call__(self, buildTargetGroup: BuildTargetGroup) -> ApiCompatibilityLevel:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> ApiCompatibilityLevel:...

    # Skipped GetApplicationIdentifier due to it being static, abstract and generic.

    GetApplicationIdentifier : GetApplicationIdentifier_MethodGroup
    class GetApplicationIdentifier_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> str:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> str:...

    # Skipped GetArchitecture due to it being static, abstract and generic.

    GetArchitecture : GetArchitecture_MethodGroup
    class GetArchitecture_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> int:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> int:...

    # Skipped GetDefaultScriptingBackend due to it being static, abstract and generic.

    GetDefaultScriptingBackend : GetDefaultScriptingBackend_MethodGroup
    class GetDefaultScriptingBackend_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> ScriptingImplementation:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> ScriptingImplementation:...

    # Skipped GetIconsForTargetGroup due to it being static, abstract and generic.

    GetIconsForTargetGroup : GetIconsForTargetGroup_MethodGroup
    class GetIconsForTargetGroup_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup) -> Array_1[Texture2D]:...
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, kind: IconKind) -> Array_1[Texture2D]:...

    # Skipped GetIconSizesForTargetGroup due to it being static, abstract and generic.

    GetIconSizesForTargetGroup : GetIconSizesForTargetGroup_MethodGroup
    class GetIconSizesForTargetGroup_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup) -> Array_1[int]:...
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, kind: IconKind) -> Array_1[int]:...

    # Skipped GetIl2CppCompilerConfiguration due to it being static, abstract and generic.

    GetIl2CppCompilerConfiguration : GetIl2CppCompilerConfiguration_MethodGroup
    class GetIl2CppCompilerConfiguration_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> Il2CppCompilerConfiguration:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> Il2CppCompilerConfiguration:...

    # Skipped GetIncrementalIl2CppBuild due to it being static, abstract and generic.

    GetIncrementalIl2CppBuild : GetIncrementalIl2CppBuild_MethodGroup
    class GetIncrementalIl2CppBuild_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> bool:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> bool:...

    # Skipped GetManagedStrippingLevel due to it being static, abstract and generic.

    GetManagedStrippingLevel : GetManagedStrippingLevel_MethodGroup
    class GetManagedStrippingLevel_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> ManagedStrippingLevel:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> ManagedStrippingLevel:...

    # Skipped GetMobileMTRendering due to it being static, abstract and generic.

    GetMobileMTRendering : GetMobileMTRendering_MethodGroup
    class GetMobileMTRendering_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> bool:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> bool:...

    # Skipped GetNormalMapEncoding due to it being static, abstract and generic.

    GetNormalMapEncoding : GetNormalMapEncoding_MethodGroup
    class GetNormalMapEncoding_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup) -> NormalMapEncoding:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> NormalMapEncoding:...

    # Skipped GetPlatformIcons due to it being static, abstract and generic.

    GetPlatformIcons : GetPlatformIcons_MethodGroup
    class GetPlatformIcons_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, kind: PlatformIconKind) -> Array_1[PlatformIcon]:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, kind: PlatformIconKind) -> Array_1[PlatformIcon]:...

    # Skipped GetPropertyBool due to it being static, abstract and generic.

    GetPropertyBool : GetPropertyBool_MethodGroup
    class GetPropertyBool_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> bool:...
        @typing.overload
        def __call__(self, name: str, target: BuildTargetGroup) -> bool:...

    # Skipped GetPropertyInt due to it being static, abstract and generic.

    GetPropertyInt : GetPropertyInt_MethodGroup
    class GetPropertyInt_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> int:...
        @typing.overload
        def __call__(self, name: str, target: BuildTargetGroup) -> int:...

    # Skipped GetPropertyOptionalBool due to it being static, abstract and generic.

    GetPropertyOptionalBool : GetPropertyOptionalBool_MethodGroup
    class GetPropertyOptionalBool_MethodGroup:
        @typing.overload
        def __call__(self, name: str, value: clr.Reference[bool]) -> bool:...
        @typing.overload
        def __call__(self, name: str, value: clr.Reference[bool], target: BuildTargetGroup) -> bool:...

    # Skipped GetPropertyOptionalInt due to it being static, abstract and generic.

    GetPropertyOptionalInt : GetPropertyOptionalInt_MethodGroup
    class GetPropertyOptionalInt_MethodGroup:
        @typing.overload
        def __call__(self, name: str, value: clr.Reference[int]) -> bool:...
        @typing.overload
        def __call__(self, name: str, value: clr.Reference[int], target: BuildTargetGroup) -> bool:...

    # Skipped GetPropertyOptionalString due to it being static, abstract and generic.

    GetPropertyOptionalString : GetPropertyOptionalString_MethodGroup
    class GetPropertyOptionalString_MethodGroup:
        @typing.overload
        def __call__(self, name: str, value: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, name: str, value: clr.Reference[str], target: BuildTargetGroup) -> bool:...

    # Skipped GetPropertyString due to it being static, abstract and generic.

    GetPropertyString : GetPropertyString_MethodGroup
    class GetPropertyString_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> str:...
        @typing.overload
        def __call__(self, name: str, target: BuildTargetGroup) -> str:...

    # Skipped GetScriptingBackend due to it being static, abstract and generic.

    GetScriptingBackend : GetScriptingBackend_MethodGroup
    class GetScriptingBackend_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> ScriptingImplementation:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> ScriptingImplementation:...

    # Skipped GetScriptingDefineSymbols due to it being static, abstract and generic.

    GetScriptingDefineSymbols : GetScriptingDefineSymbols_MethodGroup
    class GetScriptingDefineSymbols_MethodGroup:
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget) -> str:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, defines: clr.Reference[Array_1[str]]) -> None:...

    # Skipped GetScriptingDefineSymbolsForGroup due to it being static, abstract and generic.

    GetScriptingDefineSymbolsForGroup : GetScriptingDefineSymbolsForGroup_MethodGroup
    class GetScriptingDefineSymbolsForGroup_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup) -> str:...
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, defines: clr.Reference[Array_1[str]]) -> None:...

    # Skipped SetApiCompatibilityLevel due to it being static, abstract and generic.

    SetApiCompatibilityLevel : SetApiCompatibilityLevel_MethodGroup
    class SetApiCompatibilityLevel_MethodGroup:
        @typing.overload
        def __call__(self, buildTargetGroup: BuildTargetGroup, value: ApiCompatibilityLevel) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, value: ApiCompatibilityLevel) -> None:...

    # Skipped SetApplicationIdentifier due to it being static, abstract and generic.

    SetApplicationIdentifier : SetApplicationIdentifier_MethodGroup
    class SetApplicationIdentifier_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, identifier: str) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, identifier: str) -> None:...

    # Skipped SetArchitecture due to it being static, abstract and generic.

    SetArchitecture : SetArchitecture_MethodGroup
    class SetArchitecture_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, architecture: int) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, architecture: int) -> None:...

    # Skipped SetIconsForTargetGroup due to it being static, abstract and generic.

    SetIconsForTargetGroup : SetIconsForTargetGroup_MethodGroup
    class SetIconsForTargetGroup_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, icons: Array_1[Texture2D]) -> None:...
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, icons: Array_1[Texture2D], kind: IconKind) -> None:...

    # Skipped SetIl2CppCompilerConfiguration due to it being static, abstract and generic.

    SetIl2CppCompilerConfiguration : SetIl2CppCompilerConfiguration_MethodGroup
    class SetIl2CppCompilerConfiguration_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, configuration: Il2CppCompilerConfiguration) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, configuration: Il2CppCompilerConfiguration) -> None:...

    # Skipped SetIncrementalIl2CppBuild due to it being static, abstract and generic.

    SetIncrementalIl2CppBuild : SetIncrementalIl2CppBuild_MethodGroup
    class SetIncrementalIl2CppBuild_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, enabled: bool) -> None:...

    # Skipped SetManagedStrippingLevel due to it being static, abstract and generic.

    SetManagedStrippingLevel : SetManagedStrippingLevel_MethodGroup
    class SetManagedStrippingLevel_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, level: ManagedStrippingLevel) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, level: ManagedStrippingLevel) -> None:...

    # Skipped SetMobileMTRendering due to it being static, abstract and generic.

    SetMobileMTRendering : SetMobileMTRendering_MethodGroup
    class SetMobileMTRendering_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, enable: bool) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, enable: bool) -> None:...

    # Skipped SetNormalMapEncoding due to it being static, abstract and generic.

    SetNormalMapEncoding : SetNormalMapEncoding_MethodGroup
    class SetNormalMapEncoding_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, encoding: NormalMapEncoding) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, encoding: NormalMapEncoding) -> None:...

    # Skipped SetPlatformIcons due to it being static, abstract and generic.

    SetPlatformIcons : SetPlatformIcons_MethodGroup
    class SetPlatformIcons_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTargetGroup, kind: PlatformIconKind, icons: Array_1[PlatformIcon]) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, kind: PlatformIconKind, icons: Array_1[PlatformIcon]) -> None:...

    # Skipped SetPropertyBool due to it being static, abstract and generic.

    SetPropertyBool : SetPropertyBool_MethodGroup
    class SetPropertyBool_MethodGroup:
        @typing.overload
        def __call__(self, name: str, value: bool) -> None:...
        @typing.overload
        def __call__(self, name: str, value: bool, target: BuildTargetGroup) -> None:...
        @typing.overload
        def __call__(self, name: str, value: bool, target: BuildTarget) -> None:...

    # Skipped SetPropertyInt due to it being static, abstract and generic.

    SetPropertyInt : SetPropertyInt_MethodGroup
    class SetPropertyInt_MethodGroup:
        @typing.overload
        def __call__(self, name: str, value: int) -> None:...
        @typing.overload
        def __call__(self, name: str, value: int, target: BuildTargetGroup) -> None:...
        @typing.overload
        def __call__(self, name: str, value: int, target: BuildTarget) -> None:...

    # Skipped SetPropertyString due to it being static, abstract and generic.

    SetPropertyString : SetPropertyString_MethodGroup
    class SetPropertyString_MethodGroup:
        @typing.overload
        def __call__(self, name: str, value: str) -> None:...
        @typing.overload
        def __call__(self, name: str, value: str, target: BuildTargetGroup) -> None:...
        @typing.overload
        def __call__(self, name: str, value: str, target: BuildTarget) -> None:...

    # Skipped SetScriptingBackend due to it being static, abstract and generic.

    SetScriptingBackend : SetScriptingBackend_MethodGroup
    class SetScriptingBackend_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, backend: ScriptingImplementation) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, backend: ScriptingImplementation) -> None:...

    # Skipped SetScriptingDefineSymbols due to it being static, abstract and generic.

    SetScriptingDefineSymbols : SetScriptingDefineSymbols_MethodGroup
    class SetScriptingDefineSymbols_MethodGroup:
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, defines: Array_1[str]) -> None:...
        @typing.overload
        def __call__(self, buildTarget: NamedBuildTarget, defines: str) -> None:...

    # Skipped SetScriptingDefineSymbolsForGroup due to it being static, abstract and generic.

    SetScriptingDefineSymbolsForGroup : SetScriptingDefineSymbolsForGroup_MethodGroup
    class SetScriptingDefineSymbolsForGroup_MethodGroup:
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, defines: Array_1[str]) -> None:...
        @typing.overload
        def __call__(self, targetGroup: BuildTargetGroup, defines: str) -> None:...


    class Android:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def androidIsGame(cls) -> bool: ...
        @classmethod
        @androidIsGame.setter
        def androidIsGame(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def androidTargetDevices(cls) -> AndroidTargetDevices: ...
        @classmethod
        @androidTargetDevices.setter
        def androidTargetDevices(cls, value: AndroidTargetDevices) -> AndroidTargetDevices: ...
        @classmethod
        @property
        def androidTVCompatibility(cls) -> bool: ...
        @classmethod
        @androidTVCompatibility.setter
        def androidTVCompatibility(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def ARCoreEnabled(cls) -> bool: ...
        @classmethod
        @ARCoreEnabled.setter
        def ARCoreEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def autoRotationBehavior(cls) -> AndroidAutoRotationBehavior: ...
        @classmethod
        @autoRotationBehavior.setter
        def autoRotationBehavior(cls, value: AndroidAutoRotationBehavior) -> AndroidAutoRotationBehavior: ...
        @classmethod
        @property
        def blitType(cls) -> AndroidBlitType: ...
        @classmethod
        @blitType.setter
        def blitType(cls, value: AndroidBlitType) -> AndroidBlitType: ...
        @classmethod
        @property
        def buildApkPerCpuArchitecture(cls) -> bool: ...
        @classmethod
        @buildApkPerCpuArchitecture.setter
        def buildApkPerCpuArchitecture(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def bundleVersionCode(cls) -> int: ...
        @classmethod
        @bundleVersionCode.setter
        def bundleVersionCode(cls, value: int) -> int: ...
        @classmethod
        @property
        def chromeosInputEmulation(cls) -> bool: ...
        @classmethod
        @chromeosInputEmulation.setter
        def chromeosInputEmulation(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def defaultWindowHeight(cls) -> int: ...
        @classmethod
        @defaultWindowHeight.setter
        def defaultWindowHeight(cls, value: int) -> int: ...
        @classmethod
        @property
        def defaultWindowWidth(cls) -> int: ...
        @classmethod
        @defaultWindowWidth.setter
        def defaultWindowWidth(cls, value: int) -> int: ...
        @classmethod
        @property
        def disableDepthAndStencilBuffers(cls) -> bool: ...
        @classmethod
        @disableDepthAndStencilBuffers.setter
        def disableDepthAndStencilBuffers(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def enableArmv9SecurityFeatures(cls) -> bool: ...
        @classmethod
        @enableArmv9SecurityFeatures.setter
        def enableArmv9SecurityFeatures(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def forceInternetPermission(cls) -> bool: ...
        @classmethod
        @forceInternetPermission.setter
        def forceInternetPermission(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def forceSDCardPermission(cls) -> bool: ...
        @classmethod
        @forceSDCardPermission.setter
        def forceSDCardPermission(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def fullscreenMode(cls) -> FullScreenMode: ...
        @classmethod
        @fullscreenMode.setter
        def fullscreenMode(cls, value: FullScreenMode) -> FullScreenMode: ...
        @classmethod
        @property
        def keyaliasName(cls) -> str: ...
        @classmethod
        @keyaliasName.setter
        def keyaliasName(cls, value: str) -> str: ...
        @classmethod
        @property
        def keyaliasPass(cls) -> str: ...
        @classmethod
        @keyaliasPass.setter
        def keyaliasPass(cls, value: str) -> str: ...
        @classmethod
        @property
        def keystoreName(cls) -> str: ...
        @classmethod
        @keystoreName.setter
        def keystoreName(cls, value: str) -> str: ...
        @classmethod
        @property
        def keystorePass(cls) -> str: ...
        @classmethod
        @keystorePass.setter
        def keystorePass(cls, value: str) -> str: ...
        @classmethod
        @property
        def licenseVerification(cls) -> bool: ...
        @classmethod
        @property
        def maxAspectRatio(cls) -> float: ...
        @classmethod
        @maxAspectRatio.setter
        def maxAspectRatio(cls, value: float) -> float: ...
        @classmethod
        @property
        def minifyDebug(cls) -> bool: ...
        @classmethod
        @minifyDebug.setter
        def minifyDebug(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def minifyRelease(cls) -> bool: ...
        @classmethod
        @minifyRelease.setter
        def minifyRelease(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def minifyWithR8(cls) -> bool: ...
        @classmethod
        @minifyWithR8.setter
        def minifyWithR8(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def minimumWindowHeight(cls) -> int: ...
        @classmethod
        @minimumWindowHeight.setter
        def minimumWindowHeight(cls, value: int) -> int: ...
        @classmethod
        @property
        def minimumWindowWidth(cls) -> int: ...
        @classmethod
        @minimumWindowWidth.setter
        def minimumWindowWidth(cls, value: int) -> int: ...
        @classmethod
        @property
        def minSdkVersion(cls) -> AndroidSdkVersions: ...
        @classmethod
        @minSdkVersion.setter
        def minSdkVersion(cls, value: AndroidSdkVersions) -> AndroidSdkVersions: ...
        @classmethod
        @property
        def optimizedFramePacing(cls) -> bool: ...
        @classmethod
        @optimizedFramePacing.setter
        def optimizedFramePacing(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def preferredInstallLocation(cls) -> AndroidPreferredInstallLocation: ...
        @classmethod
        @preferredInstallLocation.setter
        def preferredInstallLocation(cls, value: AndroidPreferredInstallLocation) -> AndroidPreferredInstallLocation: ...
        @classmethod
        @property
        def renderOutsideSafeArea(cls) -> bool: ...
        @classmethod
        @renderOutsideSafeArea.setter
        def renderOutsideSafeArea(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def resizableWindow(cls) -> bool: ...
        @classmethod
        @resizableWindow.setter
        def resizableWindow(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def showActivityIndicatorOnLoading(cls) -> AndroidShowActivityIndicatorOnLoading: ...
        @classmethod
        @showActivityIndicatorOnLoading.setter
        def showActivityIndicatorOnLoading(cls, value: AndroidShowActivityIndicatorOnLoading) -> AndroidShowActivityIndicatorOnLoading: ...
        @classmethod
        @property
        def splashScreenScale(cls) -> AndroidSplashScreenScale: ...
        @classmethod
        @splashScreenScale.setter
        def splashScreenScale(cls, value: AndroidSplashScreenScale) -> AndroidSplashScreenScale: ...
        @classmethod
        @property
        def startInFullscreen(cls) -> bool: ...
        @classmethod
        @startInFullscreen.setter
        def startInFullscreen(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def targetArchitectures(cls) -> AndroidArchitecture: ...
        @classmethod
        @targetArchitectures.setter
        def targetArchitectures(cls, value: AndroidArchitecture) -> AndroidArchitecture: ...
        @classmethod
        @property
        def targetDevice(cls) -> AndroidTargetDevice: ...
        @classmethod
        @targetDevice.setter
        def targetDevice(cls, value: AndroidTargetDevice) -> AndroidTargetDevice: ...
        @classmethod
        @property
        def targetSdkVersion(cls) -> AndroidSdkVersions: ...
        @classmethod
        @targetSdkVersion.setter
        def targetSdkVersion(cls, value: AndroidSdkVersions) -> AndroidSdkVersions: ...
        @classmethod
        @property
        def use24BitDepthBuffer(cls) -> bool: ...
        @classmethod
        @use24BitDepthBuffer.setter
        def use24BitDepthBuffer(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useAPKExpansionFiles(cls) -> bool: ...
        @classmethod
        @useAPKExpansionFiles.setter
        def useAPKExpansionFiles(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useCustomKeystore(cls) -> bool: ...
        @classmethod
        @useCustomKeystore.setter
        def useCustomKeystore(cls, value: bool) -> bool: ...


    class EmbeddedLinux:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def cpuConfiguration(cls) -> Array_1[int]: ...
        @classmethod
        @cpuConfiguration.setter
        def cpuConfiguration(cls, value: Array_1[int]) -> Array_1[int]: ...
        @classmethod
        @property
        def enableGamepadInput(cls) -> bool: ...
        @classmethod
        @enableGamepadInput.setter
        def enableGamepadInput(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def forceSRGBBlit(cls) -> bool: ...
        @classmethod
        @forceSRGBBlit.setter
        def forceSRGBBlit(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def hmiLoadingImage(cls) -> Texture2D: ...
        @classmethod
        @hmiLoadingImage.setter
        def hmiLoadingImage(cls, value: Texture2D) -> Texture2D: ...
        @classmethod
        @property
        def hmiLogStartupTiming(cls) -> bool: ...
        @classmethod
        @hmiLogStartupTiming.setter
        def hmiLogStartupTiming(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def playerDataPath(cls) -> str: ...
        @classmethod
        @playerDataPath.setter
        def playerDataPath(cls, value: str) -> str: ...


    class Facebook:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def appId(cls) -> str: ...
        @classmethod
        @appId.setter
        def appId(cls, value: str) -> str: ...
        @classmethod
        @property
        def sdkVersion(cls) -> str: ...
        @classmethod
        @sdkVersion.setter
        def sdkVersion(cls, value: str) -> str: ...
        @classmethod
        @property
        def useCookies(cls) -> bool: ...
        @classmethod
        @useCookies.setter
        def useCookies(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useFrictionlessRequests(cls) -> bool: ...
        @classmethod
        @useFrictionlessRequests.setter
        def useFrictionlessRequests(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useStatus(cls) -> bool: ...
        @classmethod
        @useStatus.setter
        def useStatus(cls, value: bool) -> bool: ...


    class iOS:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def allowHTTPDownload(cls) -> bool: ...
        @classmethod
        @allowHTTPDownload.setter
        def allowHTTPDownload(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def appInBackgroundBehavior(cls) -> iOSAppInBackgroundBehavior: ...
        @classmethod
        @appInBackgroundBehavior.setter
        def appInBackgroundBehavior(cls, value: iOSAppInBackgroundBehavior) -> iOSAppInBackgroundBehavior: ...
        @classmethod
        @property
        def appleDeveloperTeamID(cls) -> str: ...
        @classmethod
        @appleDeveloperTeamID.setter
        def appleDeveloperTeamID(cls, value: str) -> str: ...
        @classmethod
        @property
        def appleEnableAutomaticSigning(cls) -> bool: ...
        @classmethod
        @appleEnableAutomaticSigning.setter
        def appleEnableAutomaticSigning(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def applicationDisplayName(cls) -> str: ...
        @classmethod
        @applicationDisplayName.setter
        def applicationDisplayName(cls, value: str) -> str: ...
        @classmethod
        @property
        def backgroundModes(cls) -> iOSBackgroundMode: ...
        @classmethod
        @backgroundModes.setter
        def backgroundModes(cls, value: iOSBackgroundMode) -> iOSBackgroundMode: ...
        @classmethod
        @property
        def buildNumber(cls) -> str: ...
        @classmethod
        @buildNumber.setter
        def buildNumber(cls, value: str) -> str: ...
        @classmethod
        @property
        def cameraUsageDescription(cls) -> str: ...
        @classmethod
        @cameraUsageDescription.setter
        def cameraUsageDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def deferSystemGesturesMode(cls) -> SystemGestureDeferMode: ...
        @classmethod
        @deferSystemGesturesMode.setter
        def deferSystemGesturesMode(cls, value: SystemGestureDeferMode) -> SystemGestureDeferMode: ...
        @classmethod
        @property
        def disableDepthAndStencilBuffers(cls) -> bool: ...
        @classmethod
        @disableDepthAndStencilBuffers.setter
        def disableDepthAndStencilBuffers(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def exitOnSuspend(cls) -> bool: ...
        @classmethod
        @exitOnSuspend.setter
        def exitOnSuspend(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def forceHardShadowsOnMetal(cls) -> bool: ...
        @classmethod
        @forceHardShadowsOnMetal.setter
        def forceHardShadowsOnMetal(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def hideHomeButton(cls) -> bool: ...
        @classmethod
        @hideHomeButton.setter
        def hideHomeButton(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def iOSManualProvisioningProfileID(cls) -> str: ...
        @classmethod
        @iOSManualProvisioningProfileID.setter
        def iOSManualProvisioningProfileID(cls, value: str) -> str: ...
        @classmethod
        @property
        def iOSManualProvisioningProfileType(cls) -> ProvisioningProfileType: ...
        @classmethod
        @iOSManualProvisioningProfileType.setter
        def iOSManualProvisioningProfileType(cls, value: ProvisioningProfileType) -> ProvisioningProfileType: ...
        @classmethod
        @property
        def iOSUrlSchemes(cls) -> Array_1[str]: ...
        @classmethod
        @iOSUrlSchemes.setter
        def iOSUrlSchemes(cls, value: Array_1[str]) -> Array_1[str]: ...
        @classmethod
        @property
        def locationUsageDescription(cls) -> str: ...
        @classmethod
        @locationUsageDescription.setter
        def locationUsageDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def microphoneUsageDescription(cls) -> str: ...
        @classmethod
        @microphoneUsageDescription.setter
        def microphoneUsageDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def overrideIPodMusic(cls) -> bool: ...
        @classmethod
        @overrideIPodMusic.setter
        def overrideIPodMusic(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def prerenderedIcon(cls) -> bool: ...
        @classmethod
        @prerenderedIcon.setter
        def prerenderedIcon(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def requiresFullScreen(cls) -> bool: ...
        @classmethod
        @requiresFullScreen.setter
        def requiresFullScreen(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def requiresPersistentWiFi(cls) -> bool: ...
        @classmethod
        @requiresPersistentWiFi.setter
        def requiresPersistentWiFi(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def scriptCallOptimization(cls) -> ScriptCallOptimizationLevel: ...
        @classmethod
        @scriptCallOptimization.setter
        def scriptCallOptimization(cls, value: ScriptCallOptimizationLevel) -> ScriptCallOptimizationLevel: ...
        @classmethod
        @property
        def sdkVersion(cls) -> iOSSdkVersion: ...
        @classmethod
        @sdkVersion.setter
        def sdkVersion(cls, value: iOSSdkVersion) -> iOSSdkVersion: ...
        @classmethod
        @property
        def showActivityIndicatorOnLoading(cls) -> iOSShowActivityIndicatorOnLoading: ...
        @classmethod
        @showActivityIndicatorOnLoading.setter
        def showActivityIndicatorOnLoading(cls, value: iOSShowActivityIndicatorOnLoading) -> iOSShowActivityIndicatorOnLoading: ...
        @classmethod
        @property
        def statusBarStyle(cls) -> iOSStatusBarStyle: ...
        @classmethod
        @statusBarStyle.setter
        def statusBarStyle(cls, value: iOSStatusBarStyle) -> iOSStatusBarStyle: ...
        @classmethod
        @property
        def targetDevice(cls) -> iOSTargetDevice: ...
        @classmethod
        @targetDevice.setter
        def targetDevice(cls, value: iOSTargetDevice) -> iOSTargetDevice: ...
        @classmethod
        @property
        def targetOSVersion(cls) -> iOSTargetOSVersion: ...
        @classmethod
        @targetOSVersion.setter
        def targetOSVersion(cls, value: iOSTargetOSVersion) -> iOSTargetOSVersion: ...
        @classmethod
        @property
        def targetOSVersionString(cls) -> str: ...
        @classmethod
        @targetOSVersionString.setter
        def targetOSVersionString(cls, value: str) -> str: ...
        @classmethod
        @property
        def targetResolution(cls) -> iOSTargetResolution: ...
        @classmethod
        @targetResolution.setter
        def targetResolution(cls, value: iOSTargetResolution) -> iOSTargetResolution: ...
        @classmethod
        @property
        def tvOSManualProvisioningProfileID(cls) -> str: ...
        @classmethod
        @tvOSManualProvisioningProfileID.setter
        def tvOSManualProvisioningProfileID(cls, value: str) -> str: ...
        @classmethod
        @property
        def tvOSManualProvisioningProfileType(cls) -> ProvisioningProfileType: ...
        @classmethod
        @tvOSManualProvisioningProfileType.setter
        def tvOSManualProvisioningProfileType(cls, value: ProvisioningProfileType) -> ProvisioningProfileType: ...
        @classmethod
        @property
        def useOnDemandResources(cls) -> bool: ...
        @classmethod
        @useOnDemandResources.setter
        def useOnDemandResources(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def VisionOSManualProvisioningProfileID(cls) -> str: ...
        @classmethod
        @VisionOSManualProvisioningProfileID.setter
        def VisionOSManualProvisioningProfileID(cls, value: str) -> str: ...
        @classmethod
        @property
        def VisionOSManualProvisioningProfileType(cls) -> ProvisioningProfileType: ...
        @classmethod
        @VisionOSManualProvisioningProfileType.setter
        def VisionOSManualProvisioningProfileType(cls, value: ProvisioningProfileType) -> ProvisioningProfileType: ...
        @staticmethod
        def SetiPadLaunchScreenType(type: iOSLaunchScreenType) -> None: ...
        @staticmethod
        def SetiPhoneLaunchScreenType(type: iOSLaunchScreenType) -> None: ...
        @staticmethod
        def SetLaunchScreenImage(image: Texture2D, type: iOSLaunchScreenImageType) -> None: ...


    class Lumin:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def certificatePath(cls) -> str: ...
        @classmethod
        @certificatePath.setter
        def certificatePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def iconModelFolderPath(cls) -> str: ...
        @classmethod
        @iconModelFolderPath.setter
        def iconModelFolderPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def iconPortalFolderPath(cls) -> str: ...
        @classmethod
        @iconPortalFolderPath.setter
        def iconPortalFolderPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def isChannelApp(cls) -> bool: ...
        @classmethod
        @isChannelApp.setter
        def isChannelApp(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def signPackage(cls) -> bool: ...
        @classmethod
        @signPackage.setter
        def signPackage(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def versionCode(cls) -> int: ...
        @classmethod
        @versionCode.setter
        def versionCode(cls, value: int) -> int: ...
        @classmethod
        @property
        def versionName(cls) -> str: ...
        @classmethod
        @versionName.setter
        def versionName(cls, value: str) -> str: ...


    class macOS:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def applicationCategoryType(cls) -> str: ...
        @classmethod
        @applicationCategoryType.setter
        def applicationCategoryType(cls, value: str) -> str: ...
        @classmethod
        @property
        def bluetoothUsageDescription(cls) -> str: ...
        @classmethod
        @bluetoothUsageDescription.setter
        def bluetoothUsageDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def buildNumber(cls) -> str: ...
        @classmethod
        @buildNumber.setter
        def buildNumber(cls, value: str) -> str: ...
        @classmethod
        @property
        def cameraUsageDescription(cls) -> str: ...
        @classmethod
        @cameraUsageDescription.setter
        def cameraUsageDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def microphoneUsageDescription(cls) -> str: ...
        @classmethod
        @microphoneUsageDescription.setter
        def microphoneUsageDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def targetOSVersion(cls) -> str: ...
        @classmethod
        @targetOSVersion.setter
        def targetOSVersion(cls, value: str) -> str: ...
        @classmethod
        @property
        def urlSchemes(cls) -> Array_1[str]: ...
        @classmethod
        @urlSchemes.setter
        def urlSchemes(cls, value: Array_1[str]) -> Array_1[str]: ...


    class PS4:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def allowPS5Detection(cls) -> bool: ...
        @classmethod
        @allowPS5Detection.setter
        def allowPS5Detection(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def applicationParameter1(cls) -> int: ...
        @classmethod
        @applicationParameter1.setter
        def applicationParameter1(cls, value: int) -> int: ...
        @classmethod
        @property
        def applicationParameter2(cls) -> int: ...
        @classmethod
        @applicationParameter2.setter
        def applicationParameter2(cls, value: int) -> int: ...
        @classmethod
        @property
        def applicationParameter3(cls) -> int: ...
        @classmethod
        @applicationParameter3.setter
        def applicationParameter3(cls, value: int) -> int: ...
        @classmethod
        @property
        def applicationParameter4(cls) -> int: ...
        @classmethod
        @applicationParameter4.setter
        def applicationParameter4(cls, value: int) -> int: ...
        @classmethod
        @property
        def appType(cls) -> int: ...
        @classmethod
        @appType.setter
        def appType(cls, value: int) -> int: ...
        @classmethod
        @property
        def appVersion(cls) -> str: ...
        @classmethod
        @appVersion.setter
        def appVersion(cls, value: str) -> str: ...
        @classmethod
        @property
        def attrib3DSupport(cls) -> bool: ...
        @classmethod
        @attrib3DSupport.setter
        def attrib3DSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def attribCpuUsage(cls) -> int: ...
        @classmethod
        @attribCpuUsage.setter
        def attribCpuUsage(cls, value: int) -> int: ...
        @classmethod
        @property
        def attribExclusiveVR(cls) -> bool: ...
        @classmethod
        @attribExclusiveVR.setter
        def attribExclusiveVR(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def attribEyeToEyeDistanceSettingVR(cls) -> PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings: ...
        @classmethod
        @attribEyeToEyeDistanceSettingVR.setter
        def attribEyeToEyeDistanceSettingVR(cls, value: PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings) -> PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings: ...
        @classmethod
        @property
        def attribMoveSupport(cls) -> bool: ...
        @classmethod
        @attribMoveSupport.setter
        def attribMoveSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def attribShareSupport(cls) -> bool: ...
        @classmethod
        @attribShareSupport.setter
        def attribShareSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def attribUserManagement(cls) -> bool: ...
        @classmethod
        @attribUserManagement.setter
        def attribUserManagement(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def attribVROutputEnabled(cls) -> bool: ...
        @classmethod
        @attribVROutputEnabled.setter
        def attribVROutputEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def audio3dVirtualSpeakerCount(cls) -> int: ...
        @classmethod
        @audio3dVirtualSpeakerCount.setter
        def audio3dVirtualSpeakerCount(cls, value: int) -> int: ...
        @classmethod
        @property
        def BackgroundImagePath(cls) -> str: ...
        @classmethod
        @BackgroundImagePath.setter
        def BackgroundImagePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def BGMPath(cls) -> str: ...
        @classmethod
        @BGMPath.setter
        def BGMPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def category(cls) -> PlayerSettings.PS4.PS4AppCategory: ...
        @classmethod
        @category.setter
        def category(cls, value: PlayerSettings.PS4.PS4AppCategory) -> PlayerSettings.PS4.PS4AppCategory: ...
        @classmethod
        @property
        def compatibilityPS5(cls) -> bool: ...
        @classmethod
        @compatibilityPS5.setter
        def compatibilityPS5(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def contentID(cls) -> str: ...
        @classmethod
        @contentID.setter
        def contentID(cls, value: str) -> str: ...
        @classmethod
        @property
        def contentSearchFeaturesUsed(cls) -> bool: ...
        @classmethod
        @contentSearchFeaturesUsed.setter
        def contentSearchFeaturesUsed(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def disableAutoHideSplash(cls) -> bool: ...
        @classmethod
        @disableAutoHideSplash.setter
        def disableAutoHideSplash(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def downloadDataSize(cls) -> int: ...
        @classmethod
        @downloadDataSize.setter
        def downloadDataSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def enableApplicationExit(cls) -> bool: ...
        @classmethod
        @enableApplicationExit.setter
        def enableApplicationExit(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def enterButtonAssignment(cls) -> PlayerSettings.PS4.PS4EnterButtonAssignment: ...
        @classmethod
        @enterButtonAssignment.setter
        def enterButtonAssignment(cls, value: PlayerSettings.PS4.PS4EnterButtonAssignment) -> PlayerSettings.PS4.PS4EnterButtonAssignment: ...
        @classmethod
        @property
        def ExtraSceSysFile(cls) -> str: ...
        @classmethod
        @ExtraSceSysFile.setter
        def ExtraSceSysFile(cls, value: str) -> str: ...
        @classmethod
        @property
        def garlicHeapSize(cls) -> int: ...
        @classmethod
        @garlicHeapSize.setter
        def garlicHeapSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def gpu800MHz(cls) -> bool: ...
        @classmethod
        @gpu800MHz.setter
        def gpu800MHz(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def iconImagesFolder(cls) -> str: ...
        @classmethod
        @iconImagesFolder.setter
        def iconImagesFolder(cls, value: str) -> str: ...
        @classmethod
        @property
        def includedModules(cls) -> Array_1[str]: ...
        @classmethod
        @includedModules.setter
        def includedModules(cls, value: Array_1[str]) -> Array_1[str]: ...
        @classmethod
        @property
        def masterVersion(cls) -> str: ...
        @classmethod
        @masterVersion.setter
        def masterVersion(cls, value: str) -> str: ...
        @classmethod
        @property
        def monoEnv(cls) -> str: ...
        @classmethod
        @monoEnv.setter
        def monoEnv(cls, value: str) -> str: ...
        @classmethod
        @property
        def npAgeRating(cls) -> int: ...
        @classmethod
        @npAgeRating.setter
        def npAgeRating(cls, value: int) -> int: ...
        @classmethod
        @property
        def NPtitleDatPath(cls) -> str: ...
        @classmethod
        @NPtitleDatPath.setter
        def NPtitleDatPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def npTitleSecret(cls) -> str: ...
        @classmethod
        @npTitleSecret.setter
        def npTitleSecret(cls, value: str) -> str: ...
        @classmethod
        @property
        def npTrophyPackPath(cls) -> str: ...
        @classmethod
        @npTrophyPackPath.setter
        def npTrophyPackPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def paramSfxPath(cls) -> str: ...
        @classmethod
        @paramSfxPath.setter
        def paramSfxPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def parentalLevel(cls) -> int: ...
        @classmethod
        @parentalLevel.setter
        def parentalLevel(cls, value: int) -> int: ...
        @classmethod
        @property
        def passcode(cls) -> str: ...
        @classmethod
        @passcode.setter
        def passcode(cls, value: str) -> str: ...
        @classmethod
        @property
        def PatchChangeinfoPath(cls) -> str: ...
        @classmethod
        @PatchChangeinfoPath.setter
        def PatchChangeinfoPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def patchDayOne(cls) -> bool: ...
        @classmethod
        @patchDayOne.setter
        def patchDayOne(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def PatchLatestPkgPath(cls) -> str: ...
        @classmethod
        @PatchLatestPkgPath.setter
        def PatchLatestPkgPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def PatchPkgPath(cls) -> str: ...
        @classmethod
        @PatchPkgPath.setter
        def PatchPkgPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def playerPrefsMaxSize(cls) -> int: ...
        @classmethod
        @playerPrefsMaxSize.setter
        def playerPrefsMaxSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def playerPrefsSupport(cls) -> bool: ...
        @classmethod
        @playerPrefsSupport.setter
        def playerPrefsSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def playTogetherPlayerCount(cls) -> int: ...
        @classmethod
        @playTogetherPlayerCount.setter
        def playTogetherPlayerCount(cls, value: int) -> int: ...
        @classmethod
        @property
        def pnFriends(cls) -> bool: ...
        @classmethod
        @pnFriends.setter
        def pnFriends(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def pnGameCustomData(cls) -> bool: ...
        @classmethod
        @pnGameCustomData.setter
        def pnGameCustomData(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def pnPresence(cls) -> bool: ...
        @classmethod
        @pnPresence.setter
        def pnPresence(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def pnSessions(cls) -> bool: ...
        @classmethod
        @pnSessions.setter
        def pnSessions(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def PrivacyGuardImagePath(cls) -> str: ...
        @classmethod
        @PrivacyGuardImagePath.setter
        def PrivacyGuardImagePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def proGarlicHeapSize(cls) -> int: ...
        @classmethod
        @proGarlicHeapSize.setter
        def proGarlicHeapSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def PronunciationSIGPath(cls) -> str: ...
        @classmethod
        @PronunciationSIGPath.setter
        def PronunciationSIGPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def PronunciationXMLPath(cls) -> str: ...
        @classmethod
        @PronunciationXMLPath.setter
        def PronunciationXMLPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def remotePlayKeyAssignment(cls) -> PlayerSettings.PS4.PS4RemotePlayKeyAssignment: ...
        @classmethod
        @remotePlayKeyAssignment.setter
        def remotePlayKeyAssignment(cls, value: PlayerSettings.PS4.PS4RemotePlayKeyAssignment) -> PlayerSettings.PS4.PS4RemotePlayKeyAssignment: ...
        @classmethod
        @property
        def remotePlayKeyMappingDir(cls) -> str: ...
        @classmethod
        @remotePlayKeyMappingDir.setter
        def remotePlayKeyMappingDir(cls, value: str) -> str: ...
        @classmethod
        @property
        def reprojectionSupport(cls) -> bool: ...
        @classmethod
        @reprojectionSupport.setter
        def reprojectionSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def resetTempFolder(cls) -> bool: ...
        @classmethod
        @resetTempFolder.setter
        def resetTempFolder(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def restrictedAudioUsageRights(cls) -> bool: ...
        @classmethod
        @restrictedAudioUsageRights.setter
        def restrictedAudioUsageRights(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def SaveDataImagePath(cls) -> str: ...
        @classmethod
        @SaveDataImagePath.setter
        def SaveDataImagePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def scriptOptimizationLevel(cls) -> int: ...
        @classmethod
        @scriptOptimizationLevel.setter
        def scriptOptimizationLevel(cls, value: int) -> int: ...
        @classmethod
        @property
        def SdkOverride(cls) -> str: ...
        @classmethod
        @SdkOverride.setter
        def SdkOverride(cls, value: str) -> str: ...
        @classmethod
        @property
        def ShareFilePath(cls) -> str: ...
        @classmethod
        @ShareFilePath.setter
        def ShareFilePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def ShareOverlayImagePath(cls) -> str: ...
        @classmethod
        @ShareOverlayImagePath.setter
        def ShareOverlayImagePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def socialScreenEnabled(cls) -> int: ...
        @classmethod
        @socialScreenEnabled.setter
        def socialScreenEnabled(cls, value: int) -> int: ...
        @classmethod
        @property
        def StartupImagePath(cls) -> str: ...
        @classmethod
        @StartupImagePath.setter
        def StartupImagePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def startupImagesFolder(cls) -> str: ...
        @classmethod
        @startupImagesFolder.setter
        def startupImagesFolder(cls, value: str) -> str: ...
        @classmethod
        @property
        def useAudio3dBackend(cls) -> bool: ...
        @classmethod
        @useAudio3dBackend.setter
        def useAudio3dBackend(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useLowGarlicFragmentationMode(cls) -> bool: ...
        @classmethod
        @useLowGarlicFragmentationMode.setter
        def useLowGarlicFragmentationMode(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useResolutionFallback(cls) -> bool: ...
        @classmethod
        @useResolutionFallback.setter
        def useResolutionFallback(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def videoOutBaseModeInitialWidth(cls) -> int: ...
        @classmethod
        @videoOutBaseModeInitialWidth.setter
        def videoOutBaseModeInitialWidth(cls, value: int) -> int: ...
        @classmethod
        @property
        def videoOutInitialWidth(cls) -> int: ...
        @classmethod
        @videoOutInitialWidth.setter
        def videoOutInitialWidth(cls, value: int) -> int: ...
        @classmethod
        @property
        def videoOutPixelFormat(cls) -> int: ...
        @classmethod
        @videoOutPixelFormat.setter
        def videoOutPixelFormat(cls, value: int) -> int: ...
        @classmethod
        @property
        def videoOutReprojectionRate(cls) -> int: ...
        @classmethod
        @videoOutReprojectionRate.setter
        def videoOutReprojectionRate(cls, value: int) -> int: ...
        @classmethod
        @property
        def videoOutResolution(cls) -> int: ...
        @classmethod
        @videoOutResolution.setter
        def videoOutResolution(cls, value: int) -> int: ...
        @classmethod
        @property
        def videoRecordingFeaturesUsed(cls) -> bool: ...
        @classmethod
        @videoRecordingFeaturesUsed.setter
        def videoRecordingFeaturesUsed(cls, value: bool) -> bool: ...

        class PlayStationVREyeToEyeDistanceSettings(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            PerUser : PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings # 0
            ForceDefault : PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings # 1
            DynamicModeAtRuntime : PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings # 2


        class PS4AppCategory(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            Application : PlayerSettings.PS4.PS4AppCategory # 0
            Patch : PlayerSettings.PS4.PS4AppCategory # 1
            Remaster : PlayerSettings.PS4.PS4AppCategory # 2


        class PS4EnterButtonAssignment(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            CircleButton : PlayerSettings.PS4.PS4EnterButtonAssignment # 0
            CrossButton : PlayerSettings.PS4.PS4EnterButtonAssignment # 1
            SystemDefined : PlayerSettings.PS4.PS4EnterButtonAssignment # 2


        class PS4RemotePlayKeyAssignment(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            PatternA : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 0
            PatternB : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 1
            PatternC : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 2
            PatternD : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 3
            PatternE : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 4
            PatternF : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 5
            PatternG : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 6
            PatternH : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # 7
            None_ : PlayerSettings.PS4.PS4RemotePlayKeyAssignment # -1



    class QNX:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def cpuConfiguration(cls) -> Array_1[int]: ...
        @classmethod
        @cpuConfiguration.setter
        def cpuConfiguration(cls, value: Array_1[int]) -> Array_1[int]: ...
        @classmethod
        @property
        def forceSRGBBlit(cls) -> bool: ...
        @classmethod
        @forceSRGBBlit.setter
        def forceSRGBBlit(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def hmiLoadingImage(cls) -> Texture2D: ...
        @classmethod
        @hmiLoadingImage.setter
        def hmiLoadingImage(cls, value: Texture2D) -> Texture2D: ...
        @classmethod
        @property
        def playerDataPath(cls) -> str: ...
        @classmethod
        @playerDataPath.setter
        def playerDataPath(cls, value: str) -> str: ...


    class SplashScreen:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def animationBackgroundZoom(cls) -> float: ...
        @classmethod
        @animationBackgroundZoom.setter
        def animationBackgroundZoom(cls, value: float) -> float: ...
        @classmethod
        @property
        def animationLogoZoom(cls) -> float: ...
        @classmethod
        @animationLogoZoom.setter
        def animationLogoZoom(cls, value: float) -> float: ...
        @classmethod
        @property
        def animationMode(cls) -> PlayerSettings.SplashScreen.AnimationMode: ...
        @classmethod
        @animationMode.setter
        def animationMode(cls, value: PlayerSettings.SplashScreen.AnimationMode) -> PlayerSettings.SplashScreen.AnimationMode: ...
        @classmethod
        @property
        def background(cls) -> Sprite: ...
        @classmethod
        @background.setter
        def background(cls, value: Sprite) -> Sprite: ...
        @classmethod
        @property
        def backgroundColor(cls) -> Color: ...
        @classmethod
        @backgroundColor.setter
        def backgroundColor(cls, value: Color) -> Color: ...
        @classmethod
        @property
        def backgroundPortrait(cls) -> Sprite: ...
        @classmethod
        @backgroundPortrait.setter
        def backgroundPortrait(cls, value: Sprite) -> Sprite: ...
        @classmethod
        @property
        def blurBackgroundImage(cls) -> bool: ...
        @classmethod
        @blurBackgroundImage.setter
        def blurBackgroundImage(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def drawMode(cls) -> PlayerSettings.SplashScreen.DrawMode: ...
        @classmethod
        @drawMode.setter
        def drawMode(cls, value: PlayerSettings.SplashScreen.DrawMode) -> PlayerSettings.SplashScreen.DrawMode: ...
        @classmethod
        @property
        def logos(cls) -> Array_1[PlayerSettings.SplashScreenLogo]: ...
        @classmethod
        @logos.setter
        def logos(cls, value: Array_1[PlayerSettings.SplashScreenLogo]) -> Array_1[PlayerSettings.SplashScreenLogo]: ...
        @classmethod
        @property
        def overlayOpacity(cls) -> float: ...
        @classmethod
        @overlayOpacity.setter
        def overlayOpacity(cls, value: float) -> float: ...
        @classmethod
        @property
        def show(cls) -> bool: ...
        @classmethod
        @show.setter
        def show(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def showUnityLogo(cls) -> bool: ...
        @classmethod
        @showUnityLogo.setter
        def showUnityLogo(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def unityLogoStyle(cls) -> PlayerSettings.SplashScreen.UnityLogoStyle: ...
        @classmethod
        @unityLogoStyle.setter
        def unityLogoStyle(cls, value: PlayerSettings.SplashScreen.UnityLogoStyle) -> PlayerSettings.SplashScreen.UnityLogoStyle: ...

        class AnimationMode(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            Static : PlayerSettings.SplashScreen.AnimationMode # 0
            Dolly : PlayerSettings.SplashScreen.AnimationMode # 1
            Custom : PlayerSettings.SplashScreen.AnimationMode # 2


        class DrawMode(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            UnityLogoBelow : PlayerSettings.SplashScreen.DrawMode # 0
            AllSequential : PlayerSettings.SplashScreen.DrawMode # 1


        class UnityLogoStyle(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            DarkOnLight : PlayerSettings.SplashScreen.UnityLogoStyle # 0
            LightOnDark : PlayerSettings.SplashScreen.UnityLogoStyle # 1



    class SplashScreenLogo:
        @property
        def duration(self) -> float: ...
        @duration.setter
        def duration(self, value: float) -> float: ...
        @property
        def logo(self) -> Sprite: ...
        @logo.setter
        def logo(self, value: Sprite) -> Sprite: ...
        @classmethod
        @property
        def unityLogo(cls) -> Sprite: ...
        # Skipped Create due to it being static, abstract and generic.

        Create : Create_MethodGroup
        class Create_MethodGroup:
            @typing.overload
            def __call__(self) -> PlayerSettings.SplashScreenLogo:...
            @typing.overload
            def __call__(self, duration: float) -> PlayerSettings.SplashScreenLogo:...
            @typing.overload
            def __call__(self, duration: float, logo: Sprite) -> PlayerSettings.SplashScreenLogo:...

        # Skipped CreateWithUnityLogo due to it being static, abstract and generic.

        CreateWithUnityLogo : CreateWithUnityLogo_MethodGroup
        class CreateWithUnityLogo_MethodGroup:
            @typing.overload
            def __call__(self) -> PlayerSettings.SplashScreenLogo:...
            @typing.overload
            def __call__(self, duration: float) -> PlayerSettings.SplashScreenLogo:...



    class Switch:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def accessibleURLPath(cls) -> str: ...
        @classmethod
        @accessibleURLPath.setter
        def accessibleURLPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def AllowGpuScratchShrinking(cls) -> bool: ...
        @classmethod
        @AllowGpuScratchShrinking.setter
        def AllowGpuScratchShrinking(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def applicationAttribute(cls) -> PlayerSettings.Switch.ApplicationAttribute: ...
        @classmethod
        @applicationAttribute.setter
        def applicationAttribute(cls, value: PlayerSettings.Switch.ApplicationAttribute) -> PlayerSettings.Switch.ApplicationAttribute: ...
        @classmethod
        @property
        def applicationErrorCodeCategory(cls) -> str: ...
        @classmethod
        @applicationErrorCodeCategory.setter
        def applicationErrorCodeCategory(cls, value: str) -> str: ...
        @classmethod
        @property
        def applicationID(cls) -> str: ...
        @classmethod
        @applicationID.setter
        def applicationID(cls, value: str) -> str: ...
        @classmethod
        @property
        def cardSpecClock(cls) -> int: ...
        @classmethod
        @cardSpecClock.setter
        def cardSpecClock(cls, value: int) -> int: ...
        @classmethod
        @property
        def cardSpecSize(cls) -> int: ...
        @classmethod
        @cardSpecSize.setter
        def cardSpecSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def compilerFlags(cls) -> Array_1[str]: ...
        @classmethod
        @compilerFlags.setter
        def compilerFlags(cls, value: Array_1[str]) -> Array_1[str]: ...
        @classmethod
        @property
        def defaultSwitchNVNGraphicsFirmwareMemory(cls) -> int: ...
        @classmethod
        @property
        def defaultSwitchQueueCommandMemory(cls) -> int: ...
        @classmethod
        @property
        def defaultSwitchQueueComputeMemory(cls) -> int: ...
        @classmethod
        @property
        def defaultSwitchQueueControlMemory(cls) -> int: ...
        @classmethod
        @property
        def displayVersion(cls) -> str: ...
        @classmethod
        @displayVersion.setter
        def displayVersion(cls, value: str) -> str: ...
        @classmethod
        @property
        def enableFileSystemTrace(cls) -> bool: ...
        @classmethod
        @enableFileSystemTrace.setter
        def enableFileSystemTrace(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def enableTouchScreen(cls) -> bool: ...
        @classmethod
        @enableTouchScreen.setter
        def enableTouchScreen(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def GpuScratchPoolGranularity(cls) -> int: ...
        @classmethod
        @GpuScratchPoolGranularity.setter
        def GpuScratchPoolGranularity(cls, value: int) -> int: ...
        @classmethod
        @property
        def icons(cls) -> Array_1[Texture2D]: ...
        @classmethod
        @icons.setter
        def icons(cls, value: Array_1[Texture2D]) -> Array_1[Texture2D]: ...
        @classmethod
        @property
        def isAllowsScreenshot(cls) -> bool: ...
        @classmethod
        @isAllowsScreenshot.setter
        def isAllowsScreenshot(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isDataLossConfirmation(cls) -> bool: ...
        @classmethod
        @isDataLossConfirmation.setter
        def isDataLossConfirmation(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isDataLossConfirmationEnabled(cls) -> bool: ...
        @classmethod
        @isDataLossConfirmationEnabled.setter
        def isDataLossConfirmationEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isHoldTypeHorizontal(cls) -> bool: ...
        @classmethod
        @isHoldTypeHorizontal.setter
        def isHoldTypeHorizontal(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isRuntimeAddOnContentInstallEnabled(cls) -> bool: ...
        @classmethod
        @isRuntimeAddOnContentInstallEnabled.setter
        def isRuntimeAddOnContentInstallEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isScreenshotEnabled(cls) -> bool: ...
        @classmethod
        @isScreenshotEnabled.setter
        def isScreenshotEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isUnderParentalControl(cls) -> bool: ...
        @classmethod
        @isUnderParentalControl.setter
        def isUnderParentalControl(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isUserAccountLockEnabled(cls) -> bool: ...
        @classmethod
        @isUserAccountLockEnabled.setter
        def isUserAccountLockEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def isVideoCapturingEnabled(cls) -> bool: ...
        @classmethod
        @isVideoCapturingEnabled.setter
        def isVideoCapturingEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def legalInformationPath(cls) -> str: ...
        @classmethod
        @legalInformationPath.setter
        def legalInformationPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def localCommunicationIds(cls) -> Array_1[str]: ...
        @classmethod
        @localCommunicationIds.setter
        def localCommunicationIds(cls, value: Array_1[str]) -> Array_1[str]: ...
        @classmethod
        @property
        def logoHandling(cls) -> PlayerSettings.Switch.LogoHandling: ...
        @classmethod
        @logoHandling.setter
        def logoHandling(cls, value: PlayerSettings.Switch.LogoHandling) -> PlayerSettings.Switch.LogoHandling: ...
        @classmethod
        @property
        def logoType(cls) -> PlayerSettings.Switch.LogoType: ...
        @classmethod
        @logoType.setter
        def logoType(cls, value: PlayerSettings.Switch.LogoType) -> PlayerSettings.Switch.LogoType: ...
        @classmethod
        @property
        def mainThreadStackSize(cls) -> int: ...
        @classmethod
        @mainThreadStackSize.setter
        def mainThreadStackSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def manualHTMLPath(cls) -> str: ...
        @classmethod
        @manualHTMLPath.setter
        def manualHTMLPath(cls, value: str) -> str: ...
        @classmethod
        @property
        def maximumSwitchNVNGraphicsFirmwareMemory(cls) -> int: ...
        @classmethod
        @property
        def minimumSwitchNVNGraphicsFirmwareMemory(cls) -> int: ...
        @classmethod
        @property
        def minimumSwitchQueueCommandMemory(cls) -> int: ...
        @classmethod
        @property
        def minimumSwitchQueueControlMemory(cls) -> int: ...
        @classmethod
        @property
        def nativeFsCacheSize(cls) -> int: ...
        @classmethod
        @nativeFsCacheSize.setter
        def nativeFsCacheSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def networkInterfaceManagerInitializeEnabled(cls) -> bool: ...
        @classmethod
        @networkInterfaceManagerInitializeEnabled.setter
        def networkInterfaceManagerInitializeEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def NMETAOverride(cls) -> str: ...
        @classmethod
        @NMETAOverride.setter
        def NMETAOverride(cls, value: str) -> str: ...
        @classmethod
        @property
        def NMETAOverrideFullPath(cls) -> str: ...
        @classmethod
        @property
        def nsoDependencies(cls) -> str: ...
        @classmethod
        @nsoDependencies.setter
        def nsoDependencies(cls, value: str) -> str: ...
        @classmethod
        @property
        def NVNDefaultPoolsGranularity(cls) -> int: ...
        @classmethod
        @NVNDefaultPoolsGranularity.setter
        def NVNDefaultPoolsGranularity(cls, value: int) -> int: ...
        @classmethod
        @property
        def NVNGraphicsFirmwareMemory(cls) -> int: ...
        @classmethod
        @NVNGraphicsFirmwareMemory.setter
        def NVNGraphicsFirmwareMemory(cls, value: int) -> int: ...
        @classmethod
        @property
        def NVNMaxPublicSamplerIDCount(cls) -> int: ...
        @classmethod
        @NVNMaxPublicSamplerIDCount.setter
        def NVNMaxPublicSamplerIDCount(cls, value: int) -> int: ...
        @classmethod
        @property
        def NVNMaxPublicTextureIDCount(cls) -> int: ...
        @classmethod
        @NVNMaxPublicTextureIDCount.setter
        def NVNMaxPublicTextureIDCount(cls, value: int) -> int: ...
        @classmethod
        @property
        def NVNOtherPoolsGranularity(cls) -> int: ...
        @classmethod
        @NVNOtherPoolsGranularity.setter
        def NVNOtherPoolsGranularity(cls, value: int) -> int: ...
        @classmethod
        @property
        def NVNShaderPoolsGranularity(cls) -> int: ...
        @classmethod
        @NVNShaderPoolsGranularity.setter
        def NVNShaderPoolsGranularity(cls, value: int) -> int: ...
        @classmethod
        @property
        def presenceGroupId(cls) -> str: ...
        @classmethod
        @presenceGroupId.setter
        def presenceGroupId(cls, value: str) -> str: ...
        @classmethod
        @property
        def publisherNames(cls) -> Array_1[str]: ...
        @classmethod
        @publisherNames.setter
        def publisherNames(cls, value: Array_1[str]) -> Array_1[str]: ...
        @classmethod
        @property
        def queueCommandMemory(cls) -> int: ...
        @classmethod
        @queueCommandMemory.setter
        def queueCommandMemory(cls, value: int) -> int: ...
        @classmethod
        @property
        def queueComputeMemory(cls) -> int: ...
        @classmethod
        @queueComputeMemory.setter
        def queueComputeMemory(cls, value: int) -> int: ...
        @classmethod
        @property
        def queueControlMemory(cls) -> int: ...
        @classmethod
        @queueControlMemory.setter
        def queueControlMemory(cls, value: int) -> int: ...
        @classmethod
        @property
        def ratingAgeArray(cls) -> Array_1[int]: ...
        @classmethod
        @ratingAgeArray.setter
        def ratingAgeArray(cls, value: Array_1[int]) -> Array_1[int]: ...
        @classmethod
        @property
        def ratingsMask(cls) -> int: ...
        @classmethod
        @ratingsMask.setter
        def ratingsMask(cls, value: int) -> int: ...
        @classmethod
        @property
        def releaseVersion(cls) -> str: ...
        @classmethod
        @releaseVersion.setter
        def releaseVersion(cls, value: str) -> str: ...
        @classmethod
        @property
        def screenResolutionBehavior(cls) -> PlayerSettings.Switch.ScreenResolutionBehavior: ...
        @classmethod
        @screenResolutionBehavior.setter
        def screenResolutionBehavior(cls, value: PlayerSettings.Switch.ScreenResolutionBehavior) -> PlayerSettings.Switch.ScreenResolutionBehavior: ...
        @classmethod
        @property
        def smallIcons(cls) -> Array_1[Texture2D]: ...
        @classmethod
        @smallIcons.setter
        def smallIcons(cls, value: Array_1[Texture2D]) -> Array_1[Texture2D]: ...
        @classmethod
        @property
        def socketAllocatorPoolSize(cls) -> int: ...
        @classmethod
        @socketAllocatorPoolSize.setter
        def socketAllocatorPoolSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def socketBufferEfficiency(cls) -> int: ...
        @classmethod
        @socketBufferEfficiency.setter
        def socketBufferEfficiency(cls, value: int) -> int: ...
        @classmethod
        @property
        def socketConcurrencyLimit(cls) -> int: ...
        @classmethod
        @socketConcurrencyLimit.setter
        def socketConcurrencyLimit(cls, value: int) -> int: ...
        @classmethod
        @property
        def socketConfigEnabled(cls) -> bool: ...
        @classmethod
        @socketConfigEnabled.setter
        def socketConfigEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def socketInitializeEnabled(cls) -> bool: ...
        @classmethod
        @socketInitializeEnabled.setter
        def socketInitializeEnabled(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def socketMemoryPoolSize(cls) -> int: ...
        @classmethod
        @socketMemoryPoolSize.setter
        def socketMemoryPoolSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def startupUserAccount(cls) -> PlayerSettings.Switch.StartupUserAccount: ...
        @classmethod
        @startupUserAccount.setter
        def startupUserAccount(cls, value: PlayerSettings.Switch.StartupUserAccount) -> PlayerSettings.Switch.StartupUserAccount: ...
        @classmethod
        @property
        def supportedLanguages(cls) -> int: ...
        @classmethod
        @supportedLanguages.setter
        def supportedLanguages(cls, value: int) -> int: ...
        @classmethod
        @property
        def supportedNpadCount(cls) -> int: ...
        @classmethod
        @supportedNpadCount.setter
        def supportedNpadCount(cls, value: int) -> int: ...
        @classmethod
        @property
        def supportedNpadStyles(cls) -> PlayerSettings.Switch.SupportedNpadStyle: ...
        @classmethod
        @supportedNpadStyles.setter
        def supportedNpadStyles(cls, value: PlayerSettings.Switch.SupportedNpadStyle) -> PlayerSettings.Switch.SupportedNpadStyle: ...
        @classmethod
        @property
        def switchEnableRamDiskSupport(cls) -> bool: ...
        @classmethod
        @switchEnableRamDiskSupport.setter
        def switchEnableRamDiskSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def switchLTOSetting(cls) -> int: ...
        @classmethod
        @switchLTOSetting.setter
        def switchLTOSetting(cls, value: int) -> int: ...
        @classmethod
        @property
        def switchMaxWorkerMultiple(cls) -> int: ...
        @classmethod
        @switchMaxWorkerMultiple.setter
        def switchMaxWorkerMultiple(cls, value: int) -> int: ...
        @classmethod
        @property
        def switchMicroSleepForYieldTime(cls) -> int: ...
        @classmethod
        @switchMicroSleepForYieldTime.setter
        def switchMicroSleepForYieldTime(cls, value: int) -> int: ...
        @classmethod
        @property
        def switchRamDiskSpaceSize(cls) -> int: ...
        @classmethod
        @switchRamDiskSpaceSize.setter
        def switchRamDiskSpaceSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def switchUseLegacyFmodPriorities(cls) -> bool: ...
        @classmethod
        @switchUseLegacyFmodPriorities.setter
        def switchUseLegacyFmodPriorities(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def switchUseMicroSleepForYield(cls) -> bool: ...
        @classmethod
        @switchUseMicroSleepForYield.setter
        def switchUseMicroSleepForYield(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def systemResourceMemory(cls) -> int: ...
        @classmethod
        @systemResourceMemory.setter
        def systemResourceMemory(cls, value: int) -> int: ...
        @classmethod
        @property
        def tcpAutoReceiveBufferSizeMax(cls) -> int: ...
        @classmethod
        @tcpAutoReceiveBufferSizeMax.setter
        def tcpAutoReceiveBufferSizeMax(cls, value: int) -> int: ...
        @classmethod
        @property
        def tcpAutoSendBufferSizeMax(cls) -> int: ...
        @classmethod
        @tcpAutoSendBufferSizeMax.setter
        def tcpAutoSendBufferSizeMax(cls, value: int) -> int: ...
        @classmethod
        @property
        def tcpInitialReceiveBufferSize(cls) -> int: ...
        @classmethod
        @tcpInitialReceiveBufferSize.setter
        def tcpInitialReceiveBufferSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def tcpInitialSendBufferSize(cls) -> int: ...
        @classmethod
        @tcpInitialSendBufferSize.setter
        def tcpInitialSendBufferSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def titleNames(cls) -> Array_1[str]: ...
        @classmethod
        @titleNames.setter
        def titleNames(cls, value: Array_1[str]) -> Array_1[str]: ...
        @classmethod
        @property
        def udpReceiveBufferSize(cls) -> int: ...
        @classmethod
        @udpReceiveBufferSize.setter
        def udpReceiveBufferSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def udpSendBufferSize(cls) -> int: ...
        @classmethod
        @udpSendBufferSize.setter
        def udpSendBufferSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def useNewStyleFilepaths(cls) -> bool: ...
        @classmethod
        @useNewStyleFilepaths.setter
        def useNewStyleFilepaths(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def userAccountSaveDataJournalSize(cls) -> int: ...
        @classmethod
        @userAccountSaveDataJournalSize.setter
        def userAccountSaveDataJournalSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def userAccountSaveDataSize(cls) -> int: ...
        @classmethod
        @userAccountSaveDataSize.setter
        def userAccountSaveDataSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def useSwitchCPUProfiler(cls) -> bool: ...
        @classmethod
        @useSwitchCPUProfiler.setter
        def useSwitchCPUProfiler(cls, value: bool) -> bool: ...
        @staticmethod
        def GetRatingAge(category: PlayerSettings.Switch.RatingCategories) -> int: ...

        class ApplicationAttribute(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            None_ : PlayerSettings.Switch.ApplicationAttribute # 0
            Demo : PlayerSettings.Switch.ApplicationAttribute # 1


        class Languages(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            AmericanEnglish : PlayerSettings.Switch.Languages # 0
            BritishEnglish : PlayerSettings.Switch.Languages # 1
            Japanese : PlayerSettings.Switch.Languages # 2
            French : PlayerSettings.Switch.Languages # 3
            German : PlayerSettings.Switch.Languages # 4
            LatinAmericanSpanish : PlayerSettings.Switch.Languages # 5
            Spanish : PlayerSettings.Switch.Languages # 6
            Italian : PlayerSettings.Switch.Languages # 7
            Dutch : PlayerSettings.Switch.Languages # 8
            CanadianFrench : PlayerSettings.Switch.Languages # 9
            Portuguese : PlayerSettings.Switch.Languages # 10
            Russian : PlayerSettings.Switch.Languages # 11
            SimplifiedChinese : PlayerSettings.Switch.Languages # 12
            TraditionalChinese : PlayerSettings.Switch.Languages # 13
            Korean : PlayerSettings.Switch.Languages # 14
            BrazilianPortuguese : PlayerSettings.Switch.Languages # 15


        class LogoHandling(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            Auto : PlayerSettings.Switch.LogoHandling # 0
            Manual : PlayerSettings.Switch.LogoHandling # 1


        class LogoType(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            LicensedByNintendo : PlayerSettings.Switch.LogoType # 0
            DistributedByNintendo : PlayerSettings.Switch.LogoType # 1
            Nintendo : PlayerSettings.Switch.LogoType # 2


        class RatingCategories(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            CERO : PlayerSettings.Switch.RatingCategories # 0
            GRACGCRB : PlayerSettings.Switch.RatingCategories # 1
            GSRMR : PlayerSettings.Switch.RatingCategories # 2
            ESRB : PlayerSettings.Switch.RatingCategories # 3
            ClassInd : PlayerSettings.Switch.RatingCategories # 4
            USK : PlayerSettings.Switch.RatingCategories # 5
            PEGI : PlayerSettings.Switch.RatingCategories # 6
            PEGIPortugal : PlayerSettings.Switch.RatingCategories # 7
            PEGIBBFC : PlayerSettings.Switch.RatingCategories # 8
            Russian : PlayerSettings.Switch.RatingCategories # 9
            ACB : PlayerSettings.Switch.RatingCategories # 10
            OFLC : PlayerSettings.Switch.RatingCategories # 11
            IARCGeneric : PlayerSettings.Switch.RatingCategories # 12


        class ScreenResolutionBehavior(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            Manual : PlayerSettings.Switch.ScreenResolutionBehavior # 0
            OperationMode : PlayerSettings.Switch.ScreenResolutionBehavior # 1
            PerformanceMode : PlayerSettings.Switch.ScreenResolutionBehavior # 2
            Both : PlayerSettings.Switch.ScreenResolutionBehavior # 3


        class StartupUserAccount(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            None_ : PlayerSettings.Switch.StartupUserAccount # 0
            Required : PlayerSettings.Switch.StartupUserAccount # 1
            RequiredWithNetworkServiceAccountAvailable : PlayerSettings.Switch.StartupUserAccount # 2


        class SupportedNpadStyle(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            FullKey : PlayerSettings.Switch.SupportedNpadStyle # 2
            Handheld : PlayerSettings.Switch.SupportedNpadStyle # 4
            JoyDual : PlayerSettings.Switch.SupportedNpadStyle # 16
            JoyLeft : PlayerSettings.Switch.SupportedNpadStyle # 256
            JoyRight : PlayerSettings.Switch.SupportedNpadStyle # 65536



    class tvOS:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def buildNumber(cls) -> str: ...
        @classmethod
        @buildNumber.setter
        def buildNumber(cls, value: str) -> str: ...
        @classmethod
        @property
        def requireExtendedGameController(cls) -> bool: ...
        @classmethod
        @requireExtendedGameController.setter
        def requireExtendedGameController(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def sdkVersion(cls) -> tvOSSdkVersion: ...
        @classmethod
        @sdkVersion.setter
        def sdkVersion(cls, value: tvOSSdkVersion) -> tvOSSdkVersion: ...
        @classmethod
        @property
        def targetOSVersion(cls) -> tvOSTargetOSVersion: ...
        @classmethod
        @targetOSVersion.setter
        def targetOSVersion(cls, value: tvOSTargetOSVersion) -> tvOSTargetOSVersion: ...
        @classmethod
        @property
        def targetOSVersionString(cls) -> str: ...
        @classmethod
        @targetOSVersionString.setter
        def targetOSVersionString(cls, value: str) -> str: ...


    class VisionOS:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def buildNumber(cls) -> str: ...
        @classmethod
        @buildNumber.setter
        def buildNumber(cls, value: str) -> str: ...
        @classmethod
        @property
        def sdkVersion(cls) -> VisionOSSdkVersion: ...
        @classmethod
        @sdkVersion.setter
        def sdkVersion(cls, value: VisionOSSdkVersion) -> VisionOSSdkVersion: ...
        @classmethod
        @property
        def targetOSVersionString(cls) -> str: ...
        @classmethod
        @targetOSVersionString.setter
        def targetOSVersionString(cls, value: str) -> str: ...


    class VRWindowsMixedReality(abc.ABC):
        @classmethod
        @property
        def depthBufferFormat(cls) -> PlayerSettings.VRWindowsMixedReality.DepthBufferFormat: ...
        @classmethod
        @depthBufferFormat.setter
        def depthBufferFormat(cls, value: PlayerSettings.VRWindowsMixedReality.DepthBufferFormat) -> PlayerSettings.VRWindowsMixedReality.DepthBufferFormat: ...
        @classmethod
        @property
        def depthBufferSharingEnabled(cls) -> bool: ...
        @classmethod
        @depthBufferSharingEnabled.setter
        def depthBufferSharingEnabled(cls, value: bool) -> bool: ...

        class DepthBufferFormat(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...
            
            # Values:
            DepthBufferFormat16Bit : PlayerSettings.VRWindowsMixedReality.DepthBufferFormat # 0
            DepthBufferFormat24Bit : PlayerSettings.VRWindowsMixedReality.DepthBufferFormat # 1



    class WebGL:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def analyzeBuildSize(cls) -> bool: ...
        @classmethod
        @analyzeBuildSize.setter
        def analyzeBuildSize(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def compressionFormat(cls) -> WebGLCompressionFormat: ...
        @classmethod
        @compressionFormat.setter
        def compressionFormat(cls, value: WebGLCompressionFormat) -> WebGLCompressionFormat: ...
        @classmethod
        @property
        def dataCaching(cls) -> bool: ...
        @classmethod
        @dataCaching.setter
        def dataCaching(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def debugSymbolMode(cls) -> WebGLDebugSymbolMode: ...
        @classmethod
        @debugSymbolMode.setter
        def debugSymbolMode(cls, value: WebGLDebugSymbolMode) -> WebGLDebugSymbolMode: ...
        @classmethod
        @property
        def debugSymbols(cls) -> bool: ...
        @classmethod
        @debugSymbols.setter
        def debugSymbols(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def decompressionFallback(cls) -> bool: ...
        @classmethod
        @decompressionFallback.setter
        def decompressionFallback(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def emscriptenArgs(cls) -> str: ...
        @classmethod
        @emscriptenArgs.setter
        def emscriptenArgs(cls, value: str) -> str: ...
        @classmethod
        @property
        def exceptionSupport(cls) -> WebGLExceptionSupport: ...
        @classmethod
        @exceptionSupport.setter
        def exceptionSupport(cls, value: WebGLExceptionSupport) -> WebGLExceptionSupport: ...
        @classmethod
        @property
        def geometricMemoryGrowthStep(cls) -> float: ...
        @classmethod
        @geometricMemoryGrowthStep.setter
        def geometricMemoryGrowthStep(cls, value: float) -> float: ...
        @classmethod
        @property
        def initialMemorySize(cls) -> int: ...
        @classmethod
        @initialMemorySize.setter
        def initialMemorySize(cls, value: int) -> int: ...
        @classmethod
        @property
        def linearMemoryGrowthStep(cls) -> int: ...
        @classmethod
        @linearMemoryGrowthStep.setter
        def linearMemoryGrowthStep(cls, value: int) -> int: ...
        @classmethod
        @property
        def linkerTarget(cls) -> WebGLLinkerTarget: ...
        @classmethod
        @linkerTarget.setter
        def linkerTarget(cls, value: WebGLLinkerTarget) -> WebGLLinkerTarget: ...
        @classmethod
        @property
        def maximumMemorySize(cls) -> int: ...
        @classmethod
        @maximumMemorySize.setter
        def maximumMemorySize(cls, value: int) -> int: ...
        @classmethod
        @property
        def memoryGeometricGrowthCap(cls) -> int: ...
        @classmethod
        @memoryGeometricGrowthCap.setter
        def memoryGeometricGrowthCap(cls, value: int) -> int: ...
        @classmethod
        @property
        def memoryGrowthMode(cls) -> WebGLMemoryGrowthMode: ...
        @classmethod
        @memoryGrowthMode.setter
        def memoryGrowthMode(cls, value: WebGLMemoryGrowthMode) -> WebGLMemoryGrowthMode: ...
        @classmethod
        @property
        def memorySize(cls) -> int: ...
        @classmethod
        @memorySize.setter
        def memorySize(cls, value: int) -> int: ...
        @classmethod
        @property
        def modulesDirectory(cls) -> str: ...
        @classmethod
        @modulesDirectory.setter
        def modulesDirectory(cls, value: str) -> str: ...
        @classmethod
        @property
        def nameFilesAsHashes(cls) -> bool: ...
        @classmethod
        @nameFilesAsHashes.setter
        def nameFilesAsHashes(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def powerPreference(cls) -> WebGLPowerPreference: ...
        @classmethod
        @powerPreference.setter
        def powerPreference(cls, value: WebGLPowerPreference) -> WebGLPowerPreference: ...
        @classmethod
        @property
        def showDiagnostics(cls) -> bool: ...
        @classmethod
        @showDiagnostics.setter
        def showDiagnostics(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def template(cls) -> str: ...
        @classmethod
        @template.setter
        def template(cls, value: str) -> str: ...
        @classmethod
        @property
        def threadsSupport(cls) -> bool: ...
        @classmethod
        @threadsSupport.setter
        def threadsSupport(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useEmbeddedResources(cls) -> bool: ...
        @classmethod
        @useEmbeddedResources.setter
        def useEmbeddedResources(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def useWasm(cls) -> bool: ...
        @classmethod
        @useWasm.setter
        def useWasm(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def wasmArithmeticExceptions(cls) -> WebGLWasmArithmeticExceptions: ...
        @classmethod
        @wasmArithmeticExceptions.setter
        def wasmArithmeticExceptions(cls, value: WebGLWasmArithmeticExceptions) -> WebGLWasmArithmeticExceptions: ...
        @classmethod
        @property
        def wasmStreaming(cls) -> bool: ...
        @classmethod
        @wasmStreaming.setter
        def wasmStreaming(cls, value: bool) -> bool: ...


    class WSA:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def applicationDescription(cls) -> str: ...
        @classmethod
        @applicationDescription.setter
        def applicationDescription(cls, value: str) -> str: ...
        @classmethod
        @property
        def certificateIssuer(cls) -> str: ...
        @classmethod
        @property
        def certificateNotAfter(cls) -> typing.Optional[DateTime]: ...
        @classmethod
        @property
        def certificatePath(cls) -> str: ...
        @classmethod
        @property
        def certificateSubject(cls) -> str: ...
        @classmethod
        @property
        def commandLineArgsFile(cls) -> str: ...
        @classmethod
        @commandLineArgsFile.setter
        def commandLineArgsFile(cls, value: str) -> str: ...
        @classmethod
        @property
        def defaultTileSize(cls) -> PlayerSettings.WSADefaultTileSize: ...
        @classmethod
        @defaultTileSize.setter
        def defaultTileSize(cls, value: PlayerSettings.WSADefaultTileSize) -> PlayerSettings.WSADefaultTileSize: ...
        @classmethod
        @property
        def enableIndependentInputSource(cls) -> bool: ...
        @classmethod
        @enableIndependentInputSource.setter
        def enableIndependentInputSource(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def enableLowLatencyPresentationAPI(cls) -> bool: ...
        @classmethod
        @enableLowLatencyPresentationAPI.setter
        def enableLowLatencyPresentationAPI(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def inputSource(cls) -> PlayerSettings.WSAInputSource: ...
        @classmethod
        @inputSource.setter
        def inputSource(cls, value: PlayerSettings.WSAInputSource) -> PlayerSettings.WSAInputSource: ...
        @classmethod
        @property
        def largeTileShowName(cls) -> bool: ...
        @classmethod
        @largeTileShowName.setter
        def largeTileShowName(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def lastRequiredScene(cls) -> int: ...
        @classmethod
        @lastRequiredScene.setter
        def lastRequiredScene(cls, value: int) -> int: ...
        @classmethod
        @property
        def mediumTileShowName(cls) -> bool: ...
        @classmethod
        @mediumTileShowName.setter
        def mediumTileShowName(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def packageLogo(cls) -> str: ...
        @classmethod
        @packageLogo.setter
        def packageLogo(cls, value: str) -> str: ...
        @classmethod
        @property
        def packageLogo140(cls) -> str: ...
        @classmethod
        @packageLogo140.setter
        def packageLogo140(cls, value: str) -> str: ...
        @classmethod
        @property
        def packageLogo180(cls) -> str: ...
        @classmethod
        @packageLogo180.setter
        def packageLogo180(cls, value: str) -> str: ...
        @classmethod
        @property
        def packageLogo240(cls) -> str: ...
        @classmethod
        @packageLogo240.setter
        def packageLogo240(cls, value: str) -> str: ...
        @classmethod
        @property
        def packageName(cls) -> str: ...
        @classmethod
        @packageName.setter
        def packageName(cls, value: str) -> str: ...
        @classmethod
        @property
        def packageVersion(cls) -> Version: ...
        @classmethod
        @packageVersion.setter
        def packageVersion(cls, value: Version) -> Version: ...
        @classmethod
        @property
        def phoneAppIcon(cls) -> str: ...
        @classmethod
        @phoneAppIcon.setter
        def phoneAppIcon(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneAppIcon140(cls) -> str: ...
        @classmethod
        @phoneAppIcon140.setter
        def phoneAppIcon140(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneAppIcon240(cls) -> str: ...
        @classmethod
        @phoneAppIcon240.setter
        def phoneAppIcon240(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneMediumTile(cls) -> str: ...
        @classmethod
        @phoneMediumTile.setter
        def phoneMediumTile(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneMediumTile140(cls) -> str: ...
        @classmethod
        @phoneMediumTile140.setter
        def phoneMediumTile140(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneMediumTile240(cls) -> str: ...
        @classmethod
        @phoneMediumTile240.setter
        def phoneMediumTile240(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneSmallTile(cls) -> str: ...
        @classmethod
        @phoneSmallTile.setter
        def phoneSmallTile(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneSmallTile140(cls) -> str: ...
        @classmethod
        @phoneSmallTile140.setter
        def phoneSmallTile140(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneSmallTile240(cls) -> str: ...
        @classmethod
        @phoneSmallTile240.setter
        def phoneSmallTile240(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneSplashScreenImage(cls) -> str: ...
        @classmethod
        @phoneSplashScreenImage.setter
        def phoneSplashScreenImage(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneSplashScreenImageScale140(cls) -> str: ...
        @classmethod
        @phoneSplashScreenImageScale140.setter
        def phoneSplashScreenImageScale140(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneSplashScreenImageScale240(cls) -> str: ...
        @classmethod
        @phoneSplashScreenImageScale240.setter
        def phoneSplashScreenImageScale240(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneWideTile(cls) -> str: ...
        @classmethod
        @phoneWideTile.setter
        def phoneWideTile(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneWideTile140(cls) -> str: ...
        @classmethod
        @phoneWideTile140.setter
        def phoneWideTile140(cls, value: str) -> str: ...
        @classmethod
        @property
        def phoneWideTile240(cls) -> str: ...
        @classmethod
        @phoneWideTile240.setter
        def phoneWideTile240(cls, value: str) -> str: ...
        @classmethod
        @property
        def splashScreenBackgroundColor(cls) -> typing.Optional[Color]: ...
        @classmethod
        @splashScreenBackgroundColor.setter
        def splashScreenBackgroundColor(cls, value: typing.Optional[Color]) -> typing.Optional[Color]: ...
        @classmethod
        @property
        def storeLargeTile(cls) -> str: ...
        @classmethod
        @storeLargeTile.setter
        def storeLargeTile(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeLargeTile140(cls) -> str: ...
        @classmethod
        @storeLargeTile140.setter
        def storeLargeTile140(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeLargeTile180(cls) -> str: ...
        @classmethod
        @storeLargeTile180.setter
        def storeLargeTile180(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeLargeTile80(cls) -> str: ...
        @classmethod
        @storeLargeTile80.setter
        def storeLargeTile80(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSmallTile(cls) -> str: ...
        @classmethod
        @storeSmallTile.setter
        def storeSmallTile(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSmallTile140(cls) -> str: ...
        @classmethod
        @storeSmallTile140.setter
        def storeSmallTile140(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSmallTile180(cls) -> str: ...
        @classmethod
        @storeSmallTile180.setter
        def storeSmallTile180(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSmallTile80(cls) -> str: ...
        @classmethod
        @storeSmallTile80.setter
        def storeSmallTile80(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSplashScreenImage(cls) -> str: ...
        @classmethod
        @storeSplashScreenImage.setter
        def storeSplashScreenImage(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSplashScreenImageScale140(cls) -> str: ...
        @classmethod
        @storeSplashScreenImageScale140.setter
        def storeSplashScreenImageScale140(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeSplashScreenImageScale180(cls) -> str: ...
        @classmethod
        @storeSplashScreenImageScale180.setter
        def storeSplashScreenImageScale180(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileLogo(cls) -> str: ...
        @classmethod
        @storeTileLogo.setter
        def storeTileLogo(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileLogo140(cls) -> str: ...
        @classmethod
        @storeTileLogo140.setter
        def storeTileLogo140(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileLogo180(cls) -> str: ...
        @classmethod
        @storeTileLogo180.setter
        def storeTileLogo180(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileLogo80(cls) -> str: ...
        @classmethod
        @storeTileLogo80.setter
        def storeTileLogo80(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileSmallLogo(cls) -> str: ...
        @classmethod
        @storeTileSmallLogo.setter
        def storeTileSmallLogo(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileSmallLogo140(cls) -> str: ...
        @classmethod
        @storeTileSmallLogo140.setter
        def storeTileSmallLogo140(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileSmallLogo180(cls) -> str: ...
        @classmethod
        @storeTileSmallLogo180.setter
        def storeTileSmallLogo180(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileSmallLogo80(cls) -> str: ...
        @classmethod
        @storeTileSmallLogo80.setter
        def storeTileSmallLogo80(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileWideLogo(cls) -> str: ...
        @classmethod
        @storeTileWideLogo.setter
        def storeTileWideLogo(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileWideLogo140(cls) -> str: ...
        @classmethod
        @storeTileWideLogo140.setter
        def storeTileWideLogo140(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileWideLogo180(cls) -> str: ...
        @classmethod
        @storeTileWideLogo180.setter
        def storeTileWideLogo180(cls, value: str) -> str: ...
        @classmethod
        @property
        def storeTileWideLogo80(cls) -> str: ...
        @classmethod
        @storeTileWideLogo80.setter
        def storeTileWideLogo80(cls, value: str) -> str: ...
        @classmethod
        @property
        def supportStreamingInstall(cls) -> bool: ...
        @classmethod
        @supportStreamingInstall.setter
        def supportStreamingInstall(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def tileBackgroundColor(cls) -> Color: ...
        @classmethod
        @tileBackgroundColor.setter
        def tileBackgroundColor(cls, value: Color) -> Color: ...
        @classmethod
        @property
        def tileForegroundText(cls) -> PlayerSettings.WSAApplicationForegroundText: ...
        @classmethod
        @tileForegroundText.setter
        def tileForegroundText(cls, value: PlayerSettings.WSAApplicationForegroundText) -> PlayerSettings.WSAApplicationForegroundText: ...
        @classmethod
        @property
        def tileShortName(cls) -> str: ...
        @classmethod
        @tileShortName.setter
        def tileShortName(cls, value: str) -> str: ...
        @classmethod
        @property
        def tileShowName(cls) -> PlayerSettings.WSAApplicationShowName: ...
        @classmethod
        @tileShowName.setter
        def tileShowName(cls, value: PlayerSettings.WSAApplicationShowName) -> PlayerSettings.WSAApplicationShowName: ...
        @classmethod
        @property
        def transparentSwapchain(cls) -> bool: ...
        @classmethod
        @transparentSwapchain.setter
        def transparentSwapchain(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def vcxProjDefaultLanguage(cls) -> str: ...
        @classmethod
        @vcxProjDefaultLanguage.setter
        def vcxProjDefaultLanguage(cls, value: str) -> str: ...
        @classmethod
        @property
        def wideTileShowName(cls) -> bool: ...
        @classmethod
        @wideTileShowName.setter
        def wideTileShowName(cls, value: bool) -> bool: ...
        @staticmethod
        def GetCapability(capability: PlayerSettings.WSACapability) -> bool: ...
        @staticmethod
        def GetTargetDeviceFamily(family: PlayerSettings.WSATargetFamily) -> bool: ...
        @staticmethod
        def GetVisualAssetsImage(type: PlayerSettings.WSAImageType, scale: PlayerSettings.WSAImageScale) -> str: ...
        @staticmethod
        def SetCapability(capability: PlayerSettings.WSACapability, value: bool) -> None: ...
        @staticmethod
        def SetCertificate(path: str, password: str) -> bool: ...
        @staticmethod
        def SetTargetDeviceFamily(family: PlayerSettings.WSATargetFamily, value: bool) -> None: ...
        @staticmethod
        def SetVisualAssetsImage(image: str, type: PlayerSettings.WSAImageType, scale: PlayerSettings.WSAImageScale) -> None: ...

        class Declarations(abc.ABC):
            @classmethod
            @property
            def fileTypeAssociations(cls) -> PlayerSettings.WSAFileTypeAssociations: ...
            @classmethod
            @fileTypeAssociations.setter
            def fileTypeAssociations(cls, value: PlayerSettings.WSAFileTypeAssociations) -> PlayerSettings.WSAFileTypeAssociations: ...
            @classmethod
            @property
            def protocolName(cls) -> str: ...
            @classmethod
            @protocolName.setter
            def protocolName(cls, value: str) -> str: ...



    class WSAApplicationForegroundText(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Light : PlayerSettings.WSAApplicationForegroundText # 1
        Dark : PlayerSettings.WSAApplicationForegroundText # 2


    class WSAApplicationShowName(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        NotSet : PlayerSettings.WSAApplicationShowName # 0
        AllLogos : PlayerSettings.WSAApplicationShowName # 1
        NoLogos : PlayerSettings.WSAApplicationShowName # 2
        StandardLogoOnly : PlayerSettings.WSAApplicationShowName # 3
        WideLogoOnly : PlayerSettings.WSAApplicationShowName # 4


    class WSACapability(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        EnterpriseAuthentication : PlayerSettings.WSACapability # 0
        InternetClient : PlayerSettings.WSACapability # 1
        InternetClientServer : PlayerSettings.WSACapability # 2
        MusicLibrary : PlayerSettings.WSACapability # 3
        PicturesLibrary : PlayerSettings.WSACapability # 4
        PrivateNetworkClientServer : PlayerSettings.WSACapability # 5
        RemovableStorage : PlayerSettings.WSACapability # 6
        SharedUserCertificates : PlayerSettings.WSACapability # 7
        VideosLibrary : PlayerSettings.WSACapability # 8
        WebCam : PlayerSettings.WSACapability # 9
        Proximity : PlayerSettings.WSACapability # 10
        Microphone : PlayerSettings.WSACapability # 11
        Location : PlayerSettings.WSACapability # 12
        HumanInterfaceDevice : PlayerSettings.WSACapability # 13
        AllJoyn : PlayerSettings.WSACapability # 14
        BlockedChatMessages : PlayerSettings.WSACapability # 15
        Chat : PlayerSettings.WSACapability # 16
        CodeGeneration : PlayerSettings.WSACapability # 17
        Objects3D : PlayerSettings.WSACapability # 18
        PhoneCall : PlayerSettings.WSACapability # 19
        UserAccountInformation : PlayerSettings.WSACapability # 20
        VoipCall : PlayerSettings.WSACapability # 21
        Bluetooth : PlayerSettings.WSACapability # 22
        SpatialPerception : PlayerSettings.WSACapability # 23
        InputInjectionBrokered : PlayerSettings.WSACapability # 24
        Appointments : PlayerSettings.WSACapability # 25
        BackgroundMediaPlayback : PlayerSettings.WSACapability # 26
        Contacts : PlayerSettings.WSACapability # 27
        LowLevelDevices : PlayerSettings.WSACapability # 28
        OfflineMapsManagement : PlayerSettings.WSACapability # 29
        PhoneCallHistoryPublic : PlayerSettings.WSACapability # 30
        PointOfService : PlayerSettings.WSACapability # 31
        RecordedCallsFolder : PlayerSettings.WSACapability # 32
        RemoteSystem : PlayerSettings.WSACapability # 33
        SystemManagement : PlayerSettings.WSACapability # 34
        UserDataTasks : PlayerSettings.WSACapability # 35
        UserNotificationListener : PlayerSettings.WSACapability # 36
        GazeInput : PlayerSettings.WSACapability # 37


    class WSADefaultTileSize(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        NotSet : PlayerSettings.WSADefaultTileSize # 0
        Medium : PlayerSettings.WSADefaultTileSize # 1
        Wide : PlayerSettings.WSADefaultTileSize # 2


    class WSAFileTypeAssociations:
        name : str
        supportedFileTypes : Array_1[PlayerSettings.WSASupportedFileType]


    class WSAImageScale(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Target16 : PlayerSettings.WSAImageScale # 16
        Target24 : PlayerSettings.WSAImageScale # 24
        Target32 : PlayerSettings.WSAImageScale # 32
        Target48 : PlayerSettings.WSAImageScale # 48
        _80 : PlayerSettings.WSAImageScale # 80
        _100 : PlayerSettings.WSAImageScale # 100
        _125 : PlayerSettings.WSAImageScale # 125
        _140 : PlayerSettings.WSAImageScale # 140
        _150 : PlayerSettings.WSAImageScale # 150
        _180 : PlayerSettings.WSAImageScale # 180
        _200 : PlayerSettings.WSAImageScale # 200
        _240 : PlayerSettings.WSAImageScale # 240
        Target256 : PlayerSettings.WSAImageScale # 256
        _400 : PlayerSettings.WSAImageScale # 400


    class WSAImageType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        PackageLogo : PlayerSettings.WSAImageType # 1
        SplashScreenImage : PlayerSettings.WSAImageType # 2
        UWPSquare44x44Logo : PlayerSettings.WSAImageType # 31
        UWPSquare71x71Logo : PlayerSettings.WSAImageType # 32
        UWPSquare150x150Logo : PlayerSettings.WSAImageType # 33
        UWPSquare310x310Logo : PlayerSettings.WSAImageType # 34
        UWPWide310x150Logo : PlayerSettings.WSAImageType # 35


    class WSAInputSource(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        CoreWindow : PlayerSettings.WSAInputSource # 0
        IndependentInputSource : PlayerSettings.WSAInputSource # 1
        SwapChainPanel : PlayerSettings.WSAInputSource # 2


    class WSASupportedFileType:
        contentType : str
        fileType : str


    class WSATargetFamily(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Desktop : PlayerSettings.WSATargetFamily # 0
        Mobile : PlayerSettings.WSATargetFamily # 1
        Xbox : PlayerSettings.WSATargetFamily # 2
        Holographic : PlayerSettings.WSATargetFamily # 3
        Team : PlayerSettings.WSATargetFamily # 4
        IoT : PlayerSettings.WSATargetFamily # 5
        IoTHeadless : PlayerSettings.WSATargetFamily # 6


    class XboxOne:
        def __init__(self) -> None: ...
        @classmethod
        @property
        def AllowedProductIds(cls) -> Array_1[str]: ...
        @classmethod
        @property
        def AppManifestOverridePath(cls) -> str: ...
        @classmethod
        @AppManifestOverridePath.setter
        def AppManifestOverridePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def ContentId(cls) -> str: ...
        @classmethod
        @ContentId.setter
        def ContentId(cls, value: str) -> str: ...
        @classmethod
        @property
        def defaultLoggingLevel(cls) -> XboxOneLoggingLevel: ...
        @classmethod
        @defaultLoggingLevel.setter
        def defaultLoggingLevel(cls, value: XboxOneLoggingLevel) -> XboxOneLoggingLevel: ...
        @classmethod
        @property
        def Description(cls) -> str: ...
        @classmethod
        @Description.setter
        def Description(cls, value: str) -> str: ...
        @classmethod
        @property
        def DisableKinectGpuReservation(cls) -> bool: ...
        @classmethod
        @DisableKinectGpuReservation.setter
        def DisableKinectGpuReservation(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def Enable7thCore(cls) -> bool: ...
        @classmethod
        @Enable7thCore.setter
        def Enable7thCore(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def EnablePIXSampling(cls) -> bool: ...
        @classmethod
        @EnablePIXSampling.setter
        def EnablePIXSampling(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def EnableTypeOptimization(cls) -> bool: ...
        @classmethod
        @EnableTypeOptimization.setter
        def EnableTypeOptimization(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def EnableVariableGPU(cls) -> bool: ...
        @classmethod
        @EnableVariableGPU.setter
        def EnableVariableGPU(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def EnhancedXboxCompatibilityMode(cls) -> bool: ...
        @classmethod
        @EnhancedXboxCompatibilityMode.setter
        def EnhancedXboxCompatibilityMode(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def GameOsOverridePath(cls) -> str: ...
        @classmethod
        @GameOsOverridePath.setter
        def GameOsOverridePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def IsContentPackage(cls) -> bool: ...
        @classmethod
        @IsContentPackage.setter
        def IsContentPackage(cls, value: bool) -> bool: ...
        @classmethod
        @property
        def monoLoggingLevel(cls) -> int: ...
        @classmethod
        @monoLoggingLevel.setter
        def monoLoggingLevel(cls, value: int) -> int: ...
        @classmethod
        @property
        def OverrideIdentityName(cls) -> str: ...
        @classmethod
        @OverrideIdentityName.setter
        def OverrideIdentityName(cls, value: str) -> str: ...
        @classmethod
        @property
        def OverrideIdentityPublisher(cls) -> str: ...
        @classmethod
        @OverrideIdentityPublisher.setter
        def OverrideIdentityPublisher(cls, value: str) -> str: ...
        @classmethod
        @property
        def PackageUpdateGranularity(cls) -> XboxOnePackageUpdateGranularity: ...
        @classmethod
        @PackageUpdateGranularity.setter
        def PackageUpdateGranularity(cls, value: XboxOnePackageUpdateGranularity) -> XboxOnePackageUpdateGranularity: ...
        @classmethod
        @property
        def PackagingEncryption(cls) -> XboxOneEncryptionLevel: ...
        @classmethod
        @PackagingEncryption.setter
        def PackagingEncryption(cls, value: XboxOneEncryptionLevel) -> XboxOneEncryptionLevel: ...
        @classmethod
        @property
        def PackagingOverridePath(cls) -> str: ...
        @classmethod
        @PackagingOverridePath.setter
        def PackagingOverridePath(cls, value: str) -> str: ...
        @classmethod
        @property
        def PersistentLocalStorageSize(cls) -> int: ...
        @classmethod
        @PersistentLocalStorageSize.setter
        def PersistentLocalStorageSize(cls, value: int) -> int: ...
        @classmethod
        @property
        def PresentImmediateThreshold(cls) -> int: ...
        @classmethod
        @PresentImmediateThreshold.setter
        def PresentImmediateThreshold(cls, value: int) -> int: ...
        @classmethod
        @property
        def ProductId(cls) -> str: ...
        @classmethod
        @ProductId.setter
        def ProductId(cls, value: str) -> str: ...
        @classmethod
        @property
        def SandboxId(cls) -> str: ...
        @classmethod
        @SandboxId.setter
        def SandboxId(cls, value: str) -> str: ...
        @classmethod
        @property
        def SCID(cls) -> str: ...
        @classmethod
        @SCID.setter
        def SCID(cls, value: str) -> str: ...
        @classmethod
        @property
        def scriptCompiler(cls) -> ScriptCompiler: ...
        @classmethod
        @scriptCompiler.setter
        def scriptCompiler(cls, value: ScriptCompiler) -> ScriptCompiler: ...
        @classmethod
        @property
        def SocketNames(cls) -> Array_1[str]: ...
        @classmethod
        @property
        def TitleId(cls) -> str: ...
        @classmethod
        @TitleId.setter
        def TitleId(cls, value: str) -> str: ...
        @classmethod
        @property
        def UpdateKey(cls) -> str: ...
        @classmethod
        @UpdateKey.setter
        def UpdateKey(cls, value: str) -> str: ...
        @classmethod
        @property
        def Version(cls) -> str: ...
        @classmethod
        @Version.setter
        def Version(cls, value: str) -> str: ...
        @classmethod
        @property
        def XTitleMemory(cls) -> int: ...
        @classmethod
        @XTitleMemory.setter
        def XTitleMemory(cls, value: int) -> int: ...
        @staticmethod
        def AddAllowedProductId(id: str) -> bool: ...
        @staticmethod
        def GetCapability(capability: str) -> bool: ...
        @staticmethod
        def GetGameRating(name: str) -> int: ...
        @staticmethod
        def GetSocketDefinition(name: str, port: clr.Reference[str], protocol: clr.Reference[int], usages: clr.Reference[Array_1[int]], templateName: clr.Reference[str], sessionRequirment: clr.Reference[int], deviceUsages: clr.Reference[Array_1[int]]) -> None: ...
        @staticmethod
        def GetSupportedLanguage(language: str) -> bool: ...
        @staticmethod
        def RemoveAllowedProductId(id: str) -> None: ...
        @staticmethod
        def RemoveSocketDefinition(name: str) -> None: ...
        @staticmethod
        def SetCapability(capability: str, value: bool) -> None: ...
        @staticmethod
        def SetGameRating(name: str, value: int) -> None: ...
        @staticmethod
        def SetSocketDefinition(name: str, port: str, protocol: int, usages: Array_1[int], templateName: str, sessionRequirment: int, deviceUsages: Array_1[int]) -> None: ...
        @staticmethod
        def SetSupportedLanguage(language: str, enabled: bool) -> None: ...
        @staticmethod
        def UpdateAllowedProductId(idx: int, id: str) -> None: ...



class PlayModeStateChange(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    EnteredEditMode : PlayModeStateChange # 0
    ExitingEditMode : PlayModeStateChange # 1
    EnteredPlayMode : PlayModeStateChange # 2
    ExitingPlayMode : PlayModeStateChange # 3


class PlayModeWindow:
    @staticmethod
    def GetPlayModeFocused() -> bool: ...
    @staticmethod
    def GetRenderingResolution(width: clr.Reference[int], height: clr.Reference[int]) -> None: ...
    @staticmethod
    def GetViewType() -> PlayModeWindow.PlayModeViewTypes: ...
    @staticmethod
    def SetCustomRenderingResolution(width: int, height: int, baseName: str) -> None: ...
    @staticmethod
    def SetPlayModeFocused(focused: bool) -> None: ...
    @staticmethod
    def SetViewType(type: PlayModeWindow.PlayModeViewTypes) -> None: ...

    class PlayModeViewTypes(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        GameView : PlayModeWindow.PlayModeViewTypes # 0
        SimulatorView : PlayModeWindow.PlayModeViewTypes # 1



class PluginImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def DefineConstraints(self) -> Array_1[str]: ...
    @DefineConstraints.setter
    def DefineConstraints(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def isNativePlugin(self) -> bool: ...
    @property
    def isPreloaded(self) -> bool: ...
    @isPreloaded.setter
    def isPreloaded(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    def ClearSettings(self) -> None: ...
    @staticmethod
    def GetAllImporters() -> Array_1[PluginImporter]: ...
    def GetCompatibleWithAnyPlatform(self) -> bool: ...
    def GetEditorData(self, key: str) -> str: ...
    def GetExcludeEditorFromAnyPlatform(self) -> bool: ...
    def GetIcon(self, className: str) -> Texture2D: ...
    def GetIsOverridable(self) -> bool: ...
    def SetCompatibleWithAnyPlatform(self, enable: bool) -> None: ...
    def SetCompatibleWithEditor(self, enable: bool) -> None: ...
    def SetEditorData(self, key: str, value: str) -> None: ...
    def SetExcludeEditorFromAnyPlatform(self, excludedFromAny: bool) -> None: ...
    def SetIcon(self, className: str, icon: Texture2D) -> None: ...
    def SetIncludeInBuildDelegate(self, includeInBuildDelegate: PluginImporter.IncludeInBuildDelegate) -> None: ...
    def ShouldIncludeInBuild(self) -> bool: ...
    # Skipped GetCompatibleWithEditor due to it being static, abstract and generic.

    GetCompatibleWithEditor : GetCompatibleWithEditor_MethodGroup
    class GetCompatibleWithEditor_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, buildTargetGroup: str, buildTarget: str) -> bool:...

    # Skipped GetCompatibleWithPlatform due to it being static, abstract and generic.

    GetCompatibleWithPlatform : GetCompatibleWithPlatform_MethodGroup
    class GetCompatibleWithPlatform_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget) -> bool:...
        @typing.overload
        def __call__(self, platformName: str) -> bool:...

    # Skipped GetExcludeFromAnyPlatform due to it being static, abstract and generic.

    GetExcludeFromAnyPlatform : GetExcludeFromAnyPlatform_MethodGroup
    class GetExcludeFromAnyPlatform_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget) -> bool:...
        @typing.overload
        def __call__(self, platformName: str) -> bool:...

    # Skipped GetImporters due to it being static, abstract and generic.

    GetImporters : GetImporters_MethodGroup
    class GetImporters_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget) -> Array_1[PluginImporter]:...
        @typing.overload
        def __call__(self, platformName: str) -> Array_1[PluginImporter]:...
        @typing.overload
        def __call__(self, buildTargetGroup: BuildTargetGroup, buildTarget: BuildTarget) -> Array_1[PluginImporter]:...
        @typing.overload
        def __call__(self, buildTargetGroup: str, buildTarget: str) -> Array_1[PluginImporter]:...

    # Skipped GetPlatformData due to it being static, abstract and generic.

    GetPlatformData : GetPlatformData_MethodGroup
    class GetPlatformData_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget, key: str) -> str:...
        @typing.overload
        def __call__(self, platformName: str, key: str) -> str:...

    # Skipped SetCompatibleWithPlatform due to it being static, abstract and generic.

    SetCompatibleWithPlatform : SetCompatibleWithPlatform_MethodGroup
    class SetCompatibleWithPlatform_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget, enable: bool) -> None:...
        @typing.overload
        def __call__(self, platformName: str, enable: bool) -> None:...

    # Skipped SetExcludeFromAnyPlatform due to it being static, abstract and generic.

    SetExcludeFromAnyPlatform : SetExcludeFromAnyPlatform_MethodGroup
    class SetExcludeFromAnyPlatform_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget, excludedFromAny: bool) -> None:...
        @typing.overload
        def __call__(self, platformName: str, excludedFromAny: bool) -> None:...

    # Skipped SetPlatformData due to it being static, abstract and generic.

    SetPlatformData : SetPlatformData_MethodGroup
    class SetPlatformData_MethodGroup:
        @typing.overload
        def __call__(self, platform: BuildTarget, key: str, value: str) -> None:...
        @typing.overload
        def __call__(self, platformName: str, key: str, value: str) -> None:...


    class IncludeInBuildDelegate(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, path: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, path: str) -> bool: ...



class PopupWindow(EditorWindow):
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    @staticmethod
    def Show(activatorRect: Rect, windowContent: PopupWindowContent) -> None: ...


class PopupWindowContent(abc.ABC):
    @property
    def editorWindow(self) -> EditorWindow: ...
    @editorWindow.setter
    def editorWindow(self, value: EditorWindow) -> EditorWindow: ...
    def GetWindowSize(self) -> Vector2: ...
    def OnClose(self) -> None: ...
    @abc.abstractmethod
    def OnGUI(self, rect: Rect) -> None: ...
    def OnOpen(self) -> None: ...


class PostProcessAttribute(CallbackOrderAttribute):
    @property
    def TypeId(self) -> typing.Any: ...


class PrefabAssetType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotAPrefab : PrefabAssetType # 0
    Regular : PrefabAssetType # 1
    Model : PrefabAssetType # 2
    Variant : PrefabAssetType # 3
    MissingAsset : PrefabAssetType # 4


class PrefabInstanceStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotAPrefab : PrefabInstanceStatus # 0
    Connected : PrefabInstanceStatus # 1
    Disconnected : PrefabInstanceStatus # 2
    MissingAsset : PrefabInstanceStatus # 3


class PrefabOverridesOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    KeepAllPossibleOverrides : PrefabOverridesOptions # 0
    ClearNonDefaultPropertyOverrides : PrefabOverridesOptions # 1
    ClearAddedComponents : PrefabOverridesOptions # 2
    ClearRemovedComponents : PrefabOverridesOptions # 4
    ClearAddedGameObjects : PrefabOverridesOptions # 8
    ClearRemovedGameObjects : PrefabOverridesOptions # 16
    ClearAllOverridesExceptPropertyOverrides : PrefabOverridesOptions # 30
    ClearAllNonDefaultOverrides : PrefabOverridesOptions # 31


class PrefabReplacingSettings:
    def __init__(self) -> None: ...
    @property
    def changeRootNameToAssetName(self) -> bool: ...
    @changeRootNameToAssetName.setter
    def changeRootNameToAssetName(self, value: bool) -> bool: ...
    @property
    def logInfo(self) -> bool: ...
    @logInfo.setter
    def logInfo(self, value: bool) -> bool: ...
    @property
    def objectMatchMode(self) -> ObjectMatchMode: ...
    @objectMatchMode.setter
    def objectMatchMode(self, value: ObjectMatchMode) -> ObjectMatchMode: ...
    @property
    def prefabOverridesOptions(self) -> PrefabOverridesOptions: ...
    @prefabOverridesOptions.setter
    def prefabOverridesOptions(self, value: PrefabOverridesOptions) -> PrefabOverridesOptions: ...


class PrefabType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : PrefabType # 0
    Prefab : PrefabType # 1
    ModelPrefab : PrefabType # 2
    PrefabInstance : PrefabType # 3
    ModelPrefabInstance : PrefabType # 4
    MissingPrefabInstance : PrefabType # 5
    DisconnectedPrefabInstance : PrefabType # 6
    DisconnectedModelPrefabInstance : PrefabType # 7


class PrefabUnpackMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OutermostRoot : PrefabUnpackMode # 0
    Completely : PrefabUnpackMode # 1


class PrefabUtility:
    def __init__(self) -> None: ...
    prefabInstanceUpdated : PrefabUtility.PrefabInstanceUpdated
    @staticmethod
    def ApplyAddedComponent(component: Component, assetPath: str, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyAddedGameObject(gameObject: GameObject, assetPath: str, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyAddedGameObjects(gameObjects: Array_1[GameObject], assetPath: str, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyObjectOverride(instanceComponentOrGameObject: Object, assetPath: str, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyPrefabInstance(instanceRoot: GameObject, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyPrefabInstances(instanceRoots: Array_1[GameObject], action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyPropertyOverride(instanceProperty: SerializedProperty, assetPath: str, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyRemovedComponent(instanceGameObject: GameObject, assetComponent: Component, action: InteractionMode) -> None: ...
    @staticmethod
    def ApplyRemovedGameObject(gameObjectInInstance: GameObject, assetGameObject: GameObject, action: InteractionMode) -> None: ...
    @staticmethod
    def ConnectGameObjectToPrefab(go: GameObject, sourcePrefab: GameObject) -> GameObject: ...
    @staticmethod
    def ConvertToPrefabInstance(plainGameObject: GameObject, prefabAssetRoot: GameObject, settings: ConvertToPrefabInstanceSettings, mode: InteractionMode) -> None: ...
    @staticmethod
    def ConvertToPrefabInstances(plainGameObjects: Array_1[GameObject], prefabAssetRoot: GameObject, settings: ConvertToPrefabInstanceSettings, mode: InteractionMode) -> None: ...
    @staticmethod
    def CreateEmptyPrefab(path: str) -> Object: ...
    @staticmethod
    def DisconnectPrefabInstance(targetObject: Object) -> None: ...
    @staticmethod
    def FindPrefabRoot(source: GameObject) -> GameObject: ...
    @staticmethod
    def FindRootGameObjectWithSameParentPrefab(target: GameObject) -> GameObject: ...
    @staticmethod
    def FindValidUploadPrefabInstanceRoot(target: GameObject) -> GameObject: ...
    @staticmethod
    def GetAddedComponents(prefabInstance: GameObject) -> List_1[AddedComponent]: ...
    @staticmethod
    def GetAddedGameObjects(prefabInstance: GameObject) -> List_1[AddedGameObject]: ...
    @staticmethod
    def GetIconForGameObject(gameObject: GameObject) -> Texture2D: ...
    @staticmethod
    def GetNearestPrefabInstanceRoot(componentOrGameObject: Object) -> GameObject: ...
    @staticmethod
    def GetObjectOverrides(prefabInstance: GameObject, includeDefaultOverrides: bool = ...) -> List_1[ObjectOverride]: ...
    @staticmethod
    def GetOriginalSourceRootWhereGameObjectIsAdded(gameObject: GameObject) -> GameObject: ...
    @staticmethod
    def GetOutermostPrefabInstanceRoot(componentOrGameObject: Object) -> GameObject: ...
    @staticmethod
    def GetPrefabAssetPathOfNearestInstanceRoot(instanceComponentOrGameObject: Object) -> str: ...
    @staticmethod
    def GetPrefabAssetType(componentOrGameObject: Object) -> PrefabAssetType: ...
    @staticmethod
    def GetPrefabInstanceHandle(instanceComponentOrGameObject: Object) -> Object: ...
    @staticmethod
    def GetPrefabInstanceStatus(componentOrGameObject: Object) -> PrefabInstanceStatus: ...
    @staticmethod
    def GetPrefabObject(targetObject: Object) -> Object: ...
    @staticmethod
    def GetPrefabParent(obj: Object) -> Object: ...
    @staticmethod
    def GetPrefabType(target: Object) -> PrefabType: ...
    @staticmethod
    def GetPropertyModifications(targetPrefab: Object) -> Array_1[PropertyModification]: ...
    @staticmethod
    def GetRemovedComponents(prefabInstance: GameObject) -> List_1[RemovedComponent]: ...
    @staticmethod
    def GetRemovedGameObjects(prefabInstance: GameObject) -> List_1[RemovedGameObject]: ...
    @staticmethod
    def HasManagedReferencesWithMissingTypes(assetComponentOrGameObject: Object) -> bool: ...
    @staticmethod
    def HasPrefabInstanceAnyOverrides(instanceRoot: GameObject, includeDefaultOverrides: bool) -> bool: ...
    @staticmethod
    def InstantiateAttachedAsset(targetObject: Object) -> Object: ...
    @staticmethod
    def IsAddedComponentOverride(component: Object) -> bool: ...
    @staticmethod
    def IsAddedGameObjectOverride(gameObject: GameObject) -> bool: ...
    @staticmethod
    def IsAnyPrefabInstanceRoot(gameObject: GameObject) -> bool: ...
    @staticmethod
    def IsDefaultOverride(modification: PropertyModification) -> bool: ...
    @staticmethod
    def IsDisconnectedFromPrefabAsset(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsOutermostPrefabInstanceRoot(gameObject: GameObject) -> bool: ...
    @staticmethod
    def IsPartOfAnyPrefab(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfImmutablePrefab(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfModelPrefab(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfNonAssetPrefabInstance(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfPrefabAsset(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfPrefabInstance(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfPrefabThatCanBeAppliedTo(gameObjectOrComponent: Object) -> bool: ...
    @staticmethod
    def IsPartOfRegularPrefab(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPartOfVariantPrefab(componentOrGameObject: Object) -> bool: ...
    @staticmethod
    def IsPrefabAssetMissing(instanceComponentOrGameObject: Object) -> bool: ...
    @staticmethod
    def LoadPrefabContents(assetPath: str) -> GameObject: ...
    @staticmethod
    def LoadPrefabContentsIntoPreviewScene(prefabPath: str, scene: Scene) -> None: ...
    @staticmethod
    def MergeAllPrefabInstances(targetObject: Object) -> None: ...
    @staticmethod
    def MergePrefabInstance(instanceRoot: GameObject) -> None: ...
    @staticmethod
    def ReconnectToLastPrefab(go: GameObject) -> bool: ...
    @staticmethod
    def RecordPrefabInstancePropertyModifications(targetObject: Object) -> None: ...
    @staticmethod
    def ResetToPrefabState(obj: Object) -> bool: ...
    @staticmethod
    def RevertAddedComponent(component: Component, action: InteractionMode) -> None: ...
    @staticmethod
    def RevertAddedGameObject(gameObject: GameObject, action: InteractionMode) -> None: ...
    @staticmethod
    def RevertObjectOverride(instanceComponentOrGameObject: Object, action: InteractionMode) -> None: ...
    @staticmethod
    def RevertPropertyOverride(instanceProperty: SerializedProperty, action: InteractionMode) -> None: ...
    @staticmethod
    def RevertRemovedComponent(instanceGameObject: GameObject, assetComponent: Component, action: InteractionMode) -> None: ...
    @staticmethod
    def RevertRemovedGameObject(gameObjectInInstance: GameObject, assetGameObject: GameObject, action: InteractionMode) -> None: ...
    @staticmethod
    def SetPropertyModifications(targetPrefab: Object, modifications: Array_1[PropertyModification]) -> None: ...
    @staticmethod
    def UnloadPrefabContents(contentsRoot: GameObject) -> None: ...
    @staticmethod
    def UnpackAllInstancesOfPrefab(prefabRoot: GameObject, unpackMode: PrefabUnpackMode, action: InteractionMode) -> None: ...
    @staticmethod
    def UnpackPrefabInstance(instanceRoot: GameObject, unpackMode: PrefabUnpackMode, action: InteractionMode) -> None: ...
    @staticmethod
    def UnpackPrefabInstanceAndReturnNewOutermostRoots(instanceRoot: GameObject, unpackMode: PrefabUnpackMode) -> Array_1[GameObject]: ...
    # Skipped CreatePrefab due to it being static, abstract and generic.

    CreatePrefab : CreatePrefab_MethodGroup
    class CreatePrefab_MethodGroup:
        @typing.overload
        def __call__(self, path: str, go: GameObject) -> GameObject:...
        @typing.overload
        def __call__(self, path: str, go: GameObject, options: ReplacePrefabOptions) -> GameObject:...

    # Skipped FindAllInstancesOfPrefab due to it being static, abstract and generic.

    FindAllInstancesOfPrefab : FindAllInstancesOfPrefab_MethodGroup
    class FindAllInstancesOfPrefab_MethodGroup:
        @typing.overload
        def __call__(self, prefabRoot: GameObject) -> Array_1[GameObject]:...
        @typing.overload
        def __call__(self, prefabRoot: GameObject, scene: Scene) -> Array_1[GameObject]:...

    # Skipped GetCorrespondingObjectFromOriginalSource due to it being static, abstract and generic.

    GetCorrespondingObjectFromOriginalSource : GetCorrespondingObjectFromOriginalSource_MethodGroup
    class GetCorrespondingObjectFromOriginalSource_MethodGroup:
        def __getitem__(self, t:typing.Type[GetCorrespondingObjectFromOriginalSource_1_T1]) -> GetCorrespondingObjectFromOriginalSource_1[GetCorrespondingObjectFromOriginalSource_1_T1]: ...

        GetCorrespondingObjectFromOriginalSource_1_T1 = typing.TypeVar('GetCorrespondingObjectFromOriginalSource_1_T1')
        class GetCorrespondingObjectFromOriginalSource_1(typing.Generic[GetCorrespondingObjectFromOriginalSource_1_T1]):
            GetCorrespondingObjectFromOriginalSource_1_TObject = PrefabUtility.GetCorrespondingObjectFromOriginalSource_MethodGroup.GetCorrespondingObjectFromOriginalSource_1_T1
            def __call__(self, componentOrGameObject: GetCorrespondingObjectFromOriginalSource_1_TObject) -> GetCorrespondingObjectFromOriginalSource_1_TObject:...


    # Skipped GetCorrespondingObjectFromSource due to it being static, abstract and generic.

    GetCorrespondingObjectFromSource : GetCorrespondingObjectFromSource_MethodGroup
    class GetCorrespondingObjectFromSource_MethodGroup:
        def __getitem__(self, t:typing.Type[GetCorrespondingObjectFromSource_1_T1]) -> GetCorrespondingObjectFromSource_1[GetCorrespondingObjectFromSource_1_T1]: ...

        GetCorrespondingObjectFromSource_1_T1 = typing.TypeVar('GetCorrespondingObjectFromSource_1_T1')
        class GetCorrespondingObjectFromSource_1(typing.Generic[GetCorrespondingObjectFromSource_1_T1]):
            GetCorrespondingObjectFromSource_1_TObject = PrefabUtility.GetCorrespondingObjectFromSource_MethodGroup.GetCorrespondingObjectFromSource_1_T1
            def __call__(self, componentOrGameObject: GetCorrespondingObjectFromSource_1_TObject) -> GetCorrespondingObjectFromSource_1_TObject:...


    # Skipped GetCorrespondingObjectFromSourceAtPath due to it being static, abstract and generic.

    GetCorrespondingObjectFromSourceAtPath : GetCorrespondingObjectFromSourceAtPath_MethodGroup
    class GetCorrespondingObjectFromSourceAtPath_MethodGroup:
        def __getitem__(self, t:typing.Type[GetCorrespondingObjectFromSourceAtPath_1_T1]) -> GetCorrespondingObjectFromSourceAtPath_1[GetCorrespondingObjectFromSourceAtPath_1_T1]: ...

        GetCorrespondingObjectFromSourceAtPath_1_T1 = typing.TypeVar('GetCorrespondingObjectFromSourceAtPath_1_T1')
        class GetCorrespondingObjectFromSourceAtPath_1(typing.Generic[GetCorrespondingObjectFromSourceAtPath_1_T1]):
            GetCorrespondingObjectFromSourceAtPath_1_TObject = PrefabUtility.GetCorrespondingObjectFromSourceAtPath_MethodGroup.GetCorrespondingObjectFromSourceAtPath_1_T1
            def __call__(self, componentOrGameObject: GetCorrespondingObjectFromSourceAtPath_1_TObject, assetPath: str) -> GetCorrespondingObjectFromSourceAtPath_1_TObject:...


    # Skipped InstantiatePrefab due to it being static, abstract and generic.

    InstantiatePrefab : InstantiatePrefab_MethodGroup
    class InstantiatePrefab_MethodGroup:
        @typing.overload
        def __call__(self, assetComponentOrGameObject: Object) -> Object:...
        @typing.overload
        def __call__(self, assetComponentOrGameObject: Object, parent: Transform) -> Object:...
        @typing.overload
        def __call__(self, assetComponentOrGameObject: Object, destinationScene: Scene) -> Object:...

    # Skipped ReplacePrefab due to it being static, abstract and generic.

    ReplacePrefab : ReplacePrefab_MethodGroup
    class ReplacePrefab_MethodGroup:
        @typing.overload
        def __call__(self, go: GameObject, targetPrefab: Object) -> GameObject:...
        @typing.overload
        def __call__(self, go: GameObject, targetPrefab: Object, replaceOptions: ReplacePrefabOptions) -> GameObject:...

    # Skipped ReplacePrefabAssetOfPrefabInstance due to it being static, abstract and generic.

    ReplacePrefabAssetOfPrefabInstance : ReplacePrefabAssetOfPrefabInstance_MethodGroup
    class ReplacePrefabAssetOfPrefabInstance_MethodGroup:
        @typing.overload
        def __call__(self, prefabInstanceRoot: GameObject, prefabAssetRoot: GameObject, mode: InteractionMode) -> None:...
        @typing.overload
        def __call__(self, prefabInstanceRoot: GameObject, prefabAssetRoot: GameObject, settings: PrefabReplacingSettings, mode: InteractionMode) -> None:...

    # Skipped ReplacePrefabAssetOfPrefabInstances due to it being static, abstract and generic.

    ReplacePrefabAssetOfPrefabInstances : ReplacePrefabAssetOfPrefabInstances_MethodGroup
    class ReplacePrefabAssetOfPrefabInstances_MethodGroup:
        @typing.overload
        def __call__(self, prefabInstanceRoots: Array_1[GameObject], prefabAssetRoot: GameObject, mode: InteractionMode) -> None:...
        @typing.overload
        def __call__(self, prefabInstanceRoots: Array_1[GameObject], prefabAssetRoot: GameObject, settings: PrefabReplacingSettings, mode: InteractionMode) -> None:...

    # Skipped RevertPrefabInstance due to it being static, abstract and generic.

    RevertPrefabInstance : RevertPrefabInstance_MethodGroup
    class RevertPrefabInstance_MethodGroup:
        @typing.overload
        def __call__(self, go: GameObject) -> bool:...
        @typing.overload
        def __call__(self, instanceRoot: GameObject, action: InteractionMode) -> None:...

    # Skipped SaveAsPrefabAsset due to it being static, abstract and generic.

    SaveAsPrefabAsset : SaveAsPrefabAsset_MethodGroup
    class SaveAsPrefabAsset_MethodGroup:
        @typing.overload
        def __call__(self, instanceRoot: GameObject, assetPath: str) -> GameObject:...
        @typing.overload
        def __call__(self, instanceRoot: GameObject, assetPath: str, success: clr.Reference[bool]) -> GameObject:...

    # Skipped SaveAsPrefabAssetAndConnect due to it being static, abstract and generic.

    SaveAsPrefabAssetAndConnect : SaveAsPrefabAssetAndConnect_MethodGroup
    class SaveAsPrefabAssetAndConnect_MethodGroup:
        @typing.overload
        def __call__(self, instanceRoot: GameObject, assetPath: str, action: InteractionMode) -> GameObject:...
        @typing.overload
        def __call__(self, instanceRoot: GameObject, assetPath: str, action: InteractionMode, success: clr.Reference[bool]) -> GameObject:...

    # Skipped SavePrefabAsset due to it being static, abstract and generic.

    SavePrefabAsset : SavePrefabAsset_MethodGroup
    class SavePrefabAsset_MethodGroup:
        @typing.overload
        def __call__(self, asset: GameObject) -> GameObject:...
        @typing.overload
        def __call__(self, asset: GameObject, savedSuccessfully: clr.Reference[bool]) -> GameObject:...


    class EditPrefabContentsScope(IDisposable):
        def __init__(self, assetPath: str) -> None: ...
        assetPath : str
        prefabContentsRoot : GameObject
        def Dispose(self) -> None: ...


    class PrefabInstanceUpdated(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, instance: GameObject, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, instance: GameObject) -> None: ...



class PreferenceItem(Attribute):
    def __init__(self, name: str) -> None: ...
    name : str
    @property
    def TypeId(self) -> typing.Any: ...


class PreprocessorOverride(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UseProjectSettings : PreprocessorOverride # 0
    ForcePlatformPreprocessor : PreprocessorOverride # 1
    ForceCachingPreprocessor : PreprocessorOverride # 2


class PreviewRenderUtility:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, renderFullScene: bool) -> None: ...
    @typing.overload
    def __init__(self, renderFullScene: bool, pixelPerfect: bool) -> None: ...
    m_Camera : Camera
    m_CameraFieldOfView : float
    m_Light : Array_1[Light]
    @property
    def ambientColor(self) -> Color: ...
    @ambientColor.setter
    def ambientColor(self, value: Color) -> Color: ...
    @property
    def camera(self) -> Camera: ...
    @property
    def cameraFieldOfView(self) -> float: ...
    @cameraFieldOfView.setter
    def cameraFieldOfView(self, value: float) -> float: ...
    @property
    def lights(self) -> Array_1[Light]: ...
    def BeginPreview(self, r: Rect, previewBackground: GUIStyle) -> None: ...
    def BeginPreviewHDR(self, r: Rect, previewBackground: GUIStyle) -> None: ...
    def BeginStaticPreview(self, r: Rect) -> None: ...
    def BeginStaticPreviewHDR(self, r: Rect) -> None: ...
    def Cleanup(self) -> None: ...
    def EndAndDrawPreview(self, r: Rect) -> None: ...
    def EndPreview(self) -> Texture: ...
    def EndStaticPreview(self) -> Texture2D: ...
    def GetScaleFactor(self, width: float, height: float) -> float: ...
    def InstantiatePrefabInScene(self, prefab: GameObject) -> GameObject: ...
    def Render(self, allowScriptableRenderPipeline: bool = ..., updatefov: bool = ...) -> None: ...
    # Skipped AddSingleGO due to it being static, abstract and generic.

    AddSingleGO : AddSingleGO_MethodGroup
    class AddSingleGO_MethodGroup:
        @typing.overload
        def __call__(self, go: GameObject) -> None:...
        @typing.overload
        def __call__(self, go: GameObject, instantiateAtZero: bool) -> None:...

    # Skipped DrawMesh due to it being static, abstract and generic.

    DrawMesh : DrawMesh_MethodGroup
    class DrawMesh_MethodGroup:
        @typing.overload
        def __call__(self, mesh: Mesh, matrix: Matrix4x4, mat: Material, subMeshIndex: int) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, matrix: Matrix4x4, mat: Material, subMeshIndex: int, customProperties: MaterialPropertyBlock) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, pos: Vector3, rot: Quaternion, mat: Material, subMeshIndex: int) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, pos: Vector3, rot: Quaternion, mat: Material, subMeshIndex: int, customProperties: MaterialPropertyBlock) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, m: Matrix4x4, mat: Material, subMeshIndex: int, customProperties: MaterialPropertyBlock, probeAnchor: Transform, useLightProbe: bool) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, pos: Vector3, rot: Quaternion, mat: Material, subMeshIndex: int, customProperties: MaterialPropertyBlock, probeAnchor: Transform) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, pos: Vector3, rot: Quaternion, mat: Material, subMeshIndex: int, customProperties: MaterialPropertyBlock, probeAnchor: Transform, useLightProbe: bool) -> None:...
        @typing.overload
        def __call__(self, mesh: Mesh, pos: Vector3, scale: Vector3, rot: Quaternion, mat: Material, subMeshIndex: int, customProperties: MaterialPropertyBlock, probeAnchor: Transform, useLightProbe: bool) -> None:...



class ProfilerWindow(EditorWindow, IHasCustomMenu):
    cpuModuleIdentifier : str
    cpuModuleName : str
    gpuModuleIdentifier : str
    gpuModuleName : str
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def firstAvailableFrameIndex(self) -> int: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def lastAvailableFrameIndex(self) -> int: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def selectedFrameIndex(self) -> int: ...
    @selectedFrameIndex.setter
    def selectedFrameIndex(self, value: int) -> int: ...
    @property
    def selectedModuleIdentifier(self) -> str: ...
    @property
    def selectedModuleName(self) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def GetFrameTimeViewSampleSelectionController(self, moduleIdentifier: str) -> IProfilerFrameTimeViewSampleSelectionController: ...
    def SelectAndStayOnLatestFrame(self) -> None: ...


class Progress(abc.ABC):
    @classmethod
    @property
    def globalProgress(cls) -> float: ...
    @classmethod
    @property
    def globalRemainingTime(cls) -> TimeSpan: ...
    @classmethod
    @property
    def running(cls) -> bool: ...
    @staticmethod
    def Cancel(id: int) -> bool: ...
    @staticmethod
    def ClearRemainingTime(id: int) -> None: ...
    @staticmethod
    def EnumerateItems() -> IEnumerable_1[Progress.Item]: ...
    @staticmethod
    def Exists(id: int) -> bool: ...
    @staticmethod
    def Finish(id: int, status: Progress.Status = ...) -> None: ...
    @staticmethod
    def GetCount() -> int: ...
    @staticmethod
    def GetCountPerStatus() -> Array_1[int]: ...
    @staticmethod
    def GetCurrentStep(id: int) -> int: ...
    @staticmethod
    def GetDescription(id: int) -> str: ...
    @staticmethod
    def GetEndDateTime(id: int) -> int: ...
    @staticmethod
    def GetId(index: int) -> int: ...
    @staticmethod
    def GetName(id: int) -> str: ...
    @staticmethod
    def GetOptions(id: int) -> Progress.Options: ...
    @staticmethod
    def GetParentId(id: int) -> int: ...
    @staticmethod
    def GetPriority(id: int) -> int: ...
    @staticmethod
    def GetProgress(id: int) -> float: ...
    @staticmethod
    def GetProgressById(id: int) -> Progress.Item: ...
    @staticmethod
    def GetRemainingTime(id: int) -> int: ...
    @staticmethod
    def GetRunningProgressCount() -> int: ...
    @staticmethod
    def GetStartDateTime(id: int) -> int: ...
    @staticmethod
    def GetStatus(id: int) -> Progress.Status: ...
    @staticmethod
    def GetStepLabel(id: int) -> str: ...
    @staticmethod
    def GetTimeDisplayMode(id: int) -> Progress.TimeDisplayMode: ...
    @staticmethod
    def GetTotalSteps(id: int) -> int: ...
    @staticmethod
    def GetUpdateDateTime(id: int) -> int: ...
    @staticmethod
    def IsCancellable(id: int) -> bool: ...
    @staticmethod
    def IsPausable(id: int) -> bool: ...
    @staticmethod
    def Pause(id: int) -> bool: ...
    @staticmethod
    def RegisterCancelCallback(id: int, callback: Func_1[bool]) -> None: ...
    @staticmethod
    def RegisterPauseCallback(id: int, callback: Func_2[bool, bool]) -> None: ...
    @staticmethod
    def Resume(id: int) -> bool: ...
    @staticmethod
    def SetDescription(id: int, description: str) -> None: ...
    @staticmethod
    def SetRemainingTime(id: int, seconds: int) -> None: ...
    @staticmethod
    def SetStepLabel(id: int, label: str) -> None: ...
    @staticmethod
    def SetTimeDisplayMode(id: int, displayMode: Progress.TimeDisplayMode) -> None: ...
    @staticmethod
    def ShowDetails(shouldReposition: bool = ...) -> None: ...
    @staticmethod
    def Start(name: str, description: str = ..., options: Progress.Options = ..., parentId: int = ...) -> int: ...
    @staticmethod
    def UnregisterCancelCallback(id: int) -> None: ...
    @staticmethod
    def UnregisterPauseCallback(id: int) -> None: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> int:...
        @typing.overload
        def __call__(self, id: int, forceSynchronous: bool) -> int:...

    # Skipped Report due to it being static, abstract and generic.

    Report : Report_MethodGroup
    class Report_MethodGroup:
        @typing.overload
        def __call__(self, id: int, progress: float) -> None:...
        @typing.overload
        def __call__(self, id: int, progress: float, description: str) -> None:...
        @typing.overload
        def __call__(self, id: int, currentStep: int, totalSteps: int) -> None:...
        @typing.overload
        def __call__(self, id: int, currentStep: int, totalSteps: int, description: str) -> None:...

    # Skipped SetPriority due to it being static, abstract and generic.

    SetPriority : SetPriority_MethodGroup
    class SetPriority_MethodGroup:
        @typing.overload
        def __call__(self, id: int, priority: int) -> None:...
        @typing.overload
        def __call__(self, id: int, priority: Progress.Priority) -> None:...


    class Item:
        @property
        def cancellable(self) -> bool: ...
        @property
        def currentStep(self) -> int: ...
        @property
        def description(self) -> str: ...
        @property
        def elapsedTime(self) -> float: ...
        @property
        def endTime(self) -> DateTime: ...
        @property
        def exists(self) -> bool: ...
        @property
        def finished(self) -> bool: ...
        @property
        def id(self) -> int: ...
        @id.setter
        def id(self, value: int) -> int: ...
        @property
        def indefinite(self) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def options(self) -> Progress.Options: ...
        @property
        def parentId(self) -> int: ...
        @property
        def pausable(self) -> bool: ...
        @property
        def paused(self) -> bool: ...
        @property
        def priority(self) -> int: ...
        @property
        def progress(self) -> float: ...
        @property
        def remainingTime(self) -> TimeSpan: ...
        @property
        def responding(self) -> bool: ...
        @property
        def running(self) -> bool: ...
        @property
        def startTime(self) -> DateTime: ...
        @property
        def status(self) -> Progress.Status: ...
        @property
        def stepLabel(self) -> str: ...
        @property
        def timeDisplayMode(self) -> Progress.TimeDisplayMode: ...
        @property
        def totalSteps(self) -> int: ...
        @property
        def updateTime(self) -> DateTime: ...
        def Cancel(self) -> bool: ...
        def ClearRemainingTime(self) -> None: ...
        def Finish(self, finishedStatus: Progress.Status = ...) -> None: ...
        def Pause(self) -> bool: ...
        def RegisterCancelCallback(self, callback: Func_1[bool]) -> None: ...
        def RegisterPauseCallback(self, callback: Func_2[bool, bool]) -> None: ...
        def Remove(self) -> int: ...
        def Resume(self) -> bool: ...
        def SetDescription(self, newDescription: str) -> None: ...
        def SetRemainingTime(self, seconds: int) -> None: ...
        def SetStepLabel(self, label: str) -> None: ...
        def SetTimeDisplayMode(self, mode: Progress.TimeDisplayMode) -> None: ...
        def UnregisterCancelCallback(self) -> None: ...
        def UnregisterPauseCallback(self) -> None: ...
        # Skipped Report due to it being static, abstract and generic.

        Report : Report_MethodGroup
        class Report_MethodGroup:
            @typing.overload
            def __call__(self, newProgress: float) -> None:...
            @typing.overload
            def __call__(self, newProgress: float, newDescription: str) -> None:...
            @typing.overload
            def __call__(self, newCurrentStep: int, newTotalSteps: int) -> None:...
            @typing.overload
            def __call__(self, newCurrentStep: int, newTotalSteps: int, newDescription: str) -> None:...

        # Skipped SetPriority due to it being static, abstract and generic.

        SetPriority : SetPriority_MethodGroup
        class SetPriority_MethodGroup:
            @typing.overload
            def __call__(self, priority: int) -> None:...
            @typing.overload
            def __call__(self, priority: Progress.Priority) -> None:...



    class Options(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : Progress.Options # 0
        Sticky : Progress.Options # 1
        Indefinite : Progress.Options # 2
        Synchronous : Progress.Options # 4
        Managed : Progress.Options # 8
        Unmanaged : Progress.Options # 16


    class Priority(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Unresponsive : Progress.Priority # 0
        Idle : Progress.Priority # 1
        Low : Progress.Priority # 2
        Normal : Progress.Priority # 6
        High : Progress.Priority # 10


    class Status(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Running : Progress.Status # 0
        Succeeded : Progress.Status # 1
        Failed : Progress.Status # 2
        Canceled : Progress.Status # 3
        Paused : Progress.Status # 4


    class TimeDisplayMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        NoTimeShown : Progress.TimeDisplayMode # 0
        ShowRunningTime : Progress.TimeDisplayMode # 1
        ShowRemainingTime : Progress.TimeDisplayMode # 2



class ProjectWindowUtil:
    def __init__(self) -> None: ...
    @staticmethod
    def CreateAsset(asset: Object, pathName: str) -> None: ...
    @staticmethod
    def CreateAssetWithContent(filename: str, content: str, icon: Texture2D = ...) -> None: ...
    @staticmethod
    def CreateFolder() -> None: ...
    @staticmethod
    def CreateNewGUISkin() -> None: ...
    @staticmethod
    def CreateScene() -> None: ...
    @staticmethod
    def CreateScriptAssetFromTemplateFile(templatePath: str, defaultNewFileName: str) -> None: ...
    @staticmethod
    def GetAncestors(instanceID: int) -> Array_1[int]: ...
    @staticmethod
    def GetBaseFolders(folders: Array_1[str]) -> Array_1[str]: ...
    @staticmethod
    def GetContainingFolder(path: str) -> str: ...
    @staticmethod
    def IsFolder(instanceID: int) -> bool: ...
    @staticmethod
    def ShowCreatedAsset(o: Object) -> None: ...
    # Skipped StartNameEditingIfProjectWindowExists due to it being static, abstract and generic.

    StartNameEditingIfProjectWindowExists : StartNameEditingIfProjectWindowExists_MethodGroup
    class StartNameEditingIfProjectWindowExists_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int, endAction: EndNameEditAction, pathName: str, icon: Texture2D, resourceFile: str) -> None:...
        @typing.overload
        def __call__(self, instanceID: int, endAction: EndNameEditAction, pathName: str, icon: Texture2D, resourceFile: str, selectAssetBeingCreated: bool) -> None:...



class PropertyDrawer(GUIDrawer):
    @property
    def attribute(self) -> PropertyAttribute: ...
    @property
    def fieldInfo(self) -> FieldInfo: ...
    @property
    def preferredLabel(self) -> str: ...
    def CanCacheInspectorGUI(self, property: SerializedProperty) -> bool: ...
    def CreatePropertyGUI(self, property: SerializedProperty) -> VisualElement: ...
    def GetPropertyHeight(self, property: SerializedProperty, label: GUIContent) -> float: ...
    def OnGUI(self, position: Rect, property: SerializedProperty, label: GUIContent) -> None: ...


class PropertyModification:
    def __init__(self) -> None: ...
    objectReference : Object
    propertyPath : str
    target : Object
    value : str


class ProvisioningProfileType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Automatic : ProvisioningProfileType # 0
    Development : ProvisioningProfileType # 1
    Distribution : ProvisioningProfileType # 2


class PS4BuildSubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PCHosted : PS4BuildSubtarget # 0
    Package : PS4BuildSubtarget # 1
    Iso : PS4BuildSubtarget # 2
    GP4Project : PS4BuildSubtarget # 3


class PS4HardwareTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BaseOnly : PS4HardwareTarget # 0
    NeoAndBase : PS4HardwareTarget # 1
    ProAndBase : PS4HardwareTarget # 1


class QNXArchitecture(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Arm64 : QNXArchitecture # 0
    Arm32 : QNXArchitecture # 1
    X64 : QNXArchitecture # 2
    X86 : QNXArchitecture # 3


class QNXOsVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Neutrino70 : QNXOsVersion # 0
    Neutrino71 : QNXOsVersion # 1


class RemoveAssetOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MoveAssetToTrash : RemoveAssetOptions # 0
    DeleteAssets : RemoveAssetOptions # 2


class ReplacePrefabOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : ReplacePrefabOptions # 0
    ConnectToPrefab : ReplacePrefabOptions # 1
    ReplaceNameBased : ReplacePrefabOptions # 2


class ResolutionDialogSetting(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : ResolutionDialogSetting # 0
    Enabled : ResolutionDialogSetting # 1
    HiddenByDefault : ResolutionDialogSetting # 2


class RootEditorAttribute(Attribute):
    def __init__(self, supportsAddComponent: bool = ...) -> None: ...
    supportsAddComponent : bool
    @property
    def TypeId(self) -> typing.Any: ...

    class RootEditorHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, objects: Array_1[Object], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> typing.Type[typing.Any]: ...
        def Invoke(self, objects: Array_1[Object]) -> typing.Type[typing.Any]: ...



class SaveAssetsProcessor(AssetModificationProcessor):
    def __init__(self) -> None: ...


class SaveType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Binary : SaveType # 0
    Text : SaveType # 1


class SceneAsset(Object):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class SceneModeUtility(abc.ABC):
    @staticmethod
    def GetObjects(gameObjects: Array_1[Object], includeChildren: bool) -> Array_1[GameObject]: ...
    @staticmethod
    def SearchBar(types: Array_1[typing.Type[typing.Any]]) -> typing.Type[typing.Any]: ...
    @staticmethod
    def SearchForType(type: typing.Type[typing.Any]) -> None: ...
    @staticmethod
    def SetStaticFlags(targetObjects: Array_1[Object], changedFlags: int, flagValue: bool) -> bool: ...
    @staticmethod
    def StaticFlagField(label: str, property: SerializedProperty, flag: int) -> bool: ...
    # Skipped GetSelectedObjectsOfType due to it being static, abstract and generic.

    GetSelectedObjectsOfType : GetSelectedObjectsOfType_MethodGroup
    class GetSelectedObjectsOfType_MethodGroup:
        def __getitem__(self, t:typing.Type[GetSelectedObjectsOfType_1_T1]) -> GetSelectedObjectsOfType_1[GetSelectedObjectsOfType_1_T1]: ...

        GetSelectedObjectsOfType_1_T1 = typing.TypeVar('GetSelectedObjectsOfType_1_T1')
        class GetSelectedObjectsOfType_1(typing.Generic[GetSelectedObjectsOfType_1_T1]):
            GetSelectedObjectsOfType_1_T = SceneModeUtility.GetSelectedObjectsOfType_MethodGroup.GetSelectedObjectsOfType_1_T1
            def __call__(self, gameObjects: clr.Reference[Array_1[GameObject]], types: Array_1[typing.Type[typing.Any]]) -> Array_1[GetSelectedObjectsOfType_1_T]:...




class SceneView(SearchableEditorWindow, ISupportsOverlays, IHasCustomMenu):
    def __init__(self) -> None: ...
    lastActiveSceneViewChanged : Action_2[SceneView, SceneView]
    m_AudioPlay : bool
    m_RenderMode : DrawCameraMode
    m_SceneLighting : bool
    m_ValidateTrueMetals : bool
    onSceneGUIDelegate : SceneView.OnSceneFunc
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def audioPlay(self) -> bool: ...
    @audioPlay.setter
    def audioPlay(self, value: bool) -> bool: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def camera(self) -> Camera: ...
    @property
    def cameraDistance(self) -> float: ...
    @property
    def cameraMode(self) -> SceneView.CameraMode: ...
    @cameraMode.setter
    def cameraMode(self, value: SceneView.CameraMode) -> SceneView.CameraMode: ...
    @property
    def cameraSettings(self) -> SceneView.CameraSettings: ...
    @cameraSettings.setter
    def cameraSettings(self, value: SceneView.CameraSettings) -> SceneView.CameraSettings: ...
    @property
    def cameraViewport(self) -> Rect: ...
    @classmethod
    @property
    def currentDrawingSceneView(cls) -> SceneView: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def drawGizmos(self) -> bool: ...
    @drawGizmos.setter
    def drawGizmos(self, value: bool) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def in2DMode(self) -> bool: ...
    @in2DMode.setter
    def in2DMode(self, value: bool) -> bool: ...
    @property
    def isRotationLocked(self) -> bool: ...
    @isRotationLocked.setter
    def isRotationLocked(self, value: bool) -> bool: ...
    @property
    def isUsingSceneFiltering(self) -> bool: ...
    @classmethod
    @property
    def lastActiveSceneView(cls) -> SceneView: ...
    @classmethod
    @lastActiveSceneView.setter
    def lastActiveSceneView(cls, value: SceneView) -> SceneView: ...
    @property
    def lastSceneViewRotation(self) -> Quaternion: ...
    @lastSceneViewRotation.setter
    def lastSceneViewRotation(self, value: Quaternion) -> Quaternion: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def orthographic(self) -> bool: ...
    @orthographic.setter
    def orthographic(self, value: bool) -> bool: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def pivot(self) -> Vector3: ...
    @pivot.setter
    def pivot(self, value: Vector3) -> Vector3: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def renderMode(self) -> DrawCameraMode: ...
    @renderMode.setter
    def renderMode(self, value: DrawCameraMode) -> DrawCameraMode: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def rotation(self) -> Quaternion: ...
    @rotation.setter
    def rotation(self, value: Quaternion) -> Quaternion: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def sceneLighting(self) -> bool: ...
    @sceneLighting.setter
    def sceneLighting(self, value: bool) -> bool: ...
    @classmethod
    @property
    def sceneViews(cls) -> ArrayList: ...
    @property
    def sceneViewState(self) -> SceneView.SceneViewState: ...
    @sceneViewState.setter
    def sceneViewState(self, value: SceneView.SceneViewState) -> SceneView.SceneViewState: ...
    @classmethod
    @property
    def selectedOutlineColor(cls) -> Color: ...
    @property
    def showGrid(self) -> bool: ...
    @showGrid.setter
    def showGrid(self, value: bool) -> bool: ...
    @property
    def size(self) -> float: ...
    @size.setter
    def size(self, value: float) -> float: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def validateTrueMetals(self) -> bool: ...
    @validateTrueMetals.setter
    def validateTrueMetals(self, value: bool) -> bool: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    @staticmethod
    def AddCameraMode(name: str, section: str) -> SceneView.CameraMode: ...
    def AddItemsToMenu(self, menu: GenericMenu) -> None: ...
    def AlignViewToObject(self, t: Transform) -> None: ...
    def AlignWithView(self) -> None: ...
    @staticmethod
    def ClearUserDefinedCameraModes() -> None: ...
    def FixNegativeSize(self) -> None: ...
    def Frame(self, bounds: Bounds, instant: bool = ...) -> bool: ...
    @staticmethod
    def FrameLastActiveSceneView() -> bool: ...
    @staticmethod
    def FrameLastActiveSceneViewWithLock() -> bool: ...
    @staticmethod
    def GetAllSceneCameras() -> Array_1[Camera]: ...
    @staticmethod
    def GetBuiltinCameraMode(mode: DrawCameraMode) -> SceneView.CameraMode: ...
    def IsCameraDrawModeEnabled(self, mode: SceneView.CameraMode) -> bool: ...
    def IsCameraDrawModeSupported(self, mode: SceneView.CameraMode) -> bool: ...
    def OnDestroy(self) -> None: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    @staticmethod
    def RepaintAll() -> None: ...
    def ResetCameraSettings(self) -> None: ...
    def SetSceneViewShaderReplace(self, shader: Shader, replaceString: str) -> None: ...
    # Skipped AddOverlayToActiveView due to it being static, abstract and generic.

    AddOverlayToActiveView : AddOverlayToActiveView_MethodGroup
    class AddOverlayToActiveView_MethodGroup:
        def __getitem__(self, t:typing.Type[AddOverlayToActiveView_1_T1]) -> AddOverlayToActiveView_1[AddOverlayToActiveView_1_T1]: ...

        AddOverlayToActiveView_1_T1 = typing.TypeVar('AddOverlayToActiveView_1_T1')
        class AddOverlayToActiveView_1(typing.Generic[AddOverlayToActiveView_1_T1]):
            AddOverlayToActiveView_1_T = SceneView.AddOverlayToActiveView_MethodGroup.AddOverlayToActiveView_1_T1
            def __call__(self, overlay: AddOverlayToActiveView_1_T) -> None:...


    # Skipped FrameSelected due to it being static, abstract and generic.

    FrameSelected : FrameSelected_MethodGroup
    class FrameSelected_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, lockView: bool) -> bool:...
        @typing.overload
        def __call__(self, lockView: bool, instant: bool) -> bool:...

    # Skipped LookAt due to it being static, abstract and generic.

    LookAt : LookAt_MethodGroup
    class LookAt_MethodGroup:
        @typing.overload
        def __call__(self, point: Vector3) -> None:...
        @typing.overload
        def __call__(self, point: Vector3, direction: Quaternion) -> None:...
        @typing.overload
        def __call__(self, point: Vector3, direction: Quaternion, newSize: float) -> None:...
        @typing.overload
        def __call__(self, point: Vector3, direction: Quaternion, newSize: float, ortho: bool) -> None:...
        @typing.overload
        def __call__(self, point: Vector3, direction: Quaternion, newSize: float, ortho: bool, instant: bool) -> None:...

    # Skipped LookAtDirect due to it being static, abstract and generic.

    LookAtDirect : LookAtDirect_MethodGroup
    class LookAtDirect_MethodGroup:
        @typing.overload
        def __call__(self, point: Vector3, direction: Quaternion) -> None:...
        @typing.overload
        def __call__(self, point: Vector3, direction: Quaternion, newSize: float) -> None:...

    # Skipped MoveToView due to it being static, abstract and generic.

    MoveToView : MoveToView_MethodGroup
    class MoveToView_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, target: Transform) -> None:...

    # Skipped RemoveOverlayFromActiveView due to it being static, abstract and generic.

    RemoveOverlayFromActiveView : RemoveOverlayFromActiveView_MethodGroup
    class RemoveOverlayFromActiveView_MethodGroup:
        def __getitem__(self, t:typing.Type[RemoveOverlayFromActiveView_1_T1]) -> RemoveOverlayFromActiveView_1[RemoveOverlayFromActiveView_1_T1]: ...

        RemoveOverlayFromActiveView_1_T1 = typing.TypeVar('RemoveOverlayFromActiveView_1_T1')
        class RemoveOverlayFromActiveView_1(typing.Generic[RemoveOverlayFromActiveView_1_T1]):
            RemoveOverlayFromActiveView_1_T = SceneView.RemoveOverlayFromActiveView_MethodGroup.RemoveOverlayFromActiveView_1_T1
            def __call__(self, overlay: RemoveOverlayFromActiveView_1_T) -> None:...



    class CameraMode:
        drawMode : DrawCameraMode
        name : str
        section : str
        def Equals(self, otherObject: typing.Any) -> bool: ...
        def GetHashCode(self) -> int: ...
        def __eq__(self, a: SceneView.CameraMode, z: SceneView.CameraMode) -> bool: ...
        def __ne__(self, a: SceneView.CameraMode, z: SceneView.CameraMode) -> bool: ...
        def ToString(self) -> str: ...


    class CameraSettings:
        def __init__(self) -> None: ...
        @property
        def accelerationEnabled(self) -> bool: ...
        @accelerationEnabled.setter
        def accelerationEnabled(self, value: bool) -> bool: ...
        @property
        def dynamicClip(self) -> bool: ...
        @dynamicClip.setter
        def dynamicClip(self, value: bool) -> bool: ...
        @property
        def easingDuration(self) -> float: ...
        @easingDuration.setter
        def easingDuration(self, value: float) -> float: ...
        @property
        def easingEnabled(self) -> bool: ...
        @easingEnabled.setter
        def easingEnabled(self, value: bool) -> bool: ...
        @property
        def farClip(self) -> float: ...
        @farClip.setter
        def farClip(self, value: float) -> float: ...
        @property
        def fieldOfView(self) -> float: ...
        @fieldOfView.setter
        def fieldOfView(self, value: float) -> float: ...
        @property
        def nearClip(self) -> float: ...
        @nearClip.setter
        def nearClip(self, value: float) -> float: ...
        @property
        def occlusionCulling(self) -> bool: ...
        @occlusionCulling.setter
        def occlusionCulling(self, value: bool) -> bool: ...
        @property
        def speed(self) -> float: ...
        @speed.setter
        def speed(self, value: float) -> float: ...
        @property
        def speedMax(self) -> float: ...
        @speedMax.setter
        def speedMax(self, value: float) -> float: ...
        @property
        def speedMin(self) -> float: ...
        @speedMin.setter
        def speedMin(self, value: float) -> float: ...
        @property
        def speedNormalized(self) -> float: ...
        @speedNormalized.setter
        def speedNormalized(self, value: float) -> float: ...


    class OnSceneFunc(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sceneView: SceneView, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sceneView: SceneView) -> None: ...


    class SceneViewState:
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, other: SceneView.SceneViewState) -> None: ...
        showFlares : bool
        showFog : bool
        showImageEffects : bool
        showParticleSystems : bool
        showSkybox : bool
        showVisualEffectGraphs : bool
        @property
        def allEnabled(self) -> bool: ...
        @property
        def alwaysRefresh(self) -> bool: ...
        @alwaysRefresh.setter
        def alwaysRefresh(self, value: bool) -> bool: ...
        @property
        def alwaysRefreshEnabled(self) -> bool: ...
        @property
        def flaresEnabled(self) -> bool: ...
        @property
        def fogEnabled(self) -> bool: ...
        @property
        def fxEnabled(self) -> bool: ...
        @fxEnabled.setter
        def fxEnabled(self, value: bool) -> bool: ...
        @property
        def imageEffectsEnabled(self) -> bool: ...
        @property
        def materialUpdateEnabled(self) -> bool: ...
        @property
        def particleSystemsEnabled(self) -> bool: ...
        @property
        def showMaterialUpdate(self) -> bool: ...
        @showMaterialUpdate.setter
        def showMaterialUpdate(self, value: bool) -> bool: ...
        @property
        def skyboxEnabled(self) -> bool: ...
        @property
        def visualEffectGraphsEnabled(self) -> bool: ...
        def IsAllOn(self) -> bool: ...
        def SetAllEnabled(self, value: bool) -> None: ...
        def Toggle(self, value: bool) -> None: ...



class SceneViewCameraWindow(PopupWindowContent):
    def __init__(self, sceneView: SceneView) -> None: ...
    @property
    def editorWindow(self) -> EditorWindow: ...
    @editorWindow.setter
    def editorWindow(self, value: EditorWindow) -> EditorWindow: ...
    def GetWindowSize(self) -> Vector2: ...
    def OnGUI(self, rect: Rect) -> None: ...


class SceneVisibilityManager(ScriptableSingleton_1[SceneVisibilityManager]):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def AreAllDescendantsVisible(self, gameObject: GameObject) -> bool: ...
    def AreAnyDescendantsHidden(self, scene: Scene) -> bool: ...
    def DisableAllPicking(self) -> None: ...
    def EnableAllPicking(self) -> None: ...
    def ExitIsolation(self) -> None: ...
    def HideAll(self) -> None: ...
    def IsCurrentStageIsolated(self) -> bool: ...
    def IsPickingDisabledOnAnyDescendant(self, scene: Scene) -> bool: ...
    def IsPickingEnabledOnAllDescendants(self, gameObject: GameObject) -> bool: ...
    def ShowAll(self) -> None: ...
    def TogglePicking(self, gameObject: GameObject, includeDescendants: bool) -> None: ...
    def ToggleVisibility(self, gameObject: GameObject, includeDescendants: bool) -> None: ...
    # Skipped AreAllDescendantsHidden due to it being static, abstract and generic.

    AreAllDescendantsHidden : AreAllDescendantsHidden_MethodGroup
    class AreAllDescendantsHidden_MethodGroup:
        @typing.overload
        def __call__(self, gameObject: GameObject) -> bool:...
        @typing.overload
        def __call__(self, scene: Scene) -> bool:...

    # Skipped DisablePicking due to it being static, abstract and generic.

    DisablePicking : DisablePicking_MethodGroup
    class DisablePicking_MethodGroup:
        @typing.overload
        def __call__(self, scene: Scene) -> None:...
        @typing.overload
        def __call__(self, gameObjects: Array_1[GameObject], includeDescendants: bool) -> None:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool) -> None:...

    # Skipped EnablePicking due to it being static, abstract and generic.

    EnablePicking : EnablePicking_MethodGroup
    class EnablePicking_MethodGroup:
        @typing.overload
        def __call__(self, scene: Scene) -> None:...
        @typing.overload
        def __call__(self, gameObjects: Array_1[GameObject], includeDescendants: bool) -> None:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool) -> None:...

    # Skipped Hide due to it being static, abstract and generic.

    Hide : Hide_MethodGroup
    class Hide_MethodGroup:
        @typing.overload
        def __call__(self, scene: Scene) -> None:...
        @typing.overload
        def __call__(self, gameObjects: Array_1[GameObject], includeDescendants: bool) -> None:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool) -> None:...

    # Skipped IsHidden due to it being static, abstract and generic.

    IsHidden : IsHidden_MethodGroup
    class IsHidden_MethodGroup:
        @typing.overload
        def __call__(self, scene: Scene) -> bool:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool = ...) -> bool:...

    # Skipped Isolate due to it being static, abstract and generic.

    Isolate : Isolate_MethodGroup
    class Isolate_MethodGroup:
        @typing.overload
        def __call__(self, gameObjects: Array_1[GameObject], includeDescendants: bool) -> None:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool) -> None:...

    # Skipped IsPickingDisabled due to it being static, abstract and generic.

    IsPickingDisabled : IsPickingDisabled_MethodGroup
    class IsPickingDisabled_MethodGroup:
        @typing.overload
        def __call__(self, scene: Scene) -> bool:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool = ...) -> bool:...

    # Skipped IsPickingDisabledOnAllDescendants due to it being static, abstract and generic.

    IsPickingDisabledOnAllDescendants : IsPickingDisabledOnAllDescendants_MethodGroup
    class IsPickingDisabledOnAllDescendants_MethodGroup:
        @typing.overload
        def __call__(self, gameObject: GameObject) -> bool:...
        @typing.overload
        def __call__(self, scene: Scene) -> bool:...

    # Skipped Show due to it being static, abstract and generic.

    Show : Show_MethodGroup
    class Show_MethodGroup:
        @typing.overload
        def __call__(self, scene: Scene) -> None:...
        @typing.overload
        def __call__(self, gameObjects: Array_1[GameObject], includeDescendants: bool) -> None:...
        @typing.overload
        def __call__(self, gameObject: GameObject, includeDescendants: bool) -> None:...



class ScriptableSingleton_GenericClasses(abc.ABCMeta):
    Generic_ScriptableSingleton_GenericClasses_ScriptableSingleton_1_T = typing.TypeVar('Generic_ScriptableSingleton_GenericClasses_ScriptableSingleton_1_T')
    def __getitem__(self, types : typing.Type[Generic_ScriptableSingleton_GenericClasses_ScriptableSingleton_1_T]) -> typing.Type[ScriptableSingleton_1[Generic_ScriptableSingleton_GenericClasses_ScriptableSingleton_1_T]]: ...

ScriptableSingleton : ScriptableSingleton_GenericClasses

ScriptableSingleton_1_T = typing.TypeVar('ScriptableSingleton_1_T')
class ScriptableSingleton_1(typing.Generic[ScriptableSingleton_1_T], ScriptableObject):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def instance(cls) -> ScriptableSingleton_1_T: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class ScriptableWizard(EditorWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def createButtonName(self) -> str: ...
    @createButtonName.setter
    def createButtonName(self, value: str) -> str: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def errorString(self) -> str: ...
    @errorString.setter
    def errorString(self, value: str) -> str: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def helpString(self) -> str: ...
    @helpString.setter
    def helpString(self, value: str) -> str: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isValid(self) -> bool: ...
    @isValid.setter
    def isValid(self, value: bool) -> bool: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def otherButtonName(self) -> str: ...
    @otherButtonName.setter
    def otherButtonName(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    # Skipped DisplayWizard due to it being static, abstract and generic.

    DisplayWizard : DisplayWizard_MethodGroup
    class DisplayWizard_MethodGroup:
        def __getitem__(self, t:typing.Type[DisplayWizard_1_T1]) -> DisplayWizard_1[DisplayWizard_1_T1]: ...

        DisplayWizard_1_T1 = typing.TypeVar('DisplayWizard_1_T1')
        class DisplayWizard_1(typing.Generic[DisplayWizard_1_T1]):
            DisplayWizard_1_T = ScriptableWizard.DisplayWizard_MethodGroup.DisplayWizard_1_T1
            @typing.overload
            def __call__(self, title: str) -> DisplayWizard_1_T:...
            @typing.overload
            def __call__(self, title: str, createButtonName: str) -> DisplayWizard_1_T:...
            @typing.overload
            def __call__(self, title: str, createButtonName: str, otherButtonName: str) -> DisplayWizard_1_T:...

        @typing.overload
        def __call__(self, title: str, klass: typing.Type[typing.Any]) -> ScriptableWizard:...
        @typing.overload
        def __call__(self, title: str, klass: typing.Type[typing.Any], createButtonName: str) -> ScriptableWizard:...
        @typing.overload
        def __call__(self, title: str, klass: typing.Type[typing.Any], createButtonName: str, otherButtonName: str) -> ScriptableWizard:...



class ScriptCallOptimizationLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SlowAndSafe : ScriptCallOptimizationLevel # 0
    FastButNoExceptions : ScriptCallOptimizationLevel # 1


class ScriptCompiler(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mono : ScriptCompiler # 0
    Roslyn : ScriptCompiler # 1


class ScriptingImplementation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mono2x : ScriptingImplementation # 0
    IL2CPP : ScriptingImplementation # 1
    WinRTDotNET : ScriptingImplementation # 2
    CoreCLR : ScriptingImplementation # 3


class ScriptingRuntimeVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Legacy : ScriptingRuntimeVersion # 0
    Latest : ScriptingRuntimeVersion # 1


class SearchableEditorWindow(EditorWindow):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...

    class SearchMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        All : SearchableEditorWindow.SearchMode # 0
        Name : SearchableEditorWindow.SearchMode # 1
        Type : SearchableEditorWindow.SearchMode # 2
        Label : SearchableEditorWindow.SearchMode # 3
        AssetBundleName : SearchableEditorWindow.SearchMode # 4


    class SearchModeHierarchyWindow(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        All : SearchableEditorWindow.SearchModeHierarchyWindow # 0
        Name : SearchableEditorWindow.SearchModeHierarchyWindow # 1
        Type : SearchableEditorWindow.SearchModeHierarchyWindow # 2



class Selection:
    def __init__(self) -> None: ...
    selectionChanged : Action
    @classmethod
    @property
    def activeContext(cls) -> Object: ...
    @classmethod
    @property
    def activeGameObject(cls) -> GameObject: ...
    @classmethod
    @activeGameObject.setter
    def activeGameObject(cls, value: GameObject) -> GameObject: ...
    @classmethod
    @property
    def activeInstanceID(cls) -> int: ...
    @classmethod
    @activeInstanceID.setter
    def activeInstanceID(cls, value: int) -> int: ...
    @classmethod
    @property
    def activeObject(cls) -> Object: ...
    @classmethod
    @activeObject.setter
    def activeObject(cls, value: Object) -> Object: ...
    @classmethod
    @property
    def activeTransform(cls) -> Transform: ...
    @classmethod
    @activeTransform.setter
    def activeTransform(cls, value: Transform) -> Transform: ...
    @classmethod
    @property
    def assetGUIDs(cls) -> Array_1[str]: ...
    @classmethod
    @property
    def count(cls) -> int: ...
    @classmethod
    @property
    def gameObjects(cls) -> Array_1[GameObject]: ...
    @classmethod
    @property
    def instanceIDs(cls) -> Array_1[int]: ...
    @classmethod
    @instanceIDs.setter
    def instanceIDs(cls, value: Array_1[int]) -> Array_1[int]: ...
    @classmethod
    @property
    def objects(cls) -> Array_1[Object]: ...
    @classmethod
    @objects.setter
    def objects(cls, value: Array_1[Object]) -> Array_1[Object]: ...
    @classmethod
    @property
    def transforms(cls) -> Array_1[Transform]: ...
    @staticmethod
    def GetTransforms(mode: SelectionMode) -> Array_1[Transform]: ...
    @staticmethod
    def SetActiveObjectWithContext(obj: Object, context: Object) -> None: ...
    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, instanceID: int) -> bool:...
        @typing.overload
        def __call__(self, obj: Object) -> bool:...

    # Skipped GetFiltered due to it being static, abstract and generic.

    GetFiltered : GetFiltered_MethodGroup
    class GetFiltered_MethodGroup:
        def __getitem__(self, t:typing.Type[GetFiltered_1_T1]) -> GetFiltered_1[GetFiltered_1_T1]: ...

        GetFiltered_1_T1 = typing.TypeVar('GetFiltered_1_T1')
        class GetFiltered_1(typing.Generic[GetFiltered_1_T1]):
            GetFiltered_1_T = Selection.GetFiltered_MethodGroup.GetFiltered_1_T1
            def __call__(self, mode: SelectionMode) -> Array_1[GetFiltered_1_T]:...

        def __call__(self, type: typing.Type[typing.Any], mode: SelectionMode) -> Array_1[Object]:...



class SelectionMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unfiltered : SelectionMode # 0
    TopLevel : SelectionMode # 1
    Deep : SelectionMode # 2
    ExcludePrefab : SelectionMode # 4
    OnlyUserModifiable : SelectionMode # 8
    Editable : SelectionMode # 8
    Assets : SelectionMode # 16
    DeepAssets : SelectionMode # 32


class SemanticMergeMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : SemanticMergeMode # 0
    Premerge : SemanticMergeMode # 1
    Ask : SemanticMergeMode # 2


class SerializationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mixed : SerializationMode # 0
    ForceBinary : SerializationMode # 1
    ForceText : SerializationMode # 2


class SerializationUtility:
    def __init__(self) -> None: ...
    RefIdNull : int
    RefIdUnknown : int
    @staticmethod
    def ClearAllManagedReferencesWithMissingTypes(obj: Object) -> bool: ...
    @staticmethod
    def ClearManagedReferenceWithMissingType(obj: Object, id: int) -> bool: ...
    @staticmethod
    def GetManagedReference(obj: Object, id: int) -> typing.Any: ...
    @staticmethod
    def GetManagedReferenceIdForObject(obj: Object, scriptObj: typing.Any) -> int: ...
    @staticmethod
    def GetManagedReferenceIds(obj: Object) -> Array_1[int]: ...
    @staticmethod
    def GetManagedReferencesWithMissingTypes(obj: Object) -> Array_1[ManagedReferenceMissingType]: ...
    @staticmethod
    def HasManagedReferencesWithMissingTypes(obj: Object) -> bool: ...
    @staticmethod
    def SetManagedReferenceIdForObject(obj: Object, scriptObj: typing.Any, refId: int) -> bool: ...


class SerializedObject(IDisposable):
    @typing.overload
    def __init__(self, obj: Object) -> None: ...
    @typing.overload
    def __init__(self, obj: Object, context: Object) -> None: ...
    @typing.overload
    def __init__(self, objs: Array_1[Object]) -> None: ...
    @typing.overload
    def __init__(self, objs: Array_1[Object], context: Object) -> None: ...
    @property
    def context(self) -> Object: ...
    @property
    def forceChildVisibility(self) -> bool: ...
    @forceChildVisibility.setter
    def forceChildVisibility(self, value: bool) -> bool: ...
    @property
    def hasModifiedProperties(self) -> bool: ...
    @property
    def isEditingMultipleObjects(self) -> bool: ...
    @property
    def maxArraySizeForMultiEditing(self) -> int: ...
    @maxArraySizeForMultiEditing.setter
    def maxArraySizeForMultiEditing(self, value: int) -> int: ...
    @property
    def targetObject(self) -> Object: ...
    @property
    def targetObjects(self) -> Array_1[Object]: ...
    def ApplyModifiedProperties(self) -> bool: ...
    def ApplyModifiedPropertiesWithoutUndo(self) -> bool: ...
    def CopyFromSerializedProperty(self, prop: SerializedProperty) -> None: ...
    def CopyFromSerializedPropertyIfDifferent(self, prop: SerializedProperty) -> bool: ...
    def Dispose(self) -> None: ...
    def FindProperty(self, propertyPath: str) -> SerializedProperty: ...
    def GetIterator(self) -> SerializedProperty: ...
    def SetIsDifferentCacheDirty(self) -> None: ...
    def Update(self) -> None: ...
    def UpdateIfDirtyOrScript(self) -> None: ...
    def UpdateIfRequiredOrScript(self) -> bool: ...


class SerializedProperty(IDisposable):
    @property
    def animationCurveValue(self) -> AnimationCurve: ...
    @animationCurveValue.setter
    def animationCurveValue(self, value: AnimationCurve) -> AnimationCurve: ...
    @property
    def arrayElementType(self) -> str: ...
    @property
    def arraySize(self) -> int: ...
    @arraySize.setter
    def arraySize(self, value: int) -> int: ...
    @property
    def boolValue(self) -> bool: ...
    @boolValue.setter
    def boolValue(self, value: bool) -> bool: ...
    @property
    def boundsIntValue(self) -> BoundsInt: ...
    @boundsIntValue.setter
    def boundsIntValue(self, value: BoundsInt) -> BoundsInt: ...
    @property
    def boundsValue(self) -> Bounds: ...
    @boundsValue.setter
    def boundsValue(self, value: Bounds) -> Bounds: ...
    @property
    def boxedValue(self) -> typing.Any: ...
    @boxedValue.setter
    def boxedValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def colorValue(self) -> Color: ...
    @colorValue.setter
    def colorValue(self, value: Color) -> Color: ...
    @property
    def contentHash(self) -> int: ...
    @property
    def depth(self) -> int: ...
    @property
    def displayName(self) -> str: ...
    @property
    def doubleValue(self) -> float: ...
    @doubleValue.setter
    def doubleValue(self, value: float) -> float: ...
    @property
    def editable(self) -> bool: ...
    @property
    def enumDisplayNames(self) -> Array_1[str]: ...
    @property
    def enumNames(self) -> Array_1[str]: ...
    @property
    def enumValueFlag(self) -> int: ...
    @enumValueFlag.setter
    def enumValueFlag(self, value: int) -> int: ...
    @property
    def enumValueIndex(self) -> int: ...
    @enumValueIndex.setter
    def enumValueIndex(self, value: int) -> int: ...
    @property
    def exposedReferenceValue(self) -> Object: ...
    @exposedReferenceValue.setter
    def exposedReferenceValue(self, value: Object) -> Object: ...
    @property
    def fixedBufferSize(self) -> int: ...
    @property
    def floatValue(self) -> float: ...
    @floatValue.setter
    def floatValue(self, value: float) -> float: ...
    @property
    def gradientValue(self) -> Gradient: ...
    @gradientValue.setter
    def gradientValue(self, value: Gradient) -> Gradient: ...
    @property
    def hasChildren(self) -> bool: ...
    @property
    def hash128Value(self) -> Hash128: ...
    @hash128Value.setter
    def hash128Value(self, value: Hash128) -> Hash128: ...
    @property
    def hasMultipleDifferentValues(self) -> bool: ...
    @property
    def hasVisibleChildren(self) -> bool: ...
    @property
    def intValue(self) -> int: ...
    @intValue.setter
    def intValue(self, value: int) -> int: ...
    @property
    def isAnimated(self) -> bool: ...
    @property
    def isArray(self) -> bool: ...
    @property
    def isDefaultOverride(self) -> bool: ...
    @property
    def isExpanded(self) -> bool: ...
    @isExpanded.setter
    def isExpanded(self, value: bool) -> bool: ...
    @property
    def isFixedBuffer(self) -> bool: ...
    @property
    def isInstantiatedPrefab(self) -> bool: ...
    @property
    def longValue(self) -> int: ...
    @longValue.setter
    def longValue(self, value: int) -> int: ...
    @property
    def managedReferenceFieldTypename(self) -> str: ...
    @property
    def managedReferenceFullTypename(self) -> str: ...
    @property
    def managedReferenceId(self) -> int: ...
    @managedReferenceId.setter
    def managedReferenceId(self, value: int) -> int: ...
    @property
    def managedReferenceValue(self) -> typing.Any: ...
    @managedReferenceValue.setter
    def managedReferenceValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def minArraySize(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def numericType(self) -> SerializedPropertyNumericType: ...
    @property
    def objectReferenceInstanceIDValue(self) -> int: ...
    @objectReferenceInstanceIDValue.setter
    def objectReferenceInstanceIDValue(self, value: int) -> int: ...
    @property
    def objectReferenceValue(self) -> Object: ...
    @objectReferenceValue.setter
    def objectReferenceValue(self, value: Object) -> Object: ...
    @property
    def prefabOverride(self) -> bool: ...
    @prefabOverride.setter
    def prefabOverride(self, value: bool) -> bool: ...
    @property
    def propertyPath(self) -> str: ...
    @property
    def propertyType(self) -> SerializedPropertyType: ...
    @property
    def quaternionValue(self) -> Quaternion: ...
    @quaternionValue.setter
    def quaternionValue(self, value: Quaternion) -> Quaternion: ...
    @property
    def rectIntValue(self) -> RectInt: ...
    @rectIntValue.setter
    def rectIntValue(self, value: RectInt) -> RectInt: ...
    @property
    def rectValue(self) -> Rect: ...
    @rectValue.setter
    def rectValue(self, value: Rect) -> Rect: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def stringValue(self) -> str: ...
    @stringValue.setter
    def stringValue(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def uintValue(self) -> int: ...
    @uintValue.setter
    def uintValue(self, value: int) -> int: ...
    @property
    def ulongValue(self) -> int: ...
    @ulongValue.setter
    def ulongValue(self, value: int) -> int: ...
    @property
    def vector2IntValue(self) -> Vector2Int: ...
    @vector2IntValue.setter
    def vector2IntValue(self, value: Vector2Int) -> Vector2Int: ...
    @property
    def vector2Value(self) -> Vector2: ...
    @vector2Value.setter
    def vector2Value(self, value: Vector2) -> Vector2: ...
    @property
    def vector3IntValue(self) -> Vector3Int: ...
    @vector3IntValue.setter
    def vector3IntValue(self, value: Vector3Int) -> Vector3Int: ...
    @property
    def vector3Value(self) -> Vector3: ...
    @vector3Value.setter
    def vector3Value(self, value: Vector3) -> Vector3: ...
    @property
    def vector4Value(self) -> Vector4: ...
    @vector4Value.setter
    def vector4Value(self, value: Vector4) -> Vector4: ...
    def ClearArray(self) -> None: ...
    def Copy(self) -> SerializedProperty: ...
    def CountInProperty(self) -> int: ...
    def CountRemaining(self) -> int: ...
    @staticmethod
    def DataEquals(x: SerializedProperty, y: SerializedProperty) -> bool: ...
    def DeleteArrayElementAtIndex(self, index: int) -> None: ...
    def DeleteCommand(self) -> bool: ...
    def Dispose(self) -> None: ...
    def DuplicateCommand(self) -> bool: ...
    @staticmethod
    def EqualContents(x: SerializedProperty, y: SerializedProperty) -> bool: ...
    def FindPropertyRelative(self, relativePropertyPath: str) -> SerializedProperty: ...
    def GetArrayElementAtIndex(self, index: int) -> SerializedProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetFixedBufferElementAtIndex(self, index: int) -> SerializedProperty: ...
    def InsertArrayElementAtIndex(self, index: int) -> None: ...
    def MoveArrayElement(self, srcIndex: int, dstIndex: int) -> bool: ...
    def Next(self, enterChildren: bool) -> bool: ...
    def NextVisible(self, enterChildren: bool) -> bool: ...
    def Reset(self) -> None: ...
    # Skipped GetEndProperty due to it being static, abstract and generic.

    GetEndProperty : GetEndProperty_MethodGroup
    class GetEndProperty_MethodGroup:
        @typing.overload
        def __call__(self) -> SerializedProperty:...
        @typing.overload
        def __call__(self, includeInvisible: bool) -> SerializedProperty:...



class SerializedPropertyNumericType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : SerializedPropertyNumericType # 0
    Int8 : SerializedPropertyNumericType # 1
    UInt8 : SerializedPropertyNumericType # 2
    Int16 : SerializedPropertyNumericType # 3
    UInt16 : SerializedPropertyNumericType # 4
    Int32 : SerializedPropertyNumericType # 5
    UInt32 : SerializedPropertyNumericType # 6
    Int64 : SerializedPropertyNumericType # 7
    UInt64 : SerializedPropertyNumericType # 8
    Float : SerializedPropertyNumericType # 100
    Double : SerializedPropertyNumericType # 101


class SerializedPropertyType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Integer : SerializedPropertyType # 0
    Boolean : SerializedPropertyType # 1
    Float : SerializedPropertyType # 2
    String : SerializedPropertyType # 3
    Color : SerializedPropertyType # 4
    ObjectReference : SerializedPropertyType # 5
    LayerMask : SerializedPropertyType # 6
    Enum : SerializedPropertyType # 7
    Vector2 : SerializedPropertyType # 8
    Vector3 : SerializedPropertyType # 9
    Vector4 : SerializedPropertyType # 10
    Rect : SerializedPropertyType # 11
    ArraySize : SerializedPropertyType # 12
    Character : SerializedPropertyType # 13
    AnimationCurve : SerializedPropertyType # 14
    Bounds : SerializedPropertyType # 15
    Gradient : SerializedPropertyType # 16
    Quaternion : SerializedPropertyType # 17
    ExposedReference : SerializedPropertyType # 18
    FixedBufferSize : SerializedPropertyType # 19
    Vector2Int : SerializedPropertyType # 20
    Vector3Int : SerializedPropertyType # 21
    RectInt : SerializedPropertyType # 22
    BoundsInt : SerializedPropertyType # 23
    ManagedReference : SerializedPropertyType # 24
    Hash128 : SerializedPropertyType # 25
    Generic : SerializedPropertyType # -1


class SessionState:
    def __init__(self) -> None: ...
    @staticmethod
    def EraseBool(key: str) -> None: ...
    @staticmethod
    def EraseFloat(key: str) -> None: ...
    @staticmethod
    def EraseInt(key: str) -> None: ...
    @staticmethod
    def EraseIntArray(key: str) -> None: ...
    @staticmethod
    def EraseString(key: str) -> None: ...
    @staticmethod
    def EraseVector3(key: str) -> None: ...
    @staticmethod
    def GetBool(key: str, defaultValue: bool) -> bool: ...
    @staticmethod
    def GetFloat(key: str, defaultValue: float) -> float: ...
    @staticmethod
    def GetInt(key: str, defaultValue: int) -> int: ...
    @staticmethod
    def GetIntArray(key: str, defaultValue: Array_1[int]) -> Array_1[int]: ...
    @staticmethod
    def GetString(key: str, defaultValue: str) -> str: ...
    @staticmethod
    def GetVector3(key: str, defaultValue: Vector3) -> Vector3: ...
    @staticmethod
    def SetBool(key: str, value: bool) -> None: ...
    @staticmethod
    def SetFloat(key: str, value: float) -> None: ...
    @staticmethod
    def SetInt(key: str, value: int) -> None: ...
    @staticmethod
    def SetIntArray(key: str, value: Array_1[int]) -> None: ...
    @staticmethod
    def SetString(key: str, value: str) -> None: ...
    @staticmethod
    def SetVector3(key: str, value: Vector3) -> None: ...


class SettingsProvider:
    def __init__(self, path: str, scopes: SettingsScope, keywords: IEnumerable_1[str] = ...) -> None: ...
    @property
    def activateHandler(self) -> Action_2[str, VisualElement]: ...
    @activateHandler.setter
    def activateHandler(self, value: Action_2[str, VisualElement]) -> Action_2[str, VisualElement]: ...
    @property
    def deactivateHandler(self) -> Action: ...
    @deactivateHandler.setter
    def deactivateHandler(self, value: Action) -> Action: ...
    @property
    def footerBarGuiHandler(self) -> Action: ...
    @footerBarGuiHandler.setter
    def footerBarGuiHandler(self, value: Action) -> Action: ...
    @property
    def guiHandler(self) -> Action_1[str]: ...
    @guiHandler.setter
    def guiHandler(self, value: Action_1[str]) -> Action_1[str]: ...
    @property
    def hasSearchInterestHandler(self) -> Func_2[str, bool]: ...
    @hasSearchInterestHandler.setter
    def hasSearchInterestHandler(self, value: Func_2[str, bool]) -> Func_2[str, bool]: ...
    @property
    def inspectorUpdateHandler(self) -> Action: ...
    @inspectorUpdateHandler.setter
    def inspectorUpdateHandler(self, value: Action) -> Action: ...
    @property
    def keywords(self) -> IEnumerable_1[str]: ...
    @keywords.setter
    def keywords(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def scope(self) -> SettingsScope: ...
    @property
    def settingsPath(self) -> str: ...
    @property
    def titleBarGuiHandler(self) -> Action: ...
    @titleBarGuiHandler.setter
    def titleBarGuiHandler(self, value: Action) -> Action: ...
    @staticmethod
    def GetSearchKeywordsFromPath(path: str) -> IEnumerable_1[str]: ...
    @staticmethod
    def GetSearchKeywordsFromSerializedObject(serializedObject: SerializedObject) -> IEnumerable_1[str]: ...
    def HasSearchInterest(self, searchContext: str) -> bool: ...
    def OnActivate(self, searchContext: str, rootElement: VisualElement) -> None: ...
    def OnDeactivate(self) -> None: ...
    def OnFooterBarGUI(self) -> None: ...
    def OnGUI(self, searchContext: str) -> None: ...
    def OnInspectorUpdate(self) -> None: ...
    def OnTitleBarGUI(self) -> None: ...
    def Repaint(self) -> None: ...
    # Skipped GetSearchKeywordsFromGUIContentProperties due to it being static, abstract and generic.

    GetSearchKeywordsFromGUIContentProperties : GetSearchKeywordsFromGUIContentProperties_MethodGroup
    class GetSearchKeywordsFromGUIContentProperties_MethodGroup:
        def __getitem__(self, t:typing.Type[GetSearchKeywordsFromGUIContentProperties_1_T1]) -> GetSearchKeywordsFromGUIContentProperties_1[GetSearchKeywordsFromGUIContentProperties_1_T1]: ...

        GetSearchKeywordsFromGUIContentProperties_1_T1 = typing.TypeVar('GetSearchKeywordsFromGUIContentProperties_1_T1')
        class GetSearchKeywordsFromGUIContentProperties_1(typing.Generic[GetSearchKeywordsFromGUIContentProperties_1_T1]):
            GetSearchKeywordsFromGUIContentProperties_1_T = SettingsProvider.GetSearchKeywordsFromGUIContentProperties_MethodGroup.GetSearchKeywordsFromGUIContentProperties_1_T1
            def __call__(self) -> IEnumerable_1[str]:...


    # Skipped PopulateSearchKeywordsFromGUIContentProperties due to it being static, abstract and generic.

    PopulateSearchKeywordsFromGUIContentProperties : PopulateSearchKeywordsFromGUIContentProperties_MethodGroup
    class PopulateSearchKeywordsFromGUIContentProperties_MethodGroup:
        def __getitem__(self, t:typing.Type[PopulateSearchKeywordsFromGUIContentProperties_1_T1]) -> PopulateSearchKeywordsFromGUIContentProperties_1[PopulateSearchKeywordsFromGUIContentProperties_1_T1]: ...

        PopulateSearchKeywordsFromGUIContentProperties_1_T1 = typing.TypeVar('PopulateSearchKeywordsFromGUIContentProperties_1_T1')
        class PopulateSearchKeywordsFromGUIContentProperties_1(typing.Generic[PopulateSearchKeywordsFromGUIContentProperties_1_T1]):
            PopulateSearchKeywordsFromGUIContentProperties_1_T = SettingsProvider.PopulateSearchKeywordsFromGUIContentProperties_MethodGroup.PopulateSearchKeywordsFromGUIContentProperties_1_T1
            def __call__(self) -> None:...




class SettingsProviderAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class SettingsProviderGroupAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class SettingsScope(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    User : SettingsScope # 0
    Project : SettingsScope # 1


class SettingsService(abc.ABC):
    @staticmethod
    def Exists(settingsPath: str) -> bool: ...
    @staticmethod
    def NotifySettingsProviderChanged() -> None: ...
    @staticmethod
    def OpenProjectSettings(settingsPath: str = ...) -> EditorWindow: ...
    @staticmethod
    def OpenUserPreferences(settingsPath: str = ...) -> EditorWindow: ...
    @staticmethod
    def RepaintAllSettingsWindow() -> None: ...


class ShaderData:
    @property
    def ActiveSubshader(self) -> ShaderData.Subshader: ...
    @property
    def ActiveSubshaderIndex(self) -> int: ...
    @property
    def SerializedSubshaderCount(self) -> int: ...
    @property
    def SourceShader(self) -> Shader: ...
    @SourceShader.setter
    def SourceShader(self, value: Shader) -> Shader: ...
    @property
    def SubshaderCount(self) -> int: ...
    def GetSerializedSubshader(self, index: int) -> ShaderData.Subshader: ...
    def GetSubshader(self, index: int) -> ShaderData.Subshader: ...

    class ConstantBufferInfo:
        @property
        def Fields(self) -> Array_1[ShaderData.ConstantInfo]: ...
        @property
        def Name(self) -> str: ...
        @property
        def Size(self) -> int: ...


    class ConstantInfo:
        @property
        def ArraySize(self) -> int: ...
        @property
        def Columns(self) -> int: ...
        @property
        def ConstantType(self) -> ShaderConstantType: ...
        @property
        def DataType(self) -> ShaderParamType: ...
        @property
        def Index(self) -> int: ...
        @property
        def Name(self) -> str: ...
        @property
        def Rows(self) -> int: ...
        @property
        def StructFields(self) -> Array_1[ShaderData.ConstantInfo]: ...
        @property
        def StructSize(self) -> int: ...


    class Pass:
        @property
        def IsGrabPass(self) -> bool: ...
        @property
        def Name(self) -> str: ...
        @property
        def SourceCode(self) -> str: ...
        def FindTagValue(self, tagName: ShaderTagId) -> ShaderTagId: ...
        def HasShaderStage(self, shaderType: ShaderType) -> bool: ...
        # Skipped CompileVariant due to it being static, abstract and generic.

        CompileVariant : CompileVariant_MethodGroup
        class CompileVariant_MethodGroup:
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, platformKeywords: Array_1[BuiltinShaderDefine]) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, tier: GraphicsTier) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, forExternalTool: bool) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, platformKeywords: Array_1[BuiltinShaderDefine], tier: GraphicsTier) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, platformKeywords: Array_1[BuiltinShaderDefine], forExternalTool: bool) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, tier: GraphicsTier, forExternalTool: bool) -> ShaderData.VariantCompileInfo:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, platformKeywords: Array_1[BuiltinShaderDefine], tier: GraphicsTier, forExternalTool: bool) -> ShaderData.VariantCompileInfo:...

        # Skipped PreprocessVariant due to it being static, abstract and generic.

        PreprocessVariant : PreprocessVariant_MethodGroup
        class PreprocessVariant_MethodGroup:
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, stripLineDirectives: bool) -> ShaderData.PreprocessedVariant:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, platformKeywords: Array_1[BuiltinShaderDefine], stripLineDirectives: bool) -> ShaderData.PreprocessedVariant:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, tier: GraphicsTier, stripLineDirectives: bool) -> ShaderData.PreprocessedVariant:...
            @typing.overload
            def __call__(self, shaderType: ShaderType, keywords: Array_1[str], shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, platformKeywords: Array_1[BuiltinShaderDefine], tier: GraphicsTier, stripLineDirectives: bool) -> ShaderData.PreprocessedVariant:...



    class PreprocessedVariant:
        @property
        def Messages(self) -> Array_1[ShaderMessage]: ...
        @property
        def PreprocessedCode(self) -> str: ...
        @property
        def Success(self) -> bool: ...


    class Subshader:
        @property
        def LevelOfDetail(self) -> int: ...
        @property
        def PassCount(self) -> int: ...
        def FindTagValue(self, tag: ShaderTagId) -> ShaderTagId: ...
        def GetPass(self, passIndex: int) -> ShaderData.Pass: ...


    class TextureBindingInfo:
        @property
        def ArraySize(self) -> int: ...
        @property
        def Dim(self) -> TextureDimension: ...
        @property
        def Index(self) -> int: ...
        @property
        def Multisampled(self) -> bool: ...
        @property
        def Name(self) -> str: ...
        @property
        def SamplerIndex(self) -> int: ...


    class VariantCompileInfo:
        @property
        def Attributes(self) -> Array_1[VertexAttribute]: ...
        @property
        def ConstantBuffers(self) -> Array_1[ShaderData.ConstantBufferInfo]: ...
        @property
        def Messages(self) -> Array_1[ShaderMessage]: ...
        @property
        def ShaderData(self) -> Array_1[int]: ...
        @property
        def Success(self) -> bool: ...
        @property
        def TextureBindings(self) -> Array_1[ShaderData.TextureBindingInfo]: ...



class ShaderGUI(abc.ABC):
    def AssignNewShaderToMaterial(self, material: Material, oldShader: Shader, newShader: Shader) -> None: ...
    def OnClosed(self, material: Material) -> None: ...
    def OnGUI(self, materialEditor: MaterialEditor, properties: Array_1[MaterialProperty]) -> None: ...
    def OnMaterialInteractivePreviewGUI(self, materialEditor: MaterialEditor, r: Rect, background: GUIStyle) -> None: ...
    def OnMaterialPreviewGUI(self, materialEditor: MaterialEditor, r: Rect, background: GUIStyle) -> None: ...
    def OnMaterialPreviewSettingsGUI(self, materialEditor: MaterialEditor) -> None: ...
    def ValidateMaterial(self, material: Material) -> None: ...


class ShaderImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def preprocessorOverride(self) -> PreprocessorOverride: ...
    @preprocessorOverride.setter
    def preprocessorOverride(self, value: PreprocessorOverride) -> PreprocessorOverride: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    def GetDefaultTexture(self, name: str) -> Texture: ...
    def GetNonModifiableTexture(self, name: str) -> Texture: ...
    def GetShader(self) -> Shader: ...
    def SetDefaultTextures(self, name: Array_1[str], textures: Array_1[Texture]) -> None: ...
    def SetNonModifiableTextures(self, name: Array_1[str], textures: Array_1[Texture]) -> None: ...


class ShaderInclude(TextAsset):
    def __init__(self) -> None: ...
    @property
    def bytes(self) -> Array_1[int]: ...
    @property
    def dataSize(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def text(self) -> str: ...


class ShaderIncludePathAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ShaderInfo:
    @property
    def hasErrors(self) -> bool: ...
    @property
    def hasWarnings(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def supported(self) -> bool: ...


class ShaderMessage(IEquatable_1[ShaderMessage]):
    def __init__(self, msg: str, sev: ShaderCompilerMessageSeverity = ...) -> None: ...
    @property
    def file(self) -> str: ...
    @property
    def line(self) -> int: ...
    @property
    def message(self) -> str: ...
    @property
    def messageDetails(self) -> str: ...
    @property
    def platform(self) -> ShaderCompilerPlatform: ...
    @property
    def severity(self) -> ShaderCompilerMessageSeverity: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: ShaderMessage, right: ShaderMessage) -> bool: ...
    def __ne__(self, left: ShaderMessage, right: ShaderMessage) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ShaderMessage) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ShaderPrecisionModel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PlatformDefault : ShaderPrecisionModel # 0
    Unified : ShaderPrecisionModel # 1


class ShaderUtil:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def allowAsyncCompilation(cls) -> bool: ...
    @classmethod
    @allowAsyncCompilation.setter
    def allowAsyncCompilation(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def anythingCompiling(cls) -> bool: ...
    @classmethod
    @property
    def disableShaderOptimization(cls) -> bool: ...
    @classmethod
    @disableShaderOptimization.setter
    def disableShaderOptimization(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def hardwareSupportsRectRenderTexture(cls) -> bool: ...
    @staticmethod
    def ClearCachedData(s: Shader) -> None: ...
    @staticmethod
    def ClearShaderErrors(s: Shader) -> None: ...
    @staticmethod
    def ClearShaderMessages(s: Shader) -> None: ...
    @staticmethod
    def CompilePass(material: Material, pass: int, forceSync: bool = ...) -> None: ...
    @staticmethod
    def CreateComputeShaderAsset(context: AssetImportContext, source: str) -> ComputeShader: ...
    @staticmethod
    def GetAllShaderInfo() -> Array_1[ShaderInfo]: ...
    @staticmethod
    def GetCallableShaderCount(s: RayTracingShader) -> int: ...
    @staticmethod
    def GetCallableShaderName(s: RayTracingShader, shaderIndex: int) -> str: ...
    @staticmethod
    def GetCallableShaderParamSize(s: RayTracingShader, shaderIndex: int) -> int: ...
    @staticmethod
    def GetComputeShaderMessageCount(s: ComputeShader) -> int: ...
    @staticmethod
    def GetComputeShaderMessages(s: ComputeShader) -> Array_1[ShaderMessage]: ...
    @staticmethod
    def GetCurrentCustomEditor(shader: Shader) -> str: ...
    @staticmethod
    def GetMissShaderCount(s: RayTracingShader) -> int: ...
    @staticmethod
    def GetMissShaderName(s: RayTracingShader, shaderIndex: int) -> str: ...
    @staticmethod
    def GetMissShaderRayPayloadSize(s: RayTracingShader, shaderIndex: int) -> int: ...
    @staticmethod
    def GetPropertyCount(s: Shader) -> int: ...
    @staticmethod
    def GetPropertyDescription(s: Shader, propertyIdx: int) -> str: ...
    @staticmethod
    def GetPropertyName(s: Shader, propertyIdx: int) -> str: ...
    @staticmethod
    def GetPropertyType(s: Shader, propertyIdx: int) -> ShaderUtil.ShaderPropertyType: ...
    @staticmethod
    def GetRangeLimits(s: Shader, propertyIdx: int, defminmax: int) -> float: ...
    @staticmethod
    def GetRayGenerationShaderCount(s: RayTracingShader) -> int: ...
    @staticmethod
    def GetRayGenerationShaderName(s: RayTracingShader, shaderIndex: int) -> str: ...
    @staticmethod
    def GetRayTracingShaderMessageCount(s: RayTracingShader) -> int: ...
    @staticmethod
    def GetRayTracingShaderMessages(s: RayTracingShader) -> Array_1[ShaderMessage]: ...
    @staticmethod
    def GetShaderData(shader: Shader) -> ShaderData: ...
    @staticmethod
    def GetShaderInfo(shader: Shader) -> ShaderInfo: ...
    @staticmethod
    def GetShaderMessageCount(s: Shader) -> int: ...
    @staticmethod
    def GetTexDim(s: Shader, propertyIdx: int) -> TextureDimension: ...
    @staticmethod
    def HasProceduralInstancing(s: Shader) -> bool: ...
    @staticmethod
    def IsPassCompiled(material: Material, pass: int) -> bool: ...
    @staticmethod
    def IsShaderPropertyHidden(s: Shader, propertyIdx: int) -> bool: ...
    @staticmethod
    def IsShaderPropertyNonModifiableTexureProperty(s: Shader, propertyIdx: int) -> bool: ...
    @staticmethod
    def RegisterShader(shader: Shader) -> None: ...
    @staticmethod
    def RestoreAsyncCompilation(cmd: CommandBuffer) -> None: ...
    @staticmethod
    def SetAsyncCompilation(cmd: CommandBuffer, allow: bool) -> None: ...
    @staticmethod
    def ShaderHasError(shader: Shader) -> bool: ...
    @staticmethod
    def ShaderHasWarnings(shader: Shader) -> bool: ...
    # Skipped CreateShaderAsset due to it being static, abstract and generic.

    CreateShaderAsset : CreateShaderAsset_MethodGroup
    class CreateShaderAsset_MethodGroup:
        @typing.overload
        def __call__(self, source: str) -> Shader:...
        @typing.overload
        def __call__(self, source: str, compileInitialShaderVariants: bool) -> Shader:...
        @typing.overload
        def __call__(self, context: AssetImportContext, source: str, compileInitialShaderVariants: bool) -> Shader:...

    # Skipped GetCustomEditorForRenderPipeline due to it being static, abstract and generic.

    GetCustomEditorForRenderPipeline : GetCustomEditorForRenderPipeline_MethodGroup
    class GetCustomEditorForRenderPipeline_MethodGroup:
        @typing.overload
        def __call__(self, shader: Shader, renderPipelineType: str) -> str:...
        @typing.overload
        def __call__(self, shader: Shader, renderPipelineType: typing.Type[typing.Any]) -> str:...

    # Skipped GetPassKeywords due to it being static, abstract and generic.

    GetPassKeywords : GetPassKeywords_MethodGroup
    class GetPassKeywords_MethodGroup:
        @typing.overload
        def __call__(self, s: Shader, passIdentifier: clr.Reference[PassIdentifier]) -> Array_1[LocalKeyword]:...
        @typing.overload
        def __call__(self, s: Shader, passIdentifier: clr.Reference[PassIdentifier], shaderType: ShaderType) -> Array_1[LocalKeyword]:...
        @typing.overload
        def __call__(self, s: Shader, passIdentifier: clr.Reference[PassIdentifier], shaderType: ShaderType, shaderCompilerPlatform: ShaderCompilerPlatform) -> Array_1[LocalKeyword]:...

    # Skipped GetShaderMessages due to it being static, abstract and generic.

    GetShaderMessages : GetShaderMessages_MethodGroup
    class GetShaderMessages_MethodGroup:
        @typing.overload
        def __call__(self, s: Shader) -> Array_1[ShaderMessage]:...
        @typing.overload
        def __call__(self, s: Shader, platform: ShaderCompilerPlatform) -> Array_1[ShaderMessage]:...

    # Skipped GetShaderPlatformKeywordsForBuildTarget due to it being static, abstract and generic.

    GetShaderPlatformKeywordsForBuildTarget : GetShaderPlatformKeywordsForBuildTarget_MethodGroup
    class GetShaderPlatformKeywordsForBuildTarget_MethodGroup:
        @typing.overload
        def __call__(self, shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget) -> Array_1[BuiltinShaderDefine]:...
        @typing.overload
        def __call__(self, shaderCompilerPlatform: ShaderCompilerPlatform, buildTarget: BuildTarget, tier: GraphicsTier) -> Array_1[BuiltinShaderDefine]:...

    # Skipped PassHasKeyword due to it being static, abstract and generic.

    PassHasKeyword : PassHasKeyword_MethodGroup
    class PassHasKeyword_MethodGroup:
        @typing.overload
        def __call__(self, s: Shader, passIdentifier: clr.Reference[PassIdentifier], keyword: clr.Reference[LocalKeyword]) -> bool:...
        @typing.overload
        def __call__(self, s: Shader, passIdentifier: clr.Reference[PassIdentifier], keyword: clr.Reference[LocalKeyword], shaderType: ShaderType) -> bool:...
        @typing.overload
        def __call__(self, s: Shader, passIdentifier: clr.Reference[PassIdentifier], keyword: clr.Reference[LocalKeyword], shaderType: ShaderType, shaderCompilerPlatform: ShaderCompilerPlatform) -> bool:...

    # Skipped UpdateShaderAsset due to it being static, abstract and generic.

    UpdateShaderAsset : UpdateShaderAsset_MethodGroup
    class UpdateShaderAsset_MethodGroup:
        @typing.overload
        def __call__(self, shader: Shader, source: str) -> None:...
        @typing.overload
        def __call__(self, shader: Shader, source: str, compileInitialShaderVariants: bool) -> None:...
        @typing.overload
        def __call__(self, context: AssetImportContext, shader: Shader, source: str, compileInitialShaderVariants: bool) -> None:...


    class ShaderPropertyTexDim(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        TexDimNone : ShaderUtil.ShaderPropertyTexDim # 0
        TexDim2D : ShaderUtil.ShaderPropertyTexDim # 2
        TexDim3D : ShaderUtil.ShaderPropertyTexDim # 3
        TexDimCUBE : ShaderUtil.ShaderPropertyTexDim # 4
        TexDimAny : ShaderUtil.ShaderPropertyTexDim # 6


    class ShaderPropertyType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Color : ShaderUtil.ShaderPropertyType # 0
        Vector : ShaderUtil.ShaderPropertyType # 1
        Float : ShaderUtil.ShaderPropertyType # 2
        Range : ShaderUtil.ShaderPropertyType # 3
        TexEnv : ShaderUtil.ShaderPropertyType # 4
        Int : ShaderUtil.ShaderPropertyType # 5



class SketchUpImportCamera:
    aspectRatio : float
    farPlane : float
    fieldOfView : float
    isPerspective : bool
    lookAt : Vector3
    nearPlane : float
    orthoSize : float
    position : Vector3
    up : Vector3


class SketchUpImporter(ModelImporter):
    def __init__(self) -> None: ...
    @property
    def addCollider(self) -> bool: ...
    @addCollider.setter
    def addCollider(self, value: bool) -> bool: ...
    @property
    def animationCompression(self) -> ModelImporterAnimationCompression: ...
    @animationCompression.setter
    def animationCompression(self, value: ModelImporterAnimationCompression) -> ModelImporterAnimationCompression: ...
    @property
    def animationPositionError(self) -> float: ...
    @animationPositionError.setter
    def animationPositionError(self, value: float) -> float: ...
    @property
    def animationRotationError(self) -> float: ...
    @animationRotationError.setter
    def animationRotationError(self, value: float) -> float: ...
    @property
    def animationScaleError(self) -> float: ...
    @animationScaleError.setter
    def animationScaleError(self, value: float) -> float: ...
    @property
    def animationType(self) -> ModelImporterAnimationType: ...
    @animationType.setter
    def animationType(self, value: ModelImporterAnimationType) -> ModelImporterAnimationType: ...
    @property
    def animationWrapMode(self) -> WrapMode: ...
    @animationWrapMode.setter
    def animationWrapMode(self, value: WrapMode) -> WrapMode: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def autoGenerateAvatarMappingIfUnspecified(self) -> bool: ...
    @autoGenerateAvatarMappingIfUnspecified.setter
    def autoGenerateAvatarMappingIfUnspecified(self, value: bool) -> bool: ...
    @property
    def avatarSetup(self) -> ModelImporterAvatarSetup: ...
    @avatarSetup.setter
    def avatarSetup(self, value: ModelImporterAvatarSetup) -> ModelImporterAvatarSetup: ...
    @property
    def bakeAxisConversion(self) -> bool: ...
    @bakeAxisConversion.setter
    def bakeAxisConversion(self, value: bool) -> bool: ...
    @property
    def bakeIK(self) -> bool: ...
    @bakeIK.setter
    def bakeIK(self, value: bool) -> bool: ...
    @property
    def clipAnimations(self) -> Array_1[ModelImporterClipAnimation]: ...
    @clipAnimations.setter
    def clipAnimations(self, value: Array_1[ModelImporterClipAnimation]) -> Array_1[ModelImporterClipAnimation]: ...
    @property
    def defaultClipAnimations(self) -> Array_1[ModelImporterClipAnimation]: ...
    @property
    def extraExposedTransformPaths(self) -> Array_1[str]: ...
    @extraExposedTransformPaths.setter
    def extraExposedTransformPaths(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def extraUserProperties(self) -> Array_1[str]: ...
    @extraUserProperties.setter
    def extraUserProperties(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def fileScale(self) -> float: ...
    @property
    def generateAnimations(self) -> ModelImporterGenerateAnimations: ...
    @generateAnimations.setter
    def generateAnimations(self, value: ModelImporterGenerateAnimations) -> ModelImporterGenerateAnimations: ...
    @property
    def generateMaterials(self) -> ModelImporterGenerateMaterials: ...
    @property
    def generateSecondaryUV(self) -> bool: ...
    @generateSecondaryUV.setter
    def generateSecondaryUV(self, value: bool) -> bool: ...
    @property
    def globalScale(self) -> float: ...
    @globalScale.setter
    def globalScale(self, value: float) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def humanDescription(self) -> HumanDescription: ...
    @humanDescription.setter
    def humanDescription(self, value: HumanDescription) -> HumanDescription: ...
    @property
    def humanoidOversampling(self) -> ModelImporterHumanoidOversampling: ...
    @humanoidOversampling.setter
    def humanoidOversampling(self, value: ModelImporterHumanoidOversampling) -> ModelImporterHumanoidOversampling: ...
    @property
    def importAnimatedCustomProperties(self) -> bool: ...
    @importAnimatedCustomProperties.setter
    def importAnimatedCustomProperties(self, value: bool) -> bool: ...
    @property
    def importAnimation(self) -> bool: ...
    @importAnimation.setter
    def importAnimation(self, value: bool) -> bool: ...
    @property
    def importBlendShapeDeformPercent(self) -> bool: ...
    @importBlendShapeDeformPercent.setter
    def importBlendShapeDeformPercent(self, value: bool) -> bool: ...
    @property
    def importBlendShapeNormals(self) -> ModelImporterNormals: ...
    @importBlendShapeNormals.setter
    def importBlendShapeNormals(self, value: ModelImporterNormals) -> ModelImporterNormals: ...
    @property
    def importBlendShapes(self) -> bool: ...
    @importBlendShapes.setter
    def importBlendShapes(self, value: bool) -> bool: ...
    @property
    def importCameras(self) -> bool: ...
    @importCameras.setter
    def importCameras(self, value: bool) -> bool: ...
    @property
    def importConstraints(self) -> bool: ...
    @importConstraints.setter
    def importConstraints(self, value: bool) -> bool: ...
    @property
    def importedTakeInfos(self) -> Array_1[TakeInfo]: ...
    @property
    def importLights(self) -> bool: ...
    @importLights.setter
    def importLights(self, value: bool) -> bool: ...
    @property
    def importMaterials(self) -> bool: ...
    @property
    def importNormals(self) -> ModelImporterNormals: ...
    @importNormals.setter
    def importNormals(self, value: ModelImporterNormals) -> ModelImporterNormals: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def importTangents(self) -> ModelImporterTangents: ...
    @importTangents.setter
    def importTangents(self, value: ModelImporterTangents) -> ModelImporterTangents: ...
    @property
    def importVisibility(self) -> bool: ...
    @importVisibility.setter
    def importVisibility(self, value: bool) -> bool: ...
    @property
    def indexFormat(self) -> ModelImporterIndexFormat: ...
    @indexFormat.setter
    def indexFormat(self, value: ModelImporterIndexFormat) -> ModelImporterIndexFormat: ...
    @property
    def isBakeIKSupported(self) -> bool: ...
    @property
    def isFileScaleUsed(self) -> bool: ...
    @property
    def isReadable(self) -> bool: ...
    @isReadable.setter
    def isReadable(self, value: bool) -> bool: ...
    @property
    def isTangentImportSupported(self) -> bool: ...
    @property
    def isUseFileUnitsSupported(self) -> bool: ...
    @property
    def keepQuads(self) -> bool: ...
    @keepQuads.setter
    def keepQuads(self, value: bool) -> bool: ...
    @property
    def latitude(self) -> float: ...
    @property
    def longitude(self) -> float: ...
    @property
    def materialImportMode(self) -> ModelImporterMaterialImportMode: ...
    @materialImportMode.setter
    def materialImportMode(self, value: ModelImporterMaterialImportMode) -> ModelImporterMaterialImportMode: ...
    @property
    def materialLocation(self) -> ModelImporterMaterialLocation: ...
    @materialLocation.setter
    def materialLocation(self, value: ModelImporterMaterialLocation) -> ModelImporterMaterialLocation: ...
    @property
    def materialName(self) -> ModelImporterMaterialName: ...
    @materialName.setter
    def materialName(self, value: ModelImporterMaterialName) -> ModelImporterMaterialName: ...
    @property
    def materialSearch(self) -> ModelImporterMaterialSearch: ...
    @materialSearch.setter
    def materialSearch(self, value: ModelImporterMaterialSearch) -> ModelImporterMaterialSearch: ...
    @property
    def maxBonesPerVertex(self) -> int: ...
    @maxBonesPerVertex.setter
    def maxBonesPerVertex(self, value: int) -> int: ...
    @property
    def meshCompression(self) -> ModelImporterMeshCompression: ...
    @meshCompression.setter
    def meshCompression(self, value: ModelImporterMeshCompression) -> ModelImporterMeshCompression: ...
    @property
    def meshOptimizationFlags(self) -> MeshOptimizationFlags: ...
    @meshOptimizationFlags.setter
    def meshOptimizationFlags(self, value: MeshOptimizationFlags) -> MeshOptimizationFlags: ...
    @property
    def minBoneWeight(self) -> float: ...
    @minBoneWeight.setter
    def minBoneWeight(self, value: float) -> float: ...
    @property
    def motionNodeName(self) -> str: ...
    @motionNodeName.setter
    def motionNodeName(self, value: str) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def normalCalculationMode(self) -> ModelImporterNormalCalculationMode: ...
    @normalCalculationMode.setter
    def normalCalculationMode(self, value: ModelImporterNormalCalculationMode) -> ModelImporterNormalCalculationMode: ...
    @property
    def normalImportMode(self) -> ModelImporterTangentSpaceMode: ...
    @normalImportMode.setter
    def normalImportMode(self, value: ModelImporterTangentSpaceMode) -> ModelImporterTangentSpaceMode: ...
    @property
    def normalSmoothingAngle(self) -> float: ...
    @normalSmoothingAngle.setter
    def normalSmoothingAngle(self, value: float) -> float: ...
    @property
    def normalSmoothingSource(self) -> ModelImporterNormalSmoothingSource: ...
    @normalSmoothingSource.setter
    def normalSmoothingSource(self, value: ModelImporterNormalSmoothingSource) -> ModelImporterNormalSmoothingSource: ...
    @property
    def northCorrection(self) -> float: ...
    @property
    def optimizeBones(self) -> bool: ...
    @optimizeBones.setter
    def optimizeBones(self, value: bool) -> bool: ...
    @property
    def optimizeGameObjects(self) -> bool: ...
    @optimizeGameObjects.setter
    def optimizeGameObjects(self, value: bool) -> bool: ...
    @property
    def optimizeMesh(self) -> bool: ...
    @optimizeMesh.setter
    def optimizeMesh(self, value: bool) -> bool: ...
    @property
    def optimizeMeshPolygons(self) -> bool: ...
    @optimizeMeshPolygons.setter
    def optimizeMeshPolygons(self, value: bool) -> bool: ...
    @property
    def optimizeMeshVertices(self) -> bool: ...
    @optimizeMeshVertices.setter
    def optimizeMeshVertices(self, value: bool) -> bool: ...
    @property
    def preserveHierarchy(self) -> bool: ...
    @preserveHierarchy.setter
    def preserveHierarchy(self, value: bool) -> bool: ...
    @property
    def referencedClips(self) -> Array_1[str]: ...
    @property
    def removeConstantScaleCurves(self) -> bool: ...
    @removeConstantScaleCurves.setter
    def removeConstantScaleCurves(self, value: bool) -> bool: ...
    @property
    def resampleCurves(self) -> bool: ...
    @resampleCurves.setter
    def resampleCurves(self, value: bool) -> bool: ...
    @property
    def resampleRotations(self) -> bool: ...
    @resampleRotations.setter
    def resampleRotations(self, value: bool) -> bool: ...
    @property
    def secondaryUVAngleDistortion(self) -> float: ...
    @secondaryUVAngleDistortion.setter
    def secondaryUVAngleDistortion(self, value: float) -> float: ...
    @property
    def secondaryUVAreaDistortion(self) -> float: ...
    @secondaryUVAreaDistortion.setter
    def secondaryUVAreaDistortion(self, value: float) -> float: ...
    @property
    def secondaryUVHardAngle(self) -> float: ...
    @secondaryUVHardAngle.setter
    def secondaryUVHardAngle(self, value: float) -> float: ...
    @property
    def secondaryUVMarginMethod(self) -> ModelImporterSecondaryUVMarginMethod: ...
    @secondaryUVMarginMethod.setter
    def secondaryUVMarginMethod(self, value: ModelImporterSecondaryUVMarginMethod) -> ModelImporterSecondaryUVMarginMethod: ...
    @property
    def secondaryUVMinLightmapResolution(self) -> float: ...
    @secondaryUVMinLightmapResolution.setter
    def secondaryUVMinLightmapResolution(self, value: float) -> float: ...
    @property
    def secondaryUVMinObjectScale(self) -> float: ...
    @secondaryUVMinObjectScale.setter
    def secondaryUVMinObjectScale(self, value: float) -> float: ...
    @property
    def secondaryUVPackMargin(self) -> float: ...
    @secondaryUVPackMargin.setter
    def secondaryUVPackMargin(self, value: float) -> float: ...
    @property
    def skinWeights(self) -> ModelImporterSkinWeights: ...
    @skinWeights.setter
    def skinWeights(self, value: ModelImporterSkinWeights) -> ModelImporterSkinWeights: ...
    @property
    def sortHierarchyByName(self) -> bool: ...
    @sortHierarchyByName.setter
    def sortHierarchyByName(self, value: bool) -> bool: ...
    @property
    def sourceAvatar(self) -> Avatar: ...
    @sourceAvatar.setter
    def sourceAvatar(self, value: Avatar) -> Avatar: ...
    @property
    def splitAnimations(self) -> bool: ...
    @splitAnimations.setter
    def splitAnimations(self, value: bool) -> bool: ...
    @property
    def splitTangentsAcrossSeams(self) -> bool: ...
    @splitTangentsAcrossSeams.setter
    def splitTangentsAcrossSeams(self, value: bool) -> bool: ...
    @property
    def strictVertexDataChecks(self) -> bool: ...
    @strictVertexDataChecks.setter
    def strictVertexDataChecks(self, value: bool) -> bool: ...
    @property
    def swapUVChannels(self) -> bool: ...
    @swapUVChannels.setter
    def swapUVChannels(self, value: bool) -> bool: ...
    @property
    def tangentImportMode(self) -> ModelImporterTangentSpaceMode: ...
    @tangentImportMode.setter
    def tangentImportMode(self, value: ModelImporterTangentSpaceMode) -> ModelImporterTangentSpaceMode: ...
    @property
    def transformPaths(self) -> Array_1[str]: ...
    @property
    def useFileScale(self) -> bool: ...
    @useFileScale.setter
    def useFileScale(self, value: bool) -> bool: ...
    @property
    def useFileUnits(self) -> bool: ...
    @useFileUnits.setter
    def useFileUnits(self, value: bool) -> bool: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @property
    def useSRGBMaterialColor(self) -> bool: ...
    @useSRGBMaterialColor.setter
    def useSRGBMaterialColor(self, value: bool) -> bool: ...
    @property
    def weldVertices(self) -> bool: ...
    @weldVertices.setter
    def weldVertices(self, value: bool) -> bool: ...
    def GetDefaultCamera(self) -> SketchUpImportCamera: ...
    def GetScenes(self) -> Array_1[SketchUpImportScene]: ...


class SketchUpImportScene:
    camera : SketchUpImportCamera
    name : str


class SpeedTreeImporter(AssetImporter):
    def __init__(self) -> None: ...
    windQualityNames : Array_1[str]
    @property
    def alphaTestRef(self) -> float: ...
    @alphaTestRef.setter
    def alphaTestRef(self, value: float) -> float: ...
    @property
    def animateCrossFading(self) -> bool: ...
    @animateCrossFading.setter
    def animateCrossFading(self, value: bool) -> bool: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def bestWindQuality(self) -> int: ...
    @property
    def billboardTransitionCrossFadeWidth(self) -> float: ...
    @billboardTransitionCrossFadeWidth.setter
    def billboardTransitionCrossFadeWidth(self, value: float) -> float: ...
    @property
    def castShadows(self) -> Array_1[bool]: ...
    @castShadows.setter
    def castShadows(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def castShadowsByDefault(self) -> bool: ...
    @castShadowsByDefault.setter
    def castShadowsByDefault(self, value: bool) -> bool: ...
    @property
    def defaultBillboardShader(self) -> Shader: ...
    @property
    def defaultShader(self) -> Shader: ...
    @property
    def enableBump(self) -> Array_1[bool]: ...
    @enableBump.setter
    def enableBump(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def enableBumpByDefault(self) -> bool: ...
    @enableBumpByDefault.setter
    def enableBumpByDefault(self, value: bool) -> bool: ...
    @property
    def enableHue(self) -> Array_1[bool]: ...
    @enableHue.setter
    def enableHue(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def enableHueByDefault(self) -> bool: ...
    @enableHueByDefault.setter
    def enableHueByDefault(self, value: bool) -> bool: ...
    @property
    def enableSettingOverride(self) -> Array_1[bool]: ...
    @enableSettingOverride.setter
    def enableSettingOverride(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def enableSmoothLODTransition(self) -> bool: ...
    @enableSmoothLODTransition.setter
    def enableSmoothLODTransition(self, value: bool) -> bool: ...
    @property
    def enableSubsurface(self) -> Array_1[bool]: ...
    @enableSubsurface.setter
    def enableSubsurface(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def enableSubsurfaceByDefault(self) -> bool: ...
    @enableSubsurfaceByDefault.setter
    def enableSubsurfaceByDefault(self, value: bool) -> bool: ...
    @property
    def fadeOutWidth(self) -> float: ...
    @fadeOutWidth.setter
    def fadeOutWidth(self, value: float) -> float: ...
    @property
    def hasBillboard(self) -> bool: ...
    @property
    def hasImported(self) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hueVariation(self) -> Color: ...
    @hueVariation.setter
    def hueVariation(self, value: Color) -> Color: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def isV8(self) -> bool: ...
    @property
    def LODHeights(self) -> Array_1[float]: ...
    @LODHeights.setter
    def LODHeights(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def mainColor(self) -> Color: ...
    @mainColor.setter
    def mainColor(self, value: Color) -> Color: ...
    @property
    def materialFolderPath(self) -> str: ...
    @property
    def materialLocation(self) -> SpeedTreeImporter.MaterialLocation: ...
    @materialLocation.setter
    def materialLocation(self, value: SpeedTreeImporter.MaterialLocation) -> SpeedTreeImporter.MaterialLocation: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def receiveShadows(self) -> Array_1[bool]: ...
    @receiveShadows.setter
    def receiveShadows(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def receiveShadowsByDefault(self) -> bool: ...
    @receiveShadowsByDefault.setter
    def receiveShadowsByDefault(self, value: bool) -> bool: ...
    @property
    def reflectionProbeUsages(self) -> Array_1[ReflectionProbeUsage]: ...
    @reflectionProbeUsages.setter
    def reflectionProbeUsages(self, value: Array_1[ReflectionProbeUsage]) -> Array_1[ReflectionProbeUsage]: ...
    @property
    def reflectionProbeUsagesByDefault(self) -> int: ...
    @reflectionProbeUsagesByDefault.setter
    def reflectionProbeUsagesByDefault(self, value: int) -> int: ...
    @property
    def scaleFactor(self) -> float: ...
    @scaleFactor.setter
    def scaleFactor(self, value: float) -> float: ...
    @property
    def selectedWindQuality(self) -> int: ...
    @selectedWindQuality.setter
    def selectedWindQuality(self, value: int) -> int: ...
    @property
    def shininess(self) -> float: ...
    @shininess.setter
    def shininess(self, value: float) -> float: ...
    @property
    def specColor(self) -> Color: ...
    @specColor.setter
    def specColor(self, value: Color) -> Color: ...
    @property
    def useLightProbes(self) -> Array_1[bool]: ...
    @useLightProbes.setter
    def useLightProbes(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def useLightProbesByDefault(self) -> bool: ...
    @useLightProbesByDefault.setter
    def useLightProbesByDefault(self, value: bool) -> bool: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @property
    def windQualities(self) -> Array_1[int]: ...
    @windQualities.setter
    def windQualities(self, value: Array_1[int]) -> Array_1[int]: ...
    def GenerateMaterials(self) -> None: ...
    def SearchAndRemapMaterials(self, materialFolderPath: str) -> bool: ...

    class MaterialLocation(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        External : SpeedTreeImporter.MaterialLocation # 0
        InPrefab : SpeedTreeImporter.MaterialLocation # 1



class SplashScreenStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Light : SplashScreenStyle # 0
    Dark : SplashScreenStyle # 1


class SpriteImportMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SpriteImportMode # 0
    Single : SpriteImportMode # 1
    Multiple : SpriteImportMode # 2
    Polygon : SpriteImportMode # 3


class SpriteMetaData:
    alignment : int
    border : Vector4
    name : str
    pivot : Vector2
    rect : Rect


class SpritePackerMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : SpritePackerMode # 0
    BuildTimeOnly : SpritePackerMode # 1
    AlwaysOn : SpritePackerMode # 2
    BuildTimeOnlyAtlas : SpritePackerMode # 3
    AlwaysOnAtlas : SpritePackerMode # 4
    SpriteAtlasV2 : SpritePackerMode # 5
    SpriteAtlasV2Build : SpritePackerMode # 6


class StandaloneBuildSubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Player : StandaloneBuildSubtarget # 0
    Server : StandaloneBuildSubtarget # 1
    NoSubtarget : StandaloneBuildSubtarget # -1


class StaticEditorFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ContributeGI : StaticEditorFlags # 1
    LightmapStatic : StaticEditorFlags # 1
    OccluderStatic : StaticEditorFlags # 2
    BatchingStatic : StaticEditorFlags # 4
    NavigationStatic : StaticEditorFlags # 8
    OccludeeStatic : StaticEditorFlags # 16
    OffMeshLinkGeneration : StaticEditorFlags # 32
    ReflectionProbeStatic : StaticEditorFlags # 64


class StaticOcclusionCulling(abc.ABC):
    @classmethod
    @property
    def backfaceThreshold(cls) -> float: ...
    @classmethod
    @backfaceThreshold.setter
    def backfaceThreshold(cls, value: float) -> float: ...
    @classmethod
    @property
    def doesSceneHaveManualPortals(cls) -> bool: ...
    @classmethod
    @property
    def isRunning(cls) -> bool: ...
    @classmethod
    @property
    def smallestHole(cls) -> float: ...
    @classmethod
    @smallestHole.setter
    def smallestHole(cls, value: float) -> float: ...
    @classmethod
    @property
    def smallestOccluder(cls) -> float: ...
    @classmethod
    @smallestOccluder.setter
    def smallestOccluder(cls, value: float) -> float: ...
    @classmethod
    @property
    def umbraDataSize(cls) -> int: ...
    @staticmethod
    def Cancel() -> None: ...
    @staticmethod
    def Clear() -> None: ...
    @staticmethod
    def Compute() -> bool: ...
    @staticmethod
    def GenerateInBackground() -> bool: ...
    @staticmethod
    def RemoveCacheFolder() -> None: ...
    @staticmethod
    def SetDefaultOcclusionBakeSettings() -> None: ...


class StaticOcclusionCullingVisualization(abc.ABC):
    @classmethod
    @property
    def isPreviewOcclusionCullingCameraInPVS(cls) -> bool: ...
    @classmethod
    @property
    def previewOcclucionCamera(cls) -> Camera: ...
    @classmethod
    @property
    def previewOcclusionCamera(cls) -> Camera: ...
    @classmethod
    @property
    def showDynamicObjectBounds(cls) -> bool: ...
    @classmethod
    @showDynamicObjectBounds.setter
    def showDynamicObjectBounds(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showGeometryCulling(cls) -> bool: ...
    @classmethod
    @showGeometryCulling.setter
    def showGeometryCulling(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showOcclusionCulling(cls) -> bool: ...
    @classmethod
    @showOcclusionCulling.setter
    def showOcclusionCulling(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showPortals(cls) -> bool: ...
    @classmethod
    @showPortals.setter
    def showPortals(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showPreVisualization(cls) -> bool: ...
    @classmethod
    @showPreVisualization.setter
    def showPreVisualization(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showViewVolumes(cls) -> bool: ...
    @classmethod
    @showViewVolumes.setter
    def showViewVolumes(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def showVisibilityLines(cls) -> bool: ...
    @classmethod
    @showVisibilityLines.setter
    def showVisibilityLines(cls, value: bool) -> bool: ...


class StatusQueryOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ForceUpdate : StatusQueryOptions # 0
    UseCachedIfPossible : StatusQueryOptions # 1
    UseCachedAsync : StatusQueryOptions # 2


class StereoRenderingPath(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MultiPass : StereoRenderingPath # 0
    SinglePass : StereoRenderingPath # 1
    Instancing : StereoRenderingPath # 2


class StrippingLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Disabled : StrippingLevel # 0
    StripAssemblies : StrippingLevel # 1
    StripByteCode : StrippingLevel # 2
    UseMicroMSCorlib : StrippingLevel # 3


class SwitchRomCompressionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SwitchRomCompressionType # 0
    Lz4 : SwitchRomCompressionType # 1


class Sysroot(abc.ABC):
    @property
    def HostArch(self) -> str: ...
    @property
    def HostPlatform(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def TargetArch(self) -> str: ...
    @property
    def TargetPlatform(self) -> str: ...
    @abc.abstractmethod
    def GetIl2CppArguments(self) -> IEnumerable_1[str]: ...
    @abc.abstractmethod
    def GetIl2CppCompilerFlags(self) -> str: ...
    @abc.abstractmethod
    def GetIl2CppLinkerFlags(self) -> str: ...
    def GetIl2CppLinkerFlagsFile(self) -> str: ...
    @abc.abstractmethod
    def GetSysrootPath(self) -> str: ...
    @abc.abstractmethod
    def GetToolchainPath(self) -> str: ...
    @abc.abstractmethod
    def Initialize(self) -> bool: ...


class TakeInfo:
    bakeStartTime : float
    bakeStopTime : float
    defaultClipName : str
    name : str
    sampleRate : float
    startTime : float
    stopTime : float


class TargetGlesGraphics(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OpenGLES_1_x : TargetGlesGraphics # 0
    OpenGLES_2_0 : TargetGlesGraphics # 1
    OpenGLES_3_0 : TargetGlesGraphics # 2
    Automatic : TargetGlesGraphics # -1


class TargetIOSGraphics(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OpenGLES_2_0 : TargetIOSGraphics # 2
    OpenGLES_3_0 : TargetIOSGraphics # 3
    Metal : TargetIOSGraphics # 4
    Automatic : TargetIOSGraphics # -1


class TerrainDetailMeshRenderMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    VertexLit : TerrainDetailMeshRenderMode # 0
    Grass : TerrainDetailMeshRenderMode # 1


class TerrainDetailMeshWizard(TerrainWizard):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def createButtonName(self) -> str: ...
    @createButtonName.setter
    def createButtonName(self, value: str) -> str: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def errorString(self) -> str: ...
    @errorString.setter
    def errorString(self, value: str) -> str: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def helpString(self) -> str: ...
    @helpString.setter
    def helpString(self, value: str) -> str: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isValid(self) -> bool: ...
    @isValid.setter
    def isValid(self, value: bool) -> bool: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def otherButtonName(self) -> str: ...
    @otherButtonName.setter
    def otherButtonName(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def OnEnable(self) -> None: ...
    def ResetDefaults(self, terrain: Terrain, index: int) -> None: ...


class TerrainDetailTextureWizard(TerrainWizard):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def createButtonName(self) -> str: ...
    @createButtonName.setter
    def createButtonName(self, value: str) -> str: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def errorString(self) -> str: ...
    @errorString.setter
    def errorString(self, value: str) -> str: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def helpString(self) -> str: ...
    @helpString.setter
    def helpString(self, value: str) -> str: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isValid(self) -> bool: ...
    @isValid.setter
    def isValid(self, value: bool) -> bool: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def otherButtonName(self) -> str: ...
    @otherButtonName.setter
    def otherButtonName(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def OnEnable(self) -> None: ...
    def ResetDefaults(self, terrain: Terrain, index: int) -> None: ...


class TerrainLayerInspector(Editor):
    def __init__(self) -> None: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def serializedObject(self) -> SerializedObject: ...
    @property
    def target(self) -> Object: ...
    @target.setter
    def target(self, value: Object) -> Object: ...
    @property
    def targets(self) -> Array_1[Object]: ...
    def ApplyCustomUI(self, customUI: ITerrainLayerCustomUI, terrain: Terrain) -> None: ...
    def HasPreviewGUI(self) -> bool: ...
    def OnInspectorGUI(self) -> None: ...
    def OnPreviewGUI(self, r: Rect, background: GUIStyle) -> None: ...
    def RenderStaticPreview(self, assetPath: str, subAssets: Array_1[Object], width: int, height: int) -> Texture2D: ...


class TerrainLayerUtility(abc.ABC):
    @staticmethod
    def CheckNormalMapTextureType(texture: Texture2D) -> bool: ...
    @staticmethod
    def ShowTerrainLayerGUI(terrain: Terrain, terrainLayer: TerrainLayer, terrainLayerEditor: clr.Reference[Editor], customGUI: ITerrainLayerCustomUI) -> None: ...
    @staticmethod
    def ShowTerrainLayersSelectionHelper(terrain: Terrain, activeTerrainLayer: int) -> int: ...
    @staticmethod
    def ValidateDiffuseTextureUI(texture: Texture2D) -> None: ...
    @staticmethod
    def ValidateMaskMapTextureUI(texture: Texture2D) -> None: ...
    @staticmethod
    def ValidateNormalMapTextureUI(texture: Texture2D, normalMapTextureType: bool) -> None: ...
    # Skipped TilingSettingsUI due to it being static, abstract and generic.

    TilingSettingsUI : TilingSettingsUI_MethodGroup
    class TilingSettingsUI_MethodGroup:
        @typing.overload
        def __call__(self, terrainLayer: TerrainLayer) -> None:...
        @typing.overload
        def __call__(self, tileSize: SerializedProperty, tileOffset: SerializedProperty) -> None:...



class TerrainWizard(ScriptableWizard):
    def __init__(self) -> None: ...
    @property
    def antiAlias(self) -> int: ...
    @antiAlias.setter
    def antiAlias(self, value: int) -> int: ...
    @property
    def autoRepaintOnSceneChange(self) -> bool: ...
    @autoRepaintOnSceneChange.setter
    def autoRepaintOnSceneChange(self, value: bool) -> bool: ...
    @property
    def createButtonName(self) -> str: ...
    @createButtonName.setter
    def createButtonName(self, value: str) -> str: ...
    @property
    def dataModeController(self) -> IDataModeController: ...
    @property
    def depthBufferBits(self) -> int: ...
    @depthBufferBits.setter
    def depthBufferBits(self, value: int) -> int: ...
    @property
    def docked(self) -> bool: ...
    @property
    def errorString(self) -> str: ...
    @errorString.setter
    def errorString(self, value: str) -> str: ...
    @property
    def hasFocus(self) -> bool: ...
    @property
    def hasUnsavedChanges(self) -> bool: ...
    @hasUnsavedChanges.setter
    def hasUnsavedChanges(self, value: bool) -> bool: ...
    @property
    def helpString(self) -> str: ...
    @helpString.setter
    def helpString(self, value: str) -> str: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def isValid(self) -> bool: ...
    @isValid.setter
    def isValid(self, value: bool) -> bool: ...
    @property
    def maximized(self) -> bool: ...
    @maximized.setter
    def maximized(self, value: bool) -> bool: ...
    @property
    def maxSize(self) -> Vector2: ...
    @maxSize.setter
    def maxSize(self, value: Vector2) -> Vector2: ...
    @property
    def minSize(self) -> Vector2: ...
    @minSize.setter
    def minSize(self, value: Vector2) -> Vector2: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def otherButtonName(self) -> str: ...
    @otherButtonName.setter
    def otherButtonName(self, value: str) -> str: ...
    @property
    def overlayCanvas(self) -> OverlayCanvas: ...
    @property
    def position(self) -> Rect: ...
    @position.setter
    def position(self, value: Rect) -> Rect: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def saveChangesMessage(self) -> str: ...
    @saveChangesMessage.setter
    def saveChangesMessage(self, value: str) -> str: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def titleContent(self) -> GUIContent: ...
    @titleContent.setter
    def titleContent(self, value: GUIContent) -> GUIContent: ...
    @property
    def wantsLessLayoutEvents(self) -> bool: ...
    @wantsLessLayoutEvents.setter
    def wantsLessLayoutEvents(self, value: bool) -> bool: ...
    @property
    def wantsMouseEnterLeaveWindow(self) -> bool: ...
    @wantsMouseEnterLeaveWindow.setter
    def wantsMouseEnterLeaveWindow(self, value: bool) -> bool: ...
    @property
    def wantsMouseMove(self) -> bool: ...
    @wantsMouseMove.setter
    def wantsMouseMove(self, value: bool) -> bool: ...
    def ResetDefaults(self, terrain: Terrain) -> None: ...
    # Skipped DisplayTerrainWizard due to it being static, abstract and generic.

    DisplayTerrainWizard : DisplayTerrainWizard_MethodGroup
    class DisplayTerrainWizard_MethodGroup:
        def __getitem__(self, t:typing.Type[DisplayTerrainWizard_1_T1]) -> DisplayTerrainWizard_1[DisplayTerrainWizard_1_T1]: ...

        DisplayTerrainWizard_1_T1 = typing.TypeVar('DisplayTerrainWizard_1_T1')
        class DisplayTerrainWizard_1(typing.Generic[DisplayTerrainWizard_1_T1]):
            DisplayTerrainWizard_1_T = TerrainWizard.DisplayTerrainWizard_MethodGroup.DisplayTerrainWizard_1_T1
            def __call__(self, title: str, button: str) -> DisplayTerrainWizard_1_T:...




class TextureCompressionQuality(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fast : TextureCompressionQuality # 0
    Normal : TextureCompressionQuality # 50
    Best : TextureCompressionQuality # 100


class TextureImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def allowAlphaSplitting(self) -> bool: ...
    @allowAlphaSplitting.setter
    def allowAlphaSplitting(self, value: bool) -> bool: ...
    @property
    def alphaIsTransparency(self) -> bool: ...
    @alphaIsTransparency.setter
    def alphaIsTransparency(self, value: bool) -> bool: ...
    @property
    def alphaSource(self) -> TextureImporterAlphaSource: ...
    @alphaSource.setter
    def alphaSource(self, value: TextureImporterAlphaSource) -> TextureImporterAlphaSource: ...
    @property
    def alphaTestReferenceValue(self) -> float: ...
    @alphaTestReferenceValue.setter
    def alphaTestReferenceValue(self, value: float) -> float: ...
    @property
    def androidETC2FallbackOverride(self) -> AndroidETC2FallbackOverride: ...
    @androidETC2FallbackOverride.setter
    def androidETC2FallbackOverride(self, value: AndroidETC2FallbackOverride) -> AndroidETC2FallbackOverride: ...
    @property
    def anisoLevel(self) -> int: ...
    @anisoLevel.setter
    def anisoLevel(self, value: int) -> int: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def borderMipmap(self) -> bool: ...
    @borderMipmap.setter
    def borderMipmap(self, value: bool) -> bool: ...
    @property
    def compressionQuality(self) -> int: ...
    @compressionQuality.setter
    def compressionQuality(self, value: int) -> int: ...
    @property
    def convertToNormalmap(self) -> bool: ...
    @convertToNormalmap.setter
    def convertToNormalmap(self, value: bool) -> bool: ...
    @property
    def correctGamma(self) -> bool: ...
    @correctGamma.setter
    def correctGamma(self, value: bool) -> bool: ...
    @property
    def crunchedCompression(self) -> bool: ...
    @crunchedCompression.setter
    def crunchedCompression(self, value: bool) -> bool: ...
    @property
    def fadeout(self) -> bool: ...
    @fadeout.setter
    def fadeout(self, value: bool) -> bool: ...
    @property
    def filterMode(self) -> FilterMode: ...
    @filterMode.setter
    def filterMode(self, value: FilterMode) -> FilterMode: ...
    @property
    def flipGreenChannel(self) -> bool: ...
    @flipGreenChannel.setter
    def flipGreenChannel(self, value: bool) -> bool: ...
    @property
    def generateCubemap(self) -> TextureImporterGenerateCubemap: ...
    @generateCubemap.setter
    def generateCubemap(self, value: TextureImporterGenerateCubemap) -> TextureImporterGenerateCubemap: ...
    @property
    def generateMipsInLinearSpace(self) -> bool: ...
    @generateMipsInLinearSpace.setter
    def generateMipsInLinearSpace(self, value: bool) -> bool: ...
    @property
    def grayscaleToAlpha(self) -> bool: ...
    @grayscaleToAlpha.setter
    def grayscaleToAlpha(self, value: bool) -> bool: ...
    @property
    def heightmapScale(self) -> float: ...
    @heightmapScale.setter
    def heightmapScale(self, value: float) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def ignoreMipmapLimit(self) -> bool: ...
    @ignoreMipmapLimit.setter
    def ignoreMipmapLimit(self, value: bool) -> bool: ...
    @property
    def ignorePngGamma(self) -> bool: ...
    @ignorePngGamma.setter
    def ignorePngGamma(self, value: bool) -> bool: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def isReadable(self) -> bool: ...
    @isReadable.setter
    def isReadable(self, value: bool) -> bool: ...
    @property
    def lightmap(self) -> bool: ...
    @lightmap.setter
    def lightmap(self, value: bool) -> bool: ...
    @property
    def linearTexture(self) -> bool: ...
    @linearTexture.setter
    def linearTexture(self, value: bool) -> bool: ...
    @property
    def maxTextureSize(self) -> int: ...
    @maxTextureSize.setter
    def maxTextureSize(self, value: int) -> int: ...
    @property
    def mipMapBias(self) -> float: ...
    @mipMapBias.setter
    def mipMapBias(self, value: float) -> float: ...
    @property
    def mipmapEnabled(self) -> bool: ...
    @mipmapEnabled.setter
    def mipmapEnabled(self, value: bool) -> bool: ...
    @property
    def mipmapFadeDistanceEnd(self) -> int: ...
    @mipmapFadeDistanceEnd.setter
    def mipmapFadeDistanceEnd(self, value: int) -> int: ...
    @property
    def mipmapFadeDistanceStart(self) -> int: ...
    @mipmapFadeDistanceStart.setter
    def mipmapFadeDistanceStart(self, value: int) -> int: ...
    @property
    def mipmapFilter(self) -> TextureImporterMipFilter: ...
    @mipmapFilter.setter
    def mipmapFilter(self, value: TextureImporterMipFilter) -> TextureImporterMipFilter: ...
    @property
    def mipmapLimitGroupName(self) -> str: ...
    @mipmapLimitGroupName.setter
    def mipmapLimitGroupName(self, value: str) -> str: ...
    @property
    def mipMapsPreserveCoverage(self) -> bool: ...
    @mipMapsPreserveCoverage.setter
    def mipMapsPreserveCoverage(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def normalmap(self) -> bool: ...
    @normalmap.setter
    def normalmap(self, value: bool) -> bool: ...
    @property
    def normalmapFilter(self) -> TextureImporterNormalFilter: ...
    @normalmapFilter.setter
    def normalmapFilter(self, value: TextureImporterNormalFilter) -> TextureImporterNormalFilter: ...
    @property
    def npotScale(self) -> TextureImporterNPOTScale: ...
    @npotScale.setter
    def npotScale(self, value: TextureImporterNPOTScale) -> TextureImporterNPOTScale: ...
    @property
    def qualifiesForSpritePacking(self) -> bool: ...
    @property
    def secondarySpriteTextures(self) -> Array_1[SecondarySpriteTexture]: ...
    @secondarySpriteTextures.setter
    def secondarySpriteTextures(self, value: Array_1[SecondarySpriteTexture]) -> Array_1[SecondarySpriteTexture]: ...
    @property
    def spriteBorder(self) -> Vector4: ...
    @spriteBorder.setter
    def spriteBorder(self, value: Vector4) -> Vector4: ...
    @property
    def spriteImportMode(self) -> SpriteImportMode: ...
    @spriteImportMode.setter
    def spriteImportMode(self, value: SpriteImportMode) -> SpriteImportMode: ...
    @property
    def spritePackingTag(self) -> str: ...
    @spritePackingTag.setter
    def spritePackingTag(self, value: str) -> str: ...
    @property
    def spritePivot(self) -> Vector2: ...
    @spritePivot.setter
    def spritePivot(self, value: Vector2) -> Vector2: ...
    @property
    def spritePixelsPerUnit(self) -> float: ...
    @spritePixelsPerUnit.setter
    def spritePixelsPerUnit(self, value: float) -> float: ...
    @property
    def spritePixelsToUnits(self) -> float: ...
    @spritePixelsToUnits.setter
    def spritePixelsToUnits(self, value: float) -> float: ...
    @property
    def spritesheet(self) -> Array_1[SpriteMetaData]: ...
    @spritesheet.setter
    def spritesheet(self, value: Array_1[SpriteMetaData]) -> Array_1[SpriteMetaData]: ...
    @property
    def sRGBTexture(self) -> bool: ...
    @sRGBTexture.setter
    def sRGBTexture(self, value: bool) -> bool: ...
    @property
    def streamingMipmaps(self) -> bool: ...
    @streamingMipmaps.setter
    def streamingMipmaps(self, value: bool) -> bool: ...
    @property
    def streamingMipmapsPriority(self) -> int: ...
    @streamingMipmapsPriority.setter
    def streamingMipmapsPriority(self, value: int) -> int: ...
    @property
    def swizzleA(self) -> TextureImporterSwizzle: ...
    @swizzleA.setter
    def swizzleA(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def swizzleB(self) -> TextureImporterSwizzle: ...
    @swizzleB.setter
    def swizzleB(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def swizzleG(self) -> TextureImporterSwizzle: ...
    @swizzleG.setter
    def swizzleG(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def swizzleR(self) -> TextureImporterSwizzle: ...
    @swizzleR.setter
    def swizzleR(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def textureCompression(self) -> TextureImporterCompression: ...
    @textureCompression.setter
    def textureCompression(self, value: TextureImporterCompression) -> TextureImporterCompression: ...
    @property
    def textureFormat(self) -> TextureImporterFormat: ...
    @textureFormat.setter
    def textureFormat(self, value: TextureImporterFormat) -> TextureImporterFormat: ...
    @property
    def textureShape(self) -> TextureImporterShape: ...
    @textureShape.setter
    def textureShape(self, value: TextureImporterShape) -> TextureImporterShape: ...
    @property
    def textureType(self) -> TextureImporterType: ...
    @textureType.setter
    def textureType(self, value: TextureImporterType) -> TextureImporterType: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    @property
    def vtOnly(self) -> bool: ...
    @vtOnly.setter
    def vtOnly(self, value: bool) -> bool: ...
    @property
    def wrapMode(self) -> TextureWrapMode: ...
    @wrapMode.setter
    def wrapMode(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeU(self) -> TextureWrapMode: ...
    @wrapModeU.setter
    def wrapModeU(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeV(self) -> TextureWrapMode: ...
    @wrapModeV.setter
    def wrapModeV(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeW(self) -> TextureWrapMode: ...
    @wrapModeW.setter
    def wrapModeW(self, value: TextureWrapMode) -> TextureWrapMode: ...
    def ClearPlatformTextureSettings(self, platform: str) -> None: ...
    def DoesSourceTextureHaveAlpha(self) -> bool: ...
    def DoesSourceTextureHaveColor(self) -> bool: ...
    def GetAllowsAlphaSplitting(self) -> bool: ...
    def GetAutomaticFormat(self, platform: str) -> TextureImporterFormat: ...
    def GetDefaultPlatformTextureSettings(self) -> TextureImporterPlatformSettings: ...
    def GetSourceTextureWidthAndHeight(self, width: clr.Reference[int], height: clr.Reference[int]) -> None: ...
    @staticmethod
    def IsDefaultPlatformTextureFormatValid(textureType: TextureImporterType, currentFormat: TextureImporterFormat) -> bool: ...
    @staticmethod
    def IsPlatformTextureFormatValid(textureType: TextureImporterType, target: BuildTarget, currentFormat: TextureImporterFormat) -> bool: ...
    def ReadTextureImportInstructions(self, target: BuildTarget, desiredFormat: clr.Reference[TextureFormat], colorSpace: clr.Reference[ColorSpace], compressionQuality: clr.Reference[int]) -> None: ...
    def ReadTextureSettings(self, dest: TextureImporterSettings) -> None: ...
    def SetAllowsAlphaSplitting(self, flag: bool) -> None: ...
    def SetTextureSettings(self, src: TextureImporterSettings) -> None: ...
    # Skipped GetPlatformTextureSettings due to it being static, abstract and generic.

    GetPlatformTextureSettings : GetPlatformTextureSettings_MethodGroup
    class GetPlatformTextureSettings_MethodGroup:
        @typing.overload
        def __call__(self, platform: str) -> TextureImporterPlatformSettings:...
        @typing.overload
        def __call__(self, platform: str, maxTextureSize: clr.Reference[int], textureFormat: clr.Reference[TextureImporterFormat]) -> bool:...
        @typing.overload
        def __call__(self, platform: str, maxTextureSize: clr.Reference[int], textureFormat: clr.Reference[TextureImporterFormat], compressionQuality: clr.Reference[int]) -> bool:...
        @typing.overload
        def __call__(self, platform: str, maxTextureSize: clr.Reference[int], textureFormat: clr.Reference[TextureImporterFormat], compressionQuality: clr.Reference[int], etc1AlphaSplitEnabled: clr.Reference[bool]) -> bool:...

    # Skipped SetPlatformTextureSettings due to it being static, abstract and generic.

    SetPlatformTextureSettings : SetPlatformTextureSettings_MethodGroup
    class SetPlatformTextureSettings_MethodGroup:
        @typing.overload
        def __call__(self, platformSettings: TextureImporterPlatformSettings) -> None:...
        @typing.overload
        def __call__(self, platform: str, maxTextureSize: int, textureFormat: TextureImporterFormat) -> None:...
        @typing.overload
        def __call__(self, platform: str, maxTextureSize: int, textureFormat: TextureImporterFormat, allowsAlphaSplit: bool) -> None:...
        @typing.overload
        def __call__(self, platform: str, maxTextureSize: int, textureFormat: TextureImporterFormat, compressionQuality: int, allowsAlphaSplit: bool) -> None:...



class TextureImporterAlphaSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : TextureImporterAlphaSource # 0
    FromInput : TextureImporterAlphaSource # 1
    FromGrayScale : TextureImporterAlphaSource # 2


class TextureImporterCompression(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Uncompressed : TextureImporterCompression # 0
    Compressed : TextureImporterCompression # 1
    CompressedHQ : TextureImporterCompression # 2
    CompressedLQ : TextureImporterCompression # 3


class TextureImporterCubemapConvolution(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : TextureImporterCubemapConvolution # 0
    Specular : TextureImporterCubemapConvolution # 1
    Diffuse : TextureImporterCubemapConvolution # 2


class TextureImporterFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Alpha8 : TextureImporterFormat # 1
    ARGB16 : TextureImporterFormat # 2
    RGB24 : TextureImporterFormat # 3
    RGBA32 : TextureImporterFormat # 4
    ARGB32 : TextureImporterFormat # 5
    RGB16 : TextureImporterFormat # 7
    R16 : TextureImporterFormat # 9
    DXT1 : TextureImporterFormat # 10
    DXT5 : TextureImporterFormat # 12
    RGBA16 : TextureImporterFormat # 13
    RHalf : TextureImporterFormat # 15
    RGHalf : TextureImporterFormat # 16
    RGBAHalf : TextureImporterFormat # 17
    RFloat : TextureImporterFormat # 18
    RGFloat : TextureImporterFormat # 19
    RGBAFloat : TextureImporterFormat # 20
    RGB9E5 : TextureImporterFormat # 22
    BC6H : TextureImporterFormat # 24
    BC7 : TextureImporterFormat # 25
    BC4 : TextureImporterFormat # 26
    BC5 : TextureImporterFormat # 27
    DXT1Crunched : TextureImporterFormat # 28
    DXT5Crunched : TextureImporterFormat # 29
    PVRTC_RGB2 : TextureImporterFormat # 30
    PVRTC_RGBA2 : TextureImporterFormat # 31
    PVRTC_RGB4 : TextureImporterFormat # 32
    PVRTC_RGBA4 : TextureImporterFormat # 33
    ETC_RGB4 : TextureImporterFormat # 34
    ATC_RGB4 : TextureImporterFormat # 35
    ATC_RGBA8 : TextureImporterFormat # 36
    EAC_R : TextureImporterFormat # 41
    EAC_R_SIGNED : TextureImporterFormat # 42
    EAC_RG : TextureImporterFormat # 43
    EAC_RG_SIGNED : TextureImporterFormat # 44
    ETC2_RGB4 : TextureImporterFormat # 45
    ETC2_RGB4_PUNCHTHROUGH_ALPHA : TextureImporterFormat # 46
    ETC2_RGBA8 : TextureImporterFormat # 47
    ASTC_RGB_4x4 : TextureImporterFormat # 48
    ASTC_4x4 : TextureImporterFormat # 48
    ASTC_RGB_5x5 : TextureImporterFormat # 49
    ASTC_5x5 : TextureImporterFormat # 49
    ASTC_6x6 : TextureImporterFormat # 50
    ASTC_RGB_6x6 : TextureImporterFormat # 50
    ASTC_8x8 : TextureImporterFormat # 51
    ASTC_RGB_8x8 : TextureImporterFormat # 51
    ASTC_10x10 : TextureImporterFormat # 52
    ASTC_RGB_10x10 : TextureImporterFormat # 52
    ASTC_12x12 : TextureImporterFormat # 53
    ASTC_RGB_12x12 : TextureImporterFormat # 53
    ASTC_RGBA_4x4 : TextureImporterFormat # 54
    ASTC_RGBA_5x5 : TextureImporterFormat # 55
    ASTC_RGBA_6x6 : TextureImporterFormat # 56
    ASTC_RGBA_8x8 : TextureImporterFormat # 57
    ASTC_RGBA_10x10 : TextureImporterFormat # 58
    ASTC_RGBA_12x12 : TextureImporterFormat # 59
    ETC_RGB4_3DS : TextureImporterFormat # 60
    ETC_RGBA8_3DS : TextureImporterFormat # 61
    RG16 : TextureImporterFormat # 62
    R8 : TextureImporterFormat # 63
    ETC_RGB4Crunched : TextureImporterFormat # 64
    ETC2_RGBA8Crunched : TextureImporterFormat # 65
    ASTC_HDR_4x4 : TextureImporterFormat # 66
    ASTC_HDR_5x5 : TextureImporterFormat # 67
    ASTC_HDR_6x6 : TextureImporterFormat # 68
    ASTC_HDR_8x8 : TextureImporterFormat # 69
    ASTC_HDR_10x10 : TextureImporterFormat # 70
    ASTC_HDR_12x12 : TextureImporterFormat # 71
    RG32 : TextureImporterFormat # 72
    RGB48 : TextureImporterFormat # 73
    RGBA64 : TextureImporterFormat # 74
    AutomaticCompressedHDR : TextureImporterFormat # -7
    AutomaticHDR : TextureImporterFormat # -6
    AutomaticCrunched : TextureImporterFormat # -5
    AutomaticTruecolor : TextureImporterFormat # -3
    Automatic16bit : TextureImporterFormat # -2
    Automatic : TextureImporterFormat # -1
    AutomaticCompressed : TextureImporterFormat # -1


class TextureImporterGenerateCubemap(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : TextureImporterGenerateCubemap # 0
    Spheremap : TextureImporterGenerateCubemap # 1
    Cylindrical : TextureImporterGenerateCubemap # 2
    SimpleSpheremap : TextureImporterGenerateCubemap # 3
    NiceSpheremap : TextureImporterGenerateCubemap # 4
    FullCubemap : TextureImporterGenerateCubemap # 5
    AutoCubemap : TextureImporterGenerateCubemap # 6


class TextureImporterMipFilter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BoxFilter : TextureImporterMipFilter # 0
    KaiserFilter : TextureImporterMipFilter # 1


class TextureImporterNormalFilter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Standard : TextureImporterNormalFilter # 0
    Sobel : TextureImporterNormalFilter # 1


class TextureImporterNPOTScale(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : TextureImporterNPOTScale # 0
    ToNearest : TextureImporterNPOTScale # 1
    ToLarger : TextureImporterNPOTScale # 2
    ToSmaller : TextureImporterNPOTScale # 3


class TextureImporterPlatformSettings:
    def __init__(self) -> None: ...
    @property
    def allowsAlphaSplitting(self) -> bool: ...
    @allowsAlphaSplitting.setter
    def allowsAlphaSplitting(self, value: bool) -> bool: ...
    @property
    def androidETC2FallbackOverride(self) -> AndroidETC2FallbackOverride: ...
    @androidETC2FallbackOverride.setter
    def androidETC2FallbackOverride(self, value: AndroidETC2FallbackOverride) -> AndroidETC2FallbackOverride: ...
    @property
    def compressionQuality(self) -> int: ...
    @compressionQuality.setter
    def compressionQuality(self, value: int) -> int: ...
    @property
    def crunchedCompression(self) -> bool: ...
    @crunchedCompression.setter
    def crunchedCompression(self, value: bool) -> bool: ...
    @property
    def format(self) -> TextureImporterFormat: ...
    @format.setter
    def format(self, value: TextureImporterFormat) -> TextureImporterFormat: ...
    @property
    def ignorePlatformSupport(self) -> bool: ...
    @ignorePlatformSupport.setter
    def ignorePlatformSupport(self, value: bool) -> bool: ...
    @property
    def maxTextureSize(self) -> int: ...
    @maxTextureSize.setter
    def maxTextureSize(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def overridden(self) -> bool: ...
    @overridden.setter
    def overridden(self, value: bool) -> bool: ...
    @property
    def resizeAlgorithm(self) -> TextureResizeAlgorithm: ...
    @resizeAlgorithm.setter
    def resizeAlgorithm(self, value: TextureResizeAlgorithm) -> TextureResizeAlgorithm: ...
    @property
    def textureCompression(self) -> TextureImporterCompression: ...
    @textureCompression.setter
    def textureCompression(self, value: TextureImporterCompression) -> TextureImporterCompression: ...
    def CopyTo(self, target: TextureImporterPlatformSettings) -> None: ...


class TextureImporterRGBMMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : TextureImporterRGBMMode # 0
    On : TextureImporterRGBMMode # 1
    Off : TextureImporterRGBMMode # 2
    Encoded : TextureImporterRGBMMode # 3


class TextureImporterSettings:
    def __init__(self) -> None: ...
    @property
    def alphaIsTransparency(self) -> bool: ...
    @alphaIsTransparency.setter
    def alphaIsTransparency(self, value: bool) -> bool: ...
    @property
    def alphaSource(self) -> TextureImporterAlphaSource: ...
    @alphaSource.setter
    def alphaSource(self, value: TextureImporterAlphaSource) -> TextureImporterAlphaSource: ...
    @property
    def alphaTestReferenceValue(self) -> float: ...
    @alphaTestReferenceValue.setter
    def alphaTestReferenceValue(self, value: float) -> float: ...
    @property
    def aniso(self) -> int: ...
    @aniso.setter
    def aniso(self, value: int) -> int: ...
    @property
    def borderMipmap(self) -> bool: ...
    @borderMipmap.setter
    def borderMipmap(self, value: bool) -> bool: ...
    @property
    def compressionQuality(self) -> int: ...
    @compressionQuality.setter
    def compressionQuality(self, value: int) -> int: ...
    @property
    def convertToNormalMap(self) -> bool: ...
    @convertToNormalMap.setter
    def convertToNormalMap(self, value: bool) -> bool: ...
    @property
    def cubemapConvolution(self) -> TextureImporterCubemapConvolution: ...
    @cubemapConvolution.setter
    def cubemapConvolution(self, value: TextureImporterCubemapConvolution) -> TextureImporterCubemapConvolution: ...
    @property
    def cubemapConvolutionExponent(self) -> float: ...
    @cubemapConvolutionExponent.setter
    def cubemapConvolutionExponent(self, value: float) -> float: ...
    @property
    def cubemapConvolutionSteps(self) -> int: ...
    @cubemapConvolutionSteps.setter
    def cubemapConvolutionSteps(self, value: int) -> int: ...
    @property
    def fadeOut(self) -> bool: ...
    @fadeOut.setter
    def fadeOut(self, value: bool) -> bool: ...
    @property
    def filterMode(self) -> FilterMode: ...
    @filterMode.setter
    def filterMode(self, value: FilterMode) -> FilterMode: ...
    @property
    def flipbookColumns(self) -> int: ...
    @flipbookColumns.setter
    def flipbookColumns(self, value: int) -> int: ...
    @property
    def flipbookRows(self) -> int: ...
    @flipbookRows.setter
    def flipbookRows(self, value: int) -> int: ...
    @property
    def flipGreenChannel(self) -> bool: ...
    @flipGreenChannel.setter
    def flipGreenChannel(self, value: bool) -> bool: ...
    @property
    def generateCubemap(self) -> TextureImporterGenerateCubemap: ...
    @generateCubemap.setter
    def generateCubemap(self, value: TextureImporterGenerateCubemap) -> TextureImporterGenerateCubemap: ...
    @property
    def generateMipsInLinearSpace(self) -> bool: ...
    @generateMipsInLinearSpace.setter
    def generateMipsInLinearSpace(self, value: bool) -> bool: ...
    @property
    def grayscaleToAlpha(self) -> bool: ...
    @grayscaleToAlpha.setter
    def grayscaleToAlpha(self, value: bool) -> bool: ...
    @property
    def heightmapScale(self) -> float: ...
    @heightmapScale.setter
    def heightmapScale(self, value: float) -> float: ...
    @property
    def ignoreMipmapLimit(self) -> bool: ...
    @ignoreMipmapLimit.setter
    def ignoreMipmapLimit(self, value: bool) -> bool: ...
    @property
    def ignorePngGamma(self) -> bool: ...
    @ignorePngGamma.setter
    def ignorePngGamma(self, value: bool) -> bool: ...
    @property
    def lightmap(self) -> bool: ...
    @lightmap.setter
    def lightmap(self, value: bool) -> bool: ...
    @property
    def linearTexture(self) -> bool: ...
    @linearTexture.setter
    def linearTexture(self, value: bool) -> bool: ...
    @property
    def maxTextureSize(self) -> int: ...
    @maxTextureSize.setter
    def maxTextureSize(self, value: int) -> int: ...
    @property
    def mipmapBias(self) -> float: ...
    @mipmapBias.setter
    def mipmapBias(self, value: float) -> float: ...
    @property
    def mipmapEnabled(self) -> bool: ...
    @mipmapEnabled.setter
    def mipmapEnabled(self, value: bool) -> bool: ...
    @property
    def mipmapFadeDistanceEnd(self) -> int: ...
    @mipmapFadeDistanceEnd.setter
    def mipmapFadeDistanceEnd(self, value: int) -> int: ...
    @property
    def mipmapFadeDistanceStart(self) -> int: ...
    @mipmapFadeDistanceStart.setter
    def mipmapFadeDistanceStart(self, value: int) -> int: ...
    @property
    def mipmapFilter(self) -> TextureImporterMipFilter: ...
    @mipmapFilter.setter
    def mipmapFilter(self, value: TextureImporterMipFilter) -> TextureImporterMipFilter: ...
    @property
    def mipMapsPreserveCoverage(self) -> bool: ...
    @mipMapsPreserveCoverage.setter
    def mipMapsPreserveCoverage(self, value: bool) -> bool: ...
    @property
    def normalMap(self) -> bool: ...
    @normalMap.setter
    def normalMap(self, value: bool) -> bool: ...
    @property
    def normalMapFilter(self) -> TextureImporterNormalFilter: ...
    @normalMapFilter.setter
    def normalMapFilter(self, value: TextureImporterNormalFilter) -> TextureImporterNormalFilter: ...
    @property
    def npotScale(self) -> TextureImporterNPOTScale: ...
    @npotScale.setter
    def npotScale(self, value: TextureImporterNPOTScale) -> TextureImporterNPOTScale: ...
    @property
    def readable(self) -> bool: ...
    @readable.setter
    def readable(self, value: bool) -> bool: ...
    @property
    def rgbm(self) -> TextureImporterRGBMMode: ...
    @rgbm.setter
    def rgbm(self, value: TextureImporterRGBMMode) -> TextureImporterRGBMMode: ...
    @property
    def seamlessCubemap(self) -> bool: ...
    @seamlessCubemap.setter
    def seamlessCubemap(self, value: bool) -> bool: ...
    @property
    def singleChannelComponent(self) -> TextureImporterSingleChannelComponent: ...
    @singleChannelComponent.setter
    def singleChannelComponent(self, value: TextureImporterSingleChannelComponent) -> TextureImporterSingleChannelComponent: ...
    @property
    def spriteAlignment(self) -> int: ...
    @spriteAlignment.setter
    def spriteAlignment(self, value: int) -> int: ...
    @property
    def spriteBorder(self) -> Vector4: ...
    @spriteBorder.setter
    def spriteBorder(self, value: Vector4) -> Vector4: ...
    @property
    def spriteExtrude(self) -> int: ...
    @spriteExtrude.setter
    def spriteExtrude(self, value: int) -> int: ...
    @property
    def spriteGenerateFallbackPhysicsShape(self) -> bool: ...
    @spriteGenerateFallbackPhysicsShape.setter
    def spriteGenerateFallbackPhysicsShape(self, value: bool) -> bool: ...
    @property
    def spriteMeshType(self) -> SpriteMeshType: ...
    @spriteMeshType.setter
    def spriteMeshType(self, value: SpriteMeshType) -> SpriteMeshType: ...
    @property
    def spriteMode(self) -> int: ...
    @spriteMode.setter
    def spriteMode(self, value: int) -> int: ...
    @property
    def spritePivot(self) -> Vector2: ...
    @spritePivot.setter
    def spritePivot(self, value: Vector2) -> Vector2: ...
    @property
    def spritePixelsPerUnit(self) -> float: ...
    @spritePixelsPerUnit.setter
    def spritePixelsPerUnit(self, value: float) -> float: ...
    @property
    def spritePixelsToUnits(self) -> float: ...
    @spritePixelsToUnits.setter
    def spritePixelsToUnits(self, value: float) -> float: ...
    @property
    def spriteTessellationDetail(self) -> float: ...
    @spriteTessellationDetail.setter
    def spriteTessellationDetail(self, value: float) -> float: ...
    @property
    def sRGBTexture(self) -> bool: ...
    @sRGBTexture.setter
    def sRGBTexture(self, value: bool) -> bool: ...
    @property
    def streamingMipmaps(self) -> bool: ...
    @streamingMipmaps.setter
    def streamingMipmaps(self, value: bool) -> bool: ...
    @property
    def streamingMipmapsPriority(self) -> int: ...
    @streamingMipmapsPriority.setter
    def streamingMipmapsPriority(self, value: int) -> int: ...
    @property
    def swizzleA(self) -> TextureImporterSwizzle: ...
    @swizzleA.setter
    def swizzleA(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def swizzleB(self) -> TextureImporterSwizzle: ...
    @swizzleB.setter
    def swizzleB(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def swizzleG(self) -> TextureImporterSwizzle: ...
    @swizzleG.setter
    def swizzleG(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def swizzleR(self) -> TextureImporterSwizzle: ...
    @swizzleR.setter
    def swizzleR(self, value: TextureImporterSwizzle) -> TextureImporterSwizzle: ...
    @property
    def textureFormat(self) -> TextureImporterFormat: ...
    @textureFormat.setter
    def textureFormat(self, value: TextureImporterFormat) -> TextureImporterFormat: ...
    @property
    def textureShape(self) -> TextureImporterShape: ...
    @textureShape.setter
    def textureShape(self, value: TextureImporterShape) -> TextureImporterShape: ...
    @property
    def textureType(self) -> TextureImporterType: ...
    @textureType.setter
    def textureType(self, value: TextureImporterType) -> TextureImporterType: ...
    @property
    def vtOnly(self) -> bool: ...
    @vtOnly.setter
    def vtOnly(self, value: bool) -> bool: ...
    @property
    def wrapMode(self) -> TextureWrapMode: ...
    @wrapMode.setter
    def wrapMode(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeU(self) -> TextureWrapMode: ...
    @wrapModeU.setter
    def wrapModeU(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeV(self) -> TextureWrapMode: ...
    @wrapModeV.setter
    def wrapModeV(self, value: TextureWrapMode) -> TextureWrapMode: ...
    @property
    def wrapModeW(self) -> TextureWrapMode: ...
    @wrapModeW.setter
    def wrapModeW(self, value: TextureWrapMode) -> TextureWrapMode: ...
    def CopyTo(self, target: TextureImporterSettings) -> None: ...
    @staticmethod
    def Equal(a: TextureImporterSettings, b: TextureImporterSettings) -> bool: ...
    # Skipped ApplyTextureType due to it being static, abstract and generic.

    ApplyTextureType : ApplyTextureType_MethodGroup
    class ApplyTextureType_MethodGroup:
        @typing.overload
        def __call__(self, type: TextureImporterType) -> None:...
        @typing.overload
        def __call__(self, type: TextureImporterType, applyAll: bool) -> None:...



class TextureImporterShape(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Texture2D : TextureImporterShape # 1
    TextureCube : TextureImporterShape # 2
    Texture2DArray : TextureImporterShape # 4
    Texture3D : TextureImporterShape # 8


class TextureImporterSingleChannelComponent(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Alpha : TextureImporterSingleChannelComponent # 0
    Red : TextureImporterSingleChannelComponent # 1


class TextureImporterSwizzle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    R : TextureImporterSwizzle # 0
    G : TextureImporterSwizzle # 1
    B : TextureImporterSwizzle # 2
    A : TextureImporterSwizzle # 3
    OneMinusR : TextureImporterSwizzle # 4
    OneMinusG : TextureImporterSwizzle # 5
    OneMinusB : TextureImporterSwizzle # 6
    OneMinusA : TextureImporterSwizzle # 7
    Zero : TextureImporterSwizzle # 8
    One : TextureImporterSwizzle # 9


class TextureImporterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : TextureImporterType # 0
    NormalMap : TextureImporterType # 1
    GUI : TextureImporterType # 2
    Cookie : TextureImporterType # 4
    Lightmap : TextureImporterType # 6
    Cursor : TextureImporterType # 7
    Sprite : TextureImporterType # 8
    SingleChannel : TextureImporterType # 10
    Shadowmask : TextureImporterType # 11
    DirectionalLightmap : TextureImporterType # 12
    Image : TextureImporterType # -2147483648
    HDRI : TextureImporterType # -9
    Advanced : TextureImporterType # -5
    Reflection : TextureImporterType # -3
    Cubemap : TextureImporterType # -3
    Bump : TextureImporterType # -1


class TextureResizeAlgorithm(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mitchell : TextureResizeAlgorithm # 0
    Bilinear : TextureResizeAlgorithm # 1


class Tool(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    View : Tool # 0
    Move : Tool # 1
    Rotate : Tool # 2
    Scale : Tool # 3
    Rect : Tool # 4
    Transform : Tool # 5
    Custom : Tool # 6
    None_ : Tool # -1


class Tools(ScriptableObject):
    def __init__(self) -> None: ...
    @classmethod
    @property
    def current(cls) -> Tool: ...
    @classmethod
    @current.setter
    def current(cls, value: Tool) -> Tool: ...
    @classmethod
    @property
    def handlePosition(cls) -> Vector3: ...
    @classmethod
    @property
    def handleRect(cls) -> Rect: ...
    @classmethod
    @property
    def handleRectRotation(cls) -> Quaternion: ...
    @classmethod
    @property
    def handleRotation(cls) -> Quaternion: ...
    @classmethod
    @handleRotation.setter
    def handleRotation(cls, value: Quaternion) -> Quaternion: ...
    @classmethod
    @property
    def hidden(cls) -> bool: ...
    @classmethod
    @hidden.setter
    def hidden(cls, value: bool) -> bool: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def lockedLayers(cls) -> int: ...
    @classmethod
    @lockedLayers.setter
    def lockedLayers(cls, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def pivotMode(cls) -> PivotMode: ...
    @classmethod
    @pivotMode.setter
    def pivotMode(cls, value: PivotMode) -> PivotMode: ...
    @classmethod
    @property
    def pivotRotation(cls) -> PivotRotation: ...
    @classmethod
    @pivotRotation.setter
    def pivotRotation(cls, value: PivotRotation) -> PivotRotation: ...
    @classmethod
    @property
    def rectBlueprintMode(cls) -> bool: ...
    @classmethod
    @rectBlueprintMode.setter
    def rectBlueprintMode(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def viewTool(cls) -> ViewTool: ...
    @classmethod
    @viewTool.setter
    def viewTool(cls, value: ViewTool) -> ViewTool: ...
    @classmethod
    @property
    def viewToolActive(cls) -> bool: ...
    @classmethod
    @property
    def visibleLayers(cls) -> int: ...
    @classmethod
    @visibleLayers.setter
    def visibleLayers(cls, value: int) -> int: ...


class TransformUtils(abc.ABC):
    @staticmethod
    def GetInspectorRotation(t: Transform) -> Vector3: ...
    @staticmethod
    def SetInspectorRotation(t: Transform, r: Vector3) -> None: ...
    # Skipped GetConstrainProportions due to it being static, abstract and generic.

    GetConstrainProportions : GetConstrainProportions_MethodGroup
    class GetConstrainProportions_MethodGroup:
        @typing.overload
        def __call__(self, transforms: Array_1[Transform]) -> bool:...
        @typing.overload
        def __call__(self, transform: Transform) -> bool:...

    # Skipped SetConstrainProportions due to it being static, abstract and generic.

    SetConstrainProportions : SetConstrainProportions_MethodGroup
    class SetConstrainProportions_MethodGroup:
        @typing.overload
        def __call__(self, transforms: Array_1[Transform], enabled: bool) -> None:...
        @typing.overload
        def __call__(self, transform: Transform, enabled: bool) -> None:...



class TrueTypeFontImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def ascentCalculationMode(self) -> AscentCalculationMode: ...
    @ascentCalculationMode.setter
    def ascentCalculationMode(self, value: AscentCalculationMode) -> AscentCalculationMode: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def characterPadding(self) -> int: ...
    @characterPadding.setter
    def characterPadding(self, value: int) -> int: ...
    @property
    def characterSpacing(self) -> int: ...
    @characterSpacing.setter
    def characterSpacing(self, value: int) -> int: ...
    @property
    def customCharacters(self) -> str: ...
    @customCharacters.setter
    def customCharacters(self, value: str) -> str: ...
    @property
    def fontNames(self) -> Array_1[str]: ...
    @fontNames.setter
    def fontNames(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def fontReferences(self) -> Array_1[Font]: ...
    @fontReferences.setter
    def fontReferences(self, value: Array_1[Font]) -> Array_1[Font]: ...
    @property
    def fontRenderingMode(self) -> FontRenderingMode: ...
    @fontRenderingMode.setter
    def fontRenderingMode(self, value: FontRenderingMode) -> FontRenderingMode: ...
    @property
    def fontSize(self) -> int: ...
    @fontSize.setter
    def fontSize(self, value: int) -> int: ...
    @property
    def fontTextureCase(self) -> FontTextureCase: ...
    @fontTextureCase.setter
    def fontTextureCase(self, value: FontTextureCase) -> FontTextureCase: ...
    @property
    def fontTTFName(self) -> str: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def includeFontData(self) -> bool: ...
    @includeFontData.setter
    def includeFontData(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def shouldRoundAdvanceValue(self) -> bool: ...
    @shouldRoundAdvanceValue.setter
    def shouldRoundAdvanceValue(self, value: bool) -> bool: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    def GenerateEditableFont(self, path: str) -> Font: ...


class tvOSSdkVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Device : tvOSSdkVersion # 0
    Simulator : tvOSSdkVersion # 1


class tvOSTargetOSVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : tvOSTargetOSVersion # 0
    tvOS_9_0 : tvOSTargetOSVersion # 900
    tvOS_9_1 : tvOSTargetOSVersion # 901


class TypeCache(abc.ABC):
    # Skipped GetFieldsWithAttribute due to it being static, abstract and generic.

    GetFieldsWithAttribute : GetFieldsWithAttribute_MethodGroup
    class GetFieldsWithAttribute_MethodGroup:
        def __getitem__(self, t:typing.Type[GetFieldsWithAttribute_1_T1]) -> GetFieldsWithAttribute_1[GetFieldsWithAttribute_1_T1]: ...

        GetFieldsWithAttribute_1_T1 = typing.TypeVar('GetFieldsWithAttribute_1_T1')
        class GetFieldsWithAttribute_1(typing.Generic[GetFieldsWithAttribute_1_T1]):
            GetFieldsWithAttribute_1_T = TypeCache.GetFieldsWithAttribute_MethodGroup.GetFieldsWithAttribute_1_T1
            @typing.overload
            def __call__(self) -> TypeCache.FieldInfoCollection:...
            @typing.overload
            def __call__(self, assemblyName: str) -> TypeCache.FieldInfoCollection:...

        @typing.overload
        def __call__(self, attrType: typing.Type[typing.Any]) -> TypeCache.FieldInfoCollection:...
        @typing.overload
        def __call__(self, attrType: typing.Type[typing.Any], assemblyName: str) -> TypeCache.FieldInfoCollection:...

    # Skipped GetMethodsWithAttribute due to it being static, abstract and generic.

    GetMethodsWithAttribute : GetMethodsWithAttribute_MethodGroup
    class GetMethodsWithAttribute_MethodGroup:
        def __getitem__(self, t:typing.Type[GetMethodsWithAttribute_1_T1]) -> GetMethodsWithAttribute_1[GetMethodsWithAttribute_1_T1]: ...

        GetMethodsWithAttribute_1_T1 = typing.TypeVar('GetMethodsWithAttribute_1_T1')
        class GetMethodsWithAttribute_1(typing.Generic[GetMethodsWithAttribute_1_T1]):
            GetMethodsWithAttribute_1_T = TypeCache.GetMethodsWithAttribute_MethodGroup.GetMethodsWithAttribute_1_T1
            @typing.overload
            def __call__(self) -> TypeCache.MethodCollection:...
            @typing.overload
            def __call__(self, assemblyName: str) -> TypeCache.MethodCollection:...

        @typing.overload
        def __call__(self, attrType: typing.Type[typing.Any]) -> TypeCache.MethodCollection:...
        @typing.overload
        def __call__(self, attrType: typing.Type[typing.Any], assemblyName: str) -> TypeCache.MethodCollection:...

    # Skipped GetTypesDerivedFrom due to it being static, abstract and generic.

    GetTypesDerivedFrom : GetTypesDerivedFrom_MethodGroup
    class GetTypesDerivedFrom_MethodGroup:
        def __getitem__(self, t:typing.Type[GetTypesDerivedFrom_1_T1]) -> GetTypesDerivedFrom_1[GetTypesDerivedFrom_1_T1]: ...

        GetTypesDerivedFrom_1_T1 = typing.TypeVar('GetTypesDerivedFrom_1_T1')
        class GetTypesDerivedFrom_1(typing.Generic[GetTypesDerivedFrom_1_T1]):
            GetTypesDerivedFrom_1_T = TypeCache.GetTypesDerivedFrom_MethodGroup.GetTypesDerivedFrom_1_T1
            @typing.overload
            def __call__(self) -> TypeCache.TypeCollection:...
            @typing.overload
            def __call__(self, assemblyName: str) -> TypeCache.TypeCollection:...

        @typing.overload
        def __call__(self, parentType: typing.Type[typing.Any]) -> TypeCache.TypeCollection:...
        @typing.overload
        def __call__(self, parentType: typing.Type[typing.Any], assemblyName: str) -> TypeCache.TypeCollection:...

    # Skipped GetTypesWithAttribute due to it being static, abstract and generic.

    GetTypesWithAttribute : GetTypesWithAttribute_MethodGroup
    class GetTypesWithAttribute_MethodGroup:
        def __getitem__(self, t:typing.Type[GetTypesWithAttribute_1_T1]) -> GetTypesWithAttribute_1[GetTypesWithAttribute_1_T1]: ...

        GetTypesWithAttribute_1_T1 = typing.TypeVar('GetTypesWithAttribute_1_T1')
        class GetTypesWithAttribute_1(typing.Generic[GetTypesWithAttribute_1_T1]):
            GetTypesWithAttribute_1_T = TypeCache.GetTypesWithAttribute_MethodGroup.GetTypesWithAttribute_1_T1
            @typing.overload
            def __call__(self) -> TypeCache.TypeCollection:...
            @typing.overload
            def __call__(self, assemblyName: str) -> TypeCache.TypeCollection:...

        @typing.overload
        def __call__(self, attrType: typing.Type[typing.Any]) -> TypeCache.TypeCollection:...
        @typing.overload
        def __call__(self, attrType: typing.Type[typing.Any], assemblyName: str) -> TypeCache.TypeCollection:...


    class FieldInfoCollection(IList_1[FieldInfo], IList):
        @property
        def Count(self) -> int: ...
        @property
        def IsFixedSize(self) -> bool: ...
        @property
        def IsReadOnly(self) -> bool: ...
        @property
        def IsSynchronized(self) -> bool: ...
        @property
        def Item(self) -> FieldInfo: ...
        @Item.setter
        def Item(self, value: FieldInfo) -> FieldInfo: ...
        def GetEnumerator(self) -> TypeCache.FieldInfoCollection.Enumerator: ...
        # Skipped Contains due to it being static, abstract and generic.

        Contains : Contains_MethodGroup
        class Contains_MethodGroup:
            @typing.overload
            def __call__(self, item: FieldInfo) -> bool:...
            @typing.overload
            def __call__(self, item: typing.Any) -> bool:...

        # Skipped CopyTo due to it being static, abstract and generic.

        CopyTo : CopyTo_MethodGroup
        class CopyTo_MethodGroup:
            @typing.overload
            def __call__(self, array: Array_1[FieldInfo], arrayIndex: int) -> None:...
            @typing.overload
            def __call__(self, array: Array, arrayIndex: int) -> None:...

        # Skipped IndexOf due to it being static, abstract and generic.

        IndexOf : IndexOf_MethodGroup
        class IndexOf_MethodGroup:
            @typing.overload
            def __call__(self, item: FieldInfo) -> int:...
            @typing.overload
            def __call__(self, item: typing.Any) -> int:...


        class Enumerator(IEnumerator_1[FieldInfo]):
            @property
            def Current(self) -> FieldInfo: ...
            def Dispose(self) -> None: ...
            def MoveNext(self) -> bool: ...



    class MethodCollection(IList_1[MethodInfo], IList):
        @property
        def Count(self) -> int: ...
        @property
        def IsFixedSize(self) -> bool: ...
        @property
        def IsReadOnly(self) -> bool: ...
        @property
        def IsSynchronized(self) -> bool: ...
        @property
        def Item(self) -> MethodInfo: ...
        @Item.setter
        def Item(self, value: MethodInfo) -> MethodInfo: ...
        def GetEnumerator(self) -> TypeCache.MethodCollection.Enumerator: ...
        # Skipped Contains due to it being static, abstract and generic.

        Contains : Contains_MethodGroup
        class Contains_MethodGroup:
            @typing.overload
            def __call__(self, item: MethodInfo) -> bool:...
            @typing.overload
            def __call__(self, item: typing.Any) -> bool:...

        # Skipped CopyTo due to it being static, abstract and generic.

        CopyTo : CopyTo_MethodGroup
        class CopyTo_MethodGroup:
            @typing.overload
            def __call__(self, array: Array_1[MethodInfo], arrayIndex: int) -> None:...
            @typing.overload
            def __call__(self, array: Array, arrayIndex: int) -> None:...

        # Skipped IndexOf due to it being static, abstract and generic.

        IndexOf : IndexOf_MethodGroup
        class IndexOf_MethodGroup:
            @typing.overload
            def __call__(self, item: MethodInfo) -> int:...
            @typing.overload
            def __call__(self, item: typing.Any) -> int:...


        class Enumerator(IEnumerator_1[MethodInfo]):
            @property
            def Current(self) -> MethodInfo: ...
            def Dispose(self) -> None: ...
            def MoveNext(self) -> bool: ...



    class TypeCollection(IList_1[typing.Type[typing.Any]], IList):
        @property
        def Count(self) -> int: ...
        @property
        def IsFixedSize(self) -> bool: ...
        @property
        def IsReadOnly(self) -> bool: ...
        @property
        def IsSynchronized(self) -> bool: ...
        @property
        def Item(self) -> typing.Type[typing.Any]: ...
        @Item.setter
        def Item(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
        def GetEnumerator(self) -> TypeCache.TypeCollection.Enumerator: ...
        # Skipped Contains due to it being static, abstract and generic.

        Contains : Contains_MethodGroup
        class Contains_MethodGroup:
            @typing.overload
            def __call__(self, item: typing.Type[typing.Any]) -> bool:...
            @typing.overload
            def __call__(self, item: typing.Any) -> bool:...

        # Skipped CopyTo due to it being static, abstract and generic.

        CopyTo : CopyTo_MethodGroup
        class CopyTo_MethodGroup:
            @typing.overload
            def __call__(self, array: Array_1[typing.Type[typing.Any]], arrayIndex: int) -> None:...
            @typing.overload
            def __call__(self, array: Array, arrayIndex: int) -> None:...

        # Skipped IndexOf due to it being static, abstract and generic.

        IndexOf : IndexOf_MethodGroup
        class IndexOf_MethodGroup:
            @typing.overload
            def __call__(self, item: typing.Type[typing.Any]) -> int:...
            @typing.overload
            def __call__(self, item: typing.Any) -> int:...


        class Enumerator(IEnumerator_1[typing.Type[typing.Any]]):
            @property
            def Current(self) -> typing.Type[typing.Any]: ...
            def Dispose(self) -> None: ...
            def MoveNext(self) -> bool: ...




class UIOrientation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Portrait : UIOrientation # 0
    PortraitUpsideDown : UIOrientation # 1
    LandscapeRight : UIOrientation # 2
    LandscapeLeft : UIOrientation # 3
    AutoRotation : UIOrientation # 4


class Undo:
    def __init__(self) -> None: ...
    postprocessModifications : Undo.PostprocessModifications
    undoRedoEvent : Undo.UndoRedoEventCallback
    undoRedoPerformed : Undo.UndoRedoCallback
    willFlushUndoRecord : Undo.WillFlushUndoRecord
    @classmethod
    @property
    def isProcessing(cls) -> bool: ...
    @staticmethod
    def ClearAll() -> None: ...
    @staticmethod
    def ClearSnapshotTarget() -> None: ...
    @staticmethod
    def ClearUndo(identifier: Object) -> None: ...
    @staticmethod
    def CollapseUndoOperations(groupIndex: int) -> None: ...
    @staticmethod
    def CreateSnapshot() -> None: ...
    @staticmethod
    def DestroyObjectImmediate(objectToUndo: Object) -> None: ...
    @staticmethod
    def FlushUndoRecordObjects() -> None: ...
    @staticmethod
    def GetCurrentGroup() -> int: ...
    @staticmethod
    def GetCurrentGroupName() -> str: ...
    @staticmethod
    def IncrementCurrentGroup() -> None: ...
    @staticmethod
    def MoveGameObjectToScene(go: GameObject, scene: Scene, name: str) -> None: ...
    @staticmethod
    def PerformRedo() -> None: ...
    @staticmethod
    def PerformUndo() -> None: ...
    @staticmethod
    def RecordObject(objectToUndo: Object, name: str) -> None: ...
    @staticmethod
    def RecordObjects(objectsToUndo: Array_1[Object], name: str) -> None: ...
    @staticmethod
    def RegisterChildrenOrderUndo(objectToUndo: Object, name: str) -> None: ...
    @staticmethod
    def RegisterCreatedObjectUndo(objectToUndo: Object, name: str) -> None: ...
    @staticmethod
    def RegisterImporterUndo(path: str, name: str) -> None: ...
    @staticmethod
    def RegisterSceneUndo(name: str) -> None: ...
    @staticmethod
    def RegisterSnapshot() -> None: ...
    @staticmethod
    def RestoreSnapshot() -> None: ...
    @staticmethod
    def RevertAllDownToGroup(group: int) -> None: ...
    @staticmethod
    def RevertAllInCurrentGroup() -> None: ...
    @staticmethod
    def SetCurrentGroupName(name: str) -> None: ...
    @staticmethod
    def SetSiblingIndex(transform: Transform, siblingIndex: int, name: str) -> None: ...
    # Skipped AddComponent due to it being static, abstract and generic.

    AddComponent : AddComponent_MethodGroup
    class AddComponent_MethodGroup:
        def __getitem__(self, t:typing.Type[AddComponent_1_T1]) -> AddComponent_1[AddComponent_1_T1]: ...

        AddComponent_1_T1 = typing.TypeVar('AddComponent_1_T1')
        class AddComponent_1(typing.Generic[AddComponent_1_T1]):
            AddComponent_1_T = Undo.AddComponent_MethodGroup.AddComponent_1_T1
            def __call__(self, gameObject: GameObject) -> AddComponent_1_T:...

        def __call__(self, gameObject: GameObject, type: typing.Type[typing.Any]) -> Component:...

    # Skipped RegisterCompleteObjectUndo due to it being static, abstract and generic.

    RegisterCompleteObjectUndo : RegisterCompleteObjectUndo_MethodGroup
    class RegisterCompleteObjectUndo_MethodGroup:
        @typing.overload
        def __call__(self, objectsToUndo: Array_1[Object], name: str) -> None:...
        @typing.overload
        def __call__(self, objectToUndo: Object, name: str) -> None:...

    # Skipped RegisterFullObjectHierarchyUndo due to it being static, abstract and generic.

    RegisterFullObjectHierarchyUndo : RegisterFullObjectHierarchyUndo_MethodGroup
    class RegisterFullObjectHierarchyUndo_MethodGroup:
        @typing.overload
        def __call__(self, objectToUndo: Object) -> None:...
        @typing.overload
        def __call__(self, objectToUndo: Object, name: str) -> None:...

    # Skipped RegisterUndo due to it being static, abstract and generic.

    RegisterUndo : RegisterUndo_MethodGroup
    class RegisterUndo_MethodGroup:
        @typing.overload
        def __call__(self, objectsToUndo: Array_1[Object], name: str) -> None:...
        @typing.overload
        def __call__(self, objectToUndo: Object, name: str) -> None:...

    # Skipped SetSnapshotTarget due to it being static, abstract and generic.

    SetSnapshotTarget : SetSnapshotTarget_MethodGroup
    class SetSnapshotTarget_MethodGroup:
        @typing.overload
        def __call__(self, objectsToUndo: Array_1[Object], name: str) -> None:...
        @typing.overload
        def __call__(self, objectToUndo: Object, name: str) -> None:...

    # Skipped SetTransformParent due to it being static, abstract and generic.

    SetTransformParent : SetTransformParent_MethodGroup
    class SetTransformParent_MethodGroup:
        @typing.overload
        def __call__(self, transform: Transform, newParent: Transform, name: str) -> None:...
        @typing.overload
        def __call__(self, transform: Transform, newParent: Transform, worldPositionStays: bool, name: str) -> None:...


    class PostprocessModifications(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, modifications: Array_1[UndoPropertyModification], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> Array_1[UndoPropertyModification]: ...
        def Invoke(self, modifications: Array_1[UndoPropertyModification]) -> Array_1[UndoPropertyModification]: ...


    class UndoRedoCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...


    class UndoRedoEventCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, undo: clr.Reference[UndoRedoInfo], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, undo: clr.Reference[UndoRedoInfo], result: IAsyncResult) -> None: ...
        def Invoke(self, undo: clr.Reference[UndoRedoInfo]) -> None: ...


    class WillFlushUndoRecord(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self) -> None: ...



class UndoPropertyModification:
    currentValue : PropertyModification
    previousValue : PropertyModification
    @property
    def keepPrefabOverride(self) -> bool: ...
    @keepPrefabOverride.setter
    def keepPrefabOverride(self, value: bool) -> bool: ...


class UndoRedoInfo:
    undoGroup : int
    undoName : str
    @property
    def isRedo(self) -> bool: ...
    @isRedo.setter
    def isRedo(self, value: bool) -> bool: ...


class UndoSnapshot:
    def __init__(self, objectsToUndo: Array_1[Object]) -> None: ...
    def Dispose(self) -> None: ...
    def Restore(self) -> None: ...


class UnityStats:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def animationComponentsPlaying(cls) -> int: ...
    @classmethod
    @property
    def animatorComponentsPlaying(cls) -> int: ...
    @classmethod
    @property
    def audioClippingAmount(cls) -> float: ...
    @classmethod
    @property
    def audioDSPLoad(cls) -> float: ...
    @classmethod
    @property
    def audioLevel(cls) -> float: ...
    @classmethod
    @property
    def audioStreamLoad(cls) -> float: ...
    @classmethod
    @property
    def batches(cls) -> int: ...
    @classmethod
    @property
    def drawCalls(cls) -> int: ...
    @classmethod
    @property
    def dynamicBatchedDrawCalls(cls) -> int: ...
    @classmethod
    @property
    def dynamicBatches(cls) -> int: ...
    @classmethod
    @property
    def frameTime(cls) -> float: ...
    @classmethod
    @property
    def ibUploadBytes(cls) -> int: ...
    @classmethod
    @property
    def ibUploads(cls) -> int: ...
    @classmethod
    @property
    def instancedBatchedDrawCalls(cls) -> int: ...
    @classmethod
    @property
    def instancedBatches(cls) -> int: ...
    @classmethod
    @property
    def renderTextureBytes(cls) -> int: ...
    @classmethod
    @property
    def renderTextureChanges(cls) -> int: ...
    @classmethod
    @property
    def renderTextureCount(cls) -> int: ...
    @classmethod
    @property
    def renderTime(cls) -> float: ...
    @classmethod
    @property
    def screenBytes(cls) -> int: ...
    @classmethod
    @property
    def screenRes(cls) -> str: ...
    @classmethod
    @property
    def setPassCalls(cls) -> int: ...
    @classmethod
    @property
    def shadowCasters(cls) -> int: ...
    @classmethod
    @property
    def staticBatchedDrawCalls(cls) -> int: ...
    @classmethod
    @property
    def staticBatches(cls) -> int: ...
    @classmethod
    @property
    def triangles(cls) -> int: ...
    @classmethod
    @property
    def usedTextureCount(cls) -> int: ...
    @classmethod
    @property
    def usedTextureMemorySize(cls) -> int: ...
    @classmethod
    @property
    def vboTotal(cls) -> int: ...
    @classmethod
    @property
    def vboTotalBytes(cls) -> int: ...
    @classmethod
    @property
    def vboUploadBytes(cls) -> int: ...
    @classmethod
    @property
    def vboUploads(cls) -> int: ...
    @classmethod
    @property
    def vertices(cls) -> int: ...
    @classmethod
    @property
    def visibleSkinnedMeshes(cls) -> int: ...


class Unsupported(abc.ABC):
    @classmethod
    @property
    def IsRegistryValidationDisabled(cls) -> bool: ...
    @classmethod
    @IsRegistryValidationDisabled.setter
    def IsRegistryValidationDisabled(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def useScriptableRenderPipeline(cls) -> bool: ...
    @classmethod
    @useScriptableRenderPipeline.setter
    def useScriptableRenderPipeline(cls, value: bool) -> bool: ...
    @staticmethod
    def AreAllParametersInDestination(transition: Object, controller: AnimatorController, missingParameters: List_1[str]) -> bool: ...
    @staticmethod
    def CanPasteParametersToTransition(transition: Object, controller: AnimatorController) -> bool: ...
    @staticmethod
    def CaptureScreenshotImmediate(filePath: str, x: int, y: int, width: int, height: int) -> None: ...
    @staticmethod
    def ClearSkinCache() -> None: ...
    @staticmethod
    def CopyComponentToPasteboard(component: Component) -> bool: ...
    @staticmethod
    def CopyGameObjectsToPasteboard() -> None: ...
    @staticmethod
    def CopyStateMachineDataToPasteboard(stateMachineObject: Object, controller: AnimatorController, layerIndex: int) -> None: ...
    @staticmethod
    def CopyStateMachineTransitionParametersToPasteboard(transition: Object, controller: AnimatorController) -> None: ...
    @staticmethod
    def DeleteGameObjectSelection() -> None: ...
    @staticmethod
    def DestinationHasCompatibleParameterTypes(transition: Object, controller: AnimatorController, mismatchedParameters: List_1[str]) -> bool: ...
    @staticmethod
    def DuplicateGameObjectsUsingPasteboard() -> None: ...
    @staticmethod
    def GetApplicationSettingCompressAssetsOnImport() -> bool: ...
    @staticmethod
    def GetBaseUnityDeveloperFolder() -> str: ...
    @staticmethod
    def GetLocalIdentifierInFile(instanceID: int) -> int: ...
    @staticmethod
    def GetLocalIdentifierInFileForPersistentObject(obj: Object) -> int: ...
    @staticmethod
    def GetRenderSettings() -> Object: ...
    @staticmethod
    def GetSerializedAssetInterfaceSingleton(className: str) -> Object: ...
    @staticmethod
    def GetSubmenus(menuPath: str) -> Array_1[str]: ...
    @staticmethod
    def GetSubmenusCommands(menuPath: str) -> Array_1[str]: ...
    @staticmethod
    def GetSubmenusIncludingSeparators(menuPath: str) -> Array_1[str]: ...
    @staticmethod
    def GetTypeFromFullName(fullName: str) -> typing.Type[typing.Any]: ...
    @staticmethod
    def HasStateMachineDataInPasteboard() -> bool: ...
    @staticmethod
    def HasStateMachineTransitionDataInPasteboard() -> bool: ...
    @staticmethod
    def IsBleedingEdgeBuild() -> bool: ...
    @staticmethod
    def IsDestroyScriptableObject(target: ScriptableObject) -> bool: ...
    @staticmethod
    def IsDeveloperBuild() -> bool: ...
    @staticmethod
    def IsDeveloperMode() -> bool: ...
    @staticmethod
    def IsHiddenFile(path: str) -> bool: ...
    @staticmethod
    def IsNativeCodeBuiltInReleaseMode() -> bool: ...
    @staticmethod
    def PasteComponentFromPasteboard(go: GameObject) -> bool: ...
    @staticmethod
    def PasteComponentValuesFromPasteboard(component: Component) -> bool: ...
    @staticmethod
    def PasteGameObjectsFromPasteboard() -> None: ...
    @staticmethod
    def PasteToStateMachineFromPasteboard(sm: AnimatorStateMachine, controller: AnimatorController, layerIndex: int, position: Vector3) -> None: ...
    @staticmethod
    def PasteToStateMachineTransitionParametersFromPasteboard(transition: Object, controller: AnimatorController, conditions: bool, parameters: bool) -> None: ...
    @staticmethod
    def PrepareObjectContextMenu(c: Object, contextUserData: int) -> None: ...
    @staticmethod
    def ResolveRedirectedPath(path: str) -> str: ...
    @staticmethod
    def ResolveSymlinks(path: str) -> str: ...
    @staticmethod
    def RestoreOverrideLightingSettings() -> None: ...
    @staticmethod
    def RestoreOverrideRenderSettings() -> None: ...
    @staticmethod
    def SceneTrackerFlushDirty() -> None: ...
    @staticmethod
    def SetAllowCursorHide(allow: bool) -> None: ...
    @staticmethod
    def SetApplicationSettingCompressAssetsOnImport(value: bool) -> None: ...
    @staticmethod
    def SetOverrideLightingSettings(scene: Scene) -> bool: ...
    @staticmethod
    def SetOverrideRenderSettings(scene: Scene) -> bool: ...
    @staticmethod
    def SetQualitySettingsShadowDistanceTemporarily(distance: float) -> None: ...
    @staticmethod
    def SetRenderSettingsUseFogNoDirty(fog: bool) -> None: ...
    @staticmethod
    def SetUsingAuthoringScenes(enabled: bool) -> None: ...
    @staticmethod
    def SmartReset(obj: Object) -> None: ...
    @staticmethod
    def StopPlayingImmediately() -> None: ...
    # Skipped IsSourceBuild due to it being static, abstract and generic.

    IsSourceBuild : IsSourceBuild_MethodGroup
    class IsSourceBuild_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, checkHumanControllingUs: bool) -> bool:...



class UnwrapParam:
    angleError : float
    areaError : float
    hardAngle : float
    packMargin : float
    @staticmethod
    def SetDefaults(param: clr.Reference[UnwrapParam]) -> None: ...


class Unwrapping(abc.ABC):
    # Skipped GeneratePerTriangleUV due to it being static, abstract and generic.

    GeneratePerTriangleUV : GeneratePerTriangleUV_MethodGroup
    class GeneratePerTriangleUV_MethodGroup:
        @typing.overload
        def __call__(self, src: Mesh) -> Array_1[Vector2]:...
        @typing.overload
        def __call__(self, src: Mesh, settings: UnwrapParam) -> Array_1[Vector2]:...

    # Skipped GenerateSecondaryUVSet due to it being static, abstract and generic.

    GenerateSecondaryUVSet : GenerateSecondaryUVSet_MethodGroup
    class GenerateSecondaryUVSet_MethodGroup:
        @typing.overload
        def __call__(self, src: Mesh) -> bool:...
        @typing.overload
        def __call__(self, src: Mesh, settings: UnwrapParam) -> bool:...



class UpdatePrefabInstancesEventArgs:
    def __init__(self, scene: Scene, instanceIds: NativeArray_1.ReadOnly_1[int]) -> None: ...
    @property
    def instanceIds(self) -> NativeArray_1.ReadOnly_1[int]: ...
    @property
    def scene(self) -> Scene: ...


class VersionControlSettings(Object):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @classmethod
    @property
    def mode(cls) -> str: ...
    @classmethod
    @mode.setter
    def mode(cls, value: str) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class VertexChannelCompressionFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : VertexChannelCompressionFlags # 0
    Position : VertexChannelCompressionFlags # 1
    kPosition : VertexChannelCompressionFlags # 1
    Normal : VertexChannelCompressionFlags # 2
    kNormal : VertexChannelCompressionFlags # 2
    Tangent : VertexChannelCompressionFlags # 4
    kColor : VertexChannelCompressionFlags # 4
    Color : VertexChannelCompressionFlags # 8
    kUV0 : VertexChannelCompressionFlags # 8
    TexCoord0 : VertexChannelCompressionFlags # 16
    kUV1 : VertexChannelCompressionFlags # 16
    TexCoord1 : VertexChannelCompressionFlags # 32
    kUV2 : VertexChannelCompressionFlags # 32
    TexCoord2 : VertexChannelCompressionFlags # 64
    kUV3 : VertexChannelCompressionFlags # 64
    TexCoord3 : VertexChannelCompressionFlags # 128
    kTangent : VertexChannelCompressionFlags # 128


class VideoBitrateMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Low : VideoBitrateMode # 0
    Medium : VideoBitrateMode # 1
    High : VideoBitrateMode # 2


class VideoClipImporter(AssetImporter):
    def __init__(self) -> None: ...
    @property
    def assetBundleName(self) -> str: ...
    @assetBundleName.setter
    def assetBundleName(self, value: str) -> str: ...
    @property
    def assetBundleVariant(self) -> str: ...
    @assetBundleVariant.setter
    def assetBundleVariant(self, value: str) -> str: ...
    @property
    def assetPath(self) -> str: ...
    @property
    def assetTimeStamp(self) -> int: ...
    @property
    def defaultTargetSettings(self) -> VideoImporterTargetSettings: ...
    @defaultTargetSettings.setter
    def defaultTargetSettings(self, value: VideoImporterTargetSettings) -> VideoImporterTargetSettings: ...
    @property
    def deinterlaceMode(self) -> VideoDeinterlaceMode: ...
    @deinterlaceMode.setter
    def deinterlaceMode(self, value: VideoDeinterlaceMode) -> VideoDeinterlaceMode: ...
    @property
    def flipHorizontal(self) -> bool: ...
    @flipHorizontal.setter
    def flipHorizontal(self, value: bool) -> bool: ...
    @property
    def flipVertical(self) -> bool: ...
    @flipVertical.setter
    def flipVertical(self, value: bool) -> bool: ...
    @property
    def frameCount(self) -> int: ...
    @property
    def frameRate(self) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importAudio(self) -> bool: ...
    @importAudio.setter
    def importAudio(self, value: bool) -> bool: ...
    @property
    def importSettingsMissing(self) -> bool: ...
    @property
    def isPlayingPreview(self) -> bool: ...
    @property
    def keepAlpha(self) -> bool: ...
    @keepAlpha.setter
    def keepAlpha(self, value: bool) -> bool: ...
    @property
    def linearColor(self) -> bool: ...
    @linearColor.setter
    def linearColor(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def outputFileSize(self) -> int: ...
    @property
    def pixelAspectRatioDenominator(self) -> int: ...
    @property
    def pixelAspectRatioNumerator(self) -> int: ...
    @property
    def quality(self) -> float: ...
    @quality.setter
    def quality(self, value: float) -> float: ...
    @property
    def sourceAudioTrackCount(self) -> int: ...
    @property
    def sourceFileSize(self) -> int: ...
    @property
    def sourceHasAlpha(self) -> bool: ...
    @property
    def sRGBClip(self) -> bool: ...
    @sRGBClip.setter
    def sRGBClip(self, value: bool) -> bool: ...
    @property
    def transcodeSkipped(self) -> bool: ...
    @property
    def useLegacyImporter(self) -> bool: ...
    @useLegacyImporter.setter
    def useLegacyImporter(self, value: bool) -> bool: ...
    @property
    def userData(self) -> str: ...
    @userData.setter
    def userData(self, value: str) -> str: ...
    def ClearTargetSettings(self, platform: str) -> None: ...
    def Equals(self, rhs: VideoClipImporter) -> bool: ...
    def GetPreviewTexture(self) -> Texture: ...
    def GetResizeHeight(self, mode: VideoResizeMode) -> int: ...
    def GetResizeModeName(self, mode: VideoResizeMode) -> str: ...
    def GetResizeWidth(self, mode: VideoResizeMode) -> int: ...
    def GetSourceAudioChannelCount(self, audioTrackIdx: int) -> int: ...
    def GetSourceAudioSampleRate(self, audioTrackIdx: int) -> int: ...
    def GetTargetSettings(self, platform: str) -> VideoImporterTargetSettings: ...
    def PlayPreview(self) -> None: ...
    def SetTargetSettings(self, platform: str, settings: VideoImporterTargetSettings) -> None: ...
    def StopPreview(self) -> None: ...


class VideoCodec(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : VideoCodec # 0
    H264 : VideoCodec # 1
    VP8 : VideoCodec # 2
    H265 : VideoCodec # 3


class VideoDeinterlaceMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : VideoDeinterlaceMode # 0
    Even : VideoDeinterlaceMode # 1
    Odd : VideoDeinterlaceMode # 2


class VideoEncodeAspectRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoScaling : VideoEncodeAspectRatio # 0
    Stretch : VideoEncodeAspectRatio # 5


class VideoEncodingProfile(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    H264Baseline : VideoEncodingProfile # 0
    H264Main : VideoEncodingProfile # 1
    H264High : VideoEncodingProfile # 2


class VideoImporterTargetSettings:
    def __init__(self) -> None: ...
    aspectRatio : VideoEncodeAspectRatio
    bitrateMode : VideoBitrateMode
    codec : VideoCodec
    customHeight : int
    customWidth : int
    enableTranscoding : bool
    resizeMode : VideoResizeMode
    spatialQuality : VideoSpatialQuality


class VideoResizeMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OriginalSize : VideoResizeMode # 0
    ThreeQuarterRes : VideoResizeMode # 1
    HalfRes : VideoResizeMode # 2
    QuarterRes : VideoResizeMode # 3
    Square1024 : VideoResizeMode # 4
    Square512 : VideoResizeMode # 5
    Square256 : VideoResizeMode # 6
    CustomSize : VideoResizeMode # 7


class VideoSpatialQuality(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LowSpatialQuality : VideoSpatialQuality # 0
    MediumSpatialQuality : VideoSpatialQuality # 1
    HighSpatialQuality : VideoSpatialQuality # 2


class ViewTool(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Orbit : ViewTool # 0
    Pan : ViewTool # 1
    Zoom : ViewTool # 2
    FPS : ViewTool # 3
    None_ : ViewTool # -1


class VisionOSSdkVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Device : VisionOSSdkVersion # 0
    Simulator : VisionOSSdkVersion # 1


class WebGLCompressionFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Brotli : WebGLCompressionFormat # 0
    Gzip : WebGLCompressionFormat # 1
    Disabled : WebGLCompressionFormat # 2


class WebGLDebugSymbolMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : WebGLDebugSymbolMode # 0
    External : WebGLDebugSymbolMode # 1
    Embedded : WebGLDebugSymbolMode # 2


class WebGLExceptionSupport(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : WebGLExceptionSupport # 0
    ExplicitlyThrownExceptionsOnly : WebGLExceptionSupport # 1
    FullWithoutStacktrace : WebGLExceptionSupport # 2
    FullWithStacktrace : WebGLExceptionSupport # 3


class WebGLLinkerTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Asm : WebGLLinkerTarget # 0
    Wasm : WebGLLinkerTarget # 1
    Both : WebGLLinkerTarget # 2


class WebGLMemoryGrowthMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : WebGLMemoryGrowthMode # 0
    Linear : WebGLMemoryGrowthMode # 1
    Geometric : WebGLMemoryGrowthMode # 2


class WebGLPowerPreference(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : WebGLPowerPreference # 0
    LowPower : WebGLPowerPreference # 1
    HighPerformance : WebGLPowerPreference # 2


class WebGLTextureSubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Generic : WebGLTextureSubtarget # 0
    DXT : WebGLTextureSubtarget # 1
    ETC2 : WebGLTextureSubtarget # 3
    ASTC : WebGLTextureSubtarget # 4


class WebGLWasmArithmeticExceptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Throw : WebGLWasmArithmeticExceptions # 0
    Ignore : WebGLWasmArithmeticExceptions # 1


class WindowsGamepadBackendHint(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    WindowsGamepadBackendHintDefault : WindowsGamepadBackendHint # 0
    WindowsGamepadBackendHintXInput : WindowsGamepadBackendHint # 1
    WindowsGamepadBackendHintWindowsGamingInput : WindowsGamepadBackendHint # 2


class WSABuildAndRunDeployTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LocalMachine : WSABuildAndRunDeployTarget # 0
    WindowsPhone : WSABuildAndRunDeployTarget # 1
    DevicePortal : WSABuildAndRunDeployTarget # 2


class WSABuildType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Debug : WSABuildType # 0
    Release : WSABuildType # 1
    Master : WSABuildType # 2


class WSASDK(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SDK80 : WSASDK # 0
    SDK81 : WSASDK # 1
    PhoneSDK81 : WSASDK # 2
    UniversalSDK81 : WSASDK # 3
    UWP : WSASDK # 4


class WSASubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AnyDevice : WSASubtarget # 0
    PC : WSASubtarget # 1
    Mobile : WSASubtarget # 2
    HoloLens : WSASubtarget # 3


class WSAUWPBuildType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    XAML : WSAUWPBuildType # 0
    D3D : WSAUWPBuildType # 1
    ExecutableOnly : WSAUWPBuildType # 2


class XboxBuildSubtarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Development : XboxBuildSubtarget # 0
    Master : XboxBuildSubtarget # 1
    Debug : XboxBuildSubtarget # 2


class XboxOneDeployDrive(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : XboxOneDeployDrive # 0
    Retail : XboxOneDeployDrive # 1
    Development : XboxOneDeployDrive # 2
    Ext1 : XboxOneDeployDrive # 3
    Ext2 : XboxOneDeployDrive # 4
    Ext3 : XboxOneDeployDrive # 5
    Ext4 : XboxOneDeployDrive # 6
    Ext5 : XboxOneDeployDrive # 7
    Ext6 : XboxOneDeployDrive # 8
    Ext7 : XboxOneDeployDrive # 9


class XboxOneDeployMethod(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Push : XboxOneDeployMethod # 0
    RunFromPC : XboxOneDeployMethod # 2
    Package : XboxOneDeployMethod # 3
    PackageStreaming : XboxOneDeployMethod # 4


class XboxOneEncryptionLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : XboxOneEncryptionLevel # 0
    DevkitCompatible : XboxOneEncryptionLevel # 1
    FullEncryption : XboxOneEncryptionLevel # 2


class XboxOneLoggingLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ErrorsOnly : XboxOneLoggingLevel # 1
    WarningsAndErrors : XboxOneLoggingLevel # 2
    AllLogging : XboxOneLoggingLevel # 4


class XboxOnePackageUpdateGranularity(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Chunk : XboxOnePackageUpdateGranularity # 1
    File : XboxOnePackageUpdateGranularity # 2


class XcodeBuildConfig(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Debug : XcodeBuildConfig # 0
    Release : XcodeBuildConfig # 1

