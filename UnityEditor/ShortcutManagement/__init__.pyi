import typing, abc
from UnityEngine import KeyCode
from System.Collections.Generic import IEnumerable_1
from System import IEquatable_1, Attribute, Enum

class ActiveProfileChangedEventArgs:
    def __init__(self, previousActiveProfileId: str, currentActiveProfileId: str) -> None: ...
    @property
    def currentActiveProfileId(self) -> str: ...
    @property
    def previousActiveProfileId(self) -> str: ...


class ClutchShortcutAttribute(ShortcutAttribute):
    @typing.overload
    def __init__(self, id: str, context: typing.Type[typing.Any] = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, context: typing.Type[typing.Any], defaultKeyCode: KeyCode, defaultShortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, context: typing.Type[typing.Any], tag: str, defaultKeyCode: KeyCode, defaultShortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, defaultKeyCode: KeyCode, defaultShortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class IShortcutManager(typing.Protocol):
    @property
    def activeProfileId(self) -> str: ...
    @activeProfileId.setter
    def activeProfileId(self, value: str) -> str: ...
    @abc.abstractmethod
    def ClearShortcutOverride(self, shortcutId: str) -> None: ...
    @abc.abstractmethod
    def CreateProfile(self, profileId: str) -> None: ...
    @abc.abstractmethod
    def DeleteProfile(self, profileId: str) -> None: ...
    @abc.abstractmethod
    def GetAvailableProfileIds(self) -> IEnumerable_1[str]: ...
    @abc.abstractmethod
    def GetAvailableShortcutIds(self) -> IEnumerable_1[str]: ...
    @abc.abstractmethod
    def GetShortcutBinding(self, shortcutId: str) -> ShortcutBinding: ...
    @abc.abstractmethod
    def IsProfileIdValid(self, profileId: str) -> bool: ...
    @abc.abstractmethod
    def IsProfileReadOnly(self, profileId: str) -> bool: ...
    @abc.abstractmethod
    def IsShortcutOverridden(self, shortcutId: str) -> bool: ...
    @abc.abstractmethod
    def RebindShortcut(self, shortcutId: str, binding: ShortcutBinding) -> None: ...
    @abc.abstractmethod
    def RenameProfile(self, profileId: str, newProfileId: str) -> None: ...


class KeyCombination(IEquatable_1[KeyCombination]):
    def __init__(self, keyCode: KeyCode, shortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @property
    def action(self) -> bool: ...
    @property
    def alt(self) -> bool: ...
    @property
    def control(self) -> bool: ...
    @property
    def keyCode(self) -> KeyCode: ...
    @property
    def modifiers(self) -> ShortcutModifiers: ...
    @property
    def shift(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: KeyCombination) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ShortcutArguments:
    context : typing.Any
    stage : ShortcutStage


class ShortcutAttribute(ShortcutBaseAttribute):
    @typing.overload
    def __init__(self, id: str, context: typing.Type[typing.Any] = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, context: typing.Type[typing.Any], defaultKeyCode: KeyCode, defaultShortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, context: typing.Type[typing.Any], tag: str, defaultKeyCode: KeyCode, defaultShortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @typing.overload
    def __init__(self, id: str, defaultKeyCode: KeyCode, defaultShortcutModifiers: ShortcutModifiers = ...) -> None: ...
    @property
    def displayName(self) -> str: ...
    @displayName.setter
    def displayName(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ShortcutBaseAttribute(Attribute):
    @property
    def TypeId(self) -> typing.Any: ...


class ShortcutBinding(IEquatable_1[ShortcutBinding]):
    def __init__(self, keyCombination: KeyCombination) -> None: ...
    @classmethod
    @property
    def empty(cls) -> ShortcutBinding: ...
    @property
    def keyCombinationSequence(self) -> IEnumerable_1[KeyCombination]: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ShortcutBinding) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ShortcutBindingChangedEventArgs:
    def __init__(self, shortcutId: str, oldBinding: ShortcutBinding, newBinding: ShortcutBinding) -> None: ...
    @property
    def newBinding(self) -> ShortcutBinding: ...
    @property
    def oldBinding(self) -> ShortcutBinding: ...
    @property
    def shortcutId(self) -> str: ...


class ShortcutManager(abc.ABC):
    defaultProfileId : str
    @classmethod
    @property
    def instance(cls) -> IShortcutManager: ...
    # Skipped RegisterTag due to it being static, abstract and generic.

    RegisterTag : RegisterTag_MethodGroup
    class RegisterTag_MethodGroup:
        @typing.overload
        def __call__(self, e: Enum) -> None:...
        @typing.overload
        def __call__(self, tag: str) -> None:...

    # Skipped UnregisterTag due to it being static, abstract and generic.

    UnregisterTag : UnregisterTag_MethodGroup
    class UnregisterTag_MethodGroup:
        @typing.overload
        def __call__(self, e: Enum) -> None:...
        @typing.overload
        def __call__(self, tag: str) -> None:...



class ShortcutModifiers(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ShortcutModifiers # 0
    Alt : ShortcutModifiers # 1
    Action : ShortcutModifiers # 2
    Shift : ShortcutModifiers # 4
    Control : ShortcutModifiers # 8


class ShortcutStage(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Begin : ShortcutStage # 0
    End : ShortcutStage # 1

