import typing, clr, abc
from UnityEngine import TerrainData, RectInt, Vector2Int, Texture2D, Texture, RaycastHit, Vector2, Terrain, Vector4, GUIContent, DetailPrototype, Material, HideFlags
from UnityEditor import SceneView, ScriptableSingleton_1
from System.Collections.Generic import List_1
from System import Array_1
from UnityEngine.TerrainTools import PaintContext, BrushTransform

class BrushGUIEditFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BrushGUIEditFlags # 0
    Select : BrushGUIEditFlags # 1
    Inspect : BrushGUIEditFlags # 2
    SelectAndInspect : BrushGUIEditFlags # 3
    Size : BrushGUIEditFlags # 4
    Opacity : BrushGUIEditFlags # 8
    All : BrushGUIEditFlags # 15


class DetailBrushBounds:
    def __init__(self, terrainData: TerrainData, ctx: PaintTreesDetailsContext, size: int, uvIndex: int = ...) -> None: ...
    @property
    def bounds(self) -> RectInt: ...
    @property
    def max(self) -> Vector2Int: ...
    @property
    def min(self) -> Vector2Int: ...
    def GetBrushOffset(self, xPos: int, yPos: int) -> Vector2Int: ...


class DetailBrushRepresentation:
    def __init__(self) -> None: ...
    def Update(self, brushTex: Texture2D, size: int, forceUpdate: bool = ...) -> None: ...
    # Skipped GetStrength due to it being static, abstract and generic.

    GetStrength : GetStrength_MethodGroup
    class GetStrength_MethodGroup:
        @typing.overload
        def __call__(self, position: Vector2Int) -> float:...
        @typing.overload
        def __call__(self, ix: int, iy: int) -> float:...



class IOnInspectorGUI(typing.Protocol):
    @abc.abstractmethod
    def Repaint(self, flags: RepaintFlags = ...) -> None: ...
    @abc.abstractmethod
    def ShowBrushesGUI(self, spacing: int = ..., flags: BrushGUIEditFlags = ..., textureResolutionPerTile: int = ...) -> None: ...


class IOnPaint(typing.Protocol):
    @property
    def brushSize(self) -> float: ...
    @property
    def brushStrength(self) -> float: ...
    @property
    def brushTexture(self) -> Texture: ...
    @property
    def hitValidTerrain(self) -> bool: ...
    @property
    def raycastHit(self) -> RaycastHit: ...
    @property
    def uv(self) -> Vector2: ...
    @abc.abstractmethod
    def Repaint(self, flags: RepaintFlags = ...) -> None: ...
    @abc.abstractmethod
    def RepaintAllInspectors(self) -> None: ...


class IOnSceneGUI(typing.Protocol):
    @property
    def brushSize(self) -> float: ...
    @property
    def brushStrength(self) -> float: ...
    @property
    def brushTexture(self) -> Texture: ...
    @property
    def controlId(self) -> int: ...
    @property
    def hitValidTerrain(self) -> bool: ...
    @property
    def raycastHit(self) -> RaycastHit: ...
    @property
    def sceneView(self) -> SceneView: ...
    @abc.abstractmethod
    def Repaint(self, flags: RepaintFlags = ...) -> None: ...


class PaintDetailsToolUtility(abc.ABC):
    @staticmethod
    def ClampedDetailPatchesGUI(terrain: Terrain, detailMinMaxHeight: clr.Reference[Vector2], clampedDetailPatchIconScreenPositions: clr.Reference[List_1[Vector4]]) -> int: ...
    @staticmethod
    def CopyDetailPrototype(terrain: Terrain, sourceTerrain: Terrain, sourceDetail: int) -> int: ...
    @staticmethod
    def DrawClampedDetailPatchGUI(mouseOnPatchIndex: int, clampedDetailPatchIconScreenPositions: List_1[Vector4], detailMinMaxHeight: Vector2, terrain: Terrain, editContext: IOnSceneGUI) -> None: ...
    @staticmethod
    def FindDetailPrototype(terrain: Terrain, sourceTerrain: Terrain, sourceDetail: int) -> int: ...
    @staticmethod
    def GetMaxDetailInstancesPerPatch(terrainData: TerrainData) -> int: ...
    @staticmethod
    def LoadDetailIcons(prototypes: Array_1[DetailPrototype]) -> Array_1[GUIContent]: ...
    @staticmethod
    def ResetDetailsUtilityData() -> None: ...


class PaintTreesDetailsContext:
    @property
    def neighborTerrains(self) -> Array_1[Terrain]: ...
    @neighborTerrains.setter
    def neighborTerrains(self, value: Array_1[Terrain]) -> Array_1[Terrain]: ...
    @property
    def neighborUvs(self) -> Array_1[Vector2]: ...
    @neighborUvs.setter
    def neighborUvs(self, value: Array_1[Vector2]) -> Array_1[Vector2]: ...
    @staticmethod
    def Create(terrain: Terrain, uv: Vector2) -> PaintTreesDetailsContext: ...


class RepaintFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UI : RepaintFlags # 1
    Scene : RepaintFlags # 2


class TerrainBrushPreviewMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SourceRenderTexture : TerrainBrushPreviewMode # 0
    DestinationRenderTexture : TerrainBrushPreviewMode # 1


class TerrainInspectorUtility(abc.ABC):
    @staticmethod
    def TerrainShaderValidationGUI(material: Material) -> None: ...


class TerrainPaintTool_GenericClasses(abc.ABCMeta):
    Generic_TerrainPaintTool_GenericClasses_TerrainPaintTool_1_T = typing.TypeVar('Generic_TerrainPaintTool_GenericClasses_TerrainPaintTool_1_T')
    def __getitem__(self, types : typing.Type[Generic_TerrainPaintTool_GenericClasses_TerrainPaintTool_1_T]) -> typing.Type[TerrainPaintTool_1[Generic_TerrainPaintTool_GenericClasses_TerrainPaintTool_1_T]]: ...

TerrainPaintTool : TerrainPaintTool_GenericClasses

TerrainPaintTool_1_T = typing.TypeVar('TerrainPaintTool_1_T')
class TerrainPaintTool_1(typing.Generic[TerrainPaintTool_1_T], ScriptableSingleton_1[TerrainPaintTool_1_T], abc.ABC):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @abc.abstractmethod
    def GetDescription(self) -> str: ...
    @abc.abstractmethod
    def GetName(self) -> str: ...
    def OnDisable(self) -> None: ...
    def OnEnable(self) -> None: ...
    def OnEnterToolMode(self) -> None: ...
    def OnExitToolMode(self) -> None: ...
    def OnInspectorGUI(self, terrain: Terrain, editContext: IOnInspectorGUI) -> None: ...
    def OnPaint(self, terrain: Terrain, editContext: IOnPaint) -> bool: ...
    def OnRenderBrushPreview(self, terrain: Terrain, editContext: IOnSceneGUI) -> None: ...
    def OnSceneGUI(self, terrain: Terrain, editContext: IOnSceneGUI) -> None: ...


class TerrainPaintUtilityEditor(abc.ABC):
    @staticmethod
    def DrawBrushPreview(heightmapPC: PaintContext, previewTexture: TerrainBrushPreviewMode, brushTexture: Texture, brushXform: BrushTransform, proceduralMaterial: Material, materialPassIndex: int) -> None: ...
    @staticmethod
    def GetDefaultBrushPreviewMaterial() -> Material: ...
    @staticmethod
    def ShowDefaultPreviewBrush(terrain: Terrain, brushTexture: Texture, brushSize: float) -> None: ...
    @staticmethod
    def UpdateTerrainDataUndo(terrainData: TerrainData, undoName: str) -> None: ...


class TerrainToolShortcutContext:
    # Skipped SelectPaintTool due to it being static, abstract and generic.

    SelectPaintTool : SelectPaintTool_MethodGroup
    class SelectPaintTool_MethodGroup:
        def __getitem__(self, t:typing.Type[SelectPaintTool_1_T1]) -> SelectPaintTool_1[SelectPaintTool_1_T1]: ...

        SelectPaintTool_1_T1 = typing.TypeVar('SelectPaintTool_1_T1')
        class SelectPaintTool_1(typing.Generic[SelectPaintTool_1_T1]):
            SelectPaintTool_1_T = TerrainToolShortcutContext.SelectPaintTool_MethodGroup.SelectPaintTool_1_T1
            def __call__(self) -> None:...



