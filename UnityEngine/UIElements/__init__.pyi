import typing, clr, abc
from UnityEngine import Rect, Matrix4x4, Event, Vector2, Texture2D, RenderTexture, Sprite, Vector3, ISerializationCallbackReceiver, Bounds, BoundsInt, EventModifiers, PenStatus, Color, TouchScreenKeyboardType, TouchScreenKeyboard, Font, Hash128, KeyCode, Texture, ScaleMode, FontStyle, TextAnchor, Quaternion, Gradient, ScriptableObject, HideFlags, Vector2Int, PenData, Touch, RectInt, Camera, MonoBehaviour, Component, GameObject, Transform, Vector3Int, Vector4, Color32
from System import Action_1, IEquatable_1, Action_2, Func_1, Action, IDisposable, Array_1, Func_2, MulticastDelegate, IAsyncResult, AsyncCallback, Enum, Attribute, Comparison_1
from System.Collections.Generic import IEnumerable_1, List_1, IList_1, ICollection_1, IEnumerator_1, Dictionary_2
from System.Collections import IList
from System.Reflection import MethodInfo
from UnityEngine.TextCore.Text import FontAsset, TextSettings, SpriteAsset, TextStyleSheet, UnicodeLineBreakingRules
from UnityEngine.UIElements.Experimental import ITransitionAnimations
from Unity.Collections import NativeSlice_1
from System.Threading import CancellationToken

class AbstractProgressBar(BindableElement, INotifyValueChanged_1[float], abc.ABC):
    def __init__(self) -> None: ...
    backgroundUssClassName : str
    containerUssClassName : str
    progressUssClassName : str
    titleContainerUssClassName : str
    titleUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highValue(self) -> float: ...
    @highValue.setter
    def highValue(self, value: float) -> float: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowValue(self) -> float: ...
    @lowValue.setter
    def lowValue(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: float) -> None: ...

    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Align(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : Align # 0
    FlexStart : Align # 1
    Center : Align # 2
    FlexEnd : Align # 3
    Stretch : Align # 4


class AlternatingRowBackground(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AlternatingRowBackground # 0
    ContentOnly : AlternatingRowBackground # 1
    All : AlternatingRowBackground # 2


class Angle(IEquatable_1[Angle]):
    @typing.overload
    def __init__(self, value: float) -> None: ...
    @typing.overload
    def __init__(self, value: float, unit: AngleUnit) -> None: ...
    @property
    def unit(self) -> AngleUnit: ...
    @unit.setter
    def unit(self, value: AngleUnit) -> AngleUnit: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @staticmethod
    def Degrees(value: float) -> Angle: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def Gradians(value: float) -> Angle: ...
    def __eq__(self, lhs: Angle, rhs: Angle) -> bool: ...
    # Operator not supported op_Implicit(value: Single)
    def __ne__(self, lhs: Angle, rhs: Angle) -> bool: ...
    @staticmethod
    def Radians(value: float) -> Angle: ...
    def ToDegrees(self) -> float: ...
    def ToGradians(self) -> float: ...
    def ToRadians(self) -> float: ...
    def ToString(self) -> str: ...
    def ToTurns(self) -> float: ...
    @staticmethod
    def Turns(value: float) -> Angle: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Angle) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class AngleUnit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Degree : AngleUnit # 0
    Gradian : AngleUnit # 1
    Radian : AngleUnit # 2
    Turn : AngleUnit # 3


class ArcDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Clockwise : ArcDirection # 0
    CounterClockwise : ArcDirection # 1


class AttachToPanelEvent(PanelChangedEventBase_1[AttachToPanelEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def destinationPanel(self) -> IPanel: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def originPanel(self) -> IPanel: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class Background(IEquatable_1[Background]):
    def __init__(self, t: Texture2D) -> None: ...
    @property
    def renderTexture(self) -> RenderTexture: ...
    @renderTexture.setter
    def renderTexture(self, value: RenderTexture) -> RenderTexture: ...
    @property
    def sprite(self) -> Sprite: ...
    @sprite.setter
    def sprite(self, value: Sprite) -> Sprite: ...
    @property
    def texture(self) -> Texture2D: ...
    @texture.setter
    def texture(self, value: Texture2D) -> Texture2D: ...
    @property
    def vectorImage(self) -> VectorImage: ...
    @vectorImage.setter
    def vectorImage(self, value: VectorImage) -> VectorImage: ...
    @staticmethod
    def FromRenderTexture(rt: RenderTexture) -> Background: ...
    @staticmethod
    def FromSprite(s: Sprite) -> Background: ...
    @staticmethod
    def FromTexture2D(t: Texture2D) -> Background: ...
    @staticmethod
    def FromVectorImage(vi: VectorImage) -> Background: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: Background, rhs: Background) -> bool: ...
    # Operator not supported op_Implicit(v: Texture2D)
    def __ne__(self, lhs: Background, rhs: Background) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Background) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class BackgroundPosition(IEquatable_1[BackgroundPosition]):
    @typing.overload
    def __init__(self, keyword: BackgroundPositionKeyword) -> None: ...
    @typing.overload
    def __init__(self, keyword: BackgroundPositionKeyword, offset: Length) -> None: ...
    keyword : BackgroundPositionKeyword
    offset : Length
    def GetHashCode(self) -> int: ...
    def __eq__(self, style1: BackgroundPosition, style2: BackgroundPosition) -> bool: ...
    def __ne__(self, style1: BackgroundPosition, style2: BackgroundPosition) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: BackgroundPosition) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class BackgroundPositionKeyword(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Center : BackgroundPositionKeyword # 0
    Top : BackgroundPositionKeyword # 1
    Bottom : BackgroundPositionKeyword # 2
    Left : BackgroundPositionKeyword # 3
    Right : BackgroundPositionKeyword # 4


class BackgroundRepeat(IEquatable_1[BackgroundRepeat]):
    def __init__(self, repeatX: Repeat, repeatY: Repeat) -> None: ...
    x : Repeat
    y : Repeat
    def GetHashCode(self) -> int: ...
    def __eq__(self, style1: BackgroundRepeat, style2: BackgroundRepeat) -> bool: ...
    def __ne__(self, style1: BackgroundRepeat, style2: BackgroundRepeat) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: BackgroundRepeat) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class BackgroundSize(IEquatable_1[BackgroundSize]):
    @typing.overload
    def __init__(self, sizeType: BackgroundSizeType) -> None: ...
    @typing.overload
    def __init__(self, sizeX: Length, sizeY: Length) -> None: ...
    @property
    def sizeType(self) -> BackgroundSizeType: ...
    @sizeType.setter
    def sizeType(self, value: BackgroundSizeType) -> BackgroundSizeType: ...
    @property
    def x(self) -> Length: ...
    @x.setter
    def x(self, value: Length) -> Length: ...
    @property
    def y(self) -> Length: ...
    @y.setter
    def y(self, value: Length) -> Length: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, style1: BackgroundSize, style2: BackgroundSize) -> bool: ...
    def __ne__(self, style1: BackgroundSize, style2: BackgroundSize) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: BackgroundSize) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class BackgroundSizeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Length : BackgroundSizeType # 0
    Cover : BackgroundSizeType # 1
    Contain : BackgroundSizeType # 2


class BaseBoolField(BaseField_1[bool]):
    def __init__(self, label: str) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: bool) -> None: ...


class BaseCompositeField_GenericClasses(abc.ABCMeta):
    Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TValueType = typing.TypeVar('Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TValueType')
    Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TField = typing.TypeVar('Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TField')
    Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TFieldValue = typing.TypeVar('Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TFieldValue')
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TValueType], typing.Type[Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TField], typing.Type[Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TFieldValue]]) -> typing.Type[BaseCompositeField_3[Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TValueType, Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TField, Generic_BaseCompositeField_GenericClasses_BaseCompositeField_3_TFieldValue]]: ...

BaseCompositeField : BaseCompositeField_GenericClasses

BaseCompositeField_3_TValueType = typing.TypeVar('BaseCompositeField_3_TValueType')
BaseCompositeField_3_TField = typing.TypeVar('BaseCompositeField_3_TField')
BaseCompositeField_3_TFieldValue = typing.TypeVar('BaseCompositeField_3_TFieldValue')
class BaseCompositeField_3(typing.Generic[BaseCompositeField_3_TValueType, BaseCompositeField_3_TField, BaseCompositeField_3_TFieldValue], BaseField_1[BaseCompositeField_3_TValueType]):
    fieldGroupUssClassName : str
    fieldUssClassName : str
    firstFieldVariantUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    multilineVariantUssClassName : str
    spacerUssClassName : str
    twoLinesVariantUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> BaseCompositeField_3_TValueType: ...
    @value.setter
    def value(self, value: BaseCompositeField_3_TValueType) -> BaseCompositeField_3_TValueType: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: BaseCompositeField_3_TValueType) -> None: ...


class BaseField_GenericClasses(abc.ABCMeta):
    Generic_BaseField_GenericClasses_BaseField_1_TValueType = typing.TypeVar('Generic_BaseField_GenericClasses_BaseField_1_TValueType')
    def __getitem__(self, types : typing.Type[Generic_BaseField_GenericClasses_BaseField_1_TValueType]) -> typing.Type[BaseField_1[Generic_BaseField_GenericClasses_BaseField_1_TValueType]]: ...

BaseField : BaseField_GenericClasses

BaseField_1_TValueType = typing.TypeVar('BaseField_1_TValueType')
class BaseField_1(typing.Generic[BaseField_1_TValueType], BindableElement, IMixedValueSupport, INotifyValueChanged_1[BaseField_1_TValueType], abc.ABC):
    alignedFieldUssClassName : str
    inputUssClassName : str
    labelDraggerVariantUssClassName : str
    labelUssClassName : str
    mixedValueLabelUssClassName : str
    noLabelVariantUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @labelElement.setter
    def labelElement(self, value: Label) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> BaseField_1_TValueType: ...
    @value.setter
    def value(self, value: BaseField_1_TValueType) -> BaseField_1_TValueType: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: BaseField_1_TValueType) -> None: ...

    UxmlTraits_GenericClasses_BaseField_1_TValueType = typing.TypeVar('UxmlTraits_GenericClasses_BaseField_1_TValueType')
    class UxmlTraits_GenericClasses(typing.Generic[UxmlTraits_GenericClasses_BaseField_1_TValueType], abc.ABCMeta):
        UxmlTraits_GenericClasses_BaseField_1_TValueType = BaseField_1.UxmlTraits_GenericClasses_BaseField_1_TValueType
        def __call__(self) -> BaseField_1.UxmlTraits_1[UxmlTraits_GenericClasses_BaseField_1_TValueType]: ...

    UxmlTraits : UxmlTraits_GenericClasses[BaseField_1_TValueType]

    UxmlTraits_1_TValueType = typing.TypeVar('UxmlTraits_1_TValueType')
    class UxmlTraits_1(typing.Generic[UxmlTraits_1_TValueType], BindableElement.UxmlTraits):
        UxmlTraits_1_TValueType = BaseField_1.UxmlTraits_1_TValueType
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class BaseFieldMouseDragger(abc.ABC):
    # Skipped SetDragZone due to it being static, abstract and generic.

    SetDragZone : SetDragZone_MethodGroup
    class SetDragZone_MethodGroup:
        @typing.overload
        def __call__(self, dragElement: VisualElement) -> None:...
        @typing.overload
        def __call__(self, dragElement: VisualElement, hotZone: Rect) -> None:...



class BaseFieldTraits_GenericClasses(abc.ABCMeta):
    Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueType = typing.TypeVar('Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueType')
    Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueUxmlAttributeType = typing.TypeVar('Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueUxmlAttributeType')
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueType], typing.Type[Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueUxmlAttributeType]]) -> typing.Type[BaseFieldTraits_2[Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueType, Generic_BaseFieldTraits_GenericClasses_BaseFieldTraits_2_TValueUxmlAttributeType]]: ...

BaseFieldTraits : BaseFieldTraits_GenericClasses

BaseFieldTraits_2_TValueType = typing.TypeVar('BaseFieldTraits_2_TValueType')
BaseFieldTraits_2_TValueUxmlAttributeType = typing.TypeVar('BaseFieldTraits_2_TValueUxmlAttributeType')
class BaseFieldTraits_2(typing.Generic[BaseFieldTraits_2_TValueType, BaseFieldTraits_2_TValueUxmlAttributeType], BaseField_1.UxmlTraits_1[BaseFieldTraits_2_TValueType]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...


class BaseListView(BaseVerticalCollectionView):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, itemsSource: IList, itemHeight: float = ...) -> None: ...
    arraySizeFieldUssClassName : str
    arraySizeFieldWithFooterUssClassName : str
    arraySizeFieldWithHeaderUssClassName : str
    emptyLabelUssClassName : str
    foldoutHeaderUssClassName : str
    footerAddButtonName : str
    footerRemoveButtonName : str
    footerUssClassName : str
    itemUssClassName : str
    listViewWithFooterUssClassName : str
    listViewWithHeaderUssClassName : str
    overMaxMultiEditLimitClassName : str
    reorderableItemContainerUssClassName : str
    reorderableItemHandleBarUssClassName : str
    reorderableItemHandleUssClassName : str
    reorderableItemUssClassName : str
    reorderableUssClassName : str
    scrollViewWithFooterUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerTitle(self) -> str: ...
    @headerTitle.setter
    def headerTitle(self, value: str) -> str: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def reorderMode(self) -> ListViewReorderMode: ...
    @reorderMode.setter
    def reorderMode(self, value: ListViewReorderMode) -> ListViewReorderMode: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAddRemoveFooter(self) -> bool: ...
    @showAddRemoveFooter.setter
    def showAddRemoveFooter(self, value: bool) -> bool: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def showBoundCollectionSize(self) -> bool: ...
    @showBoundCollectionSize.setter
    def showBoundCollectionSize(self, value: bool) -> bool: ...
    @property
    def showFoldoutHeader(self) -> bool: ...
    @showFoldoutHeader.setter
    def showFoldoutHeader(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> BaseListViewController: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetViewController(self, controller: CollectionViewController) -> None: ...

    class UxmlTraits(BaseVerticalCollectionView.UxmlTraits):
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class BaseListViewController(CollectionViewController):
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    def AddItems(self, itemCount: int) -> None: ...
    def ClearItems(self) -> None: ...
    def Move(self, index: int, newIndex: int) -> None: ...
    def NeedsDragHandle(self, index: int) -> bool: ...
    def RemoveItem(self, index: int) -> None: ...
    def RemoveItems(self, indices: List_1[int]) -> None: ...


class BasePopupField_GenericClasses(abc.ABCMeta):
    Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueType = typing.TypeVar('Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueType')
    Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueChoice = typing.TypeVar('Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueChoice')
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueType], typing.Type[Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueChoice]]) -> typing.Type[BasePopupField_2[Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueType, Generic_BasePopupField_GenericClasses_BasePopupField_2_TValueChoice]]: ...

BasePopupField : BasePopupField_GenericClasses

BasePopupField_2_TValueType = typing.TypeVar('BasePopupField_2_TValueType')
BasePopupField_2_TValueChoice = typing.TypeVar('BasePopupField_2_TValueChoice')
class BasePopupField_2(typing.Generic[BasePopupField_2_TValueType, BasePopupField_2_TValueChoice], BaseField_1[BasePopupField_2_TValueType]):
    arrowUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[BasePopupField_2_TValueChoice]: ...
    @choices.setter
    def choices(self, value: List_1[BasePopupField_2_TValueChoice]) -> List_1[BasePopupField_2_TValueChoice]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> BasePopupField_2_TValueType: ...
    @value.setter
    def value(self, value: BasePopupField_2_TValueType) -> BasePopupField_2_TValueType: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: BasePopupField_2_TValueType) -> None: ...


class BaseSlider_GenericClasses(abc.ABCMeta):
    Generic_BaseSlider_GenericClasses_BaseSlider_1_TValueType = typing.TypeVar('Generic_BaseSlider_GenericClasses_BaseSlider_1_TValueType')
    def __getitem__(self, types : typing.Type[Generic_BaseSlider_GenericClasses_BaseSlider_1_TValueType]) -> typing.Type[BaseSlider_1[Generic_BaseSlider_GenericClasses_BaseSlider_1_TValueType]]: ...

BaseSlider : BaseSlider_GenericClasses

BaseSlider_1_TValueType = typing.TypeVar('BaseSlider_1_TValueType')
class BaseSlider_1(typing.Generic[BaseSlider_1_TValueType], BaseField_1[BaseSlider_1_TValueType], IValueField_1[BaseSlider_1_TValueType]):
    dragContainerUssClassName : str
    draggerBorderUssClassName : str
    draggerUssClassName : str
    horizontalVariantUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    textFieldClassName : str
    trackerUssClassName : str
    ussClassName : str
    verticalVariantUssClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def direction(self) -> SliderDirection: ...
    @direction.setter
    def direction(self, value: SliderDirection) -> SliderDirection: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highValue(self) -> BaseSlider_1_TValueType: ...
    @highValue.setter
    def highValue(self, value: BaseSlider_1_TValueType) -> BaseSlider_1_TValueType: ...
    @property
    def inverted(self) -> bool: ...
    @inverted.setter
    def inverted(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowValue(self) -> BaseSlider_1_TValueType: ...
    @lowValue.setter
    def lowValue(self, value: BaseSlider_1_TValueType) -> BaseSlider_1_TValueType: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def pageSize(self) -> float: ...
    @pageSize.setter
    def pageSize(self, value: float) -> float: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def range(self) -> BaseSlider_1_TValueType: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showInputField(self) -> bool: ...
    @showInputField.setter
    def showInputField(self, value: bool) -> bool: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> BaseSlider_1_TValueType: ...
    @value.setter
    def value(self, value: BaseSlider_1_TValueType) -> BaseSlider_1_TValueType: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AdjustDragElement(self, factor: float) -> None: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: BaseSlider_1_TValueType) -> None: ...
    def SetValueWithoutNotify(self, newValue: BaseSlider_1_TValueType) -> None: ...

    UxmlTraits_GenericClasses_BaseSlider_1_TValueType = typing.TypeVar('UxmlTraits_GenericClasses_BaseSlider_1_TValueType')
    class UxmlTraits_GenericClasses(typing.Generic[UxmlTraits_GenericClasses_BaseSlider_1_TValueType], abc.ABCMeta):
        UxmlTraits_GenericClasses_BaseSlider_1_TValueType = BaseSlider_1.UxmlTraits_GenericClasses_BaseSlider_1_TValueType
        def __call__(self) -> BaseSlider_1.UxmlTraits_1[UxmlTraits_GenericClasses_BaseSlider_1_TValueType]: ...

    UxmlTraits : UxmlTraits_GenericClasses[BaseSlider_1_TValueType]

    UxmlTraits_1_TValueType = typing.TypeVar('UxmlTraits_1_TValueType')
    class UxmlTraits_1(typing.Generic[UxmlTraits_1_TValueType], BaseField_1.UxmlTraits_1[UxmlTraits_1_TValueType]):
        UxmlTraits_1_TValueType = BaseSlider_1.UxmlTraits_1_TValueType
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class BaseTreeView(BaseVerticalCollectionView):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, itemHeight: int) -> None: ...
    itemContentContainerUssClassName : str
    itemIndentsContainerUssClassName : str
    itemIndentUssClassName : str
    itemToggleUssClassName : str
    itemUssClassName : str
    ussClassName : str
    @property
    def autoExpand(self) -> bool: ...
    @autoExpand.setter
    def autoExpand(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> BaseTreeViewController: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AddToSelectionById(self, id: int) -> None: ...
    def CollapseAll(self) -> None: ...
    def CollapseItem(self, id: int, collapseAllChildren: bool = ...) -> None: ...
    def ExpandAll(self) -> None: ...
    def ExpandItem(self, id: int, expandAllChildren: bool = ...) -> None: ...
    def ExpandRootItems(self) -> None: ...
    def GetChildrenIdsForIndex(self, index: int) -> IEnumerable_1[int]: ...
    def GetIdForIndex(self, index: int) -> int: ...
    def GetParentIdForIndex(self, index: int) -> int: ...
    def GetRootIds(self) -> IEnumerable_1[int]: ...
    def GetTreeCount(self) -> int: ...
    def IsExpanded(self, id: int) -> bool: ...
    def RemoveFromSelectionById(self, id: int) -> None: ...
    def SetSelectionByIdWithoutNotify(self, ids: IEnumerable_1[int]) -> None: ...
    def SetViewController(self, controller: CollectionViewController) -> None: ...
    def TryRemoveItem(self, id: int) -> bool: ...
    # Skipped AddItem due to it being static, abstract and generic.

    AddItem : AddItem_MethodGroup
    class AddItem_MethodGroup:
        def __getitem__(self, t:typing.Type[AddItem_1_T1]) -> AddItem_1[AddItem_1_T1]: ...

        AddItem_1_T1 = typing.TypeVar('AddItem_1_T1')
        class AddItem_1(typing.Generic[AddItem_1_T1]):
            AddItem_1_T = BaseTreeView.AddItem_MethodGroup.AddItem_1_T1
            def __call__(self, item: TreeViewItemData_1[AddItem_1_T], parentId: int = ..., childIndex: int = ..., rebuildTree: bool = ...) -> None:...


    # Skipped GetItemDataForId due to it being static, abstract and generic.

    GetItemDataForId : GetItemDataForId_MethodGroup
    class GetItemDataForId_MethodGroup:
        def __getitem__(self, t:typing.Type[GetItemDataForId_1_T1]) -> GetItemDataForId_1[GetItemDataForId_1_T1]: ...

        GetItemDataForId_1_T1 = typing.TypeVar('GetItemDataForId_1_T1')
        class GetItemDataForId_1(typing.Generic[GetItemDataForId_1_T1]):
            GetItemDataForId_1_T = BaseTreeView.GetItemDataForId_MethodGroup.GetItemDataForId_1_T1
            def __call__(self, id: int) -> GetItemDataForId_1_T:...


    # Skipped GetItemDataForIndex due to it being static, abstract and generic.

    GetItemDataForIndex : GetItemDataForIndex_MethodGroup
    class GetItemDataForIndex_MethodGroup:
        def __getitem__(self, t:typing.Type[GetItemDataForIndex_1_T1]) -> GetItemDataForIndex_1[GetItemDataForIndex_1_T1]: ...

        GetItemDataForIndex_1_T1 = typing.TypeVar('GetItemDataForIndex_1_T1')
        class GetItemDataForIndex_1(typing.Generic[GetItemDataForIndex_1_T1]):
            GetItemDataForIndex_1_T = BaseTreeView.GetItemDataForIndex_MethodGroup.GetItemDataForIndex_1_T1
            def __call__(self, index: int) -> GetItemDataForIndex_1_T:...


    # Skipped GetSelectedItems due to it being static, abstract and generic.

    GetSelectedItems : GetSelectedItems_MethodGroup
    class GetSelectedItems_MethodGroup:
        def __getitem__(self, t:typing.Type[GetSelectedItems_1_T1]) -> GetSelectedItems_1[GetSelectedItems_1_T1]: ...

        GetSelectedItems_1_T1 = typing.TypeVar('GetSelectedItems_1_T1')
        class GetSelectedItems_1(typing.Generic[GetSelectedItems_1_T1]):
            GetSelectedItems_1_T = BaseTreeView.GetSelectedItems_MethodGroup.GetSelectedItems_1_T1
            def __call__(self) -> IEnumerable_1[TreeViewItemData_1[GetSelectedItems_1_T]]:...


    # Skipped SetRootItems due to it being static, abstract and generic.

    SetRootItems : SetRootItems_MethodGroup
    class SetRootItems_MethodGroup:
        def __getitem__(self, t:typing.Type[SetRootItems_1_T1]) -> SetRootItems_1[SetRootItems_1_T1]: ...

        SetRootItems_1_T1 = typing.TypeVar('SetRootItems_1_T1')
        class SetRootItems_1(typing.Generic[SetRootItems_1_T1]):
            SetRootItems_1_T = BaseTreeView.SetRootItems_MethodGroup.SetRootItems_1_T1
            def __call__(self, rootItems: IList_1[TreeViewItemData_1[SetRootItems_1_T]]) -> None:...


    # Skipped SetSelectionById due to it being static, abstract and generic.

    SetSelectionById : SetSelectionById_MethodGroup
    class SetSelectionById_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> None:...
        @typing.overload
        def __call__(self, ids: IEnumerable_1[int]) -> None:...


    class UxmlTraits(BaseVerticalCollectionView.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class BaseTreeViewController(CollectionViewController):
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    def CollapseAll(self) -> None: ...
    def CollapseItem(self, id: int, collapseAllChildren: bool) -> None: ...
    def CollapseItemByIndex(self, index: int, collapseAllChildren: bool) -> None: ...
    def ExpandAll(self) -> None: ...
    def ExpandItem(self, id: int, expandAllChildren: bool, refresh: bool = ...) -> None: ...
    def ExpandItemByIndex(self, index: int, expandAllChildren: bool, refresh: bool = ...) -> None: ...
    @abc.abstractmethod
    def GetAllItemIds(self, rootIds: IEnumerable_1[int] = ...) -> IEnumerable_1[int]: ...
    def GetChildIndexForId(self, id: int) -> int: ...
    @abc.abstractmethod
    def GetChildrenIds(self, id: int) -> IEnumerable_1[int]: ...
    def GetChildrenIdsByIndex(self, index: int) -> IEnumerable_1[int]: ...
    def GetIdForIndex(self, index: int) -> int: ...
    def GetIndexForId(self, id: int) -> int: ...
    @abc.abstractmethod
    def GetParentId(self, id: int) -> int: ...
    def GetRootItemIds(self) -> IEnumerable_1[int]: ...
    def GetTreeItemsCount(self) -> int: ...
    def HasChildren(self, id: int) -> bool: ...
    def HasChildrenByIndex(self, index: int) -> bool: ...
    def IsExpanded(self, id: int) -> bool: ...
    def IsExpandedByIndex(self, index: int) -> bool: ...
    @abc.abstractmethod
    def Move(self, id: int, newParentId: int, childIndex: int = ..., rebuildTree: bool = ...) -> None: ...
    def RebuildTree(self) -> None: ...
    @abc.abstractmethod
    def TryRemoveItem(self, id: int, rebuildTree: bool = ...) -> bool: ...


class BaseUxmlFactory_GenericClasses(abc.ABCMeta):
    Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TCreatedType = typing.TypeVar('Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TCreatedType')
    Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TTraits = typing.TypeVar('Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TTraits')
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TCreatedType], typing.Type[Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TTraits]]) -> typing.Type[BaseUxmlFactory_2[Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TCreatedType, Generic_BaseUxmlFactory_GenericClasses_BaseUxmlFactory_2_TTraits]]: ...

BaseUxmlFactory : BaseUxmlFactory_GenericClasses

BaseUxmlFactory_2_TCreatedType = typing.TypeVar('BaseUxmlFactory_2_TCreatedType')
BaseUxmlFactory_2_TTraits = typing.TypeVar('BaseUxmlFactory_2_TTraits')
class BaseUxmlFactory_2(typing.Generic[BaseUxmlFactory_2_TCreatedType, BaseUxmlFactory_2_TTraits], abc.ABC):
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    def AcceptsAttributeBag(self, bag: IUxmlAttributes, cc: CreationContext) -> bool: ...


class BaseUxmlTraits(abc.ABC):
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...


class BaseVerticalCollectionView(BindableElement, ISerializationCallbackReceiver, abc.ABC):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, itemsSource: IList, itemHeight: float = ...) -> None: ...
    @typing.overload
    def __init__(self, itemsSource: IList, itemHeight: float = ..., makeItem: Func_1[VisualElement] = ..., bindItem: Action_2[VisualElement, int] = ...) -> None: ...
    borderUssClassName : str
    dragHoverBarUssClassName : str
    dragHoverMarkerUssClassName : str
    itemAlternativeBackgroundUssClassName : str
    itemDragHoverUssClassName : str
    itemSelectedVariantUssClassName : str
    itemUssClassName : str
    listScrollViewUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def AddToSelection(self, index: int) -> None: ...
    def ClearSelection(self) -> None: ...
    def GetRootElementForId(self, id: int) -> VisualElement: ...
    def GetRootElementForIndex(self, index: int) -> VisualElement: ...
    def OnKeyDown(self, evt: KeyDownEvent) -> None: ...
    def Rebuild(self) -> None: ...
    def Refresh(self) -> None: ...
    def RefreshItem(self, index: int) -> None: ...
    def RefreshItems(self) -> None: ...
    def RemoveFromSelection(self, index: int) -> None: ...
    def ScrollTo(self, visualElement: VisualElement) -> None: ...
    def ScrollToId(self, id: int) -> None: ...
    def ScrollToItem(self, index: int) -> None: ...
    def ScrollToItemById(self, id: int) -> None: ...
    def SetSelectionWithoutNotify(self, indices: IEnumerable_1[int]) -> None: ...
    def SetViewController(self, controller: CollectionViewController) -> None: ...
    # Skipped SetSelection due to it being static, abstract and generic.

    SetSelection : SetSelection_MethodGroup
    class SetSelection_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, indices: IEnumerable_1[int]) -> None:...


    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class BindableElement(VisualElement, IBindable):
    def __init__(self) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[BindableElement, BindableElement.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class BlurEvent(FocusEventBase_1[BlurEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def direction(self) -> FocusChangeDirection: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> Focusable: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class BoundsField(BaseField_1[Bounds]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    centerFieldUssClassName : str
    extentsFieldUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Bounds: ...
    @value.setter
    def value(self, value: Bounds) -> Bounds: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: Bounds) -> None: ...

    class UxmlFactory(UxmlFactory_2[BoundsField, BoundsField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Bounds]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class BoundsIntField(BaseField_1[BoundsInt]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    positionUssClassName : str
    sizeUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> BoundsInt: ...
    @value.setter
    def value(self, value: BoundsInt) -> BoundsInt: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: BoundsInt) -> None: ...

    class UxmlFactory(UxmlFactory_2[BoundsIntField, BoundsIntField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[BoundsInt]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Box(VisualElement):
    def __init__(self) -> None: ...
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_1[Box]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class Button(TextElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, clickEvent: Action) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def clickable(self) -> Clickable: ...
    @clickable.setter
    def clickable(self, value: Clickable) -> Clickable: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Button, Button.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class CallbackEventHandler(IEventHandler, abc.ABC):
    def HandleEvent(self, evt: EventBase) -> None: ...
    def HasBubbleUpHandlers(self) -> bool: ...
    def HasTrickleDownHandlers(self) -> bool: ...
    @abc.abstractmethod
    def SendEvent(self, e: EventBase) -> None: ...
    # Skipped RegisterCallback due to it being static, abstract and generic.

    RegisterCallback : RegisterCallback_MethodGroup
    class RegisterCallback_MethodGroup:
        @typing.overload
        def __getitem__(self, t:typing.Type[RegisterCallback_1_T1]) -> RegisterCallback_1[RegisterCallback_1_T1]: ...

        RegisterCallback_1_T1 = typing.TypeVar('RegisterCallback_1_T1')
        class RegisterCallback_1(typing.Generic[RegisterCallback_1_T1]):
            RegisterCallback_1_TEventType = CallbackEventHandler.RegisterCallback_MethodGroup.RegisterCallback_1_T1
            def __call__(self, callback: EventCallback_1[RegisterCallback_1_TEventType], useTrickleDown: TrickleDown = ...) -> None:...

        @typing.overload
        def __getitem__(self, t:typing.Tuple[typing.Type[RegisterCallback_2_T1], typing.Type[RegisterCallback_2_T2]]) -> RegisterCallback_2[RegisterCallback_2_T1, RegisterCallback_2_T2]: ...

        RegisterCallback_2_T1 = typing.TypeVar('RegisterCallback_2_T1')
        RegisterCallback_2_T2 = typing.TypeVar('RegisterCallback_2_T2')
        class RegisterCallback_2(typing.Generic[RegisterCallback_2_T1, RegisterCallback_2_T2]):
            RegisterCallback_2_TEventType = CallbackEventHandler.RegisterCallback_MethodGroup.RegisterCallback_2_T1
            RegisterCallback_2_TUserArgsType = CallbackEventHandler.RegisterCallback_MethodGroup.RegisterCallback_2_T2
            def __call__(self, callback: EventCallback_2[RegisterCallback_2_TEventType, RegisterCallback_2_TUserArgsType], userArgs: RegisterCallback_2_TUserArgsType, useTrickleDown: TrickleDown = ...) -> None:...


    # Skipped UnregisterCallback due to it being static, abstract and generic.

    UnregisterCallback : UnregisterCallback_MethodGroup
    class UnregisterCallback_MethodGroup:
        @typing.overload
        def __getitem__(self, t:typing.Type[UnregisterCallback_1_T1]) -> UnregisterCallback_1[UnregisterCallback_1_T1]: ...

        UnregisterCallback_1_T1 = typing.TypeVar('UnregisterCallback_1_T1')
        class UnregisterCallback_1(typing.Generic[UnregisterCallback_1_T1]):
            UnregisterCallback_1_TEventType = CallbackEventHandler.UnregisterCallback_MethodGroup.UnregisterCallback_1_T1
            def __call__(self, callback: EventCallback_1[UnregisterCallback_1_TEventType], useTrickleDown: TrickleDown = ...) -> None:...

        @typing.overload
        def __getitem__(self, t:typing.Tuple[typing.Type[UnregisterCallback_2_T1], typing.Type[UnregisterCallback_2_T2]]) -> UnregisterCallback_2[UnregisterCallback_2_T1, UnregisterCallback_2_T2]: ...

        UnregisterCallback_2_T1 = typing.TypeVar('UnregisterCallback_2_T1')
        UnregisterCallback_2_T2 = typing.TypeVar('UnregisterCallback_2_T2')
        class UnregisterCallback_2(typing.Generic[UnregisterCallback_2_T1, UnregisterCallback_2_T2]):
            UnregisterCallback_2_TEventType = CallbackEventHandler.UnregisterCallback_MethodGroup.UnregisterCallback_2_T1
            UnregisterCallback_2_TUserArgsType = CallbackEventHandler.UnregisterCallback_MethodGroup.UnregisterCallback_2_T2
            def __call__(self, callback: EventCallback_2[UnregisterCallback_2_TEventType, UnregisterCallback_2_TUserArgsType], useTrickleDown: TrickleDown = ...) -> None:...




class ChangeEvent_GenericClasses(abc.ABCMeta):
    Generic_ChangeEvent_GenericClasses_ChangeEvent_1_T = typing.TypeVar('Generic_ChangeEvent_GenericClasses_ChangeEvent_1_T')
    def __getitem__(self, types : typing.Type[Generic_ChangeEvent_GenericClasses_ChangeEvent_1_T]) -> typing.Type[ChangeEvent_1[Generic_ChangeEvent_GenericClasses_ChangeEvent_1_T]]: ...

ChangeEvent : ChangeEvent_GenericClasses

ChangeEvent_1_T = typing.TypeVar('ChangeEvent_1_T')
class ChangeEvent_1(typing.Generic[ChangeEvent_1_T], EventBase_1[ChangeEvent_1[ChangeEvent_1_T]], IChangeEvent):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def newValue(self) -> ChangeEvent_1_T: ...
    @newValue.setter
    def newValue(self, value: ChangeEvent_1_T) -> ChangeEvent_1_T: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def previousValue(self) -> ChangeEvent_1_T: ...
    @previousValue.setter
    def previousValue(self, value: ChangeEvent_1_T) -> ChangeEvent_1_T: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(previousValue: ChangeEvent_1_T, newValue: ChangeEvent_1_T) -> ChangeEvent_1[ChangeEvent_1_T]: ...


class Clickable(PointerManipulator):
    @typing.overload
    def __init__(self, handler: Action_1[EventBase]) -> None: ...
    @typing.overload
    def __init__(self, handler: Action) -> None: ...
    @typing.overload
    def __init__(self, handler: Action, delay: int, interval: int) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def lastMousePosition(self) -> Vector2: ...
    @lastMousePosition.setter
    def lastMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class ClickEvent(PointerEventBase_1[ClickEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class CollectionViewController(IDisposable, abc.ABC):
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    def Dispose(self) -> None: ...
    def GetIdForIndex(self, index: int) -> int: ...
    def GetIndexForId(self, id: int) -> int: ...
    def GetItemForIndex(self, index: int) -> typing.Any: ...
    def GetItemsCount(self) -> int: ...
    def SetView(self, collectionView: BaseVerticalCollectionView) -> None: ...


class CollectionVirtualizationMethod(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FixedHeight : CollectionVirtualizationMethod # 0
    DynamicHeight : CollectionVirtualizationMethod # 1


class Column:
    def __init__(self) -> None: ...
    @property
    def bindCell(self) -> Action_2[VisualElement, int]: ...
    @bindCell.setter
    def bindCell(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def bindHeader(self) -> Action_1[VisualElement]: ...
    @bindHeader.setter
    def bindHeader(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def collection(self) -> Columns: ...
    @collection.setter
    def collection(self, value: Columns) -> Columns: ...
    @property
    def destroyCell(self) -> Action_1[VisualElement]: ...
    @destroyCell.setter
    def destroyCell(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def destroyHeader(self) -> Action_1[VisualElement]: ...
    @destroyHeader.setter
    def destroyHeader(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def icon(self) -> Background: ...
    @icon.setter
    def icon(self, value: Background) -> Background: ...
    @property
    def makeCell(self) -> Func_1[VisualElement]: ...
    @makeCell.setter
    def makeCell(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def makeHeader(self) -> Func_1[VisualElement]: ...
    @makeHeader.setter
    def makeHeader(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def maxWidth(self) -> Length: ...
    @maxWidth.setter
    def maxWidth(self, value: Length) -> Length: ...
    @property
    def minWidth(self) -> Length: ...
    @minWidth.setter
    def minWidth(self, value: Length) -> Length: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def optional(self) -> bool: ...
    @optional.setter
    def optional(self, value: bool) -> bool: ...
    @property
    def resizable(self) -> bool: ...
    @resizable.setter
    def resizable(self, value: bool) -> bool: ...
    @property
    def sortable(self) -> bool: ...
    @sortable.setter
    def sortable(self, value: bool) -> bool: ...
    @property
    def stretchable(self) -> bool: ...
    @stretchable.setter
    def stretchable(self, value: bool) -> bool: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def unbindCell(self) -> Action_2[VisualElement, int]: ...
    @unbindCell.setter
    def unbindCell(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def unbindHeader(self) -> Action_1[VisualElement]: ...
    @unbindHeader.setter
    def unbindHeader(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def width(self) -> Length: ...
    @width.setter
    def width(self, value: Length) -> Length: ...


class Columns(ICollection_1[Column]):
    def __init__(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> Column: ...
    @property
    def Item(self) -> Column: ...
    @property
    def primaryColumnName(self) -> str: ...
    @primaryColumnName.setter
    def primaryColumnName(self, value: str) -> str: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def resizable(self) -> bool: ...
    @resizable.setter
    def resizable(self, value: bool) -> bool: ...
    @property
    def resizePreview(self) -> bool: ...
    @resizePreview.setter
    def resizePreview(self, value: bool) -> bool: ...
    @property
    def stretchMode(self) -> Columns.StretchMode: ...
    @stretchMode.setter
    def stretchMode(self, value: Columns.StretchMode) -> Columns.StretchMode: ...
    def Add(self, item: Column) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: Array_1[Column], arrayIndex: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator_1[Column]: ...
    def IndexOf(self, column: Column) -> int: ...
    def Insert(self, index: int, column: Column) -> None: ...
    def IsPrimary(self, column: Column) -> bool: ...
    def Remove(self, column: Column) -> bool: ...
    def RemoveAt(self, index: int) -> None: ...
    def ReorderDisplay(self, from_: int, to: int) -> None: ...
    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> bool:...
        @typing.overload
        def __call__(self, item: Column) -> bool:...


    class StretchMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Grow : Columns.StretchMode # 0
        GrowAndFill : Columns.StretchMode # 1



class CommandEventBase_GenericClasses(abc.ABCMeta):
    Generic_CommandEventBase_GenericClasses_CommandEventBase_1_T = typing.TypeVar('Generic_CommandEventBase_GenericClasses_CommandEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_CommandEventBase_GenericClasses_CommandEventBase_1_T]) -> typing.Type[CommandEventBase_1[Generic_CommandEventBase_GenericClasses_CommandEventBase_1_T]]: ...

CommandEventBase : CommandEventBase_GenericClasses

CommandEventBase_1_T = typing.TypeVar('CommandEventBase_1_T')
class CommandEventBase_1(typing.Generic[CommandEventBase_1_T], EventBase_1[CommandEventBase_1_T], ICommandEvent):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandName(self) -> str: ...
    @commandName.setter
    def commandName(self, value: str) -> str: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    # Skipped GetPooled due to it being static, abstract and generic.

    GetPooled : GetPooled_MethodGroup[CommandEventBase_1_T]
    GetPooled_MethodGroup_CommandEventBase_1_T = typing.TypeVar('GetPooled_MethodGroup_CommandEventBase_1_T')
    class GetPooled_MethodGroup(typing.Generic[GetPooled_MethodGroup_CommandEventBase_1_T]):
        GetPooled_MethodGroup_CommandEventBase_1_T = CommandEventBase_1.GetPooled_MethodGroup_CommandEventBase_1_T
        @typing.overload
        def __call__(self, commandName: str) -> GetPooled_MethodGroup_CommandEventBase_1_T:...
        @typing.overload
        def __call__(self, systemEvent: Event) -> GetPooled_MethodGroup_CommandEventBase_1_T:...



class ContextClickEvent(MouseEventBase_1[ContextClickEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class ContextType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Player : ContextType # 0
    Editor : ContextType # 1


class ContextualMenuManager(abc.ABC):
    def DisplayMenu(self, triggerEvent: EventBase, target: IEventHandler) -> None: ...
    @abc.abstractmethod
    def DisplayMenuIfEventMatches(self, evt: EventBase, eventHandler: IEventHandler) -> None: ...


class ContextualMenuManipulator(MouseManipulator):
    def __init__(self, menuBuilder: Action_1[ContextualMenuPopulateEvent]) -> None: ...
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class ContextualMenuPopulateEvent(MouseEventBase_1[ContextualMenuPopulateEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def menu(self) -> DropdownMenu: ...
    @menu.setter
    def menu(self, value: DropdownMenu) -> DropdownMenu: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def triggerEvent(self) -> EventBase: ...
    @triggerEvent.setter
    def triggerEvent(self, value: EventBase) -> EventBase: ...
    @staticmethod
    def GetPooled(triggerEvent: EventBase, menu: DropdownMenu, target: IEventHandler, menuManager: ContextualMenuManager) -> ContextualMenuPopulateEvent: ...


class CreationContext(IEquatable_1[CreationContext]):
    Default : CreationContext
    @property
    def slotInsertionPoints(self) -> Dictionary_2[str, VisualElement]: ...
    @slotInsertionPoints.setter
    def slotInsertionPoints(self, value: Dictionary_2[str, VisualElement]) -> Dictionary_2[str, VisualElement]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...
    @property
    def visualTreeAsset(self) -> VisualTreeAsset: ...
    @visualTreeAsset.setter
    def visualTreeAsset(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, context1: CreationContext, context2: CreationContext) -> bool: ...
    def __ne__(self, context1: CreationContext, context2: CreationContext) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: CreationContext) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class Cursor(IEquatable_1[Cursor]):
    @property
    def hotspot(self) -> Vector2: ...
    @hotspot.setter
    def hotspot(self, value: Vector2) -> Vector2: ...
    @property
    def texture(self) -> Texture2D: ...
    @texture.setter
    def texture(self, value: Texture2D) -> Texture2D: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, style1: Cursor, style2: Cursor) -> bool: ...
    def __ne__(self, style1: Cursor, style2: Cursor) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Cursor) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class CustomStyleProperty_GenericClasses(abc.ABCMeta):
    Generic_CustomStyleProperty_GenericClasses_CustomStyleProperty_1_T = typing.TypeVar('Generic_CustomStyleProperty_GenericClasses_CustomStyleProperty_1_T')
    def __getitem__(self, types : typing.Type[Generic_CustomStyleProperty_GenericClasses_CustomStyleProperty_1_T]) -> typing.Type[CustomStyleProperty_1[Generic_CustomStyleProperty_GenericClasses_CustomStyleProperty_1_T]]: ...

CustomStyleProperty : CustomStyleProperty_GenericClasses

CustomStyleProperty_1_T = typing.TypeVar('CustomStyleProperty_1_T')
class CustomStyleProperty_1(typing.Generic[CustomStyleProperty_1_T], IEquatable_1[CustomStyleProperty_1[CustomStyleProperty_1_T]]):
    def __init__(self, propertyName: str) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, a: CustomStyleProperty_1[CustomStyleProperty_1_T], b: CustomStyleProperty_1[CustomStyleProperty_1_T]) -> bool: ...
    def __ne__(self, a: CustomStyleProperty_1[CustomStyleProperty_1_T], b: CustomStyleProperty_1[CustomStyleProperty_1_T]) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup[CustomStyleProperty_1_T]
    Equals_MethodGroup_CustomStyleProperty_1_T = typing.TypeVar('Equals_MethodGroup_CustomStyleProperty_1_T')
    class Equals_MethodGroup(typing.Generic[Equals_MethodGroup_CustomStyleProperty_1_T]):
        Equals_MethodGroup_CustomStyleProperty_1_T = CustomStyleProperty_1.Equals_MethodGroup_CustomStyleProperty_1_T
        @typing.overload
        def __call__(self, other: CustomStyleProperty_1[Equals_MethodGroup_CustomStyleProperty_1_T]) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class CustomStyleResolvedEvent(EventBase_1[CustomStyleResolvedEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class DeltaSpeed(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fast : DeltaSpeed # 0
    Normal : DeltaSpeed # 1
    Slow : DeltaSpeed # 2


class DetachFromPanelEvent(PanelChangedEventBase_1[DetachFromPanelEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def destinationPanel(self) -> IPanel: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def originPanel(self) -> IPanel: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class DisplayStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Flex : DisplayStyle # 0
    None_ : DisplayStyle # 1


class DoubleField(TextValueField_1[float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: float) -> None: ...

    class UxmlFactory(UxmlFactory_2[DoubleField, DoubleField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[float, UxmlDoubleAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class DragAndDropEventBase_GenericClasses(abc.ABCMeta):
    Generic_DragAndDropEventBase_GenericClasses_DragAndDropEventBase_1_T = typing.TypeVar('Generic_DragAndDropEventBase_GenericClasses_DragAndDropEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_DragAndDropEventBase_GenericClasses_DragAndDropEventBase_1_T]) -> typing.Type[DragAndDropEventBase_1[Generic_DragAndDropEventBase_GenericClasses_DragAndDropEventBase_1_T]]: ...

DragAndDropEventBase : DragAndDropEventBase_GenericClasses

DragAndDropEventBase_1_T = typing.TypeVar('DragAndDropEventBase_1_T')
class DragAndDropEventBase_1(typing.Generic[DragAndDropEventBase_1_T], MouseEventBase_1[DragAndDropEventBase_1_T], IDragAndDropEvent):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class DragEnterEvent(DragAndDropEventBase_1[DragEnterEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class DragExitedEvent(DragAndDropEventBase_1[DragExitedEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> DragExitedEvent: ...


class DragLeaveEvent(DragAndDropEventBase_1[DragLeaveEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class DragPerformEvent(DragAndDropEventBase_1[DragPerformEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class DragUpdatedEvent(DragAndDropEventBase_1[DragUpdatedEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> DragUpdatedEvent: ...


class DropdownField(PopupField_1[str]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, choices: List_1[str], defaultIndex: int, formatSelectedValueCallback: Func_2[str, str] = ..., formatListItemCallback: Func_2[str, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, choices: List_1[str], defaultValue: str, formatSelectedValueCallback: Func_2[str, str] = ..., formatListItemCallback: Func_2[str, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    @typing.overload
    def __init__(self, label: str, choices: List_1[str], defaultIndex: int, formatSelectedValueCallback: Func_2[str, str] = ..., formatListItemCallback: Func_2[str, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, label: str, choices: List_1[str], defaultValue: str, formatSelectedValueCallback: Func_2[str, str] = ..., formatListItemCallback: Func_2[str, str] = ...) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[str]: ...
    @choices.setter
    def choices(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatListItemCallback(self) -> Func_2[str, str]: ...
    @formatListItemCallback.setter
    def formatListItemCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def formatSelectedValueCallback(self) -> Func_2[str, str]: ...
    @formatSelectedValueCallback.setter
    def formatSelectedValueCallback(self, value: Func_2[str, str]) -> Func_2[str, str]: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[DropdownField, DropdownField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[str]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class DropdownMenu:
    def __init__(self) -> None: ...
    def AppendSeparator(self, subMenuPath: str = ...) -> None: ...
    def ClearItems(self) -> None: ...
    def InsertSeparator(self, subMenuPath: str, atIndex: int) -> None: ...
    def MenuItems(self) -> List_1[DropdownMenuItem]: ...
    def PrepareForDisplay(self, e: EventBase) -> None: ...
    def RemoveItemAt(self, index: int) -> None: ...
    # Skipped AppendAction due to it being static, abstract and generic.

    AppendAction : AppendAction_MethodGroup
    class AppendAction_MethodGroup:
        @typing.overload
        def __call__(self, actionName: str, action: Action_1[DropdownMenuAction], status: DropdownMenuAction.Status = ...) -> None:...
        @typing.overload
        def __call__(self, actionName: str, action: Action_1[DropdownMenuAction], actionStatusCallback: Func_2[DropdownMenuAction, DropdownMenuAction.Status], userData: typing.Any = ...) -> None:...

    # Skipped InsertAction due to it being static, abstract and generic.

    InsertAction : InsertAction_MethodGroup
    class InsertAction_MethodGroup:
        @typing.overload
        def __call__(self, atIndex: int, actionName: str, action: Action_1[DropdownMenuAction], status: DropdownMenuAction.Status = ...) -> None:...
        @typing.overload
        def __call__(self, atIndex: int, actionName: str, action: Action_1[DropdownMenuAction], actionStatusCallback: Func_2[DropdownMenuAction, DropdownMenuAction.Status], userData: typing.Any = ...) -> None:...



class DropdownMenuAction(DropdownMenuItem):
    def __init__(self, actionName: str, actionCallback: Action_1[DropdownMenuAction], actionStatusCallback: Func_2[DropdownMenuAction, DropdownMenuAction.Status], userData: typing.Any = ...) -> None: ...
    @property
    def eventInfo(self) -> DropdownMenuEventInfo: ...
    @eventInfo.setter
    def eventInfo(self, value: DropdownMenuEventInfo) -> DropdownMenuEventInfo: ...
    @property
    def name(self) -> str: ...
    @property
    def status(self) -> DropdownMenuAction.Status: ...
    @status.setter
    def status(self, value: DropdownMenuAction.Status) -> DropdownMenuAction.Status: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @staticmethod
    def AlwaysDisabled(a: DropdownMenuAction) -> DropdownMenuAction.Status: ...
    @staticmethod
    def AlwaysEnabled(a: DropdownMenuAction) -> DropdownMenuAction.Status: ...
    def Execute(self) -> None: ...
    def UpdateActionStatus(self, eventInfo: DropdownMenuEventInfo) -> None: ...

    class Status(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : DropdownMenuAction.Status # 0
        Normal : DropdownMenuAction.Status # 1
        Disabled : DropdownMenuAction.Status # 2
        Checked : DropdownMenuAction.Status # 4
        Hidden : DropdownMenuAction.Status # 8



class DropdownMenuEventInfo:
    def __init__(self, e: EventBase) -> None: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @property
    def mousePosition(self) -> Vector2: ...


class DropdownMenuItem(abc.ABC):
    pass


class DropdownMenuSeparator(DropdownMenuItem):
    def __init__(self, subMenuPath: str) -> None: ...
    @property
    def subMenuPath(self) -> str: ...


class DynamicAtlasCustomFilter(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, texture: Texture2D, filtersToApply: clr.Reference[DynamicAtlasFilters], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, filtersToApply: clr.Reference[DynamicAtlasFilters], result: IAsyncResult) -> bool: ...
    def Invoke(self, texture: Texture2D, filtersToApply: clr.Reference[DynamicAtlasFilters]) -> bool: ...


class DynamicAtlasFilters(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DynamicAtlasFilters # 0
    Readability : DynamicAtlasFilters # 1
    Size : DynamicAtlasFilters # 2
    Format : DynamicAtlasFilters # 4
    ColorSpace : DynamicAtlasFilters # 8
    FilterMode : DynamicAtlasFilters # 16


class DynamicAtlasSettings:
    def __init__(self) -> None: ...
    @property
    def activeFilters(self) -> DynamicAtlasFilters: ...
    @activeFilters.setter
    def activeFilters(self, value: DynamicAtlasFilters) -> DynamicAtlasFilters: ...
    @property
    def customFilter(self) -> DynamicAtlasCustomFilter: ...
    @customFilter.setter
    def customFilter(self, value: DynamicAtlasCustomFilter) -> DynamicAtlasCustomFilter: ...
    @classmethod
    @property
    def defaultFilters(cls) -> DynamicAtlasFilters: ...
    @classmethod
    @property
    def defaults(cls) -> DynamicAtlasSettings: ...
    @property
    def maxAtlasSize(self) -> int: ...
    @maxAtlasSize.setter
    def maxAtlasSize(self, value: int) -> int: ...
    @property
    def maxSubTextureSize(self) -> int: ...
    @maxSubTextureSize.setter
    def maxSubTextureSize(self, value: int) -> int: ...
    @property
    def minAtlasSize(self) -> int: ...
    @minAtlasSize.setter
    def minAtlasSize(self, value: int) -> int: ...


class EasingFunction(IEquatable_1[EasingFunction]):
    def __init__(self, mode: EasingMode) -> None: ...
    @property
    def mode(self) -> EasingMode: ...
    @mode.setter
    def mode(self, value: EasingMode) -> EasingMode: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: EasingFunction, rhs: EasingFunction) -> bool: ...
    # Operator not supported op_Implicit(easingMode: EasingMode)
    def __ne__(self, lhs: EasingFunction, rhs: EasingFunction) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: EasingFunction) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class EasingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ease : EasingMode # 0
    EaseIn : EasingMode # 1
    EaseOut : EasingMode # 2
    EaseInOut : EasingMode # 3
    Linear : EasingMode # 4
    EaseInSine : EasingMode # 5
    EaseOutSine : EasingMode # 6
    EaseInOutSine : EasingMode # 7
    EaseInCubic : EasingMode # 8
    EaseOutCubic : EasingMode # 9
    EaseInOutCubic : EasingMode # 10
    EaseInCirc : EasingMode # 11
    EaseOutCirc : EasingMode # 12
    EaseInOutCirc : EasingMode # 13
    EaseInElastic : EasingMode # 14
    EaseOutElastic : EasingMode # 15
    EaseInOutElastic : EasingMode # 16
    EaseInBack : EasingMode # 17
    EaseOutBack : EasingMode # 18
    EaseInOutBack : EasingMode # 19
    EaseInBounce : EasingMode # 20
    EaseOutBounce : EasingMode # 21
    EaseInOutBounce : EasingMode # 22


class EnumField(BaseField_1[Enum]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, defaultValue: Enum) -> None: ...
    @typing.overload
    def __init__(self, label: str, defaultValue: Enum = ...) -> None: ...
    arrowUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Enum: ...
    @value.setter
    def value(self, value: Enum) -> Enum: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: Enum) -> None: ...
    # Skipped Init due to it being static, abstract and generic.

    Init : Init_MethodGroup
    class Init_MethodGroup:
        @typing.overload
        def __call__(self, defaultValue: Enum) -> None:...
        @typing.overload
        def __call__(self, defaultValue: Enum, includeObsoleteValues: bool) -> None:...


    class UxmlFactory(UxmlFactory_2[EnumField, EnumField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Enum]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class EventBase_GenericClasses(abc.ABCMeta):
    Generic_EventBase_GenericClasses_EventBase_1_T = typing.TypeVar('Generic_EventBase_GenericClasses_EventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_EventBase_GenericClasses_EventBase_1_T]) -> typing.Type[EventBase_1[Generic_EventBase_GenericClasses_EventBase_1_T]]: ...

class EventBase(EventBase_0, metaclass =EventBase_GenericClasses): ...

class EventBase_0(IDisposable, abc.ABC):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @isDefaultPrevented.setter
    def isDefaultPrevented(self, value: bool) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @isImmediatePropagationStopped.setter
    def isImmediatePropagationStopped(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @isPropagationStopped.setter
    def isPropagationStopped(self, value: bool) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @originalMousePosition.setter
    def originalMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @timestamp.setter
    def timestamp(self, value: int) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def Dispose(self) -> None: ...
    def PreventDefault(self) -> None: ...
    def StopImmediatePropagation(self) -> None: ...
    def StopPropagation(self) -> None: ...


EventBase_1_T = typing.TypeVar('EventBase_1_T')
class EventBase_1(typing.Generic[EventBase_1_T], EventBase_0):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def GetPooled() -> EventBase_1_T: ...
    @staticmethod
    def TypeId() -> int: ...


class EventCallback_GenericClasses(abc.ABCMeta):
    Generic_EventCallback_GenericClasses_EventCallback_1_TEventType = typing.TypeVar('Generic_EventCallback_GenericClasses_EventCallback_1_TEventType')
    @typing.overload
    def __getitem__(self, types : typing.Type[Generic_EventCallback_GenericClasses_EventCallback_1_TEventType]) -> typing.Type[EventCallback_1[Generic_EventCallback_GenericClasses_EventCallback_1_TEventType]]: ...
    Generic_EventCallback_GenericClasses_EventCallback_2_TEventType = typing.TypeVar('Generic_EventCallback_GenericClasses_EventCallback_2_TEventType')
    Generic_EventCallback_GenericClasses_EventCallback_2_TCallbackArgs = typing.TypeVar('Generic_EventCallback_GenericClasses_EventCallback_2_TCallbackArgs')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_EventCallback_GenericClasses_EventCallback_2_TEventType], typing.Type[Generic_EventCallback_GenericClasses_EventCallback_2_TCallbackArgs]]) -> typing.Type[EventCallback_2[Generic_EventCallback_GenericClasses_EventCallback_2_TEventType, Generic_EventCallback_GenericClasses_EventCallback_2_TCallbackArgs]]: ...

EventCallback : EventCallback_GenericClasses

EventCallback_1_TEventType = typing.TypeVar('EventCallback_1_TEventType', contravariant=True)
class EventCallback_1(typing.Generic[EventCallback_1_TEventType], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, evt: EventCallback_1_TEventType, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, evt: EventCallback_1_TEventType) -> None: ...


EventCallback_2_TEventType = typing.TypeVar('EventCallback_2_TEventType', contravariant=True)
EventCallback_2_TCallbackArgs = typing.TypeVar('EventCallback_2_TCallbackArgs', contravariant=True)
class EventCallback_2(typing.Generic[EventCallback_2_TEventType, EventCallback_2_TCallbackArgs], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, evt: EventCallback_2_TEventType, userArgs: EventCallback_2_TCallbackArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, evt: EventCallback_2_TEventType, userArgs: EventCallback_2_TCallbackArgs) -> None: ...


class EventDispatcher:
    pass


class EventDispatcherGate(IEquatable_1[EventDispatcherGate], IDisposable):
    def __init__(self, d: EventDispatcher) -> None: ...
    def Dispose(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: EventDispatcherGate, right: EventDispatcherGate) -> bool: ...
    def __ne__(self, left: EventDispatcherGate, right: EventDispatcherGate) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: EventDispatcherGate) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class EventInterestAttribute(Attribute):
    @typing.overload
    def __init__(self, eventTypes: Array_1[typing.Type[typing.Any]]) -> None: ...
    @typing.overload
    def __init__(self, interests: EventInterestOptions) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class EventInterestOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Inherit : EventInterestOptions # 0
    AllEventTypes : EventInterestOptions # -1


class ExecuteCommandEvent(CommandEventBase_1[ExecuteCommandEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandName(self) -> str: ...
    @commandName.setter
    def commandName(self, value: str) -> str: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class FieldMouseDragger_GenericClasses(abc.ABCMeta):
    Generic_FieldMouseDragger_GenericClasses_FieldMouseDragger_1_T = typing.TypeVar('Generic_FieldMouseDragger_GenericClasses_FieldMouseDragger_1_T')
    def __getitem__(self, types : typing.Type[Generic_FieldMouseDragger_GenericClasses_FieldMouseDragger_1_T]) -> typing.Type[FieldMouseDragger_1[Generic_FieldMouseDragger_GenericClasses_FieldMouseDragger_1_T]]: ...

FieldMouseDragger : FieldMouseDragger_GenericClasses

FieldMouseDragger_1_T = typing.TypeVar('FieldMouseDragger_1_T')
class FieldMouseDragger_1(typing.Generic[FieldMouseDragger_1_T], BaseFieldMouseDragger):
    def __init__(self, drivenField: IValueField_1[FieldMouseDragger_1_T]) -> None: ...
    @property
    def dragging(self) -> bool: ...
    @dragging.setter
    def dragging(self, value: bool) -> bool: ...
    @property
    def startValue(self) -> FieldMouseDragger_1_T: ...
    @startValue.setter
    def startValue(self, value: FieldMouseDragger_1_T) -> FieldMouseDragger_1_T: ...
    def SetDragZone(self, dragElement: VisualElement, hotZone: Rect) -> None: ...


class FillRule(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NonZero : FillRule # 0
    OddEven : FillRule # 1


class FlexDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Column : FlexDirection # 0
    ColumnReverse : FlexDirection # 1
    Row : FlexDirection # 2
    RowReverse : FlexDirection # 3


class FloatField(TextValueField_1[float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: float) -> None: ...

    class UxmlFactory(UxmlFactory_2[FloatField, FloatField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[float, UxmlFloatAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class Focusable(CallbackEventHandler):
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    def Blur(self) -> None: ...
    def Focus(self) -> None: ...


class FocusChangeDirection(IDisposable):
    @classmethod
    @property
    def none(cls) -> FocusChangeDirection: ...
    @classmethod
    @property
    def unspecified(cls) -> FocusChangeDirection: ...
    # Operator not supported op_Implicit(fcd: FocusChangeDirection)


class FocusController:
    def __init__(self, focusRing: IFocusRing) -> None: ...
    @property
    def focusedElement(self) -> Focusable: ...


class FocusEvent(FocusEventBase_1[FocusEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def direction(self) -> FocusChangeDirection: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> Focusable: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class FocusEventBase_GenericClasses(abc.ABCMeta):
    Generic_FocusEventBase_GenericClasses_FocusEventBase_1_T = typing.TypeVar('Generic_FocusEventBase_GenericClasses_FocusEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_FocusEventBase_GenericClasses_FocusEventBase_1_T]) -> typing.Type[FocusEventBase_1[Generic_FocusEventBase_GenericClasses_FocusEventBase_1_T]]: ...

FocusEventBase : FocusEventBase_GenericClasses

FocusEventBase_1_T = typing.TypeVar('FocusEventBase_1_T')
class FocusEventBase_1(typing.Generic[FocusEventBase_1_T], EventBase_1[FocusEventBase_1_T], IFocusEvent):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def direction(self) -> FocusChangeDirection: ...
    @direction.setter
    def direction(self, value: FocusChangeDirection) -> FocusChangeDirection: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> Focusable: ...
    @relatedTarget.setter
    def relatedTarget(self, value: Focusable) -> Focusable: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(target: IEventHandler, relatedTarget: Focusable, direction: FocusChangeDirection, focusController: FocusController, bIsFocusDelegated: bool = ...) -> FocusEventBase_1_T: ...


class FocusInEvent(FocusEventBase_1[FocusInEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def direction(self) -> FocusChangeDirection: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> Focusable: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class FocusOutEvent(FocusEventBase_1[FocusOutEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def direction(self) -> FocusChangeDirection: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> Focusable: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class Foldout(BindableElement, INotifyValueChanged_1[bool]):
    def __init__(self) -> None: ...
    checkmarkUssClassName : str
    contentUssClassName : str
    inputUssClassName : str
    textUssClassName : str
    toggleUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: bool) -> None: ...

    class UxmlFactory(UxmlFactory_2[Foldout, Foldout.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class FontDefinition(IEquatable_1[FontDefinition]):
    @property
    def font(self) -> Font: ...
    @font.setter
    def font(self, value: Font) -> Font: ...
    @property
    def fontAsset(self) -> FontAsset: ...
    @fontAsset.setter
    def fontAsset(self, value: FontAsset) -> FontAsset: ...
    @staticmethod
    def FromFont(f: Font) -> FontDefinition: ...
    @staticmethod
    def FromSDFFont(f: FontAsset) -> FontDefinition: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: FontDefinition, right: FontDefinition) -> bool: ...
    def __ne__(self, left: FontDefinition, right: FontDefinition) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: FontDefinition) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class GenericDropdownMenu:
    def __init__(self) -> None: ...
    checkmarkUssClassName : str
    containerInnerUssClassName : str
    containerOuterUssClassName : str
    itemUssClassName : str
    labelUssClassName : str
    separatorUssClassName : str
    ussClassName : str
    @property
    def contentContainer(self) -> VisualElement: ...
    def AddDisabledItem(self, itemName: str, isChecked: bool) -> None: ...
    def AddSeparator(self, path: str) -> None: ...
    def DropDown(self, position: Rect, targetElement: VisualElement = ..., anchored: bool = ...) -> None: ...
    # Skipped AddItem due to it being static, abstract and generic.

    AddItem : AddItem_MethodGroup
    class AddItem_MethodGroup:
        @typing.overload
        def __call__(self, itemName: str, isChecked: bool, action: Action) -> None:...
        @typing.overload
        def __call__(self, itemName: str, isChecked: bool, action: Action_1[typing.Any], data: typing.Any) -> None:...



class GeometryChangedEvent(EventBase_1[GeometryChangedEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def newRect(self) -> Rect: ...
    @newRect.setter
    def newRect(self, value: Rect) -> Rect: ...
    @property
    def oldRect(self) -> Rect: ...
    @oldRect.setter
    def oldRect(self, value: Rect) -> Rect: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(oldRect: Rect, newRect: Rect) -> GeometryChangedEvent: ...


class GroupBox(BindableElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[GroupBox, GroupBox.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Hash128Field(TextInputBaseField_1[Hash128]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Hash128: ...
    @value.setter
    def value(self, value: Hash128) -> Hash128: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: Hash128) -> None: ...

    class UxmlFactory(UxmlFactory_2[Hash128Field, Hash128Field.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[Hash128, UxmlHash128AttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class HelpBox(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str, messageType: HelpBoxMessageType) -> None: ...
    iconErrorUssClassName : str
    iconInfoUssClassName : str
    iconUssClassName : str
    iconwarningUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def messageType(self) -> HelpBoxMessageType: ...
    @messageType.setter
    def messageType(self, value: HelpBoxMessageType) -> HelpBoxMessageType: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[HelpBox, HelpBox.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class HelpBoxMessageType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : HelpBoxMessageType # 0
    Info : HelpBoxMessageType # 1
    Warning : HelpBoxMessageType # 2
    Error : HelpBoxMessageType # 3


class IBaseUxmlFactory(typing.Protocol):
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    @abc.abstractmethod
    def AcceptsAttributeBag(self, bag: IUxmlAttributes, cc: CreationContext) -> bool: ...


class IBindable(typing.Protocol):
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...


class IBinding(typing.Protocol):
    @abc.abstractmethod
    def PreUpdate(self) -> None: ...
    @abc.abstractmethod
    def Release(self) -> None: ...
    @abc.abstractmethod
    def Update(self) -> None: ...


class IBindingExtensions(abc.ABC):
    @staticmethod
    def IsBound(control: IBindable) -> bool: ...


class IChangeEvent(typing.Protocol):
    pass


class ICommandEvent(typing.Protocol):
    @property
    def commandName(self) -> str: ...


class ICustomStyle(typing.Protocol):
    # Skipped TryGetValue due to it being static, abstract and generic.

    TryGetValue : TryGetValue_MethodGroup
    class TryGetValue_MethodGroup:
        def __getitem__(self, t:typing.Type[TryGetValue_1_T1]) -> TryGetValue_1[TryGetValue_1_T1]: ...

        TryGetValue_1_T1 = typing.TypeVar('TryGetValue_1_T1')
        class TryGetValue_1(typing.Generic[TryGetValue_1_T1]):
            TryGetValue_1_T = ICustomStyle.TryGetValue_MethodGroup.TryGetValue_1_T1
            def __call__(self, property: CustomStyleProperty_1[TryGetValue_1_T], value: clr.Reference[TryGetValue_1_T]) -> bool:...

        @typing.overload
        def __call__(self, property: CustomStyleProperty_1[float], value: clr.Reference[float]) -> bool:...
        # Method TryGetValue(property : CustomStyleProperty`1, value : Int32&) was skipped since it collides with above method
        @typing.overload
        def __call__(self, property: CustomStyleProperty_1[Texture2D], value: clr.Reference[Texture2D]) -> bool:...
        @typing.overload
        def __call__(self, property: CustomStyleProperty_1[VectorImage], value: clr.Reference[VectorImage]) -> bool:...
        # Method TryGetValue(property : CustomStyleProperty`1, value : Boolean&) was skipped since it collides with above method
        @typing.overload
        def __call__(self, property: CustomStyleProperty_1[Color], value: clr.Reference[Color]) -> bool:...
        @typing.overload
        def __call__(self, property: CustomStyleProperty_1[Sprite], value: clr.Reference[Sprite]) -> bool:...
        @typing.overload
        def __call__(self, property: CustomStyleProperty_1[str], value: clr.Reference[str]) -> bool:...



class IDragAndDropEvent(typing.Protocol):
    pass


class IEventHandler(typing.Protocol):
    @abc.abstractmethod
    def HandleEvent(self, evt: EventBase) -> None: ...
    @abc.abstractmethod
    def HasBubbleUpHandlers(self) -> bool: ...
    @abc.abstractmethod
    def HasTrickleDownHandlers(self) -> bool: ...
    @abc.abstractmethod
    def SendEvent(self, e: EventBase) -> None: ...


class IExperimentalFeatures(typing.Protocol):
    @property
    def animation(self) -> ITransitionAnimations: ...


class IFocusEvent(typing.Protocol):
    @property
    def direction(self) -> FocusChangeDirection: ...
    @property
    def relatedTarget(self) -> Focusable: ...


class IFocusRing(typing.Protocol):
    @abc.abstractmethod
    def GetFocusChangeDirection(self, currentFocusable: Focusable, e: EventBase) -> FocusChangeDirection: ...
    @abc.abstractmethod
    def GetNextFocusable(self, currentFocusable: Focusable, direction: FocusChangeDirection) -> Focusable: ...


class IKeyboardEvent(typing.Protocol):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def character(self) -> str: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def keyCode(self) -> KeyCode: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @property
    def shiftKey(self) -> bool: ...


class Image(VisualElement):
    def __init__(self) -> None: ...
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def image(self) -> Texture: ...
    @image.setter
    def image(self, value: Texture) -> Texture: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def scaleMode(self) -> ScaleMode: ...
    @scaleMode.setter
    def scaleMode(self, value: ScaleMode) -> ScaleMode: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def sourceRect(self) -> Rect: ...
    @sourceRect.setter
    def sourceRect(self, value: Rect) -> Rect: ...
    @property
    def sprite(self) -> Sprite: ...
    @sprite.setter
    def sprite(self, value: Sprite) -> Sprite: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tintColor(self) -> Color: ...
    @tintColor.setter
    def tintColor(self, value: Color) -> Color: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def uv(self) -> Rect: ...
    @uv.setter
    def uv(self, value: Rect) -> Rect: ...
    @property
    def vectorImage(self) -> VectorImage: ...
    @vectorImage.setter
    def vectorImage(self, value: VectorImage) -> VectorImage: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Image, Image.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class IManipulator(typing.Protocol):
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class IMGUIContainer(VisualElement, IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, onGUIHandler: Action) -> None: ...
    ussClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def contextType(self) -> ContextType: ...
    @contextType.setter
    def contextType(self, value: ContextType) -> ContextType: ...
    @property
    def cullingEnabled(self) -> bool: ...
    @cullingEnabled.setter
    def cullingEnabled(self, value: bool) -> bool: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def onGUIHandler(self) -> Action: ...
    @onGUIHandler.setter
    def onGUIHandler(self, value: Action) -> Action: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def Dispose(self) -> None: ...
    def MarkDirtyLayout(self) -> None: ...

    class UxmlFactory(UxmlFactory_2[IMGUIContainer, IMGUIContainer.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class IMGUIEvent(EventBase_1[IMGUIEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> IMGUIEvent: ...


class IMixedValueSupport(typing.Protocol):
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...


class ImmediateModeElement(VisualElement, abc.ABC):
    def __init__(self) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cullingEnabled(self) -> bool: ...
    @cullingEnabled.setter
    def cullingEnabled(self, value: bool) -> bool: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...


class IMouseCaptureEvent(typing.Protocol):
    pass


class IMouseEvent(typing.Protocol):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def button(self) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @property
    def shiftKey(self) -> bool: ...


class INavigationEvent(typing.Protocol):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @property
    def shiftKey(self) -> bool: ...


class INotifyValueChanged_GenericClasses(abc.ABCMeta):
    Generic_INotifyValueChanged_GenericClasses_INotifyValueChanged_1_T = typing.TypeVar('Generic_INotifyValueChanged_GenericClasses_INotifyValueChanged_1_T')
    def __getitem__(self, types : typing.Type[Generic_INotifyValueChanged_GenericClasses_INotifyValueChanged_1_T]) -> typing.Type[INotifyValueChanged_1[Generic_INotifyValueChanged_GenericClasses_INotifyValueChanged_1_T]]: ...

INotifyValueChanged : INotifyValueChanged_GenericClasses

INotifyValueChanged_1_T = typing.TypeVar('INotifyValueChanged_1_T')
class INotifyValueChanged_1(typing.Generic[INotifyValueChanged_1_T], typing.Protocol):
    @property
    def value(self) -> INotifyValueChanged_1_T: ...
    @value.setter
    def value(self, value: INotifyValueChanged_1_T) -> INotifyValueChanged_1_T: ...
    @abc.abstractmethod
    def SetValueWithoutNotify(self, newValue: INotifyValueChanged_1_T) -> None: ...


class INotifyValueChangedExtensions(abc.ABC):
    # Skipped RegisterValueChangedCallback due to it being static, abstract and generic.

    RegisterValueChangedCallback : RegisterValueChangedCallback_MethodGroup
    class RegisterValueChangedCallback_MethodGroup:
        def __getitem__(self, t:typing.Type[RegisterValueChangedCallback_1_T1]) -> RegisterValueChangedCallback_1[RegisterValueChangedCallback_1_T1]: ...

        RegisterValueChangedCallback_1_T1 = typing.TypeVar('RegisterValueChangedCallback_1_T1')
        class RegisterValueChangedCallback_1(typing.Generic[RegisterValueChangedCallback_1_T1]):
            RegisterValueChangedCallback_1_T = INotifyValueChangedExtensions.RegisterValueChangedCallback_MethodGroup.RegisterValueChangedCallback_1_T1
            def __call__(self, control: INotifyValueChanged_1[RegisterValueChangedCallback_1_T], callback: EventCallback_1[ChangeEvent_1[RegisterValueChangedCallback_1_T]]) -> bool:...


    # Skipped UnregisterValueChangedCallback due to it being static, abstract and generic.

    UnregisterValueChangedCallback : UnregisterValueChangedCallback_MethodGroup
    class UnregisterValueChangedCallback_MethodGroup:
        def __getitem__(self, t:typing.Type[UnregisterValueChangedCallback_1_T1]) -> UnregisterValueChangedCallback_1[UnregisterValueChangedCallback_1_T1]: ...

        UnregisterValueChangedCallback_1_T1 = typing.TypeVar('UnregisterValueChangedCallback_1_T1')
        class UnregisterValueChangedCallback_1(typing.Generic[UnregisterValueChangedCallback_1_T1]):
            UnregisterValueChangedCallback_1_T = INotifyValueChangedExtensions.UnregisterValueChangedCallback_MethodGroup.UnregisterValueChangedCallback_1_T1
            def __call__(self, control: INotifyValueChanged_1[UnregisterValueChangedCallback_1_T], callback: EventCallback_1[ChangeEvent_1[UnregisterValueChangedCallback_1_T]]) -> bool:...




class InputEvent(EventBase_1[InputEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def newData(self) -> str: ...
    @newData.setter
    def newData(self, value: str) -> str: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def previousData(self) -> str: ...
    @previousData.setter
    def previousData(self, value: str) -> str: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(previousData: str, newData: str) -> InputEvent: ...


class IntegerField(TextValueField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[IntegerField, IntegerField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[int, UxmlIntAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class IPanel(IDisposable, typing.Protocol):
    @property
    def contextType(self) -> ContextType: ...
    @property
    def contextualMenuManager(self) -> ContextualMenuManager: ...
    @property
    def dispatcher(self) -> EventDispatcher: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def isDirty(self) -> bool: ...
    @property
    def visualTree(self) -> VisualElement: ...
    @abc.abstractmethod
    def Pick(self, point: Vector2) -> VisualElement: ...
    @abc.abstractmethod
    def PickAll(self, point: Vector2, picked: List_1[VisualElement]) -> VisualElement: ...


class IPanelChangedEvent(typing.Protocol):
    pass


class IPointerCaptureEvent(typing.Protocol):
    pass


class IPointerEvent(typing.Protocol):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @property
    def button(self) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @property
    def isPrimary(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @property
    def pressure(self) -> float: ...
    @property
    def radius(self) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @property
    def tilt(self) -> Vector2: ...
    @property
    def twist(self) -> float: ...


class IResolvedStyle(typing.Protocol):
    @property
    def alignContent(self) -> Align: ...
    @property
    def alignItems(self) -> Align: ...
    @property
    def alignSelf(self) -> Align: ...
    @property
    def backgroundColor(self) -> Color: ...
    @property
    def backgroundImage(self) -> Background: ...
    @property
    def backgroundPositionX(self) -> BackgroundPosition: ...
    @property
    def backgroundPositionY(self) -> BackgroundPosition: ...
    @property
    def backgroundRepeat(self) -> BackgroundRepeat: ...
    @property
    def backgroundSize(self) -> BackgroundSize: ...
    @property
    def borderBottomColor(self) -> Color: ...
    @property
    def borderBottomLeftRadius(self) -> float: ...
    @property
    def borderBottomRightRadius(self) -> float: ...
    @property
    def borderBottomWidth(self) -> float: ...
    @property
    def borderLeftColor(self) -> Color: ...
    @property
    def borderLeftWidth(self) -> float: ...
    @property
    def borderRightColor(self) -> Color: ...
    @property
    def borderRightWidth(self) -> float: ...
    @property
    def borderTopColor(self) -> Color: ...
    @property
    def borderTopLeftRadius(self) -> float: ...
    @property
    def borderTopRightRadius(self) -> float: ...
    @property
    def borderTopWidth(self) -> float: ...
    @property
    def bottom(self) -> float: ...
    @property
    def color(self) -> Color: ...
    @property
    def display(self) -> DisplayStyle: ...
    @property
    def flexBasis(self) -> StyleFloat: ...
    @property
    def flexDirection(self) -> FlexDirection: ...
    @property
    def flexGrow(self) -> float: ...
    @property
    def flexShrink(self) -> float: ...
    @property
    def flexWrap(self) -> Wrap: ...
    @property
    def fontSize(self) -> float: ...
    @property
    def height(self) -> float: ...
    @property
    def justifyContent(self) -> Justify: ...
    @property
    def left(self) -> float: ...
    @property
    def letterSpacing(self) -> float: ...
    @property
    def marginBottom(self) -> float: ...
    @property
    def marginLeft(self) -> float: ...
    @property
    def marginRight(self) -> float: ...
    @property
    def marginTop(self) -> float: ...
    @property
    def maxHeight(self) -> StyleFloat: ...
    @property
    def maxWidth(self) -> StyleFloat: ...
    @property
    def minHeight(self) -> StyleFloat: ...
    @property
    def minWidth(self) -> StyleFloat: ...
    @property
    def opacity(self) -> float: ...
    @property
    def paddingBottom(self) -> float: ...
    @property
    def paddingLeft(self) -> float: ...
    @property
    def paddingRight(self) -> float: ...
    @property
    def paddingTop(self) -> float: ...
    @property
    def position(self) -> Position: ...
    @property
    def right(self) -> float: ...
    @property
    def rotate(self) -> Rotate: ...
    @property
    def scale(self) -> Scale: ...
    @property
    def textOverflow(self) -> TextOverflow: ...
    @property
    def top(self) -> float: ...
    @property
    def transformOrigin(self) -> Vector3: ...
    @property
    def transitionDelay(self) -> IEnumerable_1[TimeValue]: ...
    @property
    def transitionDuration(self) -> IEnumerable_1[TimeValue]: ...
    @property
    def transitionProperty(self) -> IEnumerable_1[StylePropertyName]: ...
    @property
    def transitionTimingFunction(self) -> IEnumerable_1[EasingFunction]: ...
    @property
    def translate(self) -> Vector3: ...
    @property
    def unityBackgroundImageTintColor(self) -> Color: ...
    @property
    def unityBackgroundScaleMode(self) -> StyleEnum_1[ScaleMode]: ...
    @property
    def unityFont(self) -> Font: ...
    @property
    def unityFontDefinition(self) -> FontDefinition: ...
    @property
    def unityFontStyleAndWeight(self) -> FontStyle: ...
    @property
    def unityParagraphSpacing(self) -> float: ...
    @property
    def unitySliceBottom(self) -> int: ...
    @property
    def unitySliceLeft(self) -> int: ...
    @property
    def unitySliceRight(self) -> int: ...
    @property
    def unitySliceScale(self) -> float: ...
    @property
    def unitySliceTop(self) -> int: ...
    @property
    def unityTextAlign(self) -> TextAnchor: ...
    @property
    def unityTextOutlineColor(self) -> Color: ...
    @property
    def unityTextOutlineWidth(self) -> float: ...
    @property
    def unityTextOverflowPosition(self) -> TextOverflowPosition: ...
    @property
    def visibility(self) -> Visibility: ...
    @property
    def whiteSpace(self) -> WhiteSpace: ...
    @property
    def width(self) -> float: ...
    @property
    def wordSpacing(self) -> float: ...


class IStyle(typing.Protocol):
    @property
    def alignContent(self) -> StyleEnum_1[Align]: ...
    @alignContent.setter
    def alignContent(self, value: StyleEnum_1[Align]) -> StyleEnum_1[Align]: ...
    @property
    def alignItems(self) -> StyleEnum_1[Align]: ...
    @alignItems.setter
    def alignItems(self, value: StyleEnum_1[Align]) -> StyleEnum_1[Align]: ...
    @property
    def alignSelf(self) -> StyleEnum_1[Align]: ...
    @alignSelf.setter
    def alignSelf(self, value: StyleEnum_1[Align]) -> StyleEnum_1[Align]: ...
    @property
    def backgroundColor(self) -> StyleColor: ...
    @backgroundColor.setter
    def backgroundColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def backgroundImage(self) -> StyleBackground: ...
    @backgroundImage.setter
    def backgroundImage(self, value: StyleBackground) -> StyleBackground: ...
    @property
    def backgroundPositionX(self) -> StyleBackgroundPosition: ...
    @backgroundPositionX.setter
    def backgroundPositionX(self, value: StyleBackgroundPosition) -> StyleBackgroundPosition: ...
    @property
    def backgroundPositionY(self) -> StyleBackgroundPosition: ...
    @backgroundPositionY.setter
    def backgroundPositionY(self, value: StyleBackgroundPosition) -> StyleBackgroundPosition: ...
    @property
    def backgroundRepeat(self) -> StyleBackgroundRepeat: ...
    @backgroundRepeat.setter
    def backgroundRepeat(self, value: StyleBackgroundRepeat) -> StyleBackgroundRepeat: ...
    @property
    def backgroundSize(self) -> StyleBackgroundSize: ...
    @backgroundSize.setter
    def backgroundSize(self, value: StyleBackgroundSize) -> StyleBackgroundSize: ...
    @property
    def borderBottomColor(self) -> StyleColor: ...
    @borderBottomColor.setter
    def borderBottomColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def borderBottomLeftRadius(self) -> StyleLength: ...
    @borderBottomLeftRadius.setter
    def borderBottomLeftRadius(self, value: StyleLength) -> StyleLength: ...
    @property
    def borderBottomRightRadius(self) -> StyleLength: ...
    @borderBottomRightRadius.setter
    def borderBottomRightRadius(self, value: StyleLength) -> StyleLength: ...
    @property
    def borderBottomWidth(self) -> StyleFloat: ...
    @borderBottomWidth.setter
    def borderBottomWidth(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def borderLeftColor(self) -> StyleColor: ...
    @borderLeftColor.setter
    def borderLeftColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def borderLeftWidth(self) -> StyleFloat: ...
    @borderLeftWidth.setter
    def borderLeftWidth(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def borderRightColor(self) -> StyleColor: ...
    @borderRightColor.setter
    def borderRightColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def borderRightWidth(self) -> StyleFloat: ...
    @borderRightWidth.setter
    def borderRightWidth(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def borderTopColor(self) -> StyleColor: ...
    @borderTopColor.setter
    def borderTopColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def borderTopLeftRadius(self) -> StyleLength: ...
    @borderTopLeftRadius.setter
    def borderTopLeftRadius(self, value: StyleLength) -> StyleLength: ...
    @property
    def borderTopRightRadius(self) -> StyleLength: ...
    @borderTopRightRadius.setter
    def borderTopRightRadius(self, value: StyleLength) -> StyleLength: ...
    @property
    def borderTopWidth(self) -> StyleFloat: ...
    @borderTopWidth.setter
    def borderTopWidth(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def bottom(self) -> StyleLength: ...
    @bottom.setter
    def bottom(self, value: StyleLength) -> StyleLength: ...
    @property
    def color(self) -> StyleColor: ...
    @color.setter
    def color(self, value: StyleColor) -> StyleColor: ...
    @property
    def cursor(self) -> StyleCursor: ...
    @cursor.setter
    def cursor(self, value: StyleCursor) -> StyleCursor: ...
    @property
    def display(self) -> StyleEnum_1[DisplayStyle]: ...
    @display.setter
    def display(self, value: StyleEnum_1[DisplayStyle]) -> StyleEnum_1[DisplayStyle]: ...
    @property
    def flexBasis(self) -> StyleLength: ...
    @flexBasis.setter
    def flexBasis(self, value: StyleLength) -> StyleLength: ...
    @property
    def flexDirection(self) -> StyleEnum_1[FlexDirection]: ...
    @flexDirection.setter
    def flexDirection(self, value: StyleEnum_1[FlexDirection]) -> StyleEnum_1[FlexDirection]: ...
    @property
    def flexGrow(self) -> StyleFloat: ...
    @flexGrow.setter
    def flexGrow(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def flexShrink(self) -> StyleFloat: ...
    @flexShrink.setter
    def flexShrink(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def flexWrap(self) -> StyleEnum_1[Wrap]: ...
    @flexWrap.setter
    def flexWrap(self, value: StyleEnum_1[Wrap]) -> StyleEnum_1[Wrap]: ...
    @property
    def fontSize(self) -> StyleLength: ...
    @fontSize.setter
    def fontSize(self, value: StyleLength) -> StyleLength: ...
    @property
    def height(self) -> StyleLength: ...
    @height.setter
    def height(self, value: StyleLength) -> StyleLength: ...
    @property
    def justifyContent(self) -> StyleEnum_1[Justify]: ...
    @justifyContent.setter
    def justifyContent(self, value: StyleEnum_1[Justify]) -> StyleEnum_1[Justify]: ...
    @property
    def left(self) -> StyleLength: ...
    @left.setter
    def left(self, value: StyleLength) -> StyleLength: ...
    @property
    def letterSpacing(self) -> StyleLength: ...
    @letterSpacing.setter
    def letterSpacing(self, value: StyleLength) -> StyleLength: ...
    @property
    def marginBottom(self) -> StyleLength: ...
    @marginBottom.setter
    def marginBottom(self, value: StyleLength) -> StyleLength: ...
    @property
    def marginLeft(self) -> StyleLength: ...
    @marginLeft.setter
    def marginLeft(self, value: StyleLength) -> StyleLength: ...
    @property
    def marginRight(self) -> StyleLength: ...
    @marginRight.setter
    def marginRight(self, value: StyleLength) -> StyleLength: ...
    @property
    def marginTop(self) -> StyleLength: ...
    @marginTop.setter
    def marginTop(self, value: StyleLength) -> StyleLength: ...
    @property
    def maxHeight(self) -> StyleLength: ...
    @maxHeight.setter
    def maxHeight(self, value: StyleLength) -> StyleLength: ...
    @property
    def maxWidth(self) -> StyleLength: ...
    @maxWidth.setter
    def maxWidth(self, value: StyleLength) -> StyleLength: ...
    @property
    def minHeight(self) -> StyleLength: ...
    @minHeight.setter
    def minHeight(self, value: StyleLength) -> StyleLength: ...
    @property
    def minWidth(self) -> StyleLength: ...
    @minWidth.setter
    def minWidth(self, value: StyleLength) -> StyleLength: ...
    @property
    def opacity(self) -> StyleFloat: ...
    @opacity.setter
    def opacity(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def overflow(self) -> StyleEnum_1[Overflow]: ...
    @overflow.setter
    def overflow(self, value: StyleEnum_1[Overflow]) -> StyleEnum_1[Overflow]: ...
    @property
    def paddingBottom(self) -> StyleLength: ...
    @paddingBottom.setter
    def paddingBottom(self, value: StyleLength) -> StyleLength: ...
    @property
    def paddingLeft(self) -> StyleLength: ...
    @paddingLeft.setter
    def paddingLeft(self, value: StyleLength) -> StyleLength: ...
    @property
    def paddingRight(self) -> StyleLength: ...
    @paddingRight.setter
    def paddingRight(self, value: StyleLength) -> StyleLength: ...
    @property
    def paddingTop(self) -> StyleLength: ...
    @paddingTop.setter
    def paddingTop(self, value: StyleLength) -> StyleLength: ...
    @property
    def position(self) -> StyleEnum_1[Position]: ...
    @position.setter
    def position(self, value: StyleEnum_1[Position]) -> StyleEnum_1[Position]: ...
    @property
    def right(self) -> StyleLength: ...
    @right.setter
    def right(self, value: StyleLength) -> StyleLength: ...
    @property
    def rotate(self) -> StyleRotate: ...
    @rotate.setter
    def rotate(self, value: StyleRotate) -> StyleRotate: ...
    @property
    def scale(self) -> StyleScale: ...
    @scale.setter
    def scale(self, value: StyleScale) -> StyleScale: ...
    @property
    def textOverflow(self) -> StyleEnum_1[TextOverflow]: ...
    @textOverflow.setter
    def textOverflow(self, value: StyleEnum_1[TextOverflow]) -> StyleEnum_1[TextOverflow]: ...
    @property
    def textShadow(self) -> StyleTextShadow: ...
    @textShadow.setter
    def textShadow(self, value: StyleTextShadow) -> StyleTextShadow: ...
    @property
    def top(self) -> StyleLength: ...
    @top.setter
    def top(self, value: StyleLength) -> StyleLength: ...
    @property
    def transformOrigin(self) -> StyleTransformOrigin: ...
    @transformOrigin.setter
    def transformOrigin(self, value: StyleTransformOrigin) -> StyleTransformOrigin: ...
    @property
    def transitionDelay(self) -> StyleList_1[TimeValue]: ...
    @transitionDelay.setter
    def transitionDelay(self, value: StyleList_1[TimeValue]) -> StyleList_1[TimeValue]: ...
    @property
    def transitionDuration(self) -> StyleList_1[TimeValue]: ...
    @transitionDuration.setter
    def transitionDuration(self, value: StyleList_1[TimeValue]) -> StyleList_1[TimeValue]: ...
    @property
    def transitionProperty(self) -> StyleList_1[StylePropertyName]: ...
    @transitionProperty.setter
    def transitionProperty(self, value: StyleList_1[StylePropertyName]) -> StyleList_1[StylePropertyName]: ...
    @property
    def transitionTimingFunction(self) -> StyleList_1[EasingFunction]: ...
    @transitionTimingFunction.setter
    def transitionTimingFunction(self, value: StyleList_1[EasingFunction]) -> StyleList_1[EasingFunction]: ...
    @property
    def translate(self) -> StyleTranslate: ...
    @translate.setter
    def translate(self, value: StyleTranslate) -> StyleTranslate: ...
    @property
    def unityBackgroundImageTintColor(self) -> StyleColor: ...
    @unityBackgroundImageTintColor.setter
    def unityBackgroundImageTintColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def unityBackgroundScaleMode(self) -> StyleEnum_1[ScaleMode]: ...
    @unityBackgroundScaleMode.setter
    def unityBackgroundScaleMode(self, value: StyleEnum_1[ScaleMode]) -> StyleEnum_1[ScaleMode]: ...
    @property
    def unityFont(self) -> StyleFont: ...
    @unityFont.setter
    def unityFont(self, value: StyleFont) -> StyleFont: ...
    @property
    def unityFontDefinition(self) -> StyleFontDefinition: ...
    @unityFontDefinition.setter
    def unityFontDefinition(self, value: StyleFontDefinition) -> StyleFontDefinition: ...
    @property
    def unityFontStyleAndWeight(self) -> StyleEnum_1[FontStyle]: ...
    @unityFontStyleAndWeight.setter
    def unityFontStyleAndWeight(self, value: StyleEnum_1[FontStyle]) -> StyleEnum_1[FontStyle]: ...
    @property
    def unityOverflowClipBox(self) -> StyleEnum_1[OverflowClipBox]: ...
    @unityOverflowClipBox.setter
    def unityOverflowClipBox(self, value: StyleEnum_1[OverflowClipBox]) -> StyleEnum_1[OverflowClipBox]: ...
    @property
    def unityParagraphSpacing(self) -> StyleLength: ...
    @unityParagraphSpacing.setter
    def unityParagraphSpacing(self, value: StyleLength) -> StyleLength: ...
    @property
    def unitySliceBottom(self) -> StyleInt: ...
    @unitySliceBottom.setter
    def unitySliceBottom(self, value: StyleInt) -> StyleInt: ...
    @property
    def unitySliceLeft(self) -> StyleInt: ...
    @unitySliceLeft.setter
    def unitySliceLeft(self, value: StyleInt) -> StyleInt: ...
    @property
    def unitySliceRight(self) -> StyleInt: ...
    @unitySliceRight.setter
    def unitySliceRight(self, value: StyleInt) -> StyleInt: ...
    @property
    def unitySliceScale(self) -> StyleFloat: ...
    @unitySliceScale.setter
    def unitySliceScale(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def unitySliceTop(self) -> StyleInt: ...
    @unitySliceTop.setter
    def unitySliceTop(self, value: StyleInt) -> StyleInt: ...
    @property
    def unityTextAlign(self) -> StyleEnum_1[TextAnchor]: ...
    @unityTextAlign.setter
    def unityTextAlign(self, value: StyleEnum_1[TextAnchor]) -> StyleEnum_1[TextAnchor]: ...
    @property
    def unityTextOutlineColor(self) -> StyleColor: ...
    @unityTextOutlineColor.setter
    def unityTextOutlineColor(self, value: StyleColor) -> StyleColor: ...
    @property
    def unityTextOutlineWidth(self) -> StyleFloat: ...
    @unityTextOutlineWidth.setter
    def unityTextOutlineWidth(self, value: StyleFloat) -> StyleFloat: ...
    @property
    def unityTextOverflowPosition(self) -> StyleEnum_1[TextOverflowPosition]: ...
    @unityTextOverflowPosition.setter
    def unityTextOverflowPosition(self, value: StyleEnum_1[TextOverflowPosition]) -> StyleEnum_1[TextOverflowPosition]: ...
    @property
    def visibility(self) -> StyleEnum_1[Visibility]: ...
    @visibility.setter
    def visibility(self, value: StyleEnum_1[Visibility]) -> StyleEnum_1[Visibility]: ...
    @property
    def whiteSpace(self) -> StyleEnum_1[WhiteSpace]: ...
    @whiteSpace.setter
    def whiteSpace(self, value: StyleEnum_1[WhiteSpace]) -> StyleEnum_1[WhiteSpace]: ...
    @property
    def width(self) -> StyleLength: ...
    @width.setter
    def width(self, value: StyleLength) -> StyleLength: ...
    @property
    def wordSpacing(self) -> StyleLength: ...
    @wordSpacing.setter
    def wordSpacing(self, value: StyleLength) -> StyleLength: ...


class ITextEdition(typing.Protocol):
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPassword(self) -> bool: ...
    @isPassword.setter
    def isPassword(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...


class ITextElementExperimentalFeatures(IExperimentalFeatures, typing.Protocol):
    @abc.abstractmethod
    def SetRenderedText(self, renderedText: str) -> None: ...


class ITextSelection(typing.Protocol):
    @property
    def cursorColor(self) -> Color: ...
    @cursorColor.setter
    def cursorColor(self, value: Color) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def isSelectable(self) -> bool: ...
    @isSelectable.setter
    def isSelectable(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @selectionColor.setter
    def selectionColor(self, value: Color) -> Color: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def HasSelection(self) -> bool: ...
    @abc.abstractmethod
    def SelectAll(self) -> None: ...
    @abc.abstractmethod
    def SelectNone(self) -> None: ...
    @abc.abstractmethod
    def SelectRange(self, cursorIndex: int, selectionIndex: int) -> None: ...


class ITransform(typing.Protocol):
    @property
    def matrix(self) -> Matrix4x4: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def rotation(self) -> Quaternion: ...
    @rotation.setter
    def rotation(self, value: Quaternion) -> Quaternion: ...
    @property
    def scale(self) -> Vector3: ...
    @scale.setter
    def scale(self, value: Vector3) -> Vector3: ...


class ITransitionEvent(typing.Protocol):
    @property
    def elapsedTime(self) -> float: ...
    @property
    def stylePropertyNames(self) -> StylePropertyNameCollection: ...


class IUxmlAttributes(typing.Protocol):
    @abc.abstractmethod
    def TryGetAttributeValue(self, attributeName: str, value: clr.Reference[str]) -> bool: ...


class IUxmlFactory(IBaseUxmlFactory, typing.Protocol):
    @abc.abstractmethod
    def Create(self, bag: IUxmlAttributes, cc: CreationContext) -> VisualElement: ...


class IValueField_GenericClasses(abc.ABCMeta):
    Generic_IValueField_GenericClasses_IValueField_1_T = typing.TypeVar('Generic_IValueField_GenericClasses_IValueField_1_T')
    def __getitem__(self, types : typing.Type[Generic_IValueField_GenericClasses_IValueField_1_T]) -> typing.Type[IValueField_1[Generic_IValueField_GenericClasses_IValueField_1_T]]: ...

IValueField : IValueField_GenericClasses

IValueField_1_T = typing.TypeVar('IValueField_1_T')
class IValueField_1(typing.Generic[IValueField_1_T], typing.Protocol):
    @property
    def value(self) -> IValueField_1_T: ...
    @value.setter
    def value(self, value: IValueField_1_T) -> IValueField_1_T: ...
    @abc.abstractmethod
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: IValueField_1_T) -> None: ...
    @abc.abstractmethod
    def StartDragging(self) -> None: ...
    @abc.abstractmethod
    def StopDragging(self) -> None: ...


class IVisualElementScheduledItem(typing.Protocol):
    @property
    def element(self) -> VisualElement: ...
    @property
    def isActive(self) -> bool: ...
    @abc.abstractmethod
    def Every(self, intervalMs: int) -> IVisualElementScheduledItem: ...
    @abc.abstractmethod
    def ExecuteLater(self, delayMs: int) -> None: ...
    @abc.abstractmethod
    def ForDuration(self, durationMs: int) -> IVisualElementScheduledItem: ...
    @abc.abstractmethod
    def Pause(self) -> None: ...
    @abc.abstractmethod
    def Resume(self) -> None: ...
    @abc.abstractmethod
    def StartingIn(self, delayMs: int) -> IVisualElementScheduledItem: ...
    @abc.abstractmethod
    def Until(self, stopCondition: Func_1[bool]) -> IVisualElementScheduledItem: ...


class IVisualElementScheduler(typing.Protocol):
    # Skipped Execute due to it being static, abstract and generic.

    Execute : Execute_MethodGroup
    class Execute_MethodGroup:
        @typing.overload
        def __call__(self, timerUpdateEvent: Action_1[TimerState]) -> IVisualElementScheduledItem:...
        @typing.overload
        def __call__(self, updateEvent: Action) -> IVisualElementScheduledItem:...



class Justify(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FlexStart : Justify # 0
    Center : Justify # 1
    FlexEnd : Justify # 2
    SpaceBetween : Justify # 3
    SpaceAround : Justify # 4


class KeyboardEventBase_GenericClasses(abc.ABCMeta):
    Generic_KeyboardEventBase_GenericClasses_KeyboardEventBase_1_T = typing.TypeVar('Generic_KeyboardEventBase_GenericClasses_KeyboardEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_KeyboardEventBase_GenericClasses_KeyboardEventBase_1_T]) -> typing.Type[KeyboardEventBase_1[Generic_KeyboardEventBase_GenericClasses_KeyboardEventBase_1_T]]: ...

KeyboardEventBase : KeyboardEventBase_GenericClasses

KeyboardEventBase_1_T = typing.TypeVar('KeyboardEventBase_1_T')
class KeyboardEventBase_1(typing.Generic[KeyboardEventBase_1_T], EventBase_1[KeyboardEventBase_1_T], IKeyboardEvent):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def character(self) -> str: ...
    @character.setter
    def character(self, value: str) -> str: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def keyCode(self) -> KeyCode: ...
    @keyCode.setter
    def keyCode(self, value: KeyCode) -> KeyCode: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    # Skipped GetPooled due to it being static, abstract and generic.

    GetPooled : GetPooled_MethodGroup[KeyboardEventBase_1_T]
    GetPooled_MethodGroup_KeyboardEventBase_1_T = typing.TypeVar('GetPooled_MethodGroup_KeyboardEventBase_1_T')
    class GetPooled_MethodGroup(typing.Generic[GetPooled_MethodGroup_KeyboardEventBase_1_T]):
        GetPooled_MethodGroup_KeyboardEventBase_1_T = KeyboardEventBase_1.GetPooled_MethodGroup_KeyboardEventBase_1_T
        @typing.overload
        def __call__(self, systemEvent: Event) -> GetPooled_MethodGroup_KeyboardEventBase_1_T:...
        @typing.overload
        def __call__(self, c: str, keyCode: KeyCode, modifiers: EventModifiers) -> GetPooled_MethodGroup_KeyboardEventBase_1_T:...



class KeyboardNavigationManipulator(Manipulator):
    def __init__(self, action: Action_2[KeyboardNavigationOperation, EventBase]) -> None: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class KeyboardNavigationOperation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : KeyboardNavigationOperation # 0
    SelectAll : KeyboardNavigationOperation # 1
    Cancel : KeyboardNavigationOperation # 2
    Submit : KeyboardNavigationOperation # 3
    Previous : KeyboardNavigationOperation # 4
    Next : KeyboardNavigationOperation # 5
    MoveRight : KeyboardNavigationOperation # 6
    MoveLeft : KeyboardNavigationOperation # 7
    PageUp : KeyboardNavigationOperation # 8
    PageDown : KeyboardNavigationOperation # 9
    Begin : KeyboardNavigationOperation # 10
    End : KeyboardNavigationOperation # 11


class KeyDownEvent(KeyboardEventBase_1[KeyDownEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def character(self) -> str: ...
    @character.setter
    def character(self, value: str) -> str: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def keyCode(self) -> KeyCode: ...
    @keyCode.setter
    def keyCode(self, value: KeyCode) -> KeyCode: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class KeyUpEvent(KeyboardEventBase_1[KeyUpEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def character(self) -> str: ...
    @character.setter
    def character(self, value: str) -> str: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def keyCode(self) -> KeyCode: ...
    @keyCode.setter
    def keyCode(self, value: KeyCode) -> KeyCode: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class Label(TextElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Label, Label.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class LanguageDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Inherit : LanguageDirection # 0
    LTR : LanguageDirection # 1
    RTL : LanguageDirection # 2


class Length(IEquatable_1[Length]):
    @typing.overload
    def __init__(self, value: float) -> None: ...
    @typing.overload
    def __init__(self, value: float, unit: LengthUnit) -> None: ...
    @property
    def unit(self) -> LengthUnit: ...
    @unit.setter
    def unit(self, value: LengthUnit) -> LengthUnit: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @staticmethod
    def Auto() -> Length: ...
    def GetHashCode(self) -> int: ...
    def IsAuto(self) -> bool: ...
    def IsNone(self) -> bool: ...
    @staticmethod
    def None() -> Length: ...
    def __eq__(self, lhs: Length, rhs: Length) -> bool: ...
    # Operator not supported op_Implicit(value: Single)
    def __ne__(self, lhs: Length, rhs: Length) -> bool: ...
    @staticmethod
    def Percent(value: float) -> Length: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Length) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class LengthUnit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Pixel : LengthUnit # 0
    Percent : LengthUnit # 1


class LineCap(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Butt : LineCap # 0
    Round : LineCap # 1


class LineJoin(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Miter : LineJoin # 0
    Bevel : LineJoin # 1
    Round : LineJoin # 2


class ListView(BaseListView):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, itemsSource: IList, itemHeight: float = ..., makeItem: Func_1[VisualElement] = ..., bindItem: Action_2[VisualElement, int] = ...) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerTitle(self) -> str: ...
    @headerTitle.setter
    def headerTitle(self, value: str) -> str: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def reorderMode(self) -> ListViewReorderMode: ...
    @reorderMode.setter
    def reorderMode(self, value: ListViewReorderMode) -> ListViewReorderMode: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAddRemoveFooter(self) -> bool: ...
    @showAddRemoveFooter.setter
    def showAddRemoveFooter(self, value: bool) -> bool: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def showBoundCollectionSize(self) -> bool: ...
    @showBoundCollectionSize.setter
    def showBoundCollectionSize(self, value: bool) -> bool: ...
    @property
    def showFoldoutHeader(self) -> bool: ...
    @showFoldoutHeader.setter
    def showFoldoutHeader(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> BaseListViewController: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ListView, ListView.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseListView.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class ListViewController(BaseListViewController):
    def __init__(self) -> None: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...


class ListViewReorderMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Simple : ListViewReorderMode # 0
    Animated : ListViewReorderMode # 1


class LongField(TextValueField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[LongField, LongField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[int, UxmlLongAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class Manipulator(IManipulator, abc.ABC):
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class ManipulatorActivationFilter(IEquatable_1[ManipulatorActivationFilter]):
    @property
    def button(self) -> MouseButton: ...
    @button.setter
    def button(self, value: MouseButton) -> MouseButton: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, filter1: ManipulatorActivationFilter, filter2: ManipulatorActivationFilter) -> bool: ...
    def __ne__(self, filter1: ManipulatorActivationFilter, filter2: ManipulatorActivationFilter) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ManipulatorActivationFilter) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped Matches due to it being static, abstract and generic.

    Matches : Matches_MethodGroup
    class Matches_MethodGroup:
        @typing.overload
        def __call__(self, e: IMouseEvent) -> bool:...
        @typing.overload
        def __call__(self, e: IPointerEvent) -> bool:...



class MeshGenerationContext:
    @property
    def painter2D(self) -> Painter2D: ...
    @property
    def visualElement(self) -> VisualElement: ...
    def Allocate(self, vertexCount: int, indexCount: int, texture: Texture = ...) -> MeshWriteData: ...
    def DrawText(self, text: str, pos: Vector2, fontSize: float, color: Color, font: FontAsset = ...) -> None: ...
    def DrawVectorImage(self, vectorImage: VectorImage, offset: Vector2, rotationAngle: Angle, scale: Vector2) -> None: ...


class MeshWriteData:
    @property
    def indexCount(self) -> int: ...
    @property
    def uvRegion(self) -> Rect: ...
    @property
    def vertexCount(self) -> int: ...
    def SetNextIndex(self, index: int) -> None: ...
    def SetNextVertex(self, vertex: Vertex) -> None: ...
    # Skipped SetAllIndices due to it being static, abstract and generic.

    SetAllIndices : SetAllIndices_MethodGroup
    class SetAllIndices_MethodGroup:
        @typing.overload
        def __call__(self, indices: Array_1[int]) -> None:...
        @typing.overload
        def __call__(self, indices: NativeSlice_1[int]) -> None:...

    # Skipped SetAllVertices due to it being static, abstract and generic.

    SetAllVertices : SetAllVertices_MethodGroup
    class SetAllVertices_MethodGroup:
        @typing.overload
        def __call__(self, vertices: Array_1[Vertex]) -> None:...
        @typing.overload
        def __call__(self, vertices: NativeSlice_1[Vertex]) -> None:...



class MinMaxSlider(BaseField_1[Vector2]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, minValue: float = ..., maxValue: float = ..., minLimit: float = ..., maxLimit: float = ...) -> None: ...
    @typing.overload
    def __init__(self, minValue: float, maxValue: float, minLimit: float, maxLimit: float) -> None: ...
    draggerUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    maxThumbUssClassName : str
    minThumbUssClassName : str
    trackerUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highLimit(self) -> float: ...
    @highLimit.setter
    def highLimit(self, value: float) -> float: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowLimit(self) -> float: ...
    @lowLimit.setter
    def lowLimit(self, value: float) -> float: ...
    @property
    def maxValue(self) -> float: ...
    @maxValue.setter
    def maxValue(self, value: float) -> float: ...
    @property
    def minValue(self) -> float: ...
    @minValue.setter
    def minValue(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def range(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Vector2: ...
    @value.setter
    def value(self, value: Vector2) -> Vector2: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: Vector2) -> None: ...

    class UxmlFactory(UxmlFactory_2[MinMaxSlider, MinMaxSlider.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Vector2]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class MouseButton(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LeftMouse : MouseButton # 0
    RightMouse : MouseButton # 1
    MiddleMouse : MouseButton # 2


class MouseCaptureController(abc.ABC):
    @staticmethod
    def CaptureMouse(handler: IEventHandler) -> None: ...
    @staticmethod
    def HasMouseCapture(handler: IEventHandler) -> bool: ...
    @staticmethod
    def IsMouseCaptured() -> bool: ...
    # Skipped ReleaseMouse due to it being static, abstract and generic.

    ReleaseMouse : ReleaseMouse_MethodGroup
    class ReleaseMouse_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, handler: IEventHandler) -> None:...



class MouseCaptureEvent(MouseCaptureEventBase_1[MouseCaptureEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pointerId(self) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> IEventHandler: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseCaptureEventBase_GenericClasses(abc.ABCMeta):
    Generic_MouseCaptureEventBase_GenericClasses_MouseCaptureEventBase_1_T = typing.TypeVar('Generic_MouseCaptureEventBase_GenericClasses_MouseCaptureEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_MouseCaptureEventBase_GenericClasses_MouseCaptureEventBase_1_T]) -> typing.Type[MouseCaptureEventBase_1[Generic_MouseCaptureEventBase_GenericClasses_MouseCaptureEventBase_1_T]]: ...

MouseCaptureEventBase : MouseCaptureEventBase_GenericClasses

MouseCaptureEventBase_1_T = typing.TypeVar('MouseCaptureEventBase_1_T')
class MouseCaptureEventBase_1(typing.Generic[MouseCaptureEventBase_1_T], PointerCaptureEventBase_1[MouseCaptureEventBase_1_T], IMouseCaptureEvent):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pointerId(self) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> IEventHandler: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(target: IEventHandler, relatedTarget: IEventHandler) -> MouseCaptureEventBase_1_T: ...


class MouseCaptureOutEvent(MouseCaptureEventBase_1[MouseCaptureOutEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pointerId(self) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> IEventHandler: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseDownEvent(MouseEventBase_1[MouseDownEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> MouseDownEvent: ...


class MouseEnterEvent(MouseEventBase_1[MouseEnterEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseEnterWindowEvent(MouseEventBase_1[MouseEnterWindowEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseEventBase_GenericClasses(abc.ABCMeta):
    Generic_MouseEventBase_GenericClasses_MouseEventBase_1_T = typing.TypeVar('Generic_MouseEventBase_GenericClasses_MouseEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_MouseEventBase_GenericClasses_MouseEventBase_1_T]) -> typing.Type[MouseEventBase_1[Generic_MouseEventBase_GenericClasses_MouseEventBase_1_T]]: ...

MouseEventBase : MouseEventBase_GenericClasses

MouseEventBase_1_T = typing.TypeVar('MouseEventBase_1_T')
class MouseEventBase_1(typing.Generic[MouseEventBase_1_T], EventBase_1[MouseEventBase_1_T], IMouseEvent):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    # Skipped GetPooled due to it being static, abstract and generic.

    GetPooled : GetPooled_MethodGroup[MouseEventBase_1_T]
    GetPooled_MethodGroup_MouseEventBase_1_T = typing.TypeVar('GetPooled_MethodGroup_MouseEventBase_1_T')
    class GetPooled_MethodGroup(typing.Generic[GetPooled_MethodGroup_MouseEventBase_1_T]):
        GetPooled_MethodGroup_MouseEventBase_1_T = MouseEventBase_1.GetPooled_MethodGroup_MouseEventBase_1_T
        @typing.overload
        def __call__(self, systemEvent: Event) -> GetPooled_MethodGroup_MouseEventBase_1_T:...
        @typing.overload
        def __call__(self, triggerEvent: IMouseEvent) -> GetPooled_MethodGroup_MouseEventBase_1_T:...
        @typing.overload
        def __call__(self, position: Vector2, button: int, clickCount: int, delta: Vector2, modifiers: EventModifiers = ...) -> GetPooled_MethodGroup_MouseEventBase_1_T:...



class MouseLeaveEvent(MouseEventBase_1[MouseLeaveEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseLeaveWindowEvent(MouseEventBase_1[MouseLeaveWindowEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> MouseLeaveWindowEvent: ...


class MouseManipulator(Manipulator):
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @activators.setter
    def activators(self, value: List_1[ManipulatorActivationFilter]) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class MouseMoveEvent(MouseEventBase_1[MouseMoveEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> MouseMoveEvent: ...


class MouseOutEvent(MouseEventBase_1[MouseOutEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseOverEvent(MouseEventBase_1[MouseOverEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class MouseUpEvent(MouseEventBase_1[MouseUpEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> MouseUpEvent: ...


class MultiColumnController(IDisposable):
    def __init__(self, columns: Columns, sortDescriptions: SortColumnDescriptions, sortedColumns: List_1[SortColumnDescription]) -> None: ...
    cellLabelUssClassName : str
    cellUssClassName : str
    headerContainerUssClassName : str
    rowContainerUssClassName : str
    def DestroyItem(self, element: VisualElement) -> None: ...
    def Dispose(self) -> None: ...
    def MakeItem(self) -> VisualElement: ...
    def PrepareView(self, collectionView: BaseVerticalCollectionView) -> None: ...
    def UnbindItem(self, element: VisualElement, index: int) -> None: ...
    # Skipped BindItem due to it being static, abstract and generic.

    BindItem : BindItem_MethodGroup
    class BindItem_MethodGroup:
        def __getitem__(self, t:typing.Type[BindItem_1_T1]) -> BindItem_1[BindItem_1_T1]: ...

        BindItem_1_T1 = typing.TypeVar('BindItem_1_T1')
        class BindItem_1(typing.Generic[BindItem_1_T1]):
            BindItem_1_T = MultiColumnController.BindItem_MethodGroup.BindItem_1_T1
            def __call__(self, element: VisualElement, index: int, item: BindItem_1_T) -> None:...




class MultiColumnListView(BaseListView):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, columns: Columns) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def columns(self) -> Columns: ...
    @columns.setter
    def columns(self, value: Columns) -> Columns: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def headerTitle(self) -> str: ...
    @headerTitle.setter
    def headerTitle(self, value: str) -> str: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def reorderMode(self) -> ListViewReorderMode: ...
    @reorderMode.setter
    def reorderMode(self, value: ListViewReorderMode) -> ListViewReorderMode: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAddRemoveFooter(self) -> bool: ...
    @showAddRemoveFooter.setter
    def showAddRemoveFooter(self, value: bool) -> bool: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def showBoundCollectionSize(self) -> bool: ...
    @showBoundCollectionSize.setter
    def showBoundCollectionSize(self, value: bool) -> bool: ...
    @property
    def showFoldoutHeader(self) -> bool: ...
    @showFoldoutHeader.setter
    def showFoldoutHeader(self, value: bool) -> bool: ...
    @property
    def sortColumnDescriptions(self) -> SortColumnDescriptions: ...
    @sortColumnDescriptions.setter
    def sortColumnDescriptions(self, value: SortColumnDescriptions) -> SortColumnDescriptions: ...
    @property
    def sortedColumns(self) -> IEnumerable_1[SortColumnDescription]: ...
    @property
    def sortingEnabled(self) -> bool: ...
    @sortingEnabled.setter
    def sortingEnabled(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> MultiColumnListViewController: ...
    @property
    def viewController(self) -> BaseListViewController: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetViewController(self, controller: CollectionViewController) -> None: ...

    class UxmlFactory(UxmlFactory_2[MultiColumnListView, MultiColumnListView.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseListView.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class MultiColumnListViewController(BaseListViewController):
    def __init__(self, columns: Columns, sortDescriptions: SortColumnDescriptions, sortedColumns: List_1[SortColumnDescription]) -> None: ...
    @property
    def columnController(self) -> MultiColumnController: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    def Dispose(self) -> None: ...


class MultiColumnTreeView(BaseTreeView):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, columns: Columns) -> None: ...
    @property
    def autoExpand(self) -> bool: ...
    @autoExpand.setter
    def autoExpand(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def columns(self) -> Columns: ...
    @columns.setter
    def columns(self, value: Columns) -> Columns: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def sortColumnDescriptions(self) -> SortColumnDescriptions: ...
    @sortColumnDescriptions.setter
    def sortColumnDescriptions(self, value: SortColumnDescriptions) -> SortColumnDescriptions: ...
    @property
    def sortedColumns(self) -> IEnumerable_1[SortColumnDescription]: ...
    @property
    def sortingEnabled(self) -> bool: ...
    @sortingEnabled.setter
    def sortingEnabled(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> MultiColumnTreeViewController: ...
    @property
    def viewController(self) -> BaseTreeViewController: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetViewController(self, controller: CollectionViewController) -> None: ...

    class UxmlFactory(UxmlFactory_2[MultiColumnTreeView, MultiColumnTreeView.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseTreeView.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class MultiColumnTreeViewController(BaseTreeViewController):
    @property
    def columnController(self) -> MultiColumnController: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    def Dispose(self) -> None: ...


class NavigationCancelEvent(NavigationEventBase_1[NavigationCancelEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class NavigationEventBase_GenericClasses(abc.ABCMeta):
    Generic_NavigationEventBase_GenericClasses_NavigationEventBase_1_T = typing.TypeVar('Generic_NavigationEventBase_GenericClasses_NavigationEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_NavigationEventBase_GenericClasses_NavigationEventBase_1_T]) -> typing.Type[NavigationEventBase_1[Generic_NavigationEventBase_GenericClasses_NavigationEventBase_1_T]]: ...

NavigationEventBase : NavigationEventBase_GenericClasses

NavigationEventBase_1_T = typing.TypeVar('NavigationEventBase_1_T')
class NavigationEventBase_1(typing.Generic[NavigationEventBase_1_T], EventBase_1[NavigationEventBase_1_T], INavigationEvent):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(modifiers: EventModifiers = ...) -> NavigationEventBase_1_T: ...


class NavigationMoveEvent(NavigationEventBase_1[NavigationMoveEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def direction(self) -> NavigationMoveEvent.Direction: ...
    @direction.setter
    def direction(self, value: NavigationMoveEvent.Direction) -> NavigationMoveEvent.Direction: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def move(self) -> Vector2: ...
    @move.setter
    def move(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    # Skipped GetPooled due to it being static, abstract and generic.

    GetPooled : GetPooled_MethodGroup
    class GetPooled_MethodGroup:
        @typing.overload
        def __call__(self, direction: NavigationMoveEvent.Direction, modifiers: EventModifiers = ...) -> NavigationMoveEvent:...
        @typing.overload
        def __call__(self, moveVector: Vector2, modifiers: EventModifiers = ...) -> NavigationMoveEvent:...


    class Direction(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : NavigationMoveEvent.Direction # 0
        Left : NavigationMoveEvent.Direction # 1
        Up : NavigationMoveEvent.Direction # 2
        Right : NavigationMoveEvent.Direction # 3
        Down : NavigationMoveEvent.Direction # 4
        Next : NavigationMoveEvent.Direction # 5
        Previous : NavigationMoveEvent.Direction # 6



class NavigationSubmitEvent(NavigationEventBase_1[NavigationSubmitEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class Overflow(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Visible : Overflow # 0
    Hidden : Overflow # 1


class OverflowClipBox(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PaddingBox : OverflowClipBox # 0
    ContentBox : OverflowClipBox # 1


class Painter2D(IDisposable):
    def __init__(self) -> None: ...
    @property
    def fillColor(self) -> Color: ...
    @fillColor.setter
    def fillColor(self, value: Color) -> Color: ...
    @property
    def lineCap(self) -> LineCap: ...
    @lineCap.setter
    def lineCap(self, value: LineCap) -> LineCap: ...
    @property
    def lineJoin(self) -> LineJoin: ...
    @lineJoin.setter
    def lineJoin(self, value: LineJoin) -> LineJoin: ...
    @property
    def lineWidth(self) -> float: ...
    @lineWidth.setter
    def lineWidth(self, value: float) -> float: ...
    @property
    def miterLimit(self) -> float: ...
    @miterLimit.setter
    def miterLimit(self, value: float) -> float: ...
    @property
    def strokeColor(self) -> Color: ...
    @strokeColor.setter
    def strokeColor(self, value: Color) -> Color: ...
    @property
    def strokeGradient(self) -> Gradient: ...
    @strokeGradient.setter
    def strokeGradient(self, value: Gradient) -> Gradient: ...
    def Arc(self, center: Vector2, radius: float, startAngle: Angle, endAngle: Angle, direction: ArcDirection = ...) -> None: ...
    def ArcTo(self, p1: Vector2, p2: Vector2, radius: float) -> None: ...
    def BeginPath(self) -> None: ...
    def BezierCurveTo(self, p1: Vector2, p2: Vector2, p3: Vector2) -> None: ...
    def Clear(self) -> None: ...
    def ClosePath(self) -> None: ...
    def Dispose(self) -> None: ...
    def Fill(self, fillRule: FillRule = ...) -> None: ...
    def LineTo(self, pos: Vector2) -> None: ...
    def MoveTo(self, pos: Vector2) -> None: ...
    def QuadraticCurveTo(self, p1: Vector2, p2: Vector2) -> None: ...
    def SaveToVectorImage(self, vectorImage: VectorImage) -> bool: ...
    def Stroke(self) -> None: ...


class PanelChangedEventBase_GenericClasses(abc.ABCMeta):
    Generic_PanelChangedEventBase_GenericClasses_PanelChangedEventBase_1_T = typing.TypeVar('Generic_PanelChangedEventBase_GenericClasses_PanelChangedEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_PanelChangedEventBase_GenericClasses_PanelChangedEventBase_1_T]) -> typing.Type[PanelChangedEventBase_1[Generic_PanelChangedEventBase_GenericClasses_PanelChangedEventBase_1_T]]: ...

PanelChangedEventBase : PanelChangedEventBase_GenericClasses

PanelChangedEventBase_1_T = typing.TypeVar('PanelChangedEventBase_1_T')
class PanelChangedEventBase_1(typing.Generic[PanelChangedEventBase_1_T], EventBase_1[PanelChangedEventBase_1_T], IPanelChangedEvent):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def destinationPanel(self) -> IPanel: ...
    @destinationPanel.setter
    def destinationPanel(self, value: IPanel) -> IPanel: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def originPanel(self) -> IPanel: ...
    @originPanel.setter
    def originPanel(self, value: IPanel) -> IPanel: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(originPanel: IPanel, destinationPanel: IPanel) -> PanelChangedEventBase_1_T: ...


class PanelScaleMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ConstantPixelSize : PanelScaleMode # 0
    ConstantPhysicalSize : PanelScaleMode # 1
    ScaleWithScreenSize : PanelScaleMode # 2


class PanelScreenMatchMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MatchWidthOrHeight : PanelScreenMatchMode # 0
    Shrink : PanelScreenMatchMode # 1
    Expand : PanelScreenMatchMode # 2


class PanelSettings(ScriptableObject):
    textSettings : PanelTextSettings
    @property
    def clearColor(self) -> bool: ...
    @clearColor.setter
    def clearColor(self, value: bool) -> bool: ...
    @property
    def clearDepthStencil(self) -> bool: ...
    @clearDepthStencil.setter
    def clearDepthStencil(self, value: bool) -> bool: ...
    @property
    def colorClearValue(self) -> Color: ...
    @colorClearValue.setter
    def colorClearValue(self, value: Color) -> Color: ...
    @property
    def depthClearValue(self) -> float: ...
    @property
    def dynamicAtlasSettings(self) -> DynamicAtlasSettings: ...
    @dynamicAtlasSettings.setter
    def dynamicAtlasSettings(self, value: DynamicAtlasSettings) -> DynamicAtlasSettings: ...
    @property
    def fallbackDpi(self) -> float: ...
    @fallbackDpi.setter
    def fallbackDpi(self, value: float) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def match(self) -> float: ...
    @match.setter
    def match(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def referenceDpi(self) -> float: ...
    @referenceDpi.setter
    def referenceDpi(self, value: float) -> float: ...
    @property
    def referenceResolution(self) -> Vector2Int: ...
    @referenceResolution.setter
    def referenceResolution(self, value: Vector2Int) -> Vector2Int: ...
    @property
    def referenceSpritePixelsPerUnit(self) -> float: ...
    @referenceSpritePixelsPerUnit.setter
    def referenceSpritePixelsPerUnit(self, value: float) -> float: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...
    @property
    def scaleMode(self) -> PanelScaleMode: ...
    @scaleMode.setter
    def scaleMode(self, value: PanelScaleMode) -> PanelScaleMode: ...
    @property
    def screenMatchMode(self) -> PanelScreenMatchMode: ...
    @screenMatchMode.setter
    def screenMatchMode(self, value: PanelScreenMatchMode) -> PanelScreenMatchMode: ...
    @property
    def sortingOrder(self) -> float: ...
    @sortingOrder.setter
    def sortingOrder(self, value: float) -> float: ...
    @property
    def targetDisplay(self) -> int: ...
    @targetDisplay.setter
    def targetDisplay(self, value: int) -> int: ...
    @property
    def targetTexture(self) -> RenderTexture: ...
    @targetTexture.setter
    def targetTexture(self, value: RenderTexture) -> RenderTexture: ...
    @property
    def themeStyleSheet(self) -> ThemeStyleSheet: ...
    @themeStyleSheet.setter
    def themeStyleSheet(self, value: ThemeStyleSheet) -> ThemeStyleSheet: ...
    def SetScreenToPanelSpaceFunction(self, screentoPanelSpaceFunction: Func_2[Vector2, Vector2]) -> None: ...


class PanelTextSettings(TextSettings):
    def __init__(self) -> None: ...
    @property
    def clearDynamicDataOnBuild(self) -> bool: ...
    @clearDynamicDataOnBuild.setter
    def clearDynamicDataOnBuild(self, value: bool) -> bool: ...
    @property
    def defaultColorGradientPresetsPath(self) -> str: ...
    @defaultColorGradientPresetsPath.setter
    def defaultColorGradientPresetsPath(self, value: str) -> str: ...
    @property
    def defaultFontAsset(self) -> FontAsset: ...
    @defaultFontAsset.setter
    def defaultFontAsset(self, value: FontAsset) -> FontAsset: ...
    @property
    def defaultFontAssetPath(self) -> str: ...
    @defaultFontAssetPath.setter
    def defaultFontAssetPath(self, value: str) -> str: ...
    @property
    def defaultSpriteAsset(self) -> SpriteAsset: ...
    @defaultSpriteAsset.setter
    def defaultSpriteAsset(self, value: SpriteAsset) -> SpriteAsset: ...
    @property
    def defaultSpriteAssetPath(self) -> str: ...
    @defaultSpriteAssetPath.setter
    def defaultSpriteAssetPath(self, value: str) -> str: ...
    @property
    def defaultStyleSheet(self) -> TextStyleSheet: ...
    @defaultStyleSheet.setter
    def defaultStyleSheet(self, value: TextStyleSheet) -> TextStyleSheet: ...
    @property
    def displayWarnings(self) -> bool: ...
    @displayWarnings.setter
    def displayWarnings(self, value: bool) -> bool: ...
    @property
    def fallbackFontAssets(self) -> List_1[FontAsset]: ...
    @fallbackFontAssets.setter
    def fallbackFontAssets(self, value: List_1[FontAsset]) -> List_1[FontAsset]: ...
    @property
    def fallbackSpriteAssets(self) -> List_1[SpriteAsset]: ...
    @fallbackSpriteAssets.setter
    def fallbackSpriteAssets(self, value: List_1[SpriteAsset]) -> List_1[SpriteAsset]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def lineBreakingRules(self) -> UnicodeLineBreakingRules: ...
    @lineBreakingRules.setter
    def lineBreakingRules(self, value: UnicodeLineBreakingRules) -> UnicodeLineBreakingRules: ...
    @property
    def matchMaterialPreset(self) -> bool: ...
    @matchMaterialPreset.setter
    def matchMaterialPreset(self, value: bool) -> bool: ...
    @property
    def missingCharacterUnicode(self) -> int: ...
    @missingCharacterUnicode.setter
    def missingCharacterUnicode(self, value: int) -> int: ...
    @property
    def missingSpriteCharacterUnicode(self) -> int: ...
    @missingSpriteCharacterUnicode.setter
    def missingSpriteCharacterUnicode(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def styleSheetsResourcePath(self) -> str: ...
    @styleSheetsResourcePath.setter
    def styleSheetsResourcePath(self, value: str) -> str: ...
    @property
    def useModernHangulLineBreakingRules(self) -> bool: ...
    @useModernHangulLineBreakingRules.setter
    def useModernHangulLineBreakingRules(self, value: bool) -> bool: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> str: ...


class PenButton(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PenContact : PenButton # 0
    PenBarrel : PenButton # 1
    PenEraser : PenButton # 5


class PickingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Position : PickingMode # 0
    Ignore : PickingMode # 1


class PointerCancelEvent(PointerEventBase_1[PointerCancelEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerCaptureEvent(PointerCaptureEventBase_1[PointerCaptureEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pointerId(self) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> IEventHandler: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class PointerCaptureEventBase_GenericClasses(abc.ABCMeta):
    Generic_PointerCaptureEventBase_GenericClasses_PointerCaptureEventBase_1_T = typing.TypeVar('Generic_PointerCaptureEventBase_GenericClasses_PointerCaptureEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_PointerCaptureEventBase_GenericClasses_PointerCaptureEventBase_1_T]) -> typing.Type[PointerCaptureEventBase_1[Generic_PointerCaptureEventBase_GenericClasses_PointerCaptureEventBase_1_T]]: ...

PointerCaptureEventBase : PointerCaptureEventBase_GenericClasses

PointerCaptureEventBase_1_T = typing.TypeVar('PointerCaptureEventBase_1_T')
class PointerCaptureEventBase_1(typing.Generic[PointerCaptureEventBase_1_T], EventBase_1[PointerCaptureEventBase_1_T], IPointerCaptureEvent):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> IEventHandler: ...
    @relatedTarget.setter
    def relatedTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(target: IEventHandler, relatedTarget: IEventHandler, pointerId: int) -> PointerCaptureEventBase_1_T: ...


class PointerCaptureHelper(abc.ABC):
    @staticmethod
    def CapturePointer(handler: IEventHandler, pointerId: int) -> None: ...
    @staticmethod
    def GetCapturingElement(panel: IPanel, pointerId: int) -> IEventHandler: ...
    @staticmethod
    def HasPointerCapture(handler: IEventHandler, pointerId: int) -> bool: ...
    # Skipped ReleasePointer due to it being static, abstract and generic.

    ReleasePointer : ReleasePointer_MethodGroup
    class ReleasePointer_MethodGroup:
        @typing.overload
        def __call__(self, panel: IPanel, pointerId: int) -> None:...
        @typing.overload
        def __call__(self, handler: IEventHandler, pointerId: int) -> None:...



class PointerCaptureOutEvent(PointerCaptureEventBase_1[PointerCaptureOutEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pointerId(self) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def relatedTarget(self) -> IEventHandler: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class PointerDownEvent(PointerEventBase_1[PointerDownEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerEnterEvent(PointerEventBase_1[PointerEnterEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerEventBase_GenericClasses(abc.ABCMeta):
    Generic_PointerEventBase_GenericClasses_PointerEventBase_1_T = typing.TypeVar('Generic_PointerEventBase_GenericClasses_PointerEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_PointerEventBase_GenericClasses_PointerEventBase_1_T]) -> typing.Type[PointerEventBase_1[Generic_PointerEventBase_GenericClasses_PointerEventBase_1_T]]: ...

PointerEventBase : PointerEventBase_GenericClasses

PointerEventBase_1_T = typing.TypeVar('PointerEventBase_1_T')
class PointerEventBase_1(typing.Generic[PointerEventBase_1_T], EventBase_1[PointerEventBase_1_T], IPointerEvent):
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...
    # Skipped GetPooled due to it being static, abstract and generic.

    GetPooled : GetPooled_MethodGroup[PointerEventBase_1_T]
    GetPooled_MethodGroup_PointerEventBase_1_T = typing.TypeVar('GetPooled_MethodGroup_PointerEventBase_1_T')
    class GetPooled_MethodGroup(typing.Generic[GetPooled_MethodGroup_PointerEventBase_1_T]):
        GetPooled_MethodGroup_PointerEventBase_1_T = PointerEventBase_1.GetPooled_MethodGroup_PointerEventBase_1_T
        @typing.overload
        def __call__(self, systemEvent: Event) -> GetPooled_MethodGroup_PointerEventBase_1_T:...
        @typing.overload
        def __call__(self, triggerEvent: IPointerEvent) -> GetPooled_MethodGroup_PointerEventBase_1_T:...
        @typing.overload
        def __call__(self, pen: PenData, modifiers: EventModifiers = ...) -> GetPooled_MethodGroup_PointerEventBase_1_T:...
        @typing.overload
        def __call__(self, touch: Touch, modifiers: EventModifiers = ...) -> GetPooled_MethodGroup_PointerEventBase_1_T:...



class PointerId(abc.ABC):
    invalidPointerId : int
    maxPointers : int
    mousePointerId : int
    penPointerCount : int
    penPointerIdBase : int
    touchPointerCount : int
    touchPointerIdBase : int


class PointerLeaveEvent(PointerEventBase_1[PointerLeaveEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerManipulator(MouseManipulator):
    @property
    def activators(self) -> List_1[ManipulatorActivationFilter]: ...
    @property
    def target(self) -> VisualElement: ...
    @target.setter
    def target(self, value: VisualElement) -> VisualElement: ...


class PointerMoveEvent(PointerEventBase_1[PointerMoveEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerOutEvent(PointerEventBase_1[PointerOutEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerOverEvent(PointerEventBase_1[PointerOverEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerStationaryEvent(PointerEventBase_1[PointerStationaryEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PointerType(abc.ABC):
    mouse : str
    pen : str
    touch : str
    unknown : str


class PointerUpEvent(PointerEventBase_1[PointerUpEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altitudeAngle(self) -> float: ...
    @altitudeAngle.setter
    def altitudeAngle(self, value: float) -> float: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def azimuthAngle(self) -> float: ...
    @azimuthAngle.setter
    def azimuthAngle(self, value: float) -> float: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def deltaPosition(self) -> Vector3: ...
    @deltaPosition.setter
    def deltaPosition(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @deltaTime.setter
    def deltaTime(self, value: float) -> float: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPrimary(self) -> bool: ...
    @isPrimary.setter
    def isPrimary(self, value: bool) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localPosition(self) -> Vector3: ...
    @localPosition.setter
    def localPosition(self, value: Vector3) -> Vector3: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def penStatus(self) -> PenStatus: ...
    @penStatus.setter
    def penStatus(self, value: PenStatus) -> PenStatus: ...
    @property
    def pointerId(self) -> int: ...
    @pointerId.setter
    def pointerId(self, value: int) -> int: ...
    @property
    def pointerType(self) -> str: ...
    @pointerType.setter
    def pointerType(self, value: str) -> str: ...
    @property
    def position(self) -> Vector3: ...
    @position.setter
    def position(self, value: Vector3) -> Vector3: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def pressure(self) -> float: ...
    @pressure.setter
    def pressure(self, value: float) -> float: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def radius(self) -> Vector2: ...
    @radius.setter
    def radius(self, value: Vector2) -> Vector2: ...
    @property
    def radiusVariance(self) -> Vector2: ...
    @radiusVariance.setter
    def radiusVariance(self, value: Vector2) -> Vector2: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def tangentialPressure(self) -> float: ...
    @tangentialPressure.setter
    def tangentialPressure(self, value: float) -> float: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def tilt(self) -> Vector2: ...
    @tilt.setter
    def tilt(self, value: Vector2) -> Vector2: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @property
    def twist(self) -> float: ...
    @twist.setter
    def twist(self, value: float) -> float: ...


class PopupField_GenericClasses(abc.ABCMeta):
    Generic_PopupField_GenericClasses_PopupField_1_T = typing.TypeVar('Generic_PopupField_GenericClasses_PopupField_1_T')
    def __getitem__(self, types : typing.Type[Generic_PopupField_GenericClasses_PopupField_1_T]) -> typing.Type[PopupField_1[Generic_PopupField_GenericClasses_PopupField_1_T]]: ...

PopupField : PopupField_GenericClasses

PopupField_1_T = typing.TypeVar('PopupField_1_T')
class PopupField_1(typing.Generic[PopupField_1_T], BasePopupField_2[PopupField_1_T, PopupField_1_T]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, choices: List_1[PopupField_1_T], defaultIndex: int, formatSelectedValueCallback: Func_2[PopupField_1_T, str] = ..., formatListItemCallback: Func_2[PopupField_1_T, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, choices: List_1[PopupField_1_T], defaultValue: PopupField_1_T, formatSelectedValueCallback: Func_2[PopupField_1_T, str] = ..., formatListItemCallback: Func_2[PopupField_1_T, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, label: str = ...) -> None: ...
    @typing.overload
    def __init__(self, label: str, choices: List_1[PopupField_1_T], defaultIndex: int, formatSelectedValueCallback: Func_2[PopupField_1_T, str] = ..., formatListItemCallback: Func_2[PopupField_1_T, str] = ...) -> None: ...
    @typing.overload
    def __init__(self, label: str, choices: List_1[PopupField_1_T], defaultValue: PopupField_1_T, formatSelectedValueCallback: Func_2[PopupField_1_T, str] = ..., formatListItemCallback: Func_2[PopupField_1_T, str] = ...) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> List_1[PopupField_1_T]: ...
    @choices.setter
    def choices(self, value: List_1[PopupField_1_T]) -> List_1[PopupField_1_T]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatListItemCallback(self) -> Func_2[PopupField_1_T, str]: ...
    @formatListItemCallback.setter
    def formatListItemCallback(self, value: Func_2[PopupField_1_T, str]) -> Func_2[PopupField_1_T, str]: ...
    @property
    def formatSelectedValueCallback(self) -> Func_2[PopupField_1_T, str]: ...
    @formatSelectedValueCallback.setter
    def formatSelectedValueCallback(self, value: Func_2[PopupField_1_T, str]) -> Func_2[PopupField_1_T, str]: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> PopupField_1_T: ...
    @value.setter
    def value(self, value: PopupField_1_T) -> PopupField_1_T: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: PopupField_1_T) -> None: ...


class PopupWindow(TextElement):
    def __init__(self) -> None: ...
    contentUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[PopupWindow, PopupWindow.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class Position(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Relative : Position # 0
    Absolute : Position # 1


class ProgressBar(AbstractProgressBar):
    def __init__(self) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highValue(self) -> float: ...
    @highValue.setter
    def highValue(self, value: float) -> float: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowValue(self) -> float: ...
    @lowValue.setter
    def lowValue(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[ProgressBar, AbstractProgressBar.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...



class PropagationPhase(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : PropagationPhase # 0
    TrickleDown : PropagationPhase # 1
    AtTarget : PropagationPhase # 2
    BubbleUp : PropagationPhase # 3
    DefaultAction : PropagationPhase # 4
    DefaultActionAtTarget : PropagationPhase # 5


class RadioButton(BaseBoolField):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    checkmarkBackgroundUssClassName : str
    checkmarkUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetSelected(self, selected: bool) -> None: ...
    def SetValueWithoutNotify(self, newValue: bool) -> None: ...

    class UxmlFactory(UxmlFactory_2[RadioButton, RadioButton.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseFieldTraits_2[bool, UxmlBoolAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class RadioButtonGroup(BaseField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, radioButtonChoices: List_1[str] = ...) -> None: ...
    containerUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def choices(self) -> IEnumerable_1[str]: ...
    @choices.setter
    def choices(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[RadioButtonGroup, RadioButtonGroup.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseFieldTraits_2[int, UxmlIntAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class RectField(BaseCompositeField_3[Rect, FloatField, float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Rect: ...
    @value.setter
    def value(self, value: Rect) -> Rect: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[RectField, RectField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Rect]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class RectIntField(BaseCompositeField_3[RectInt, IntegerField, int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> RectInt: ...
    @value.setter
    def value(self, value: RectInt) -> RectInt: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[RectIntField, RectIntField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[RectInt]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Repeat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoRepeat : Repeat # 0
    Space : Repeat # 1
    Round : Repeat # 2
    Repeat : Repeat # 3


class RepeatButton(TextElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, clickEvent: Action, delay: int, interval: int) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetAction(self, clickEvent: Action, delay: int, interval: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[RepeatButton, RepeatButton.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Rotate(IEquatable_1[Rotate]):
    def __init__(self, angle: Angle) -> None: ...
    @property
    def angle(self) -> Angle: ...
    @angle.setter
    def angle(self, value: Angle) -> Angle: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def None() -> Rotate: ...
    def __eq__(self, lhs: Rotate, rhs: Rotate) -> bool: ...
    def __ne__(self, lhs: Rotate, rhs: Rotate) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Rotate) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class RuntimePanelUtils(abc.ABC):
    @staticmethod
    def CameraTransformWorldToPanel(panel: IPanel, worldPosition: Vector3, camera: Camera) -> Vector2: ...
    @staticmethod
    def CameraTransformWorldToPanelRect(panel: IPanel, worldPosition: Vector3, worldSize: Vector2, camera: Camera) -> Rect: ...
    @staticmethod
    def ResetDynamicAtlas(panel: IPanel) -> None: ...
    @staticmethod
    def ScreenToPanel(panel: IPanel, screenPosition: Vector2) -> Vector2: ...
    @staticmethod
    def SetTextureDirty(panel: IPanel, texture: Texture2D) -> None: ...


class Scale(IEquatable_1[Scale]):
    @typing.overload
    def __init__(self, scale: Vector2) -> None: ...
    @typing.overload
    def __init__(self, scale: Vector3) -> None: ...
    @property
    def value(self) -> Vector3: ...
    @value.setter
    def value(self, value: Vector3) -> Vector3: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def None() -> Scale: ...
    def __eq__(self, lhs: Scale, rhs: Scale) -> bool: ...
    # Operator not supported op_Implicit(scale: Vector2)
    def __ne__(self, lhs: Scale, rhs: Scale) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Scale) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class Scroller(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, lowValue: float, highValue: float, valueChanged: Action_1[float], direction: SliderDirection = ...) -> None: ...
    highButtonUssClassName : str
    horizontalVariantUssClassName : str
    lowButtonUssClassName : str
    sliderUssClassName : str
    ussClassName : str
    verticalVariantUssClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def direction(self) -> SliderDirection: ...
    @direction.setter
    def direction(self, value: SliderDirection) -> SliderDirection: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highButton(self) -> RepeatButton: ...
    @highButton.setter
    def highButton(self, value: RepeatButton) -> RepeatButton: ...
    @property
    def highValue(self) -> float: ...
    @highValue.setter
    def highValue(self, value: float) -> float: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowButton(self) -> RepeatButton: ...
    @lowButton.setter
    def lowButton(self, value: RepeatButton) -> RepeatButton: ...
    @property
    def lowValue(self) -> float: ...
    @lowValue.setter
    def lowValue(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def slider(self) -> Slider: ...
    @slider.setter
    def slider(self, value: Slider) -> Slider: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def Adjust(self, factor: float) -> None: ...
    # Skipped ScrollPageDown due to it being static, abstract and generic.

    ScrollPageDown : ScrollPageDown_MethodGroup
    class ScrollPageDown_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, factor: float) -> None:...

    # Skipped ScrollPageUp due to it being static, abstract and generic.

    ScrollPageUp : ScrollPageUp_MethodGroup
    class ScrollPageUp_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, factor: float) -> None:...


    class UxmlFactory(UxmlFactory_2[Scroller, Scroller.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class ScrollerVisibility(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : ScrollerVisibility # 0
    AlwaysVisible : ScrollerVisibility # 1
    Hidden : ScrollerVisibility # 2


class ScrollView(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, scrollViewMode: ScrollViewMode) -> None: ...
    contentAndVerticalScrollUssClassName : str
    contentUssClassName : str
    horizontalVariantContentUssClassName : str
    horizontalVariantUssClassName : str
    horizontalVariantViewportUssClassName : str
    hScrollerUssClassName : str
    scrollVariantUssClassName : str
    ussClassName : str
    verticalHorizontalVariantContentUssClassName : str
    verticalHorizontalVariantUssClassName : str
    verticalHorizontalVariantViewportUssClassName : str
    verticalVariantContentUssClassName : str
    verticalVariantUssClassName : str
    verticalVariantViewportUssClassName : str
    viewportUssClassName : str
    vScrollerUssClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def contentViewport(self) -> VisualElement: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def elasticAnimationIntervalMs(self) -> int: ...
    @elasticAnimationIntervalMs.setter
    def elasticAnimationIntervalMs(self, value: int) -> int: ...
    @property
    def elasticity(self) -> float: ...
    @elasticity.setter
    def elasticity(self, value: float) -> float: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalPageSize(self) -> float: ...
    @horizontalPageSize.setter
    def horizontalPageSize(self, value: float) -> float: ...
    @property
    def horizontalScroller(self) -> Scroller: ...
    @property
    def horizontalScrollerVisibility(self) -> ScrollerVisibility: ...
    @horizontalScrollerVisibility.setter
    def horizontalScrollerVisibility(self, value: ScrollerVisibility) -> ScrollerVisibility: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def mode(self) -> ScrollViewMode: ...
    @mode.setter
    def mode(self, value: ScrollViewMode) -> ScrollViewMode: ...
    @property
    def mouseWheelScrollSize(self) -> float: ...
    @mouseWheelScrollSize.setter
    def mouseWheelScrollSize(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def nestedInteractionKind(self) -> ScrollView.NestedInteractionKind: ...
    @nestedInteractionKind.setter
    def nestedInteractionKind(self, value: ScrollView.NestedInteractionKind) -> ScrollView.NestedInteractionKind: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def scrollDecelerationRate(self) -> float: ...
    @scrollDecelerationRate.setter
    def scrollDecelerationRate(self, value: float) -> float: ...
    @property
    def scrollOffset(self) -> Vector2: ...
    @scrollOffset.setter
    def scrollOffset(self, value: Vector2) -> Vector2: ...
    @property
    def showHorizontal(self) -> bool: ...
    @showHorizontal.setter
    def showHorizontal(self, value: bool) -> bool: ...
    @property
    def showVertical(self) -> bool: ...
    @showVertical.setter
    def showVertical(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScrollBehavior(self) -> ScrollView.TouchScrollBehavior: ...
    @touchScrollBehavior.setter
    def touchScrollBehavior(self, value: ScrollView.TouchScrollBehavior) -> ScrollView.TouchScrollBehavior: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def verticalPageSize(self) -> float: ...
    @verticalPageSize.setter
    def verticalPageSize(self, value: float) -> float: ...
    @property
    def verticalScroller(self) -> Scroller: ...
    @property
    def verticalScrollerVisibility(self) -> ScrollerVisibility: ...
    @verticalScrollerVisibility.setter
    def verticalScrollerVisibility(self, value: ScrollerVisibility) -> ScrollerVisibility: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ScrollTo(self, child: VisualElement) -> None: ...

    class NestedInteractionKind(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Default : ScrollView.NestedInteractionKind # 0
        StopScrolling : ScrollView.NestedInteractionKind # 1
        ForwardScrolling : ScrollView.NestedInteractionKind # 2


    class TouchScrollBehavior(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Unrestricted : ScrollView.TouchScrollBehavior # 0
        Elastic : ScrollView.TouchScrollBehavior # 1
        Clamped : ScrollView.TouchScrollBehavior # 2


    class UxmlFactory(UxmlFactory_2[ScrollView, ScrollView.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class ScrollViewMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Vertical : ScrollViewMode # 0
    Horizontal : ScrollViewMode # 1
    VerticalAndHorizontal : ScrollViewMode # 2


class SelectionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SelectionType # 0
    Single : SelectionType # 1
    Multiple : SelectionType # 2


class Slider(BaseSlider_1[float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, start: float = ..., end: float = ..., direction: SliderDirection = ..., pageSize: float = ...) -> None: ...
    @typing.overload
    def __init__(self, start: float, end: float, direction: SliderDirection = ..., pageSize: float = ...) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def direction(self) -> SliderDirection: ...
    @direction.setter
    def direction(self, value: SliderDirection) -> SliderDirection: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highValue(self) -> float: ...
    @highValue.setter
    def highValue(self, value: float) -> float: ...
    @property
    def inverted(self) -> bool: ...
    @inverted.setter
    def inverted(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowValue(self) -> float: ...
    @lowValue.setter
    def lowValue(self, value: float) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def pageSize(self) -> float: ...
    @pageSize.setter
    def pageSize(self, value: float) -> float: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def range(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showInputField(self) -> bool: ...
    @showInputField.setter
    def showInputField(self, value: bool) -> bool: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: float) -> None: ...

    class UxmlFactory(UxmlFactory_2[Slider, Slider.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseSlider_1.UxmlTraits_1[float]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class SliderDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Horizontal : SliderDirection # 0
    Vertical : SliderDirection # 1


class SliderInt(BaseSlider_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, start: int = ..., end: int = ..., direction: SliderDirection = ..., pageSize: float = ...) -> None: ...
    @typing.overload
    def __init__(self, start: int, end: int, direction: SliderDirection = ..., pageSize: float = ...) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def direction(self) -> SliderDirection: ...
    @direction.setter
    def direction(self, value: SliderDirection) -> SliderDirection: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def highValue(self) -> int: ...
    @highValue.setter
    def highValue(self, value: int) -> int: ...
    @property
    def inverted(self) -> bool: ...
    @inverted.setter
    def inverted(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def lowValue(self) -> int: ...
    @lowValue.setter
    def lowValue(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def pageSize(self) -> float: ...
    @pageSize.setter
    def pageSize(self, value: float) -> float: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def range(self) -> int: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showInputField(self) -> bool: ...
    @showInputField.setter
    def showInputField(self, value: bool) -> bool: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[SliderInt, SliderInt.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseSlider_1.UxmlTraits_1[int]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class SortColumnDescription:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, columnIndex: int, direction: SortDirection) -> None: ...
    @typing.overload
    def __init__(self, columnName: str, direction: SortDirection) -> None: ...
    @property
    def column(self) -> Column: ...
    @column.setter
    def column(self, value: Column) -> Column: ...
    @property
    def columnIndex(self) -> int: ...
    @columnIndex.setter
    def columnIndex(self, value: int) -> int: ...
    @property
    def columnName(self) -> str: ...
    @columnName.setter
    def columnName(self, value: str) -> str: ...
    @property
    def direction(self) -> SortDirection: ...
    @direction.setter
    def direction(self, value: SortDirection) -> SortDirection: ...


class SortColumnDescriptions(ICollection_1[SortColumnDescription]):
    def __init__(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self) -> SortColumnDescription: ...
    def Add(self, item: SortColumnDescription) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: SortColumnDescription) -> bool: ...
    def CopyTo(self, array: Array_1[SortColumnDescription], arrayIndex: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator_1[SortColumnDescription]: ...
    def IndexOf(self, desc: SortColumnDescription) -> int: ...
    def Insert(self, index: int, desc: SortColumnDescription) -> None: ...
    def Remove(self, desc: SortColumnDescription) -> bool: ...
    def RemoveAt(self, index: int) -> None: ...


class SortDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ascending : SortDirection # 0
    Descending : SortDirection # 1


class StyleBackground(IEquatable_1[StyleBackground]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: Background) -> None: ...
    @typing.overload
    def __init__(self, v: Texture2D) -> None: ...
    @typing.overload
    def __init__(self, v: Sprite) -> None: ...
    @typing.overload
    def __init__(self, v: VectorImage) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Background: ...
    @value.setter
    def value(self, value: Background) -> Background: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleBackground, rhs: StyleBackground) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Texture2D)
    # Operator not supported op_Implicit(v: Background)
    def __ne__(self, lhs: StyleBackground, rhs: StyleBackground) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleBackground) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleBackgroundPosition(IEquatable_1[StyleBackgroundPosition]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: BackgroundPosition) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> BackgroundPosition: ...
    @value.setter
    def value(self, value: BackgroundPosition) -> BackgroundPosition: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleBackgroundPosition, rhs: StyleBackgroundPosition) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: BackgroundPosition)
    def __ne__(self, lhs: StyleBackgroundPosition, rhs: StyleBackgroundPosition) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleBackgroundPosition) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleBackgroundRepeat(IEquatable_1[StyleBackgroundRepeat]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: BackgroundRepeat) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> BackgroundRepeat: ...
    @value.setter
    def value(self, value: BackgroundRepeat) -> BackgroundRepeat: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleBackgroundRepeat, rhs: StyleBackgroundRepeat) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: BackgroundRepeat)
    def __ne__(self, lhs: StyleBackgroundRepeat, rhs: StyleBackgroundRepeat) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleBackgroundRepeat) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleBackgroundSize(IEquatable_1[StyleBackgroundSize]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: BackgroundSize) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> BackgroundSize: ...
    @value.setter
    def value(self, value: BackgroundSize) -> BackgroundSize: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleBackgroundSize, rhs: StyleBackgroundSize) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: BackgroundSize)
    def __ne__(self, lhs: StyleBackgroundSize, rhs: StyleBackgroundSize) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleBackgroundSize) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleColor(IEquatable_1[StyleColor]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: Color) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Color: ...
    @value.setter
    def value(self, value: Color) -> Color: ...
    def GetHashCode(self) -> int: ...
    @typing.overload
    def __eq__(self, lhs: StyleColor, rhs: StyleColor) -> bool: ...
    @typing.overload
    def __eq__(self, lhs: StyleColor, rhs: Color) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Color)
    @typing.overload
    def __ne__(self, lhs: StyleColor, rhs: StyleColor) -> bool: ...
    @typing.overload
    def __ne__(self, lhs: StyleColor, rhs: Color) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleColor) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleCursor(IEquatable_1[StyleCursor]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: Cursor) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Cursor: ...
    @value.setter
    def value(self, value: Cursor) -> Cursor: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleCursor, rhs: StyleCursor) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Cursor)
    def __ne__(self, lhs: StyleCursor, rhs: StyleCursor) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleCursor) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleEnum_GenericClasses(abc.ABCMeta):
    Generic_StyleEnum_GenericClasses_StyleEnum_1_T = typing.TypeVar('Generic_StyleEnum_GenericClasses_StyleEnum_1_T')
    def __getitem__(self, types : typing.Type[Generic_StyleEnum_GenericClasses_StyleEnum_1_T]) -> typing.Type[StyleEnum_1[Generic_StyleEnum_GenericClasses_StyleEnum_1_T]]: ...

StyleEnum : StyleEnum_GenericClasses

StyleEnum_1_T = typing.TypeVar('StyleEnum_1_T')
class StyleEnum_1(typing.Generic[StyleEnum_1_T], IEquatable_1[StyleEnum_1[StyleEnum_1_T]]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: StyleEnum_1_T) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> StyleEnum_1_T: ...
    @value.setter
    def value(self, value: StyleEnum_1_T) -> StyleEnum_1_T: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleEnum_1[StyleEnum_1_T], rhs: StyleEnum_1[StyleEnum_1_T]) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: T)
    def __ne__(self, lhs: StyleEnum_1[StyleEnum_1_T], rhs: StyleEnum_1[StyleEnum_1_T]) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup[StyleEnum_1_T]
    Equals_MethodGroup_StyleEnum_1_T = typing.TypeVar('Equals_MethodGroup_StyleEnum_1_T')
    class Equals_MethodGroup(typing.Generic[Equals_MethodGroup_StyleEnum_1_T]):
        Equals_MethodGroup_StyleEnum_1_T = StyleEnum_1.Equals_MethodGroup_StyleEnum_1_T
        @typing.overload
        def __call__(self, other: StyleEnum_1[Equals_MethodGroup_StyleEnum_1_T]) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleFloat(IEquatable_1[StyleFloat]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: float) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleFloat, rhs: StyleFloat) -> bool: ...
    # Operator not supported op_Implicit(v: Single)
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    def __ne__(self, lhs: StyleFloat, rhs: StyleFloat) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleFloat) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleFont(IEquatable_1[StyleFont]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: Font) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Font: ...
    @value.setter
    def value(self, value: Font) -> Font: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleFont, rhs: StyleFont) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Font)
    def __ne__(self, lhs: StyleFont, rhs: StyleFont) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleFont) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleFontDefinition(IEquatable_1[StyleFontDefinition]):
    @typing.overload
    def __init__(self, f: FontDefinition) -> None: ...
    @typing.overload
    def __init__(self, f: FontAsset) -> None: ...
    @typing.overload
    def __init__(self, f: Font) -> None: ...
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> FontDefinition: ...
    @value.setter
    def value(self, value: FontDefinition) -> FontDefinition: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: StyleFontDefinition, right: StyleFontDefinition) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(f: FontDefinition)
    def __ne__(self, left: StyleFontDefinition, right: StyleFontDefinition) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleFontDefinition) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleInt(IEquatable_1[StyleInt]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: int) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleInt, rhs: StyleInt) -> bool: ...
    # Operator not supported op_Implicit(v: Int32)
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    def __ne__(self, lhs: StyleInt, rhs: StyleInt) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleInt) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleKeyword(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Undefined : StyleKeyword # 0
    Null : StyleKeyword # 1
    Auto : StyleKeyword # 2
    None_ : StyleKeyword # 3
    Initial : StyleKeyword # 4


class StyleLength(IEquatable_1[StyleLength]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: float) -> None: ...
    @typing.overload
    def __init__(self, v: Length) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Length: ...
    @value.setter
    def value(self, value: Length) -> Length: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleLength, rhs: StyleLength) -> bool: ...
    # Operator not supported op_Implicit(v: Single)
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Length)
    def __ne__(self, lhs: StyleLength, rhs: StyleLength) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleLength) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleList_GenericClasses(abc.ABCMeta):
    Generic_StyleList_GenericClasses_StyleList_1_T = typing.TypeVar('Generic_StyleList_GenericClasses_StyleList_1_T')
    def __getitem__(self, types : typing.Type[Generic_StyleList_GenericClasses_StyleList_1_T]) -> typing.Type[StyleList_1[Generic_StyleList_GenericClasses_StyleList_1_T]]: ...

StyleList : StyleList_GenericClasses

StyleList_1_T = typing.TypeVar('StyleList_1_T')
class StyleList_1(typing.Generic[StyleList_1_T], IEquatable_1[StyleList_1[StyleList_1_T]]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: List_1[StyleList_1_T]) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> List_1[StyleList_1_T]: ...
    @value.setter
    def value(self, value: List_1[StyleList_1_T]) -> List_1[StyleList_1_T]: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleList_1[StyleList_1_T], rhs: StyleList_1[StyleList_1_T]) -> bool: ...
    # Operator not supported op_Implicit(v: List`1)
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    def __ne__(self, lhs: StyleList_1[StyleList_1_T], rhs: StyleList_1[StyleList_1_T]) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup[StyleList_1_T]
    Equals_MethodGroup_StyleList_1_T = typing.TypeVar('Equals_MethodGroup_StyleList_1_T')
    class Equals_MethodGroup(typing.Generic[Equals_MethodGroup_StyleList_1_T]):
        Equals_MethodGroup_StyleList_1_T = StyleList_1.Equals_MethodGroup_StyleList_1_T
        @typing.overload
        def __call__(self, other: StyleList_1[Equals_MethodGroup_StyleList_1_T]) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StylePropertyName(IEquatable_1[StylePropertyName]):
    def __init__(self, name: str) -> None: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def IsNullOrEmpty(propertyName: StylePropertyName) -> bool: ...
    def __eq__(self, lhs: StylePropertyName, rhs: StylePropertyName) -> bool: ...
    # Operator not supported op_Implicit(name: String)
    def __ne__(self, lhs: StylePropertyName, rhs: StylePropertyName) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StylePropertyName) -> bool:...
        @typing.overload
        def __call__(self, other: typing.Any) -> bool:...



class StylePropertyNameCollection(IEnumerable_1[StylePropertyName]):
    def Contains(self, stylePropertyName: StylePropertyName) -> bool: ...
    def GetEnumerator(self) -> StylePropertyNameCollection.Enumerator: ...

    class Enumerator(IEnumerator_1[StylePropertyName]):
        @property
        def Current(self) -> StylePropertyName: ...
        def Dispose(self) -> None: ...
        def MoveNext(self) -> bool: ...
        def Reset(self) -> None: ...



class StyleRotate(IEquatable_1[StyleRotate]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: Rotate) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Rotate: ...
    @value.setter
    def value(self, value: Rotate) -> Rotate: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleRotate, rhs: StyleRotate) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Rotate)
    def __ne__(self, lhs: StyleRotate, rhs: StyleRotate) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleRotate) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleScale(IEquatable_1[StyleScale]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, scale: Vector2) -> None: ...
    @typing.overload
    def __init__(self, v: Scale) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Scale: ...
    @value.setter
    def value(self, value: Scale) -> Scale: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleScale, rhs: StyleScale) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(scale: Vector2)
    # Operator not supported op_Implicit(v: Scale)
    def __ne__(self, lhs: StyleScale, rhs: StyleScale) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleScale) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleSheet(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def contentHash(self) -> int: ...
    @contentHash.setter
    def contentHash(self, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importedWithErrors(self) -> bool: ...
    @importedWithErrors.setter
    def importedWithErrors(self, value: bool) -> bool: ...
    @property
    def importedWithWarnings(self) -> bool: ...
    @importedWithWarnings.setter
    def importedWithWarnings(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class StyleTextShadow(IEquatable_1[StyleTextShadow]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: TextShadow) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> TextShadow: ...
    @value.setter
    def value(self, value: TextShadow) -> TextShadow: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleTextShadow, rhs: StyleTextShadow) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: TextShadow)
    def __ne__(self, lhs: StyleTextShadow, rhs: StyleTextShadow) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleTextShadow) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleTransformOrigin(IEquatable_1[StyleTransformOrigin]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: TransformOrigin) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> TransformOrigin: ...
    @value.setter
    def value(self, value: TransformOrigin) -> TransformOrigin: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleTransformOrigin, rhs: StyleTransformOrigin) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: TransformOrigin)
    def __ne__(self, lhs: StyleTransformOrigin, rhs: StyleTransformOrigin) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleTransformOrigin) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StyleTranslate(IEquatable_1[StyleTranslate]):
    @typing.overload
    def __init__(self, keyword: StyleKeyword) -> None: ...
    @typing.overload
    def __init__(self, v: Translate) -> None: ...
    @property
    def keyword(self) -> StyleKeyword: ...
    @keyword.setter
    def keyword(self, value: StyleKeyword) -> StyleKeyword: ...
    @property
    def value(self) -> Translate: ...
    @value.setter
    def value(self, value: Translate) -> Translate: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: StyleTranslate, rhs: StyleTranslate) -> bool: ...
    # Operator not supported op_Implicit(keyword: StyleKeyword)
    # Operator not supported op_Implicit(v: Translate)
    def __ne__(self, lhs: StyleTranslate, rhs: StyleTranslate) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: StyleTranslate) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class TemplateContainer(BindableElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, templateId: str) -> None: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def templateId(self) -> str: ...
    @templateId.setter
    def templateId(self, value: str) -> str: ...
    @property
    def templateSource(self) -> VisualTreeAsset: ...
    @templateSource.setter
    def templateSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[TemplateContainer, TemplateContainer.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class TextElement(BindableElement, ITextElementExperimentalFeatures, ITextSelection, ITextEdition, INotifyValueChanged_1[str]):
    def __init__(self) -> None: ...
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def displayTooltipWhenElided(self) -> bool: ...
    @displayTooltipWhenElided.setter
    def displayTooltipWhenElided(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def enableRichText(self) -> bool: ...
    @enableRichText.setter
    def enableRichText(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> ITextElementExperimentalFeatures: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isElided(self) -> bool: ...
    @isElided.setter
    def isElided(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def parseEscapeSequences(self) -> bool: ...
    @parseEscapeSequences.setter
    def parseEscapeSequences(self, value: bool) -> bool: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selection(self) -> ITextSelection: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def MeasureTextSize(self, textToMeasure: str, width: float, widthMode: VisualElement.MeasureMode, height: float, heightMode: VisualElement.MeasureMode) -> Vector2: ...

    class UxmlFactory(UxmlFactory_2[TextElement, TextElement.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BindableElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class TextField(TextInputBaseField_1[str]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int, multiline: bool, isPasswordField: bool, maskChar: str) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int, multiline: bool, isPasswordField: bool, maskChar: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def multiline(self) -> bool: ...
    @multiline.setter
    def multiline(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> str: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def SetValueWithoutNotify(self, newValue: str) -> None: ...

    class UxmlFactory(UxmlFactory_2[TextField, TextField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextInputBaseField_1.UxmlTraits_1[str]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class TextInputBaseField_GenericClasses(abc.ABCMeta):
    Generic_TextInputBaseField_GenericClasses_TextInputBaseField_1_TValueType = typing.TypeVar('Generic_TextInputBaseField_GenericClasses_TextInputBaseField_1_TValueType')
    def __getitem__(self, types : typing.Type[Generic_TextInputBaseField_GenericClasses_TextInputBaseField_1_TValueType]) -> typing.Type[TextInputBaseField_1[Generic_TextInputBaseField_GenericClasses_TextInputBaseField_1_TValueType]]: ...

TextInputBaseField : TextInputBaseField_GenericClasses

TextInputBaseField_1_TValueType = typing.TypeVar('TextInputBaseField_1_TValueType')
class TextInputBaseField_1(typing.Generic[TextInputBaseField_1_TValueType], BaseField_1[TextInputBaseField_1_TValueType]):
    inputUssClassName : str
    labelUssClassName : str
    multilineInputUssClassName : str
    singleLineInputUssClassName : str
    textInputUssName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> TextInputBaseField_1_TValueType: ...
    @value.setter
    def value(self, value: TextInputBaseField_1_TValueType) -> TextInputBaseField_1_TValueType: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def MeasureTextSize(self, textToMeasure: str, width: float, widthMode: VisualElement.MeasureMode, height: float, heightMode: VisualElement.MeasureMode) -> Vector2: ...
    def SelectAll(self) -> None: ...
    def SelectNone(self) -> None: ...
    def SelectRange(self, cursorIndex: int, selectionIndex: int) -> None: ...
    def SetVerticalScrollerVisibility(self, sv: ScrollerVisibility) -> bool: ...

    UxmlTraits_GenericClasses_TextInputBaseField_1_TValueType = typing.TypeVar('UxmlTraits_GenericClasses_TextInputBaseField_1_TValueType')
    class UxmlTraits_GenericClasses(typing.Generic[UxmlTraits_GenericClasses_TextInputBaseField_1_TValueType], abc.ABCMeta):
        UxmlTraits_GenericClasses_TextInputBaseField_1_TValueType = TextInputBaseField_1.UxmlTraits_GenericClasses_TextInputBaseField_1_TValueType
        def __call__(self) -> TextInputBaseField_1.UxmlTraits_1[UxmlTraits_GenericClasses_TextInputBaseField_1_TValueType]: ...

    UxmlTraits : UxmlTraits_GenericClasses[TextInputBaseField_1_TValueType]

    UxmlTraits_1_TValueType = typing.TypeVar('UxmlTraits_1_TValueType')
    class UxmlTraits_1(typing.Generic[UxmlTraits_1_TValueType], BaseFieldTraits_2[str, UxmlStringAttributeDescription]):
        UxmlTraits_1_TValueType = TextInputBaseField_1.UxmlTraits_1_TValueType
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class TextOverflow(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Clip : TextOverflow # 0
    Ellipsis : TextOverflow # 1


class TextOverflowPosition(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    End : TextOverflowPosition # 0
    Start : TextOverflowPosition # 1
    Middle : TextOverflowPosition # 2


class TextShadow(IEquatable_1[TextShadow]):
    blurRadius : float
    color : Color
    offset : Vector2
    def GetHashCode(self) -> int: ...
    def __eq__(self, style1: TextShadow, style2: TextShadow) -> bool: ...
    def __ne__(self, style1: TextShadow, style2: TextShadow) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: TextShadow) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class TextValueField_GenericClasses(abc.ABCMeta):
    Generic_TextValueField_GenericClasses_TextValueField_1_TValueType = typing.TypeVar('Generic_TextValueField_GenericClasses_TextValueField_1_TValueType')
    def __getitem__(self, types : typing.Type[Generic_TextValueField_GenericClasses_TextValueField_1_TValueType]) -> typing.Type[TextValueField_1[Generic_TextValueField_GenericClasses_TextValueField_1_TValueType]]: ...

TextValueField : TextValueField_GenericClasses

TextValueField_1_TValueType = typing.TypeVar('TextValueField_1_TValueType')
class TextValueField_1(typing.Generic[TextValueField_1_TValueType], TextInputBaseField_1[TextValueField_1_TValueType], IValueField_1[TextValueField_1_TValueType]):
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> TextValueField_1_TValueType: ...
    @value.setter
    def value(self, value: TextValueField_1_TValueType) -> TextValueField_1_TValueType: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    @abc.abstractmethod
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: TextValueField_1_TValueType) -> None: ...
    def SetValueWithoutNotify(self, newValue: TextValueField_1_TValueType) -> None: ...
    def StartDragging(self) -> None: ...
    def StopDragging(self) -> None: ...


class TextValueFieldTraits_GenericClasses(abc.ABCMeta):
    Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueType = typing.TypeVar('Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueType')
    Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueUxmlAttributeType = typing.TypeVar('Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueUxmlAttributeType')
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueType], typing.Type[Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueUxmlAttributeType]]) -> typing.Type[TextValueFieldTraits_2[Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueType, Generic_TextValueFieldTraits_GenericClasses_TextValueFieldTraits_2_TValueUxmlAttributeType]]: ...

TextValueFieldTraits : TextValueFieldTraits_GenericClasses

TextValueFieldTraits_2_TValueType = typing.TypeVar('TextValueFieldTraits_2_TValueType')
TextValueFieldTraits_2_TValueUxmlAttributeType = typing.TypeVar('TextValueFieldTraits_2_TValueUxmlAttributeType')
class TextValueFieldTraits_2(typing.Generic[TextValueFieldTraits_2_TValueType, TextValueFieldTraits_2_TValueUxmlAttributeType], BaseFieldTraits_2[TextValueFieldTraits_2_TValueType, TextValueFieldTraits_2_TValueUxmlAttributeType]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...


class ThemeStyleSheet(StyleSheet):
    def __init__(self) -> None: ...
    @property
    def contentHash(self) -> int: ...
    @contentHash.setter
    def contentHash(self, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importedWithErrors(self) -> bool: ...
    @importedWithErrors.setter
    def importedWithErrors(self, value: bool) -> bool: ...
    @property
    def importedWithWarnings(self) -> bool: ...
    @importedWithWarnings.setter
    def importedWithWarnings(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class TimerState(IEquatable_1[TimerState]):
    @property
    def deltaTime(self) -> int: ...
    @property
    def now(self) -> int: ...
    @now.setter
    def now(self, value: int) -> int: ...
    @property
    def start(self) -> int: ...
    @start.setter
    def start(self, value: int) -> int: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, state1: TimerState, state2: TimerState) -> bool: ...
    def __ne__(self, state1: TimerState, state2: TimerState) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: TimerState) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class TimeUnit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Second : TimeUnit # 0
    Millisecond : TimeUnit # 1


class TimeValue(IEquatable_1[TimeValue]):
    @typing.overload
    def __init__(self, value: float) -> None: ...
    @typing.overload
    def __init__(self, value: float, unit: TimeUnit) -> None: ...
    @property
    def unit(self) -> TimeUnit: ...
    @unit.setter
    def unit(self, value: TimeUnit) -> TimeUnit: ...
    @property
    def value(self) -> float: ...
    @value.setter
    def value(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: TimeValue, rhs: TimeValue) -> bool: ...
    # Operator not supported op_Implicit(value: Single)
    def __ne__(self, lhs: TimeValue, rhs: TimeValue) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: TimeValue) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class Toggle(BaseBoolField):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    checkmarkUssClassName : str
    inputUssClassName : str
    labelUssClassName : str
    mixedValuesUssClassName : str
    noTextVariantUssClassName : str
    textUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> bool: ...
    @value.setter
    def value(self, value: bool) -> bool: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Toggle, Toggle.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseFieldTraits_2[bool, UxmlBoolAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class TooltipEvent(EventBase_1[TooltipEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def rect(self) -> Rect: ...
    @rect.setter
    def rect(self, value: Rect) -> Rect: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class TransformOrigin(IEquatable_1[TransformOrigin]):
    @typing.overload
    def __init__(self, x: Length, y: Length) -> None: ...
    @typing.overload
    def __init__(self, x: Length, y: Length, z: float) -> None: ...
    @property
    def x(self) -> Length: ...
    @x.setter
    def x(self, value: Length) -> Length: ...
    @property
    def y(self) -> Length: ...
    @y.setter
    def y(self, value: Length) -> Length: ...
    @property
    def z(self) -> float: ...
    @z.setter
    def z(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def Initial() -> TransformOrigin: ...
    def __eq__(self, lhs: TransformOrigin, rhs: TransformOrigin) -> bool: ...
    def __ne__(self, lhs: TransformOrigin, rhs: TransformOrigin) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: TransformOrigin) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class TransformOriginOffset(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : TransformOriginOffset # 1
    Right : TransformOriginOffset # 2
    Top : TransformOriginOffset # 3
    Bottom : TransformOriginOffset # 4
    Center : TransformOriginOffset # 5


class TransitionCancelEvent(TransitionEventBase_1[TransitionCancelEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def elapsedTime(self) -> float: ...
    @elapsedTime.setter
    def elapsedTime(self, value: float) -> float: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def stylePropertyNames(self) -> StylePropertyNameCollection: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class TransitionEndEvent(TransitionEventBase_1[TransitionEndEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def elapsedTime(self) -> float: ...
    @elapsedTime.setter
    def elapsedTime(self, value: float) -> float: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def stylePropertyNames(self) -> StylePropertyNameCollection: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class TransitionEventBase_GenericClasses(abc.ABCMeta):
    Generic_TransitionEventBase_GenericClasses_TransitionEventBase_1_T = typing.TypeVar('Generic_TransitionEventBase_GenericClasses_TransitionEventBase_1_T')
    def __getitem__(self, types : typing.Type[Generic_TransitionEventBase_GenericClasses_TransitionEventBase_1_T]) -> typing.Type[TransitionEventBase_1[Generic_TransitionEventBase_GenericClasses_TransitionEventBase_1_T]]: ...

TransitionEventBase : TransitionEventBase_GenericClasses

TransitionEventBase_1_T = typing.TypeVar('TransitionEventBase_1_T')
class TransitionEventBase_1(typing.Generic[TransitionEventBase_1_T], EventBase_1[TransitionEventBase_1_T], ITransitionEvent):
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def elapsedTime(self) -> float: ...
    @elapsedTime.setter
    def elapsedTime(self, value: float) -> float: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def stylePropertyNames(self) -> StylePropertyNameCollection: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    def AffectsProperty(self, stylePropertyName: StylePropertyName) -> bool: ...
    @staticmethod
    def GetPooled(stylePropertyName: StylePropertyName, elapsedTime: float) -> TransitionEventBase_1_T: ...


class TransitionRunEvent(TransitionEventBase_1[TransitionRunEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def elapsedTime(self) -> float: ...
    @elapsedTime.setter
    def elapsedTime(self, value: float) -> float: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def stylePropertyNames(self) -> StylePropertyNameCollection: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class TransitionStartEvent(TransitionEventBase_1[TransitionStartEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def elapsedTime(self) -> float: ...
    @elapsedTime.setter
    def elapsedTime(self, value: float) -> float: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def stylePropertyNames(self) -> StylePropertyNameCollection: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class Translate(IEquatable_1[Translate]):
    @typing.overload
    def __init__(self, x: Length, y: Length) -> None: ...
    @typing.overload
    def __init__(self, x: Length, y: Length, z: float) -> None: ...
    @property
    def x(self) -> Length: ...
    @x.setter
    def x(self, value: Length) -> Length: ...
    @property
    def y(self) -> Length: ...
    @y.setter
    def y(self, value: Length) -> Length: ...
    @property
    def z(self) -> float: ...
    @z.setter
    def z(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def None() -> Translate: ...
    def __eq__(self, lhs: Translate, rhs: Translate) -> bool: ...
    def __ne__(self, lhs: Translate, rhs: Translate) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Translate) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class TreeView(BaseTreeView):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, itemHeight: int, makeItem: Func_1[VisualElement], bindItem: Action_2[VisualElement, int]) -> None: ...
    @typing.overload
    def __init__(self, makeItem: Func_1[VisualElement], bindItem: Action_2[VisualElement, int]) -> None: ...
    @property
    def autoExpand(self) -> bool: ...
    @autoExpand.setter
    def autoExpand(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def bindItem(self) -> Action_2[VisualElement, int]: ...
    @bindItem.setter
    def bindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def destroyItem(self) -> Action_1[VisualElement]: ...
    @destroyItem.setter
    def destroyItem(self, value: Action_1[VisualElement]) -> Action_1[VisualElement]: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedItemHeight(self) -> float: ...
    @fixedItemHeight.setter
    def fixedItemHeight(self, value: float) -> float: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def horizontalScrollingEnabled(self) -> bool: ...
    @horizontalScrollingEnabled.setter
    def horizontalScrollingEnabled(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def itemHeight(self) -> int: ...
    @itemHeight.setter
    def itemHeight(self, value: int) -> int: ...
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def makeItem(self) -> Func_1[VisualElement]: ...
    @makeItem.setter
    def makeItem(self, value: Func_1[VisualElement]) -> Func_1[VisualElement]: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def reorderable(self) -> bool: ...
    @reorderable.setter
    def reorderable(self, value: bool) -> bool: ...
    @property
    def resolvedItemHeight(self) -> float: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectedIndex(self) -> int: ...
    @selectedIndex.setter
    def selectedIndex(self, value: int) -> int: ...
    @property
    def selectedIndices(self) -> IEnumerable_1[int]: ...
    @property
    def selectedItem(self) -> typing.Any: ...
    @property
    def selectedItems(self) -> IEnumerable_1[typing.Any]: ...
    @property
    def selectionType(self) -> SelectionType: ...
    @selectionType.setter
    def selectionType(self, value: SelectionType) -> SelectionType: ...
    @property
    def showAlternatingRowBackgrounds(self) -> AlternatingRowBackground: ...
    @showAlternatingRowBackgrounds.setter
    def showAlternatingRowBackgrounds(self, value: AlternatingRowBackground) -> AlternatingRowBackground: ...
    @property
    def showBorder(self) -> bool: ...
    @showBorder.setter
    def showBorder(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def unbindItem(self) -> Action_2[VisualElement, int]: ...
    @unbindItem.setter
    def unbindItem(self, value: Action_2[VisualElement, int]) -> Action_2[VisualElement, int]: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewController(self) -> TreeViewController: ...
    @property
    def viewController(self) -> BaseTreeViewController: ...
    @property
    def viewController(self) -> CollectionViewController: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def virtualizationMethod(self) -> CollectionVirtualizationMethod: ...
    @virtualizationMethod.setter
    def virtualizationMethod(self, value: CollectionVirtualizationMethod) -> CollectionVirtualizationMethod: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[TreeView, TreeView.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseTreeView.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class TreeViewController(BaseTreeViewController):
    @property
    def itemsSource(self) -> IList: ...
    @itemsSource.setter
    def itemsSource(self, value: IList) -> IList: ...


class TreeViewItemData_GenericClasses(abc.ABCMeta):
    Generic_TreeViewItemData_GenericClasses_TreeViewItemData_1_T = typing.TypeVar('Generic_TreeViewItemData_GenericClasses_TreeViewItemData_1_T')
    def __getitem__(self, types : typing.Type[Generic_TreeViewItemData_GenericClasses_TreeViewItemData_1_T]) -> typing.Type[TreeViewItemData_1[Generic_TreeViewItemData_GenericClasses_TreeViewItemData_1_T]]: ...

TreeViewItemData : TreeViewItemData_GenericClasses

TreeViewItemData_1_T = typing.TypeVar('TreeViewItemData_1_T')
class TreeViewItemData_1(typing.Generic[TreeViewItemData_1_T]):
    def __init__(self, id: int, data: TreeViewItemData_1_T, children: List_1[TreeViewItemData_1[TreeViewItemData_1_T]] = ...) -> None: ...
    @property
    def children(self) -> IEnumerable_1[TreeViewItemData_1[TreeViewItemData_1_T]]: ...
    @property
    def data(self) -> TreeViewItemData_1_T: ...
    @property
    def hasChildren(self) -> bool: ...
    @property
    def id(self) -> int: ...


class TrickleDown(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoTrickleDown : TrickleDown # 0
    TrickleDown : TrickleDown # 1


class TwoPaneSplitView(VisualElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, fixedPaneIndex: int, fixedPaneStartDimension: float, orientation: TwoPaneSplitViewOrientation) -> None: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def fixedPane(self) -> VisualElement: ...
    @property
    def fixedPaneIndex(self) -> int: ...
    @fixedPaneIndex.setter
    def fixedPaneIndex(self, value: int) -> int: ...
    @property
    def fixedPaneInitialDimension(self) -> float: ...
    @fixedPaneInitialDimension.setter
    def fixedPaneInitialDimension(self, value: float) -> float: ...
    @property
    def flexedPane(self) -> VisualElement: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def orientation(self) -> TwoPaneSplitViewOrientation: ...
    @orientation.setter
    def orientation(self, value: TwoPaneSplitViewOrientation) -> TwoPaneSplitViewOrientation: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def CollapseChild(self, index: int) -> None: ...
    def UnCollapse(self) -> None: ...

    class UxmlFactory(UxmlFactory_2[TwoPaneSplitView, TwoPaneSplitView.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(VisualElement.UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class TwoPaneSplitViewOrientation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Horizontal : TwoPaneSplitViewOrientation # 0
    Vertical : TwoPaneSplitViewOrientation # 1


class TypedUxmlAttributeDescription_GenericClasses(abc.ABCMeta):
    Generic_TypedUxmlAttributeDescription_GenericClasses_TypedUxmlAttributeDescription_1_T = typing.TypeVar('Generic_TypedUxmlAttributeDescription_GenericClasses_TypedUxmlAttributeDescription_1_T')
    def __getitem__(self, types : typing.Type[Generic_TypedUxmlAttributeDescription_GenericClasses_TypedUxmlAttributeDescription_1_T]) -> typing.Type[TypedUxmlAttributeDescription_1[Generic_TypedUxmlAttributeDescription_GenericClasses_TypedUxmlAttributeDescription_1_T]]: ...

TypedUxmlAttributeDescription : TypedUxmlAttributeDescription_GenericClasses

TypedUxmlAttributeDescription_1_T = typing.TypeVar('TypedUxmlAttributeDescription_1_T')
class TypedUxmlAttributeDescription_1(typing.Generic[TypedUxmlAttributeDescription_1_T], UxmlAttributeDescription):
    @property
    def defaultValue(self) -> TypedUxmlAttributeDescription_1_T: ...
    @defaultValue.setter
    def defaultValue(self, value: TypedUxmlAttributeDescription_1_T) -> TypedUxmlAttributeDescription_1_T: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    @abc.abstractmethod
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> TypedUxmlAttributeDescription_1_T: ...


class UIDocument(MonoBehaviour):
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def destroyCancellationToken(self) -> CancellationToken: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def panelSettings(self) -> PanelSettings: ...
    @panelSettings.setter
    def panelSettings(self, value: PanelSettings) -> PanelSettings: ...
    @property
    def parentUI(self) -> UIDocument: ...
    @parentUI.setter
    def parentUI(self, value: UIDocument) -> UIDocument: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def rootVisualElement(self) -> VisualElement: ...
    @property
    def runInEditMode(self) -> bool: ...
    @runInEditMode.setter
    def runInEditMode(self, value: bool) -> bool: ...
    @property
    def sortingOrder(self) -> float: ...
    @sortingOrder.setter
    def sortingOrder(self, value: float) -> float: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def useGUILayout(self) -> bool: ...
    @useGUILayout.setter
    def useGUILayout(self, value: bool) -> bool: ...
    @property
    def visualTreeAsset(self) -> VisualTreeAsset: ...
    @visualTreeAsset.setter
    def visualTreeAsset(self, value: VisualTreeAsset) -> VisualTreeAsset: ...


class UnsignedIntegerField(TextValueField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[UnsignedIntegerField, UnsignedIntegerField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[int, UxmlUnsignedIntAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class UnsignedLongField(TextValueField_1[int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str, maxLength: int = ...) -> None: ...
    @typing.overload
    def __init__(self, maxLength: int) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def autoCorrection(self) -> bool: ...
    @autoCorrection.setter
    def autoCorrection(self, value: bool) -> bool: ...
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def cursorColor(self) -> Color: ...
    @property
    def cursorIndex(self) -> int: ...
    @cursorIndex.setter
    def cursorIndex(self, value: int) -> int: ...
    @property
    def cursorPosition(self) -> Vector2: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def doubleClickSelectsWord(self) -> bool: ...
    @doubleClickSelectsWord.setter
    def doubleClickSelectsWord(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def formatString(self) -> str: ...
    @formatString.setter
    def formatString(self, value: str) -> str: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hideMobileInput(self) -> bool: ...
    @hideMobileInput.setter
    def hideMobileInput(self, value: bool) -> bool: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def isDelayed(self) -> bool: ...
    @isDelayed.setter
    def isDelayed(self, value: bool) -> bool: ...
    @property
    def isPasswordField(self) -> bool: ...
    @isPasswordField.setter
    def isPasswordField(self, value: bool) -> bool: ...
    @property
    def isReadOnly(self) -> bool: ...
    @isReadOnly.setter
    def isReadOnly(self, value: bool) -> bool: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def keyboardType(self) -> TouchScreenKeyboardType: ...
    @keyboardType.setter
    def keyboardType(self, value: TouchScreenKeyboardType) -> TouchScreenKeyboardType: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def maskChar(self) -> str: ...
    @maskChar.setter
    def maskChar(self, value: str) -> str: ...
    @property
    def maxLength(self) -> int: ...
    @maxLength.setter
    def maxLength(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def selectAllOnFocus(self) -> bool: ...
    @selectAllOnFocus.setter
    def selectAllOnFocus(self, value: bool) -> bool: ...
    @property
    def selectAllOnMouseUp(self) -> bool: ...
    @selectAllOnMouseUp.setter
    def selectAllOnMouseUp(self, value: bool) -> bool: ...
    @property
    def selectIndex(self) -> int: ...
    @selectIndex.setter
    def selectIndex(self, value: int) -> int: ...
    @property
    def selectionColor(self) -> Color: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> str: ...
    @property
    def textEdition(self) -> ITextEdition: ...
    @property
    def textSelection(self) -> ITextSelection: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def touchScreenKeyboard(self) -> TouchScreenKeyboard: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def tripleClickSelectsLine(self) -> bool: ...
    @tripleClickSelectsLine.setter
    def tripleClickSelectsLine(self, value: bool) -> bool: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def ApplyInputDeviceDelta(self, delta: Vector3, speed: DeltaSpeed, startValue: int) -> None: ...

    class UxmlFactory(UxmlFactory_2[UnsignedLongField, UnsignedLongField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(TextValueFieldTraits_2[int, UxmlUnsignedLongAttributeDescription]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...



class UQuery(abc.ABC):
    pass


class UQueryBuilder_GenericClasses(abc.ABCMeta):
    Generic_UQueryBuilder_GenericClasses_UQueryBuilder_1_T = typing.TypeVar('Generic_UQueryBuilder_GenericClasses_UQueryBuilder_1_T')
    def __getitem__(self, types : typing.Type[Generic_UQueryBuilder_GenericClasses_UQueryBuilder_1_T]) -> typing.Type[UQueryBuilder_1[Generic_UQueryBuilder_GenericClasses_UQueryBuilder_1_T]]: ...

UQueryBuilder : UQueryBuilder_GenericClasses

UQueryBuilder_1_T = typing.TypeVar('UQueryBuilder_1_T')
class UQueryBuilder_1(typing.Generic[UQueryBuilder_1_T], IEquatable_1[UQueryBuilder_1[UQueryBuilder_1_T]]):
    def __init__(self, visualElement: VisualElement) -> None: ...
    def Active(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def AtIndex(self, index: int) -> UQueryBuilder_1_T: ...
    def Build(self) -> UQueryState_1[UQueryBuilder_1_T]: ...
    def Checked(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def Class(self, classname: str) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def Enabled(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def First(self) -> UQueryBuilder_1_T: ...
    def Focused(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def GetHashCode(self) -> int: ...
    def Hovered(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def Last(self) -> UQueryBuilder_1_T: ...
    def Name(self, id: str) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotActive(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotChecked(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotEnabled(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotFocused(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotHovered(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotSelected(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def NotVisible(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def __eq__(self, builder1: UQueryBuilder_1[UQueryBuilder_1_T], builder2: UQueryBuilder_1[UQueryBuilder_1_T]) -> bool: ...
    # Operator not supported op_Implicit(s: UQueryBuilder`1)
    def __ne__(self, builder1: UQueryBuilder_1[UQueryBuilder_1_T], builder2: UQueryBuilder_1[UQueryBuilder_1_T]) -> bool: ...
    def Selected(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def Visible(self) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    def Where(self, selectorPredicate: Func_2[UQueryBuilder_1_T, bool]) -> UQueryBuilder_1[UQueryBuilder_1_T]: ...
    # Skipped Children due to it being static, abstract and generic.

    Children : Children_MethodGroup[UQueryBuilder_1_T]
    Children_MethodGroup_UQueryBuilder_1_T = typing.TypeVar('Children_MethodGroup_UQueryBuilder_1_T')
    class Children_MethodGroup(typing.Generic[Children_MethodGroup_UQueryBuilder_1_T]):
        Children_MethodGroup_UQueryBuilder_1_T = UQueryBuilder_1.Children_MethodGroup_UQueryBuilder_1_T
        def __getitem__(self, t:typing.Type[Children_1_T1]) -> Children_1[Children_MethodGroup_UQueryBuilder_1_T, Children_1_T1]: ...

        Children_1_UQueryBuilder_1_T = typing.TypeVar('Children_1_UQueryBuilder_1_T')
        Children_1_T1 = typing.TypeVar('Children_1_T1')
        class Children_1(typing.Generic[Children_1_UQueryBuilder_1_T, Children_1_T1]):
            Children_1_UQueryBuilder_1_T = UQueryBuilder_1.Children_MethodGroup.Children_1_UQueryBuilder_1_T
            Children_1_T2 = UQueryBuilder_1.Children_MethodGroup.Children_1_T1
            @typing.overload
            def __call__(self, name: str = ..., classes: Array_1[str]) -> UQueryBuilder_1[Children_1_T2]:...
            @typing.overload
            def __call__(self, name: str = ..., className: str = ...) -> UQueryBuilder_1[Children_1_T2]:...


    # Skipped Descendents due to it being static, abstract and generic.

    Descendents : Descendents_MethodGroup[UQueryBuilder_1_T]
    Descendents_MethodGroup_UQueryBuilder_1_T = typing.TypeVar('Descendents_MethodGroup_UQueryBuilder_1_T')
    class Descendents_MethodGroup(typing.Generic[Descendents_MethodGroup_UQueryBuilder_1_T]):
        Descendents_MethodGroup_UQueryBuilder_1_T = UQueryBuilder_1.Descendents_MethodGroup_UQueryBuilder_1_T
        def __getitem__(self, t:typing.Type[Descendents_1_T1]) -> Descendents_1[Descendents_MethodGroup_UQueryBuilder_1_T, Descendents_1_T1]: ...

        Descendents_1_UQueryBuilder_1_T = typing.TypeVar('Descendents_1_UQueryBuilder_1_T')
        Descendents_1_T1 = typing.TypeVar('Descendents_1_T1')
        class Descendents_1(typing.Generic[Descendents_1_UQueryBuilder_1_T, Descendents_1_T1]):
            Descendents_1_UQueryBuilder_1_T = UQueryBuilder_1.Descendents_MethodGroup.Descendents_1_UQueryBuilder_1_T
            Descendents_1_T2 = UQueryBuilder_1.Descendents_MethodGroup.Descendents_1_T1
            @typing.overload
            def __call__(self, name: str = ..., classNames: Array_1[str]) -> UQueryBuilder_1[Descendents_1_T2]:...
            @typing.overload
            def __call__(self, name: str = ..., classname: str = ...) -> UQueryBuilder_1[Descendents_1_T2]:...


    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup[UQueryBuilder_1_T]
    Equals_MethodGroup_UQueryBuilder_1_T = typing.TypeVar('Equals_MethodGroup_UQueryBuilder_1_T')
    class Equals_MethodGroup(typing.Generic[Equals_MethodGroup_UQueryBuilder_1_T]):
        Equals_MethodGroup_UQueryBuilder_1_T = UQueryBuilder_1.Equals_MethodGroup_UQueryBuilder_1_T
        @typing.overload
        def __call__(self, other: UQueryBuilder_1[Equals_MethodGroup_UQueryBuilder_1_T]) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped ForEach due to it being static, abstract and generic.

    ForEach : ForEach_MethodGroup[UQueryBuilder_1_T]
    ForEach_MethodGroup_UQueryBuilder_1_T = typing.TypeVar('ForEach_MethodGroup_UQueryBuilder_1_T')
    class ForEach_MethodGroup(typing.Generic[ForEach_MethodGroup_UQueryBuilder_1_T]):
        ForEach_MethodGroup_UQueryBuilder_1_T = UQueryBuilder_1.ForEach_MethodGroup_UQueryBuilder_1_T
        def __getitem__(self, t:typing.Type[ForEach_1_T1]) -> ForEach_1[ForEach_MethodGroup_UQueryBuilder_1_T, ForEach_1_T1]: ...

        ForEach_1_UQueryBuilder_1_T = typing.TypeVar('ForEach_1_UQueryBuilder_1_T')
        ForEach_1_T1 = typing.TypeVar('ForEach_1_T1')
        class ForEach_1(typing.Generic[ForEach_1_UQueryBuilder_1_T, ForEach_1_T1]):
            ForEach_1_UQueryBuilder_1_T = UQueryBuilder_1.ForEach_MethodGroup.ForEach_1_UQueryBuilder_1_T
            ForEach_1_T2 = UQueryBuilder_1.ForEach_MethodGroup.ForEach_1_T1
            @typing.overload
            def __call__(self, funcCall: Func_2[ForEach_1_UQueryBuilder_1_T, ForEach_1_T2]) -> List_1[ForEach_1_T2]:...
            @typing.overload
            def __call__(self, result: List_1[ForEach_1_T2], funcCall: Func_2[ForEach_1_UQueryBuilder_1_T, ForEach_1_T2]) -> None:...

        def __call__(self, funcCall: Action_1[ForEach_MethodGroup_UQueryBuilder_1_T]) -> None:...

    # Skipped OfType due to it being static, abstract and generic.

    OfType : OfType_MethodGroup[UQueryBuilder_1_T]
    OfType_MethodGroup_UQueryBuilder_1_T = typing.TypeVar('OfType_MethodGroup_UQueryBuilder_1_T')
    class OfType_MethodGroup(typing.Generic[OfType_MethodGroup_UQueryBuilder_1_T]):
        OfType_MethodGroup_UQueryBuilder_1_T = UQueryBuilder_1.OfType_MethodGroup_UQueryBuilder_1_T
        def __getitem__(self, t:typing.Type[OfType_1_T1]) -> OfType_1[OfType_MethodGroup_UQueryBuilder_1_T, OfType_1_T1]: ...

        OfType_1_UQueryBuilder_1_T = typing.TypeVar('OfType_1_UQueryBuilder_1_T')
        OfType_1_T1 = typing.TypeVar('OfType_1_T1')
        class OfType_1(typing.Generic[OfType_1_UQueryBuilder_1_T, OfType_1_T1]):
            OfType_1_UQueryBuilder_1_T = UQueryBuilder_1.OfType_MethodGroup.OfType_1_UQueryBuilder_1_T
            OfType_1_T2 = UQueryBuilder_1.OfType_MethodGroup.OfType_1_T1
            @typing.overload
            def __call__(self, name: str = ..., classes: Array_1[str]) -> UQueryBuilder_1[OfType_1_T2]:...
            @typing.overload
            def __call__(self, name: str = ..., className: str = ...) -> UQueryBuilder_1[OfType_1_T2]:...


    # Skipped ToList due to it being static, abstract and generic.

    ToList : ToList_MethodGroup[UQueryBuilder_1_T]
    ToList_MethodGroup_UQueryBuilder_1_T = typing.TypeVar('ToList_MethodGroup_UQueryBuilder_1_T')
    class ToList_MethodGroup(typing.Generic[ToList_MethodGroup_UQueryBuilder_1_T]):
        ToList_MethodGroup_UQueryBuilder_1_T = UQueryBuilder_1.ToList_MethodGroup_UQueryBuilder_1_T
        @typing.overload
        def __call__(self) -> List_1[ToList_MethodGroup_UQueryBuilder_1_T]:...
        @typing.overload
        def __call__(self, results: List_1[ToList_MethodGroup_UQueryBuilder_1_T]) -> None:...



class UQueryExtensions(abc.ABC):
    # Skipped Q due to it being static, abstract and generic.

    Q : Q_MethodGroup
    class Q_MethodGroup:
        def __getitem__(self, t:typing.Type[Q_1_T1]) -> Q_1[Q_1_T1]: ...

        Q_1_T1 = typing.TypeVar('Q_1_T1')
        class Q_1(typing.Generic[Q_1_T1]):
            Q_1_T = UQueryExtensions.Q_MethodGroup.Q_1_T1
            @typing.overload
            def __call__(self, e: VisualElement, name: str = ..., classes: Array_1[str]) -> Q_1_T:...
            @typing.overload
            def __call__(self, e: VisualElement, name: str = ..., className: str = ...) -> Q_1_T:...

        @typing.overload
        def __call__(self, e: VisualElement, name: str = ..., classes: Array_1[str]) -> VisualElement:...
        @typing.overload
        def __call__(self, e: VisualElement, name: str = ..., className: str = ...) -> VisualElement:...

    # Skipped Query due to it being static, abstract and generic.

    Query : Query_MethodGroup
    class Query_MethodGroup:
        def __getitem__(self, t:typing.Type[Query_1_T1]) -> Query_1[Query_1_T1]: ...

        Query_1_T1 = typing.TypeVar('Query_1_T1')
        class Query_1(typing.Generic[Query_1_T1]):
            Query_1_T = UQueryExtensions.Query_MethodGroup.Query_1_T1
            @typing.overload
            def __call__(self, e: VisualElement, name: str = ..., classes: Array_1[str]) -> UQueryBuilder_1[Query_1_T]:...
            @typing.overload
            def __call__(self, e: VisualElement, name: str = ..., className: str = ...) -> UQueryBuilder_1[Query_1_T]:...

        @typing.overload
        def __call__(self, e: VisualElement) -> UQueryBuilder_1[VisualElement]:...
        @typing.overload
        def __call__(self, e: VisualElement, name: str = ..., classes: Array_1[str]) -> UQueryBuilder_1[VisualElement]:...
        @typing.overload
        def __call__(self, e: VisualElement, name: str = ..., className: str = ...) -> UQueryBuilder_1[VisualElement]:...



class UQueryState_GenericClasses(abc.ABCMeta):
    Generic_UQueryState_GenericClasses_UQueryState_1_T = typing.TypeVar('Generic_UQueryState_GenericClasses_UQueryState_1_T')
    def __getitem__(self, types : typing.Type[Generic_UQueryState_GenericClasses_UQueryState_1_T]) -> typing.Type[UQueryState_1[Generic_UQueryState_GenericClasses_UQueryState_1_T]]: ...

UQueryState : UQueryState_GenericClasses

UQueryState_1_T = typing.TypeVar('UQueryState_1_T')
class UQueryState_1(typing.Generic[UQueryState_1_T], IEnumerable_1[UQueryState_1_T], IEquatable_1[UQueryState_1[UQueryState_1_T]]):
    def AtIndex(self, index: int) -> UQueryState_1_T: ...
    def First(self) -> UQueryState_1_T: ...
    def GetEnumerator(self) -> UQueryState_1.Enumerator_1[UQueryState_1_T]: ...
    def GetHashCode(self) -> int: ...
    def Last(self) -> UQueryState_1_T: ...
    def __eq__(self, state1: UQueryState_1[UQueryState_1_T], state2: UQueryState_1[UQueryState_1_T]) -> bool: ...
    def __ne__(self, state1: UQueryState_1[UQueryState_1_T], state2: UQueryState_1[UQueryState_1_T]) -> bool: ...
    def RebuildOn(self, element: VisualElement) -> UQueryState_1[UQueryState_1_T]: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup[UQueryState_1_T]
    Equals_MethodGroup_UQueryState_1_T = typing.TypeVar('Equals_MethodGroup_UQueryState_1_T')
    class Equals_MethodGroup(typing.Generic[Equals_MethodGroup_UQueryState_1_T]):
        Equals_MethodGroup_UQueryState_1_T = UQueryState_1.Equals_MethodGroup_UQueryState_1_T
        @typing.overload
        def __call__(self, other: UQueryState_1[Equals_MethodGroup_UQueryState_1_T]) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped ForEach due to it being static, abstract and generic.

    ForEach : ForEach_MethodGroup[UQueryState_1_T]
    ForEach_MethodGroup_UQueryState_1_T = typing.TypeVar('ForEach_MethodGroup_UQueryState_1_T')
    class ForEach_MethodGroup(typing.Generic[ForEach_MethodGroup_UQueryState_1_T]):
        ForEach_MethodGroup_UQueryState_1_T = UQueryState_1.ForEach_MethodGroup_UQueryState_1_T
        def __getitem__(self, t:typing.Type[ForEach_1_T1]) -> ForEach_1[ForEach_MethodGroup_UQueryState_1_T, ForEach_1_T1]: ...

        ForEach_1_UQueryState_1_T = typing.TypeVar('ForEach_1_UQueryState_1_T')
        ForEach_1_T1 = typing.TypeVar('ForEach_1_T1')
        class ForEach_1(typing.Generic[ForEach_1_UQueryState_1_T, ForEach_1_T1]):
            ForEach_1_UQueryState_1_T = UQueryState_1.ForEach_MethodGroup.ForEach_1_UQueryState_1_T
            ForEach_1_T2 = UQueryState_1.ForEach_MethodGroup.ForEach_1_T1
            @typing.overload
            def __call__(self, funcCall: Func_2[ForEach_1_UQueryState_1_T, ForEach_1_T2]) -> List_1[ForEach_1_T2]:...
            @typing.overload
            def __call__(self, result: List_1[ForEach_1_T2], funcCall: Func_2[ForEach_1_UQueryState_1_T, ForEach_1_T2]) -> None:...

        def __call__(self, funcCall: Action_1[ForEach_MethodGroup_UQueryState_1_T]) -> None:...

    # Skipped ToList due to it being static, abstract and generic.

    ToList : ToList_MethodGroup[UQueryState_1_T]
    ToList_MethodGroup_UQueryState_1_T = typing.TypeVar('ToList_MethodGroup_UQueryState_1_T')
    class ToList_MethodGroup(typing.Generic[ToList_MethodGroup_UQueryState_1_T]):
        ToList_MethodGroup_UQueryState_1_T = UQueryState_1.ToList_MethodGroup_UQueryState_1_T
        @typing.overload
        def __call__(self) -> List_1[ToList_MethodGroup_UQueryState_1_T]:...
        @typing.overload
        def __call__(self, results: List_1[ToList_MethodGroup_UQueryState_1_T]) -> None:...


    Enumerator_GenericClasses_UQueryState_1_T = typing.TypeVar('Enumerator_GenericClasses_UQueryState_1_T')
    class Enumerator_GenericClasses(typing.Generic[Enumerator_GenericClasses_UQueryState_1_T], abc.ABCMeta):
        Enumerator_GenericClasses_UQueryState_1_T = UQueryState_1.Enumerator_GenericClasses_UQueryState_1_T
        def __call__(self) -> UQueryState_1.Enumerator_1[Enumerator_GenericClasses_UQueryState_1_T]: ...

    Enumerator : Enumerator_GenericClasses[UQueryState_1_T]

    Enumerator_1_T = typing.TypeVar('Enumerator_1_T')
    class Enumerator_1(typing.Generic[Enumerator_1_T], IEnumerator_1[Enumerator_1_T]):
        Enumerator_1_T = UQueryState_1.Enumerator_1_T
        @property
        def Current(self) -> Enumerator_1_T: ...
        def Dispose(self) -> None: ...
        def MoveNext(self) -> bool: ...
        def Reset(self) -> None: ...



class UsageHints(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : UsageHints # 0
    DynamicTransform : UsageHints # 1
    GroupTransform : UsageHints # 2
    MaskContainer : UsageHints # 4
    DynamicColor : UsageHints # 8


class UxmlAttributeDescription(abc.ABC):
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...

    class Use(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : UxmlAttributeDescription.Use # 0
        Optional : UxmlAttributeDescription.Use # 1
        Prohibited : UxmlAttributeDescription.Use # 2
        Required : UxmlAttributeDescription.Use # 3



class UxmlAttributeOverridesFactory(UxmlFactory_2[VisualElement, UxmlAttributeOverridesTraits]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    def Create(self, bag: IUxmlAttributes, cc: CreationContext) -> VisualElement: ...


class UxmlAttributeOverridesTraits(UxmlTraits):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...


class UxmlBoolAttributeDescription(TypedUxmlAttributeDescription_1[bool]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> bool: ...
    @defaultValue.setter
    def defaultValue(self, value: bool) -> bool: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> bool: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[bool]) -> bool: ...


class UxmlChildElementDescription:
    def __init__(self, t: typing.Type[typing.Any]) -> None: ...
    @property
    def elementName(self) -> str: ...
    @elementName.setter
    def elementName(self, value: str) -> str: ...
    @property
    def elementNamespace(self) -> str: ...
    @elementNamespace.setter
    def elementNamespace(self, value: str) -> str: ...


class UxmlColorAttributeDescription(TypedUxmlAttributeDescription_1[Color]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> Color: ...
    @defaultValue.setter
    def defaultValue(self, value: Color) -> Color: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> Color: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[Color]) -> bool: ...


class UxmlDoubleAttributeDescription(TypedUxmlAttributeDescription_1[float]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> float: ...
    @defaultValue.setter
    def defaultValue(self, value: float) -> float: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> float: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[float]) -> bool: ...


class UxmlEnumAttributeDescription_GenericClasses(abc.ABCMeta):
    Generic_UxmlEnumAttributeDescription_GenericClasses_UxmlEnumAttributeDescription_1_T = typing.TypeVar('Generic_UxmlEnumAttributeDescription_GenericClasses_UxmlEnumAttributeDescription_1_T')
    def __getitem__(self, types : typing.Type[Generic_UxmlEnumAttributeDescription_GenericClasses_UxmlEnumAttributeDescription_1_T]) -> typing.Type[UxmlEnumAttributeDescription_1[Generic_UxmlEnumAttributeDescription_GenericClasses_UxmlEnumAttributeDescription_1_T]]: ...

UxmlEnumAttributeDescription : UxmlEnumAttributeDescription_GenericClasses

UxmlEnumAttributeDescription_1_T = typing.TypeVar('UxmlEnumAttributeDescription_1_T')
class UxmlEnumAttributeDescription_1(typing.Generic[UxmlEnumAttributeDescription_1_T], TypedUxmlAttributeDescription_1[UxmlEnumAttributeDescription_1_T]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> UxmlEnumAttributeDescription_1_T: ...
    @defaultValue.setter
    def defaultValue(self, value: UxmlEnumAttributeDescription_1_T) -> UxmlEnumAttributeDescription_1_T: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> UxmlEnumAttributeDescription_1_T: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[UxmlEnumAttributeDescription_1_T]) -> bool: ...


class UxmlEnumeration(UxmlTypeRestriction):
    def __init__(self) -> None: ...
    @property
    def values(self) -> IEnumerable_1[str]: ...
    @values.setter
    def values(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    def Equals(self, other: UxmlTypeRestriction) -> bool: ...


class UxmlFactory_GenericClasses(abc.ABCMeta):
    Generic_UxmlFactory_GenericClasses_UxmlFactory_1_TCreatedType = typing.TypeVar('Generic_UxmlFactory_GenericClasses_UxmlFactory_1_TCreatedType')
    @typing.overload
    def __getitem__(self, types : typing.Type[Generic_UxmlFactory_GenericClasses_UxmlFactory_1_TCreatedType]) -> typing.Type[UxmlFactory_1[Generic_UxmlFactory_GenericClasses_UxmlFactory_1_TCreatedType]]: ...
    Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TCreatedType = typing.TypeVar('Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TCreatedType')
    Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TTraits = typing.TypeVar('Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TTraits')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TCreatedType], typing.Type[Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TTraits]]) -> typing.Type[UxmlFactory_2[Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TCreatedType, Generic_UxmlFactory_GenericClasses_UxmlFactory_2_TTraits]]: ...

UxmlFactory : UxmlFactory_GenericClasses

UxmlFactory_1_TCreatedType = typing.TypeVar('UxmlFactory_1_TCreatedType')
class UxmlFactory_1(typing.Generic[UxmlFactory_1_TCreatedType], UxmlFactory_2[UxmlFactory_1_TCreatedType, VisualElement.UxmlTraits]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...


UxmlFactory_2_TCreatedType = typing.TypeVar('UxmlFactory_2_TCreatedType')
UxmlFactory_2_TTraits = typing.TypeVar('UxmlFactory_2_TTraits')
class UxmlFactory_2(typing.Generic[UxmlFactory_2_TCreatedType, UxmlFactory_2_TTraits], BaseUxmlFactory_2[UxmlFactory_2_TCreatedType, UxmlFactory_2_TTraits], IUxmlFactory):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    def Create(self, bag: IUxmlAttributes, cc: CreationContext) -> VisualElement: ...


class UxmlFloatAttributeDescription(TypedUxmlAttributeDescription_1[float]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> float: ...
    @defaultValue.setter
    def defaultValue(self, value: float) -> float: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> float: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[float]) -> bool: ...


class UxmlHash128AttributeDescription(TypedUxmlAttributeDescription_1[Hash128]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> Hash128: ...
    @defaultValue.setter
    def defaultValue(self, value: Hash128) -> Hash128: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> Hash128: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[Hash128]) -> bool: ...


class UxmlIntAttributeDescription(TypedUxmlAttributeDescription_1[int]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> int: ...
    @defaultValue.setter
    def defaultValue(self, value: int) -> int: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> int: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[int]) -> bool: ...


class UxmlLongAttributeDescription(TypedUxmlAttributeDescription_1[int]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> int: ...
    @defaultValue.setter
    def defaultValue(self, value: int) -> int: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> int: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[int]) -> bool: ...


class UxmlRootElementFactory(UxmlFactory_2[VisualElement, UxmlRootElementTraits]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    def Create(self, bag: IUxmlAttributes, cc: CreationContext) -> VisualElement: ...


class UxmlRootElementTraits(UxmlTraits):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...


class UxmlStringAttributeDescription(TypedUxmlAttributeDescription_1[str]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> str: ...
    @defaultValue.setter
    def defaultValue(self, value: str) -> str: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> str: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[str]) -> bool: ...


class UxmlStyleFactory(UxmlFactory_2[VisualElement, UxmlStyleTraits]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    def Create(self, bag: IUxmlAttributes, cc: CreationContext) -> VisualElement: ...


class UxmlStyleTraits(UxmlTraits):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...


class UxmlTemplateFactory(UxmlFactory_2[VisualElement, UxmlTemplateTraits]):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @property
    def substituteForTypeName(self) -> str: ...
    @property
    def substituteForTypeNamespace(self) -> str: ...
    @property
    def substituteForTypeQualifiedName(self) -> str: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    @property
    def uxmlName(self) -> str: ...
    @property
    def uxmlNamespace(self) -> str: ...
    @property
    def uxmlQualifiedName(self) -> str: ...
    @property
    def uxmlType(self) -> typing.Type[typing.Any]: ...
    def Create(self, bag: IUxmlAttributes, cc: CreationContext) -> VisualElement: ...


class UxmlTemplateTraits(UxmlTraits):
    def __init__(self) -> None: ...
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...


class UxmlTraits(BaseUxmlTraits):
    @property
    def canHaveAnyAttribute(self) -> bool: ...
    @canHaveAnyAttribute.setter
    def canHaveAnyAttribute(self, value: bool) -> bool: ...
    @property
    def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
    @property
    def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
    def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...


class UxmlTypeAttributeDescription_GenericClasses(abc.ABCMeta):
    Generic_UxmlTypeAttributeDescription_GenericClasses_UxmlTypeAttributeDescription_1_TBase = typing.TypeVar('Generic_UxmlTypeAttributeDescription_GenericClasses_UxmlTypeAttributeDescription_1_TBase')
    def __getitem__(self, types : typing.Type[Generic_UxmlTypeAttributeDescription_GenericClasses_UxmlTypeAttributeDescription_1_TBase]) -> typing.Type[UxmlTypeAttributeDescription_1[Generic_UxmlTypeAttributeDescription_GenericClasses_UxmlTypeAttributeDescription_1_TBase]]: ...

UxmlTypeAttributeDescription : UxmlTypeAttributeDescription_GenericClasses

UxmlTypeAttributeDescription_1_TBase = typing.TypeVar('UxmlTypeAttributeDescription_1_TBase')
class UxmlTypeAttributeDescription_1(typing.Generic[UxmlTypeAttributeDescription_1_TBase], TypedUxmlAttributeDescription_1[typing.Type[typing.Any]]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> typing.Type[typing.Any]: ...
    @defaultValue.setter
    def defaultValue(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> typing.Type[typing.Any]: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[typing.Type[typing.Any]]) -> bool: ...


class UxmlTypeRestriction(IEquatable_1[UxmlTypeRestriction], abc.ABC):
    def Equals(self, other: UxmlTypeRestriction) -> bool: ...


class UxmlUnsignedIntAttributeDescription(TypedUxmlAttributeDescription_1[int]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> int: ...
    @defaultValue.setter
    def defaultValue(self, value: int) -> int: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> int: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[int]) -> bool: ...


class UxmlUnsignedLongAttributeDescription(TypedUxmlAttributeDescription_1[int]):
    def __init__(self) -> None: ...
    @property
    def defaultValue(self) -> int: ...
    @defaultValue.setter
    def defaultValue(self, value: int) -> int: ...
    @property
    def defaultValueAsString(self) -> str: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def obsoleteNames(self) -> IEnumerable_1[str]: ...
    @obsoleteNames.setter
    def obsoleteNames(self, value: IEnumerable_1[str]) -> IEnumerable_1[str]: ...
    @property
    def restriction(self) -> UxmlTypeRestriction: ...
    @restriction.setter
    def restriction(self, value: UxmlTypeRestriction) -> UxmlTypeRestriction: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> str: ...
    @property
    def typeNamespace(self) -> str: ...
    @typeNamespace.setter
    def typeNamespace(self, value: str) -> str: ...
    @property
    def use(self) -> UxmlAttributeDescription.Use: ...
    @use.setter
    def use(self, value: UxmlAttributeDescription.Use) -> UxmlAttributeDescription.Use: ...
    def GetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext) -> int: ...
    def TryGetValueFromBag(self, bag: IUxmlAttributes, cc: CreationContext, value: clr.Reference[int]) -> bool: ...


class UxmlValueBounds(UxmlTypeRestriction):
    def __init__(self) -> None: ...
    @property
    def excludeMax(self) -> bool: ...
    @excludeMax.setter
    def excludeMax(self, value: bool) -> bool: ...
    @property
    def excludeMin(self) -> bool: ...
    @excludeMin.setter
    def excludeMin(self, value: bool) -> bool: ...
    @property
    def max(self) -> str: ...
    @max.setter
    def max(self, value: str) -> str: ...
    @property
    def min(self) -> str: ...
    @min.setter
    def min(self, value: str) -> str: ...
    def Equals(self, other: UxmlTypeRestriction) -> bool: ...


class UxmlValueMatches(UxmlTypeRestriction):
    def __init__(self) -> None: ...
    @property
    def regex(self) -> str: ...
    @regex.setter
    def regex(self, value: str) -> str: ...
    def Equals(self, other: UxmlTypeRestriction) -> bool: ...


class ValidateCommandEvent(CommandEventBase_1[ValidateCommandEvent]):
    def __init__(self) -> None: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def commandName(self) -> str: ...
    @commandName.setter
    def commandName(self, value: str) -> str: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...


class Vector2Field(BaseCompositeField_3[Vector2, FloatField, float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Vector2: ...
    @value.setter
    def value(self, value: Vector2) -> Vector2: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Vector2Field, Vector2Field.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Vector2]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Vector2IntField(BaseCompositeField_3[Vector2Int, IntegerField, int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Vector2Int: ...
    @value.setter
    def value(self, value: Vector2Int) -> Vector2Int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Vector2IntField, Vector2IntField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Vector2Int]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Vector3Field(BaseCompositeField_3[Vector3, FloatField, float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Vector3: ...
    @value.setter
    def value(self, value: Vector3) -> Vector3: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Vector3Field, Vector3Field.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Vector3]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Vector3IntField(BaseCompositeField_3[Vector3Int, IntegerField, int]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Vector3Int: ...
    @value.setter
    def value(self, value: Vector3Int) -> Vector3Int: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Vector3IntField, Vector3IntField.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Vector3Int]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class Vector4Field(BaseCompositeField_3[Vector4, FloatField, float]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, label: str) -> None: ...
    inputUssClassName : str
    labelUssClassName : str
    ussClassName : str
    @property
    def binding(self) -> IBinding: ...
    @binding.setter
    def binding(self, value: IBinding) -> IBinding: ...
    @property
    def bindingPath(self) -> str: ...
    @bindingPath.setter
    def bindingPath(self, value: str) -> str: ...
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> str: ...
    @property
    def labelElement(self) -> Label: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def showMixedValue(self) -> bool: ...
    @showMixedValue.setter
    def showMixedValue(self, value: bool) -> bool: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def value(self) -> Vector4: ...
    @value.setter
    def value(self, value: Vector4) -> Vector4: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...

    class UxmlFactory(UxmlFactory_2[Vector4Field, Vector4Field.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(BaseField_1.UxmlTraits_1[Vector4]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class VectorImage(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def height(self) -> float: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def width(self) -> float: ...


class Vertex:
    nearZ : float
    position : Vector3
    tint : Color32
    uv : Vector2


class Visibility(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Visible : Visibility # 0
    Hidden : Visibility # 1


class VisualElement(Focusable, IVisualElementScheduler, IExperimentalFeatures, ITransitionAnimations, ITransform, IResolvedStyle):
    def __init__(self) -> None: ...
    disabledUssClassName : str
    @property
    def cacheAsBitmap(self) -> bool: ...
    @cacheAsBitmap.setter
    def cacheAsBitmap(self, value: bool) -> bool: ...
    @property
    def canGrabFocus(self) -> bool: ...
    @property
    def childCount(self) -> int: ...
    @property
    def contentContainer(self) -> VisualElement: ...
    @property
    def contentRect(self) -> Rect: ...
    @property
    def customStyle(self) -> ICustomStyle: ...
    @property
    def delegatesFocus(self) -> bool: ...
    @delegatesFocus.setter
    def delegatesFocus(self, value: bool) -> bool: ...
    @property
    def enabledInHierarchy(self) -> bool: ...
    @property
    def enabledSelf(self) -> bool: ...
    @enabledSelf.setter
    def enabledSelf(self, value: bool) -> bool: ...
    @property
    def experimental(self) -> IExperimentalFeatures: ...
    @property
    def focusable(self) -> bool: ...
    @focusable.setter
    def focusable(self, value: bool) -> bool: ...
    @property
    def focusController(self) -> FocusController: ...
    @property
    def generateVisualContent(self) -> Action_1[MeshGenerationContext]: ...
    @generateVisualContent.setter
    def generateVisualContent(self, value: Action_1[MeshGenerationContext]) -> Action_1[MeshGenerationContext]: ...
    @property
    def hierarchy(self) -> VisualElement.Hierarchy: ...
    @hierarchy.setter
    def hierarchy(self, value: VisualElement.Hierarchy) -> VisualElement.Hierarchy: ...
    @property
    def Item(self) -> VisualElement: ...
    @property
    def languageDirection(self) -> LanguageDirection: ...
    @languageDirection.setter
    def languageDirection(self, value: LanguageDirection) -> LanguageDirection: ...
    @property
    def layout(self) -> Rect: ...
    @layout.setter
    def layout(self, value: Rect) -> Rect: ...
    @property
    def localBound(self) -> Rect: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def panel(self) -> IPanel: ...
    @property
    def parent(self) -> VisualElement: ...
    @property
    def pickingMode(self) -> PickingMode: ...
    @pickingMode.setter
    def pickingMode(self, value: PickingMode) -> PickingMode: ...
    @property
    def resolvedStyle(self) -> IResolvedStyle: ...
    @property
    def schedule(self) -> IVisualElementScheduler: ...
    @property
    def style(self) -> IStyle: ...
    @property
    def styleSheets(self) -> VisualElementStyleSheetSet: ...
    @property
    def tabIndex(self) -> int: ...
    @tabIndex.setter
    def tabIndex(self, value: int) -> int: ...
    @property
    def tooltip(self) -> str: ...
    @tooltip.setter
    def tooltip(self, value: str) -> str: ...
    @property
    def transform(self) -> ITransform: ...
    @property
    def usageHints(self) -> UsageHints: ...
    @usageHints.setter
    def usageHints(self, value: UsageHints) -> UsageHints: ...
    @property
    def userData(self) -> typing.Any: ...
    @userData.setter
    def userData(self, value: typing.Any) -> typing.Any: ...
    @property
    def viewDataKey(self) -> str: ...
    @viewDataKey.setter
    def viewDataKey(self, value: str) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> bool: ...
    @property
    def visualTreeAssetSource(self) -> VisualTreeAsset: ...
    @visualTreeAssetSource.setter
    def visualTreeAssetSource(self, value: VisualTreeAsset) -> VisualTreeAsset: ...
    @property
    def worldBound(self) -> Rect: ...
    @property
    def worldTransform(self) -> Matrix4x4: ...
    def Add(self, child: VisualElement) -> None: ...
    def AddToClassList(self, className: str) -> None: ...
    def BringToFront(self) -> None: ...
    def Children(self) -> IEnumerable_1[VisualElement]: ...
    def ClassListContains(self, cls: str) -> bool: ...
    def Clear(self) -> None: ...
    def ClearClassList(self) -> None: ...
    def Contains(self, child: VisualElement) -> bool: ...
    def ContainsPoint(self, localPoint: Vector2) -> bool: ...
    def ElementAt(self, index: int) -> VisualElement: ...
    def EnableInClassList(self, className: str, enable: bool) -> None: ...
    def FindAncestorUserData(self) -> typing.Any: ...
    def FindCommonAncestor(self, other: VisualElement) -> VisualElement: ...
    def Focus(self) -> None: ...
    def GetClasses(self) -> IEnumerable_1[str]: ...
    def IndexOf(self, element: VisualElement) -> int: ...
    def Insert(self, index: int, element: VisualElement) -> None: ...
    def MarkDirtyRepaint(self) -> None: ...
    def Overlaps(self, rectangle: Rect) -> bool: ...
    def PlaceBehind(self, sibling: VisualElement) -> None: ...
    def PlaceInFront(self, sibling: VisualElement) -> None: ...
    def Remove(self, element: VisualElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveFromClassList(self, className: str) -> None: ...
    def RemoveFromHierarchy(self) -> None: ...
    def SendEvent(self, e: EventBase) -> None: ...
    def SendToBack(self) -> None: ...
    def SetEnabled(self, value: bool) -> None: ...
    def Sort(self, comp: Comparison_1[VisualElement]) -> None: ...
    def ToggleInClassList(self, className: str) -> None: ...
    def ToString(self) -> str: ...
    # Skipped GetFirstAncestorOfType due to it being static, abstract and generic.

    GetFirstAncestorOfType : GetFirstAncestorOfType_MethodGroup
    class GetFirstAncestorOfType_MethodGroup:
        def __getitem__(self, t:typing.Type[GetFirstAncestorOfType_1_T1]) -> GetFirstAncestorOfType_1[GetFirstAncestorOfType_1_T1]: ...

        GetFirstAncestorOfType_1_T1 = typing.TypeVar('GetFirstAncestorOfType_1_T1')
        class GetFirstAncestorOfType_1(typing.Generic[GetFirstAncestorOfType_1_T1]):
            GetFirstAncestorOfType_1_T = VisualElement.GetFirstAncestorOfType_MethodGroup.GetFirstAncestorOfType_1_T1
            def __call__(self) -> GetFirstAncestorOfType_1_T:...


    # Skipped GetFirstOfType due to it being static, abstract and generic.

    GetFirstOfType : GetFirstOfType_MethodGroup
    class GetFirstOfType_MethodGroup:
        def __getitem__(self, t:typing.Type[GetFirstOfType_1_T1]) -> GetFirstOfType_1[GetFirstOfType_1_T1]: ...

        GetFirstOfType_1_T1 = typing.TypeVar('GetFirstOfType_1_T1')
        class GetFirstOfType_1(typing.Generic[GetFirstOfType_1_T1]):
            GetFirstOfType_1_T = VisualElement.GetFirstOfType_MethodGroup.GetFirstOfType_1_T1
            def __call__(self) -> GetFirstOfType_1_T:...



    class Hierarchy:
        @property
        def childCount(self) -> int: ...
        @property
        def Item(self) -> VisualElement: ...
        @property
        def parent(self) -> VisualElement: ...
        def Add(self, child: VisualElement) -> None: ...
        def Children(self) -> IEnumerable_1[VisualElement]: ...
        def Clear(self) -> None: ...
        def ElementAt(self, index: int) -> VisualElement: ...
        def GetHashCode(self) -> int: ...
        def IndexOf(self, element: VisualElement) -> int: ...
        def Insert(self, index: int, child: VisualElement) -> None: ...
        def __eq__(self, x: VisualElement.Hierarchy, y: VisualElement.Hierarchy) -> bool: ...
        def __ne__(self, x: VisualElement.Hierarchy, y: VisualElement.Hierarchy) -> bool: ...
        def Remove(self, child: VisualElement) -> None: ...
        def RemoveAt(self, index: int) -> None: ...
        def Sort(self, comp: Comparison_1[VisualElement]) -> None: ...
        # Skipped Equals due to it being static, abstract and generic.

        Equals : Equals_MethodGroup
        class Equals_MethodGroup:
            @typing.overload
            def __call__(self, other: VisualElement.Hierarchy) -> bool:...
            @typing.overload
            def __call__(self, obj: typing.Any) -> bool:...



    class MeasureMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Undefined : VisualElement.MeasureMode # 0
        Exactly : VisualElement.MeasureMode # 1
        AtMost : VisualElement.MeasureMode # 2


    class UxmlFactory(UxmlFactory_2[VisualElement, VisualElement.UxmlTraits]):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @property
        def substituteForTypeName(self) -> str: ...
        @property
        def substituteForTypeNamespace(self) -> str: ...
        @property
        def substituteForTypeQualifiedName(self) -> str: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        @property
        def uxmlName(self) -> str: ...
        @property
        def uxmlNamespace(self) -> str: ...
        @property
        def uxmlQualifiedName(self) -> str: ...
        @property
        def uxmlType(self) -> typing.Type[typing.Any]: ...


    class UxmlTraits(UxmlTraits):
        def __init__(self) -> None: ...
        @property
        def canHaveAnyAttribute(self) -> bool: ...
        @canHaveAnyAttribute.setter
        def canHaveAnyAttribute(self, value: bool) -> bool: ...
        @property
        def uxmlAttributesDescription(self) -> IEnumerable_1[UxmlAttributeDescription]: ...
        @property
        def uxmlChildElementsDescription(self) -> IEnumerable_1[UxmlChildElementDescription]: ...
        def Init(self, ve: VisualElement, bag: IUxmlAttributes, cc: CreationContext) -> None: ...



class VisualElementExtensions(abc.ABC):
    @staticmethod
    def AddManipulator(ele: VisualElement, manipulator: IManipulator) -> None: ...
    @staticmethod
    def RemoveManipulator(ele: VisualElement, manipulator: IManipulator) -> None: ...
    @staticmethod
    def StretchToParentSize(elem: VisualElement) -> None: ...
    @staticmethod
    def StretchToParentWidth(elem: VisualElement) -> None: ...
    # Skipped ChangeCoordinatesTo due to it being static, abstract and generic.

    ChangeCoordinatesTo : ChangeCoordinatesTo_MethodGroup
    class ChangeCoordinatesTo_MethodGroup:
        @typing.overload
        def __call__(self, src: VisualElement, dest: VisualElement, point: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, src: VisualElement, dest: VisualElement, rect: Rect) -> Rect:...

    # Skipped LocalToWorld due to it being static, abstract and generic.

    LocalToWorld : LocalToWorld_MethodGroup
    class LocalToWorld_MethodGroup:
        @typing.overload
        def __call__(self, ele: VisualElement, p: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, ele: VisualElement, r: Rect) -> Rect:...

    # Skipped WorldToLocal due to it being static, abstract and generic.

    WorldToLocal : WorldToLocal_MethodGroup
    class WorldToLocal_MethodGroup:
        @typing.overload
        def __call__(self, ele: VisualElement, p: Vector2) -> Vector2:...
        @typing.overload
        def __call__(self, ele: VisualElement, r: Rect) -> Rect:...



class VisualElementFocusChangeDirection(FocusChangeDirection):
    @classmethod
    @property
    def left(cls) -> FocusChangeDirection: ...
    @classmethod
    @property
    def right(cls) -> FocusChangeDirection: ...


class VisualElementFocusRing(IFocusRing):
    def __init__(self, root: VisualElement, dfo: VisualElementFocusRing.DefaultFocusOrder = ...) -> None: ...
    @property
    def defaultFocusOrder(self) -> VisualElementFocusRing.DefaultFocusOrder: ...
    @defaultFocusOrder.setter
    def defaultFocusOrder(self, value: VisualElementFocusRing.DefaultFocusOrder) -> VisualElementFocusRing.DefaultFocusOrder: ...
    def GetFocusChangeDirection(self, currentFocusable: Focusable, e: EventBase) -> FocusChangeDirection: ...
    def GetNextFocusable(self, currentFocusable: Focusable, direction: FocusChangeDirection) -> Focusable: ...

    class DefaultFocusOrder(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        ChildOrder : VisualElementFocusRing.DefaultFocusOrder # 0
        PositionXY : VisualElementFocusRing.DefaultFocusOrder # 1
        PositionYX : VisualElementFocusRing.DefaultFocusOrder # 2



class VisualElementStyleSheetSet(IEquatable_1[VisualElementStyleSheetSet]):
    @property
    def count(self) -> int: ...
    @property
    def Item(self) -> StyleSheet: ...
    def Add(self, styleSheet: StyleSheet) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, styleSheet: StyleSheet) -> bool: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: VisualElementStyleSheetSet, right: VisualElementStyleSheetSet) -> bool: ...
    def __ne__(self, left: VisualElementStyleSheetSet, right: VisualElementStyleSheetSet) -> bool: ...
    def Remove(self, styleSheet: StyleSheet) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: VisualElementStyleSheetSet) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class VisualTreeAsset(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def contentHash(self) -> int: ...
    @contentHash.setter
    def contentHash(self, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def importedWithErrors(self) -> bool: ...
    @importedWithErrors.setter
    def importedWithErrors(self, value: bool) -> bool: ...
    @property
    def importedWithWarnings(self) -> bool: ...
    @importedWithWarnings.setter
    def importedWithWarnings(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def stylesheets(self) -> IEnumerable_1[StyleSheet]: ...
    @property
    def templateDependencies(self) -> IEnumerable_1[VisualTreeAsset]: ...
    # Skipped CloneTree due to it being static, abstract and generic.

    CloneTree : CloneTree_MethodGroup
    class CloneTree_MethodGroup:
        @typing.overload
        def __call__(self) -> TemplateContainer:...
        @typing.overload
        def __call__(self, target: VisualElement) -> None:...
        @typing.overload
        def __call__(self, bindingPath: str) -> TemplateContainer:...
        @typing.overload
        def __call__(self, target: VisualElement, firstElementIndex: clr.Reference[int], elementAddedCount: clr.Reference[int]) -> None:...

    # Skipped Instantiate due to it being static, abstract and generic.

    Instantiate : Instantiate_MethodGroup
    class Instantiate_MethodGroup:
        @typing.overload
        def __call__(self) -> TemplateContainer:...
        @typing.overload
        def __call__(self, bindingPath: str) -> TemplateContainer:...



class WheelEvent(MouseEventBase_1[WheelEvent]):
    def __init__(self) -> None: ...
    @property
    def actionKey(self) -> bool: ...
    @property
    def altKey(self) -> bool: ...
    @property
    def bubbles(self) -> bool: ...
    @bubbles.setter
    def bubbles(self, value: bool) -> bool: ...
    @property
    def button(self) -> int: ...
    @button.setter
    def button(self, value: int) -> int: ...
    @property
    def clickCount(self) -> int: ...
    @clickCount.setter
    def clickCount(self, value: int) -> int: ...
    @property
    def commandKey(self) -> bool: ...
    @property
    def ctrlKey(self) -> bool: ...
    @property
    def currentTarget(self) -> IEventHandler: ...
    @currentTarget.setter
    def currentTarget(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def delta(self) -> Vector3: ...
    @delta.setter
    def delta(self, value: Vector3) -> Vector3: ...
    @property
    def dispatch(self) -> bool: ...
    @dispatch.setter
    def dispatch(self, value: bool) -> bool: ...
    @property
    def eventTypeId(self) -> int: ...
    @property
    def imguiEvent(self) -> Event: ...
    @imguiEvent.setter
    def imguiEvent(self, value: Event) -> Event: ...
    @property
    def isDefaultPrevented(self) -> bool: ...
    @property
    def isImmediatePropagationStopped(self) -> bool: ...
    @property
    def isPropagationStopped(self) -> bool: ...
    @property
    def localMousePosition(self) -> Vector2: ...
    @localMousePosition.setter
    def localMousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def modifiers(self) -> EventModifiers: ...
    @modifiers.setter
    def modifiers(self, value: EventModifiers) -> EventModifiers: ...
    @property
    def mouseDelta(self) -> Vector2: ...
    @mouseDelta.setter
    def mouseDelta(self, value: Vector2) -> Vector2: ...
    @property
    def mousePosition(self) -> Vector2: ...
    @mousePosition.setter
    def mousePosition(self, value: Vector2) -> Vector2: ...
    @property
    def originalMousePosition(self) -> Vector2: ...
    @property
    def pressedButtons(self) -> int: ...
    @pressedButtons.setter
    def pressedButtons(self, value: int) -> int: ...
    @property
    def propagationPhase(self) -> PropagationPhase: ...
    @propagationPhase.setter
    def propagationPhase(self, value: PropagationPhase) -> PropagationPhase: ...
    @property
    def shiftKey(self) -> bool: ...
    @property
    def target(self) -> IEventHandler: ...
    @target.setter
    def target(self, value: IEventHandler) -> IEventHandler: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def tricklesDown(self) -> bool: ...
    @tricklesDown.setter
    def tricklesDown(self, value: bool) -> bool: ...
    @staticmethod
    def GetPooled(systemEvent: Event) -> WheelEvent: ...


class WhiteSpace(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : WhiteSpace # 0
    NoWrap : WhiteSpace # 1


class Wrap(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoWrap : Wrap # 0
    Wrap : Wrap # 1
    WrapReverse : Wrap # 2

