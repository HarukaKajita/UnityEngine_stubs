import typing
from UnityEngine import Object
from Unity.Collections import NativeArray_1
from Unity.Profiling import ProfilerCategory
from System import Guid, Array, Array_1
from System.Collections.Generic import List_1

class CustomSampler(Sampler):
    @property
    def isValid(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @staticmethod
    def Create(name: str, collectGpuData: bool = ...) -> CustomSampler: ...
    def End(self) -> None: ...
    # Skipped Begin due to it being static, abstract and generic.

    Begin : Begin_MethodGroup
    class Begin_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, targetObject: Object) -> None:...



class Profiler:
    @classmethod
    @property
    def areaCount(cls) -> int: ...
    @classmethod
    @property
    def enableAllocationCallstacks(cls) -> bool: ...
    @classmethod
    @enableAllocationCallstacks.setter
    def enableAllocationCallstacks(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enableBinaryLog(cls) -> bool: ...
    @classmethod
    @enableBinaryLog.setter
    def enableBinaryLog(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def enabled(cls) -> bool: ...
    @classmethod
    @enabled.setter
    def enabled(cls, value: bool) -> bool: ...
    @classmethod
    @property
    def logFile(cls) -> str: ...
    @classmethod
    @logFile.setter
    def logFile(cls, value: str) -> str: ...
    @classmethod
    @property
    def maxNumberOfSamplesPerFrame(cls) -> int: ...
    @classmethod
    @maxNumberOfSamplesPerFrame.setter
    def maxNumberOfSamplesPerFrame(cls, value: int) -> int: ...
    @classmethod
    @property
    def maxUsedMemory(cls) -> int: ...
    @classmethod
    @maxUsedMemory.setter
    def maxUsedMemory(cls, value: int) -> int: ...
    @classmethod
    @property
    def supported(cls) -> bool: ...
    @classmethod
    @property
    def usedHeapSize(cls) -> int: ...
    @classmethod
    @property
    def usedHeapSizeLong(cls) -> int: ...
    @staticmethod
    def AddFramesFromFile(file: str) -> None: ...
    @staticmethod
    def BeginThreadProfiling(threadGroupName: str, threadName: str) -> None: ...
    @staticmethod
    def EndSample() -> None: ...
    @staticmethod
    def EndThreadProfiling() -> None: ...
    @staticmethod
    def GetAllocatedMemoryForGraphicsDriver() -> int: ...
    @staticmethod
    def GetAreaEnabled(area: ProfilerArea) -> bool: ...
    @staticmethod
    def GetCategoriesCount() -> int: ...
    @staticmethod
    def GetMonoHeapSize() -> int: ...
    @staticmethod
    def GetMonoHeapSizeLong() -> int: ...
    @staticmethod
    def GetMonoUsedSize() -> int: ...
    @staticmethod
    def GetMonoUsedSizeLong() -> int: ...
    @staticmethod
    def GetRuntimeMemorySize(o: Object) -> int: ...
    @staticmethod
    def GetRuntimeMemorySizeLong(o: Object) -> int: ...
    @staticmethod
    def GetTempAllocatorSize() -> int: ...
    @staticmethod
    def GetTotalAllocatedMemory() -> int: ...
    @staticmethod
    def GetTotalAllocatedMemoryLong() -> int: ...
    @staticmethod
    def GetTotalFragmentationInfo(stats: NativeArray_1[int]) -> int: ...
    @staticmethod
    def GetTotalReservedMemory() -> int: ...
    @staticmethod
    def GetTotalReservedMemoryLong() -> int: ...
    @staticmethod
    def GetTotalUnusedReservedMemory() -> int: ...
    @staticmethod
    def GetTotalUnusedReservedMemoryLong() -> int: ...
    @staticmethod
    def IsCategoryEnabled(category: ProfilerCategory) -> bool: ...
    @staticmethod
    def SetAreaEnabled(area: ProfilerArea, enabled: bool) -> None: ...
    @staticmethod
    def SetCategoryEnabled(category: ProfilerCategory, enabled: bool) -> None: ...
    @staticmethod
    def SetTempAllocatorRequestedSize(size: int) -> bool: ...
    # Skipped BeginSample due to it being static, abstract and generic.

    BeginSample : BeginSample_MethodGroup
    class BeginSample_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> None:...
        @typing.overload
        def __call__(self, name: str, targetObject: Object) -> None:...

    # Skipped EmitFrameMetaData due to it being static, abstract and generic.

    EmitFrameMetaData : EmitFrameMetaData_MethodGroup
    class EmitFrameMetaData_MethodGroup:
        def __getitem__(self, t:typing.Type[EmitFrameMetaData_1_T1]) -> EmitFrameMetaData_1[EmitFrameMetaData_1_T1]: ...

        EmitFrameMetaData_1_T1 = typing.TypeVar('EmitFrameMetaData_1_T1')
        class EmitFrameMetaData_1(typing.Generic[EmitFrameMetaData_1_T1]):
            EmitFrameMetaData_1_T = Profiler.EmitFrameMetaData_MethodGroup.EmitFrameMetaData_1_T1
            @typing.overload
            def __call__(self, id: Guid, tag: int, data: List_1[EmitFrameMetaData_1_T]) -> None:...
            @typing.overload
            def __call__(self, id: Guid, tag: int, data: NativeArray_1[EmitFrameMetaData_1_T]) -> None:...

        def __call__(self, id: Guid, tag: int, data: Array) -> None:...

    # Skipped EmitSessionMetaData due to it being static, abstract and generic.

    EmitSessionMetaData : EmitSessionMetaData_MethodGroup
    class EmitSessionMetaData_MethodGroup:
        def __getitem__(self, t:typing.Type[EmitSessionMetaData_1_T1]) -> EmitSessionMetaData_1[EmitSessionMetaData_1_T1]: ...

        EmitSessionMetaData_1_T1 = typing.TypeVar('EmitSessionMetaData_1_T1')
        class EmitSessionMetaData_1(typing.Generic[EmitSessionMetaData_1_T1]):
            EmitSessionMetaData_1_T = Profiler.EmitSessionMetaData_MethodGroup.EmitSessionMetaData_1_T1
            @typing.overload
            def __call__(self, id: Guid, tag: int, data: List_1[EmitSessionMetaData_1_T]) -> None:...
            @typing.overload
            def __call__(self, id: Guid, tag: int, data: NativeArray_1[EmitSessionMetaData_1_T]) -> None:...

        def __call__(self, id: Guid, tag: int, data: Array) -> None:...

    # Skipped GetAllCategories due to it being static, abstract and generic.

    GetAllCategories : GetAllCategories_MethodGroup
    class GetAllCategories_MethodGroup:
        @typing.overload
        def __call__(self, categories: Array_1[ProfilerCategory]) -> None:...
        @typing.overload
        def __call__(self, categories: NativeArray_1[ProfilerCategory]) -> None:...



class ProfilerArea(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CPU : ProfilerArea # 0
    GPU : ProfilerArea # 1
    Rendering : ProfilerArea # 2
    Memory : ProfilerArea # 3
    Audio : ProfilerArea # 4
    Video : ProfilerArea # 5
    Physics : ProfilerArea # 6
    Physics2D : ProfilerArea # 7
    NetworkMessages : ProfilerArea # 8
    NetworkOperations : ProfilerArea # 9
    UI : ProfilerArea # 10
    UIDetails : ProfilerArea # 11
    GlobalIllumination : ProfilerArea # 12
    VirtualTexturing : ProfilerArea # 13


class Recorder:
    @property
    def elapsedNanoseconds(self) -> int: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gpuElapsedNanoseconds(self) -> int: ...
    @property
    def gpuSampleBlockCount(self) -> int: ...
    @property
    def isValid(self) -> bool: ...
    @property
    def sampleBlockCount(self) -> int: ...
    def CollectFromAllThreads(self) -> None: ...
    def FilterToCurrentThread(self) -> None: ...
    @staticmethod
    def Get(samplerName: str) -> Recorder: ...


class Sampler:
    @property
    def isValid(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @staticmethod
    def Get(name: str) -> Sampler: ...
    @staticmethod
    def GetNames(names: List_1[str]) -> int: ...
    def GetRecorder(self) -> Recorder: ...

