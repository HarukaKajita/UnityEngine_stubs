import typing, abc
from System import DateTime, Action_1, Array_1, Action_2
from UnityEngine import Texture2D

class IAchievement(typing.Protocol):
    @property
    def completed(self) -> bool: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def lastReportedDate(self) -> DateTime: ...
    @property
    def percentCompleted(self) -> float: ...
    @percentCompleted.setter
    def percentCompleted(self, value: float) -> float: ...
    @abc.abstractmethod
    def ReportProgress(self, callback: Action_1[bool]) -> None: ...


class IAchievementDescription(typing.Protocol):
    @property
    def achievedDescription(self) -> str: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def image(self) -> Texture2D: ...
    @property
    def points(self) -> int: ...
    @property
    def title(self) -> str: ...
    @property
    def unachievedDescription(self) -> str: ...


class ILeaderboard(typing.Protocol):
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> str: ...
    @property
    def loading(self) -> bool: ...
    @property
    def localUserScore(self) -> IScore: ...
    @property
    def maxRange(self) -> int: ...
    @property
    def range(self) -> Range: ...
    @range.setter
    def range(self, value: Range) -> Range: ...
    @property
    def scores(self) -> Array_1[IScore]: ...
    @property
    def timeScope(self) -> TimeScope: ...
    @timeScope.setter
    def timeScope(self, value: TimeScope) -> TimeScope: ...
    @property
    def title(self) -> str: ...
    @property
    def userScope(self) -> UserScope: ...
    @userScope.setter
    def userScope(self, value: UserScope) -> UserScope: ...
    @abc.abstractmethod
    def LoadScores(self, callback: Action_1[bool]) -> None: ...
    @abc.abstractmethod
    def SetUserFilter(self, userIDs: Array_1[str]) -> None: ...


class ILocalUser(IUserProfile, typing.Protocol):
    @property
    def authenticated(self) -> bool: ...
    @property
    def friends(self) -> Array_1[IUserProfile]: ...
    @property
    def underage(self) -> bool: ...
    @abc.abstractmethod
    def LoadFriends(self, callback: Action_1[bool]) -> None: ...
    # Skipped Authenticate due to it being static, abstract and generic.

    Authenticate : Authenticate_MethodGroup
    class Authenticate_MethodGroup:
        @typing.overload
        def __call__(self, callback: Action_1[bool]) -> None:...
        @typing.overload
        def __call__(self, callback: Action_2[bool, str]) -> None:...



class IScore(typing.Protocol):
    @property
    def date(self) -> DateTime: ...
    @property
    def formattedValue(self) -> str: ...
    @property
    def leaderboardID(self) -> str: ...
    @leaderboardID.setter
    def leaderboardID(self, value: str) -> str: ...
    @property
    def rank(self) -> int: ...
    @property
    def userID(self) -> str: ...
    @property
    def value(self) -> int: ...
    @value.setter
    def value(self, value: int) -> int: ...
    @abc.abstractmethod
    def ReportScore(self, callback: Action_1[bool]) -> None: ...


class ISocialPlatform(typing.Protocol):
    @property
    def localUser(self) -> ILocalUser: ...
    @abc.abstractmethod
    def CreateAchievement(self) -> IAchievement: ...
    @abc.abstractmethod
    def CreateLeaderboard(self) -> ILeaderboard: ...
    @abc.abstractmethod
    def GetLoading(self, board: ILeaderboard) -> bool: ...
    @abc.abstractmethod
    def LoadAchievementDescriptions(self, callback: Action_1[Array_1[IAchievementDescription]]) -> None: ...
    @abc.abstractmethod
    def LoadAchievements(self, callback: Action_1[Array_1[IAchievement]]) -> None: ...
    @abc.abstractmethod
    def LoadFriends(self, user: ILocalUser, callback: Action_1[bool]) -> None: ...
    @abc.abstractmethod
    def LoadUsers(self, userIDs: Array_1[str], callback: Action_1[Array_1[IUserProfile]]) -> None: ...
    @abc.abstractmethod
    def ReportProgress(self, achievementID: str, progress: float, callback: Action_1[bool]) -> None: ...
    @abc.abstractmethod
    def ReportScore(self, score: int, board: str, callback: Action_1[bool]) -> None: ...
    @abc.abstractmethod
    def ShowAchievementsUI(self) -> None: ...
    @abc.abstractmethod
    def ShowLeaderboardUI(self) -> None: ...
    # Skipped Authenticate due to it being static, abstract and generic.

    Authenticate : Authenticate_MethodGroup
    class Authenticate_MethodGroup:
        @typing.overload
        def __call__(self, user: ILocalUser, callback: Action_1[bool]) -> None:...
        @typing.overload
        def __call__(self, user: ILocalUser, callback: Action_2[bool, str]) -> None:...

    # Skipped LoadScores due to it being static, abstract and generic.

    LoadScores : LoadScores_MethodGroup
    class LoadScores_MethodGroup:
        @typing.overload
        def __call__(self, leaderboardID: str, callback: Action_1[Array_1[IScore]]) -> None:...
        @typing.overload
        def __call__(self, board: ILeaderboard, callback: Action_1[bool]) -> None:...



class IUserProfile(typing.Protocol):
    @property
    def id(self) -> str: ...
    @property
    def image(self) -> Texture2D: ...
    @property
    def isFriend(self) -> bool: ...
    @property
    def state(self) -> UserState: ...
    @property
    def userName(self) -> str: ...


class Local(ISocialPlatform):
    def __init__(self) -> None: ...
    @property
    def localUser(self) -> ILocalUser: ...
    def CreateAchievement(self) -> IAchievement: ...
    def CreateLeaderboard(self) -> ILeaderboard: ...
    def LoadAchievementDescriptions(self, callback: Action_1[Array_1[IAchievementDescription]]) -> None: ...
    def LoadAchievements(self, callback: Action_1[Array_1[IAchievement]]) -> None: ...
    def LoadScores(self, leaderboardID: str, callback: Action_1[Array_1[IScore]]) -> None: ...
    def LoadUsers(self, userIDs: Array_1[str], callback: Action_1[Array_1[IUserProfile]]) -> None: ...
    def ReportProgress(self, id: str, progress: float, callback: Action_1[bool]) -> None: ...
    def ReportScore(self, score: int, board: str, callback: Action_1[bool]) -> None: ...
    def ShowAchievementsUI(self) -> None: ...
    def ShowLeaderboardUI(self) -> None: ...


class Range:
    def __init__(self, fromValue: int, valueCount: int) -> None: ...
    count : int
    from : int


class TimeScope(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Today : TimeScope # 0
    Week : TimeScope # 1
    AllTime : TimeScope # 2


class UserScope(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Global : UserScope # 0
    FriendsOnly : UserScope # 1


class UserState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Online : UserState # 0
    OnlineAndAway : UserState # 1
    OnlineAndBusy : UserState # 2
    Offline : UserState # 3
    Playing : UserState # 4

