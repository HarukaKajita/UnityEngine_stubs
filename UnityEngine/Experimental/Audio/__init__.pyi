import typing
from System import IDisposable, MulticastDelegate, IAsyncResult, AsyncCallback
from UnityEngine import Object
from Unity.Collections import NativeArray_1
from System.Reflection import MethodInfo

class AudioSampleProvider(IDisposable):
    @property
    def availableSampleFrameCount(self) -> int: ...
    @property
    def channelCount(self) -> int: ...
    @channelCount.setter
    def channelCount(self, value: int) -> int: ...
    @classmethod
    @property
    def consumeSampleFramesNativeFunction(cls) -> AudioSampleProvider.ConsumeSampleFramesNativeFunction: ...
    @property
    def enableSampleFramesAvailableEvents(self) -> bool: ...
    @enableSampleFramesAvailableEvents.setter
    def enableSampleFramesAvailableEvents(self, value: bool) -> bool: ...
    @property
    def enableSilencePadding(self) -> bool: ...
    @enableSilencePadding.setter
    def enableSilencePadding(self, value: bool) -> bool: ...
    @property
    def freeSampleFrameCount(self) -> int: ...
    @property
    def freeSampleFrameCountLowThreshold(self) -> int: ...
    @freeSampleFrameCountLowThreshold.setter
    def freeSampleFrameCountLowThreshold(self, value: int) -> int: ...
    @property
    def id(self) -> int: ...
    @id.setter
    def id(self, value: int) -> int: ...
    @property
    def maxSampleFrameCount(self) -> int: ...
    @property
    def owner(self) -> Object: ...
    @owner.setter
    def owner(self, value: Object) -> Object: ...
    @property
    def sampleRate(self) -> int: ...
    @sampleRate.setter
    def sampleRate(self, value: int) -> int: ...
    @property
    def trackIndex(self) -> int: ...
    @trackIndex.setter
    def trackIndex(self, value: int) -> int: ...
    @property
    def valid(self) -> bool: ...
    def ClearSampleFramesAvailableNativeHandler(self) -> None: ...
    def ClearSampleFramesOverflowNativeHandler(self) -> None: ...
    def ConsumeSampleFrames(self, sampleFrames: NativeArray_1[float]) -> int: ...
    def Dispose(self) -> None: ...
    def SetSampleFramesAvailableNativeHandler(self, handler: AudioSampleProvider.SampleFramesEventNativeFunction, userData: int) -> None: ...
    def SetSampleFramesOverflowNativeHandler(self, handler: AudioSampleProvider.SampleFramesEventNativeFunction, userData: int) -> None: ...

    class ConsumeSampleFramesNativeFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, providerId: int, interleavedSampleFrames: int, sampleFrameCount: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> int: ...
        def Invoke(self, providerId: int, interleavedSampleFrames: int, sampleFrameCount: int) -> int: ...


    class SampleFramesEventNativeFunction(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, userData: int, providerId: int, sampleFrameCount: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, userData: int, providerId: int, sampleFrameCount: int) -> None: ...


    class SampleFramesHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, provider: AudioSampleProvider, sampleFrameCount: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, provider: AudioSampleProvider, sampleFrameCount: int) -> None: ...


