import typing, abc
from System import MulticastDelegate, IAsyncResult, AsyncCallback, Array_1
from System.Reflection import MethodInfo
from UnityEngine import ISerializationCallbackReceiver, Object

class PersistentListenerMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    EventDefined : PersistentListenerMode # 0
    Void : PersistentListenerMode # 1
    Object : PersistentListenerMode # 2
    Int : PersistentListenerMode # 3
    Float : PersistentListenerMode # 4
    String : PersistentListenerMode # 5
    Bool : PersistentListenerMode # 6


class UnityAction_GenericClasses(abc.ABCMeta):
    Generic_UnityAction_GenericClasses_UnityAction_1_T0 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_1_T0')
    @typing.overload
    def __getitem__(self, types : typing.Type[Generic_UnityAction_GenericClasses_UnityAction_1_T0]) -> typing.Type[UnityAction_1[Generic_UnityAction_GenericClasses_UnityAction_1_T0]]: ...
    Generic_UnityAction_GenericClasses_UnityAction_2_T0 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_2_T0')
    Generic_UnityAction_GenericClasses_UnityAction_2_T1 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_2_T1')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UnityAction_GenericClasses_UnityAction_2_T0], typing.Type[Generic_UnityAction_GenericClasses_UnityAction_2_T1]]) -> typing.Type[UnityAction_2[Generic_UnityAction_GenericClasses_UnityAction_2_T0, Generic_UnityAction_GenericClasses_UnityAction_2_T1]]: ...
    Generic_UnityAction_GenericClasses_UnityAction_3_T0 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_3_T0')
    Generic_UnityAction_GenericClasses_UnityAction_3_T1 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_3_T1')
    Generic_UnityAction_GenericClasses_UnityAction_3_T2 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_3_T2')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UnityAction_GenericClasses_UnityAction_3_T0], typing.Type[Generic_UnityAction_GenericClasses_UnityAction_3_T1], typing.Type[Generic_UnityAction_GenericClasses_UnityAction_3_T2]]) -> typing.Type[UnityAction_3[Generic_UnityAction_GenericClasses_UnityAction_3_T0, Generic_UnityAction_GenericClasses_UnityAction_3_T1, Generic_UnityAction_GenericClasses_UnityAction_3_T2]]: ...
    Generic_UnityAction_GenericClasses_UnityAction_4_T0 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_4_T0')
    Generic_UnityAction_GenericClasses_UnityAction_4_T1 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_4_T1')
    Generic_UnityAction_GenericClasses_UnityAction_4_T2 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_4_T2')
    Generic_UnityAction_GenericClasses_UnityAction_4_T3 = typing.TypeVar('Generic_UnityAction_GenericClasses_UnityAction_4_T3')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UnityAction_GenericClasses_UnityAction_4_T0], typing.Type[Generic_UnityAction_GenericClasses_UnityAction_4_T1], typing.Type[Generic_UnityAction_GenericClasses_UnityAction_4_T2], typing.Type[Generic_UnityAction_GenericClasses_UnityAction_4_T3]]) -> typing.Type[UnityAction_4[Generic_UnityAction_GenericClasses_UnityAction_4_T0, Generic_UnityAction_GenericClasses_UnityAction_4_T1, Generic_UnityAction_GenericClasses_UnityAction_4_T2, Generic_UnityAction_GenericClasses_UnityAction_4_T3]]: ...

class UnityAction(UnityAction_0, metaclass =UnityAction_GenericClasses): ...

class UnityAction_0(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


UnityAction_1_T0 = typing.TypeVar('UnityAction_1_T0')
class UnityAction_1(typing.Generic[UnityAction_1_T0], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, arg0: UnityAction_1_T0, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, arg0: UnityAction_1_T0) -> None: ...


UnityAction_2_T0 = typing.TypeVar('UnityAction_2_T0')
UnityAction_2_T1 = typing.TypeVar('UnityAction_2_T1')
class UnityAction_2(typing.Generic[UnityAction_2_T0, UnityAction_2_T1], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, arg0: UnityAction_2_T0, arg1: UnityAction_2_T1, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, arg0: UnityAction_2_T0, arg1: UnityAction_2_T1) -> None: ...


UnityAction_3_T0 = typing.TypeVar('UnityAction_3_T0')
UnityAction_3_T1 = typing.TypeVar('UnityAction_3_T1')
UnityAction_3_T2 = typing.TypeVar('UnityAction_3_T2')
class UnityAction_3(typing.Generic[UnityAction_3_T0, UnityAction_3_T1, UnityAction_3_T2], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, arg0: UnityAction_3_T0, arg1: UnityAction_3_T1, arg2: UnityAction_3_T2, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, arg0: UnityAction_3_T0, arg1: UnityAction_3_T1, arg2: UnityAction_3_T2) -> None: ...


UnityAction_4_T0 = typing.TypeVar('UnityAction_4_T0')
UnityAction_4_T1 = typing.TypeVar('UnityAction_4_T1')
UnityAction_4_T2 = typing.TypeVar('UnityAction_4_T2')
UnityAction_4_T3 = typing.TypeVar('UnityAction_4_T3')
class UnityAction_4(typing.Generic[UnityAction_4_T0, UnityAction_4_T1, UnityAction_4_T2, UnityAction_4_T3], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, arg0: UnityAction_4_T0, arg1: UnityAction_4_T1, arg2: UnityAction_4_T2, arg3: UnityAction_4_T3, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, arg0: UnityAction_4_T0, arg1: UnityAction_4_T1, arg2: UnityAction_4_T2, arg3: UnityAction_4_T3) -> None: ...


class UnityEvent_GenericClasses(abc.ABCMeta):
    Generic_UnityEvent_GenericClasses_UnityEvent_1_T0 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_1_T0')
    @typing.overload
    def __getitem__(self, types : typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_1_T0]) -> typing.Type[UnityEvent_1[Generic_UnityEvent_GenericClasses_UnityEvent_1_T0]]: ...
    Generic_UnityEvent_GenericClasses_UnityEvent_2_T0 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_2_T0')
    Generic_UnityEvent_GenericClasses_UnityEvent_2_T1 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_2_T1')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_2_T0], typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_2_T1]]) -> typing.Type[UnityEvent_2[Generic_UnityEvent_GenericClasses_UnityEvent_2_T0, Generic_UnityEvent_GenericClasses_UnityEvent_2_T1]]: ...
    Generic_UnityEvent_GenericClasses_UnityEvent_3_T0 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_3_T0')
    Generic_UnityEvent_GenericClasses_UnityEvent_3_T1 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_3_T1')
    Generic_UnityEvent_GenericClasses_UnityEvent_3_T2 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_3_T2')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_3_T0], typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_3_T1], typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_3_T2]]) -> typing.Type[UnityEvent_3[Generic_UnityEvent_GenericClasses_UnityEvent_3_T0, Generic_UnityEvent_GenericClasses_UnityEvent_3_T1, Generic_UnityEvent_GenericClasses_UnityEvent_3_T2]]: ...
    Generic_UnityEvent_GenericClasses_UnityEvent_4_T0 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_4_T0')
    Generic_UnityEvent_GenericClasses_UnityEvent_4_T1 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_4_T1')
    Generic_UnityEvent_GenericClasses_UnityEvent_4_T2 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_4_T2')
    Generic_UnityEvent_GenericClasses_UnityEvent_4_T3 = typing.TypeVar('Generic_UnityEvent_GenericClasses_UnityEvent_4_T3')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_4_T0], typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_4_T1], typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_4_T2], typing.Type[Generic_UnityEvent_GenericClasses_UnityEvent_4_T3]]) -> typing.Type[UnityEvent_4[Generic_UnityEvent_GenericClasses_UnityEvent_4_T0, Generic_UnityEvent_GenericClasses_UnityEvent_4_T1, Generic_UnityEvent_GenericClasses_UnityEvent_4_T2, Generic_UnityEvent_GenericClasses_UnityEvent_4_T3]]: ...

class UnityEvent(UnityEvent_0, metaclass =UnityEvent_GenericClasses): ...

class UnityEvent_0(UnityEventBase):
    def __init__(self) -> None: ...
    def AddListener(self, call: UnityAction) -> None: ...
    def Invoke(self) -> None: ...
    def RemoveListener(self, call: UnityAction) -> None: ...


UnityEvent_1_T0 = typing.TypeVar('UnityEvent_1_T0')
class UnityEvent_1(typing.Generic[UnityEvent_1_T0], UnityEventBase):
    def __init__(self) -> None: ...
    def AddListener(self, call: UnityAction_1[UnityEvent_1_T0]) -> None: ...
    def Invoke(self, arg0: UnityEvent_1_T0) -> None: ...
    def RemoveListener(self, call: UnityAction_1[UnityEvent_1_T0]) -> None: ...


UnityEvent_2_T0 = typing.TypeVar('UnityEvent_2_T0')
UnityEvent_2_T1 = typing.TypeVar('UnityEvent_2_T1')
class UnityEvent_2(typing.Generic[UnityEvent_2_T0, UnityEvent_2_T1], UnityEventBase):
    def __init__(self) -> None: ...
    def AddListener(self, call: UnityAction_2[UnityEvent_2_T0, UnityEvent_2_T1]) -> None: ...
    def Invoke(self, arg0: UnityEvent_2_T0, arg1: UnityEvent_2_T1) -> None: ...
    def RemoveListener(self, call: UnityAction_2[UnityEvent_2_T0, UnityEvent_2_T1]) -> None: ...


UnityEvent_3_T0 = typing.TypeVar('UnityEvent_3_T0')
UnityEvent_3_T1 = typing.TypeVar('UnityEvent_3_T1')
UnityEvent_3_T2 = typing.TypeVar('UnityEvent_3_T2')
class UnityEvent_3(typing.Generic[UnityEvent_3_T0, UnityEvent_3_T1, UnityEvent_3_T2], UnityEventBase):
    def __init__(self) -> None: ...
    def AddListener(self, call: UnityAction_3[UnityEvent_3_T0, UnityEvent_3_T1, UnityEvent_3_T2]) -> None: ...
    def Invoke(self, arg0: UnityEvent_3_T0, arg1: UnityEvent_3_T1, arg2: UnityEvent_3_T2) -> None: ...
    def RemoveListener(self, call: UnityAction_3[UnityEvent_3_T0, UnityEvent_3_T1, UnityEvent_3_T2]) -> None: ...


UnityEvent_4_T0 = typing.TypeVar('UnityEvent_4_T0')
UnityEvent_4_T1 = typing.TypeVar('UnityEvent_4_T1')
UnityEvent_4_T2 = typing.TypeVar('UnityEvent_4_T2')
UnityEvent_4_T3 = typing.TypeVar('UnityEvent_4_T3')
class UnityEvent_4(typing.Generic[UnityEvent_4_T0, UnityEvent_4_T1, UnityEvent_4_T2, UnityEvent_4_T3], UnityEventBase):
    def __init__(self) -> None: ...
    def AddListener(self, call: UnityAction_4[UnityEvent_4_T0, UnityEvent_4_T1, UnityEvent_4_T2, UnityEvent_4_T3]) -> None: ...
    def Invoke(self, arg0: UnityEvent_4_T0, arg1: UnityEvent_4_T1, arg2: UnityEvent_4_T2, arg3: UnityEvent_4_T3) -> None: ...
    def RemoveListener(self, call: UnityAction_4[UnityEvent_4_T0, UnityEvent_4_T1, UnityEvent_4_T2, UnityEvent_4_T3]) -> None: ...


class UnityEventBase(ISerializationCallbackReceiver, abc.ABC):
    def GetPersistentEventCount(self) -> int: ...
    def GetPersistentListenerState(self, index: int) -> UnityEventCallState: ...
    def GetPersistentMethodName(self, index: int) -> str: ...
    def GetPersistentTarget(self, index: int) -> Object: ...
    def RemoveAllListeners(self) -> None: ...
    def SetPersistentListenerState(self, index: int, state: UnityEventCallState) -> None: ...
    def ToString(self) -> str: ...
    # Skipped GetValidMethodInfo due to it being static, abstract and generic.

    GetValidMethodInfo : GetValidMethodInfo_MethodGroup
    class GetValidMethodInfo_MethodGroup:
        @typing.overload
        def __call__(self, objectType: typing.Type[typing.Any], functionName: str, argumentTypes: Array_1[typing.Type[typing.Any]]) -> MethodInfo:...
        @typing.overload
        def __call__(self, obj: typing.Any, functionName: str, argumentTypes: Array_1[typing.Type[typing.Any]]) -> MethodInfo:...



class UnityEventCallState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : UnityEventCallState # 0
    EditorAndRuntime : UnityEventCallState # 1
    RuntimeOnly : UnityEventCallState # 2

