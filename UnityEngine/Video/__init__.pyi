import typing
from UnityEngine import Object, HideFlags, Behaviour, Component, GameObject, Camera, Renderer, RenderTexture, Texture, Transform, AudioSource
from System import MulticastDelegate, IAsyncResult, AsyncCallback
from System.Reflection import MethodInfo

class Video3DLayout(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    No3D : Video3DLayout # 0
    SideBySide3D : Video3DLayout # 1
    OverUnder3D : Video3DLayout # 2


class VideoAspectRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoScaling : VideoAspectRatio # 0
    FitVertically : VideoAspectRatio # 1
    FitHorizontally : VideoAspectRatio # 2
    FitInside : VideoAspectRatio # 3
    FitOutside : VideoAspectRatio # 4
    Stretch : VideoAspectRatio # 5


class VideoAudioOutputMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : VideoAudioOutputMode # 0
    AudioSource : VideoAudioOutputMode # 1
    Direct : VideoAudioOutputMode # 2
    APIOnly : VideoAudioOutputMode # 3


class VideoClip(Object):
    @property
    def audioTrackCount(self) -> int: ...
    @property
    def frameCount(self) -> int: ...
    @property
    def frameRate(self) -> float: ...
    @property
    def height(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def length(self) -> float: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def originalPath(self) -> str: ...
    @property
    def pixelAspectRatioDenominator(self) -> int: ...
    @property
    def pixelAspectRatioNumerator(self) -> int: ...
    @property
    def sRGB(self) -> bool: ...
    @property
    def width(self) -> int: ...
    def GetAudioChannelCount(self, audioTrackIdx: int) -> int: ...
    def GetAudioLanguage(self, audioTrackIdx: int) -> str: ...
    def GetAudioSampleRate(self, audioTrackIdx: int) -> int: ...


class VideoPlayer(Behaviour):
    def __init__(self) -> None: ...
    @property
    def animation(self) -> Component: ...
    @property
    def aspectRatio(self) -> VideoAspectRatio: ...
    @aspectRatio.setter
    def aspectRatio(self, value: VideoAspectRatio) -> VideoAspectRatio: ...
    @property
    def audio(self) -> Component: ...
    @property
    def audioOutputMode(self) -> VideoAudioOutputMode: ...
    @audioOutputMode.setter
    def audioOutputMode(self, value: VideoAudioOutputMode) -> VideoAudioOutputMode: ...
    @property
    def audioTrackCount(self) -> int: ...
    @property
    def camera(self) -> Component: ...
    @property
    def canSetDirectAudioVolume(self) -> bool: ...
    @property
    def canSetPlaybackSpeed(self) -> bool: ...
    @property
    def canSetSkipOnDrop(self) -> bool: ...
    @property
    def canSetTime(self) -> bool: ...
    @property
    def canSetTimeSource(self) -> bool: ...
    @property
    def canSetTimeUpdateMode(self) -> bool: ...
    @property
    def canStep(self) -> bool: ...
    @property
    def clip(self) -> VideoClip: ...
    @clip.setter
    def clip(self, value: VideoClip) -> VideoClip: ...
    @property
    def clockTime(self) -> float: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def controlledAudioTrackCount(self) -> int: ...
    @controlledAudioTrackCount.setter
    def controlledAudioTrackCount(self, value: int) -> int: ...
    @classmethod
    @property
    def controlledAudioTrackMaxCount(cls) -> int: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def externalReferenceTime(self) -> float: ...
    @externalReferenceTime.setter
    def externalReferenceTime(self, value: float) -> float: ...
    @property
    def frame(self) -> int: ...
    @frame.setter
    def frame(self, value: int) -> int: ...
    @property
    def frameCount(self) -> int: ...
    @property
    def frameRate(self) -> float: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def height(self) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def isLooping(self) -> bool: ...
    @isLooping.setter
    def isLooping(self, value: bool) -> bool: ...
    @property
    def isPaused(self) -> bool: ...
    @property
    def isPlaying(self) -> bool: ...
    @property
    def isPrepared(self) -> bool: ...
    @property
    def length(self) -> float: ...
    @property
    def light(self) -> Component: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def pixelAspectRatioDenominator(self) -> int: ...
    @property
    def pixelAspectRatioNumerator(self) -> int: ...
    @property
    def playbackSpeed(self) -> float: ...
    @playbackSpeed.setter
    def playbackSpeed(self, value: float) -> float: ...
    @property
    def playOnAwake(self) -> bool: ...
    @playOnAwake.setter
    def playOnAwake(self, value: bool) -> bool: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def renderMode(self) -> VideoRenderMode: ...
    @renderMode.setter
    def renderMode(self, value: VideoRenderMode) -> VideoRenderMode: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def sendFrameReadyEvents(self) -> bool: ...
    @sendFrameReadyEvents.setter
    def sendFrameReadyEvents(self, value: bool) -> bool: ...
    @property
    def skipOnDrop(self) -> bool: ...
    @skipOnDrop.setter
    def skipOnDrop(self, value: bool) -> bool: ...
    @property
    def source(self) -> VideoSource: ...
    @source.setter
    def source(self, value: VideoSource) -> VideoSource: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def targetCamera(self) -> Camera: ...
    @targetCamera.setter
    def targetCamera(self, value: Camera) -> Camera: ...
    @property
    def targetCamera3DLayout(self) -> Video3DLayout: ...
    @targetCamera3DLayout.setter
    def targetCamera3DLayout(self, value: Video3DLayout) -> Video3DLayout: ...
    @property
    def targetCameraAlpha(self) -> float: ...
    @targetCameraAlpha.setter
    def targetCameraAlpha(self, value: float) -> float: ...
    @property
    def targetMaterialProperty(self) -> str: ...
    @targetMaterialProperty.setter
    def targetMaterialProperty(self, value: str) -> str: ...
    @property
    def targetMaterialRenderer(self) -> Renderer: ...
    @targetMaterialRenderer.setter
    def targetMaterialRenderer(self, value: Renderer) -> Renderer: ...
    @property
    def targetTexture(self) -> RenderTexture: ...
    @targetTexture.setter
    def targetTexture(self, value: RenderTexture) -> RenderTexture: ...
    @property
    def texture(self) -> Texture: ...
    @property
    def time(self) -> float: ...
    @time.setter
    def time(self, value: float) -> float: ...
    @property
    def timeReference(self) -> VideoTimeReference: ...
    @timeReference.setter
    def timeReference(self, value: VideoTimeReference) -> VideoTimeReference: ...
    @property
    def timeSource(self) -> VideoTimeSource: ...
    @timeSource.setter
    def timeSource(self, value: VideoTimeSource) -> VideoTimeSource: ...
    @property
    def timeUpdateMode(self) -> VideoTimeUpdateMode: ...
    @timeUpdateMode.setter
    def timeUpdateMode(self, value: VideoTimeUpdateMode) -> VideoTimeUpdateMode: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def url(self) -> str: ...
    @url.setter
    def url(self, value: str) -> str: ...
    @property
    def waitForFirstFrame(self) -> bool: ...
    @waitForFirstFrame.setter
    def waitForFirstFrame(self, value: bool) -> bool: ...
    @property
    def width(self) -> int: ...
    def EnableAudioTrack(self, trackIndex: int, enabled: bool) -> None: ...
    def GetAudioChannelCount(self, trackIndex: int) -> int: ...
    def GetAudioLanguageCode(self, trackIndex: int) -> str: ...
    def GetAudioSampleRate(self, trackIndex: int) -> int: ...
    def GetDirectAudioMute(self, trackIndex: int) -> bool: ...
    def GetDirectAudioVolume(self, trackIndex: int) -> float: ...
    def GetTargetAudioSource(self, trackIndex: int) -> AudioSource: ...
    def IsAudioTrackEnabled(self, trackIndex: int) -> bool: ...
    def Pause(self) -> None: ...
    def Play(self) -> None: ...
    def Prepare(self) -> None: ...
    def SetDirectAudioMute(self, trackIndex: int, mute: bool) -> None: ...
    def SetDirectAudioVolume(self, trackIndex: int, volume: float) -> None: ...
    def SetTargetAudioSource(self, trackIndex: int, source: AudioSource) -> None: ...
    def StepForward(self) -> None: ...
    def Stop(self) -> None: ...

    class ErrorEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, source: VideoPlayer, message: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, source: VideoPlayer, message: str) -> None: ...


    class EventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, source: VideoPlayer, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, source: VideoPlayer) -> None: ...


    class FrameReadyEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, source: VideoPlayer, frameIdx: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, source: VideoPlayer, frameIdx: int) -> None: ...


    class TimeEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, source: VideoPlayer, seconds: float, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, source: VideoPlayer, seconds: float) -> None: ...



class VideoRenderMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CameraFarPlane : VideoRenderMode # 0
    CameraNearPlane : VideoRenderMode # 1
    RenderTexture : VideoRenderMode # 2
    MaterialOverride : VideoRenderMode # 3
    APIOnly : VideoRenderMode # 4


class VideoSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    VideoClip : VideoSource # 0
    Url : VideoSource # 1


class VideoTimeReference(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Freerun : VideoTimeReference # 0
    InternalTime : VideoTimeReference # 1
    ExternalTime : VideoTimeReference # 2


class VideoTimeSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AudioDSPTimeSource : VideoTimeSource # 0
    GameTimeSource : VideoTimeSource # 1


class VideoTimeUpdateMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DSPTime : VideoTimeUpdateMode # 0
    GameTime : VideoTimeUpdateMode # 1
    UnscaledGameTime : VideoTimeUpdateMode # 2

