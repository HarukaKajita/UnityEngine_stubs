import typing, clr, abc
from UnityEngine import Behaviour, Vector3, Component, GameObject, HideFlags, Transform, AnimationClip, Quaternion, AvatarIKGoal, AvatarIKHint, AvatarMask, Object, Animator, RuntimeAnimatorController, AnimatorTransitionInfo, AnimatorStateInfo, AnimatorControllerParameter, AnimatorClipInfo, BodyDof, HeadDof, HumanPartDof, ArmDof, FingerDof, LegDof, Matrix4x4
from System.Collections.Generic import List_1
from System import IEquatable_1, Array_1, Attribute
from UnityEngine.Playables import IPlayable, PlayableGraph, PlayableHandle, PlayableBinding, IPlayableOutput, PlayableOutputHandle, Playable
from Unity.Collections import NativeArray_1
from Unity.Jobs import JobHandle

class AimConstraint(Behaviour, IConstraint):
    @property
    def aimVector(self) -> Vector3: ...
    @aimVector.setter
    def aimVector(self, value: Vector3) -> Vector3: ...
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def rotationAtRest(self) -> Vector3: ...
    @rotationAtRest.setter
    def rotationAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def rotationAxis(self) -> Axis: ...
    @rotationAxis.setter
    def rotationAxis(self, value: Axis) -> Axis: ...
    @property
    def rotationOffset(self) -> Vector3: ...
    @rotationOffset.setter
    def rotationOffset(self, value: Vector3) -> Vector3: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def upVector(self) -> Vector3: ...
    @upVector.setter
    def upVector(self, value: Vector3) -> Vector3: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    @property
    def worldUpObject(self) -> Transform: ...
    @worldUpObject.setter
    def worldUpObject(self, value: Transform) -> Transform: ...
    @property
    def worldUpType(self) -> AimConstraint.WorldUpType: ...
    @worldUpType.setter
    def worldUpType(self, value: AimConstraint.WorldUpType) -> AimConstraint.WorldUpType: ...
    @property
    def worldUpVector(self) -> Vector3: ...
    @worldUpVector.setter
    def worldUpVector(self, value: Vector3) -> Vector3: ...
    def AddSource(self, source: ConstraintSource) -> int: ...
    def GetSource(self, index: int) -> ConstraintSource: ...
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def RemoveSource(self, index: int) -> None: ...
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...

    class WorldUpType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        SceneUp : AimConstraint.WorldUpType # 0
        ObjectUp : AimConstraint.WorldUpType # 1
        ObjectRotationUp : AimConstraint.WorldUpType # 2
        Vector : AimConstraint.WorldUpType # 3
        None_ : AimConstraint.WorldUpType # 4



class AnimationClipPlayable(IEquatable_1[AnimationClipPlayable], IPlayable):
    @staticmethod
    def Create(graph: PlayableGraph, clip: AnimationClip) -> AnimationClipPlayable: ...
    def Equals(self, other: AnimationClipPlayable) -> bool: ...
    def GetAnimationClip(self) -> AnimationClip: ...
    def GetApplyFootIK(self) -> bool: ...
    def GetApplyPlayableIK(self) -> bool: ...
    def GetHandle(self) -> PlayableHandle: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AnimationClipPlayable)
    def SetApplyFootIK(self, value: bool) -> None: ...
    def SetApplyPlayableIK(self, value: bool) -> None: ...


class AnimationHumanStream:
    @property
    def bodyLocalPosition(self) -> Vector3: ...
    @bodyLocalPosition.setter
    def bodyLocalPosition(self, value: Vector3) -> Vector3: ...
    @property
    def bodyLocalRotation(self) -> Quaternion: ...
    @bodyLocalRotation.setter
    def bodyLocalRotation(self, value: Quaternion) -> Quaternion: ...
    @property
    def bodyPosition(self) -> Vector3: ...
    @bodyPosition.setter
    def bodyPosition(self, value: Vector3) -> Vector3: ...
    @property
    def bodyRotation(self) -> Quaternion: ...
    @bodyRotation.setter
    def bodyRotation(self, value: Quaternion) -> Quaternion: ...
    @property
    def humanScale(self) -> float: ...
    @property
    def isValid(self) -> bool: ...
    @property
    def leftFootHeight(self) -> float: ...
    @property
    def leftFootVelocity(self) -> Vector3: ...
    @property
    def rightFootHeight(self) -> float: ...
    @property
    def rightFootVelocity(self) -> Vector3: ...
    def GetGoalLocalPosition(self, index: AvatarIKGoal) -> Vector3: ...
    def GetGoalLocalRotation(self, index: AvatarIKGoal) -> Quaternion: ...
    def GetGoalPosition(self, index: AvatarIKGoal) -> Vector3: ...
    def GetGoalPositionFromPose(self, index: AvatarIKGoal) -> Vector3: ...
    def GetGoalRotation(self, index: AvatarIKGoal) -> Quaternion: ...
    def GetGoalRotationFromPose(self, index: AvatarIKGoal) -> Quaternion: ...
    def GetGoalWeightPosition(self, index: AvatarIKGoal) -> float: ...
    def GetGoalWeightRotation(self, index: AvatarIKGoal) -> float: ...
    def GetHintPosition(self, index: AvatarIKHint) -> Vector3: ...
    def GetHintWeightPosition(self, index: AvatarIKHint) -> float: ...
    def GetMuscle(self, muscle: MuscleHandle) -> float: ...
    def ResetToStancePose(self) -> None: ...
    def SetGoalLocalPosition(self, index: AvatarIKGoal, pos: Vector3) -> None: ...
    def SetGoalLocalRotation(self, index: AvatarIKGoal, rot: Quaternion) -> None: ...
    def SetGoalPosition(self, index: AvatarIKGoal, pos: Vector3) -> None: ...
    def SetGoalRotation(self, index: AvatarIKGoal, rot: Quaternion) -> None: ...
    def SetGoalWeightPosition(self, index: AvatarIKGoal, value: float) -> None: ...
    def SetGoalWeightRotation(self, index: AvatarIKGoal, value: float) -> None: ...
    def SetHintPosition(self, index: AvatarIKHint, pos: Vector3) -> None: ...
    def SetHintWeightPosition(self, index: AvatarIKHint, value: float) -> None: ...
    def SetLookAtBodyWeight(self, weight: float) -> None: ...
    def SetLookAtClampWeight(self, weight: float) -> None: ...
    def SetLookAtEyesWeight(self, weight: float) -> None: ...
    def SetLookAtHeadWeight(self, weight: float) -> None: ...
    def SetLookAtPosition(self, lookAtPosition: Vector3) -> None: ...
    def SetMuscle(self, muscle: MuscleHandle, value: float) -> None: ...
    def SolveIK(self) -> None: ...


class AnimationLayerMixerPlayable(IEquatable_1[AnimationLayerMixerPlayable], IPlayable):
    @classmethod
    @property
    def Null(cls) -> AnimationLayerMixerPlayable: ...
    def Equals(self, other: AnimationLayerMixerPlayable) -> bool: ...
    def GetHandle(self) -> PlayableHandle: ...
    def IsLayerAdditive(self, layerIndex: int) -> bool: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AnimationLayerMixerPlayable)
    def SetLayerAdditive(self, layerIndex: int, value: bool) -> None: ...
    def SetLayerMaskFromAvatarMask(self, layerIndex: int, mask: AvatarMask) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, graph: PlayableGraph, inputCount: int = ...) -> AnimationLayerMixerPlayable:...
        @typing.overload
        def __call__(self, graph: PlayableGraph, inputCount: int, singleLayerOptimization: bool) -> AnimationLayerMixerPlayable:...



class AnimationMixerPlayable(IEquatable_1[AnimationMixerPlayable], IPlayable):
    @classmethod
    @property
    def Null(cls) -> AnimationMixerPlayable: ...
    def Equals(self, other: AnimationMixerPlayable) -> bool: ...
    def GetHandle(self) -> PlayableHandle: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AnimationMixerPlayable)
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, graph: PlayableGraph, inputCount: int = ...) -> AnimationMixerPlayable:...
        @typing.overload
        def __call__(self, graph: PlayableGraph, inputCount: int, normalizeWeights: bool) -> AnimationMixerPlayable:...



class AnimationPlayableBinding(abc.ABC):
    @staticmethod
    def Create(name: str, key: Object) -> PlayableBinding: ...


class AnimationPlayableExtensions(abc.ABC):
    # Skipped SetAnimatedProperties due to it being static, abstract and generic.

    SetAnimatedProperties : SetAnimatedProperties_MethodGroup
    class SetAnimatedProperties_MethodGroup:
        def __getitem__(self, t:typing.Type[SetAnimatedProperties_1_T1]) -> SetAnimatedProperties_1[SetAnimatedProperties_1_T1]: ...

        SetAnimatedProperties_1_T1 = typing.TypeVar('SetAnimatedProperties_1_T1')
        class SetAnimatedProperties_1(typing.Generic[SetAnimatedProperties_1_T1]):
            SetAnimatedProperties_1_U = AnimationPlayableExtensions.SetAnimatedProperties_MethodGroup.SetAnimatedProperties_1_T1
            def __call__(self, playable: SetAnimatedProperties_1_U, clip: AnimationClip) -> None:...




class AnimationPlayableOutput(IPlayableOutput):
    @classmethod
    @property
    def Null(cls) -> AnimationPlayableOutput: ...
    @staticmethod
    def Create(graph: PlayableGraph, name: str, target: Animator) -> AnimationPlayableOutput: ...
    def GetHandle(self) -> PlayableOutputHandle: ...
    def GetTarget(self) -> Animator: ...
    # Operator not supported op_Explicit(output: PlayableOutput)
    # Operator not supported op_Implicit(output: AnimationPlayableOutput)
    def SetTarget(self, value: Animator) -> None: ...


class AnimationSceneHandleUtility(abc.ABC):
    @staticmethod
    def ReadFloats(stream: AnimationStream, handles: NativeArray_1[PropertySceneHandle], buffer: NativeArray_1[float]) -> None: ...
    @staticmethod
    def ReadInts(stream: AnimationStream, handles: NativeArray_1[PropertySceneHandle], buffer: NativeArray_1[int]) -> None: ...


class AnimationScriptPlayable(IAnimationJobPlayable, IEquatable_1[AnimationScriptPlayable]):
    @classmethod
    @property
    def Null(cls) -> AnimationScriptPlayable: ...
    def Equals(self, other: AnimationScriptPlayable) -> bool: ...
    def GetHandle(self) -> PlayableHandle: ...
    def GetProcessInputs(self) -> bool: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AnimationScriptPlayable)
    def SetProcessInputs(self, value: bool) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        def __getitem__(self, t:typing.Type[Create_1_T1]) -> Create_1[Create_1_T1]: ...

        Create_1_T1 = typing.TypeVar('Create_1_T1')
        class Create_1(typing.Generic[Create_1_T1]):
            Create_1_T = AnimationScriptPlayable.Create_MethodGroup.Create_1_T1
            def __call__(self, graph: PlayableGraph, jobData: Create_1_T, inputCount: int = ...) -> AnimationScriptPlayable:...


    # Skipped GetJobData due to it being static, abstract and generic.

    GetJobData : GetJobData_MethodGroup
    class GetJobData_MethodGroup:
        def __getitem__(self, t:typing.Type[GetJobData_1_T1]) -> GetJobData_1[GetJobData_1_T1]: ...

        GetJobData_1_T1 = typing.TypeVar('GetJobData_1_T1')
        class GetJobData_1(typing.Generic[GetJobData_1_T1]):
            GetJobData_1_T = AnimationScriptPlayable.GetJobData_MethodGroup.GetJobData_1_T1
            def __call__(self) -> GetJobData_1_T:...


    # Skipped SetJobData due to it being static, abstract and generic.

    SetJobData : SetJobData_MethodGroup
    class SetJobData_MethodGroup:
        def __getitem__(self, t:typing.Type[SetJobData_1_T1]) -> SetJobData_1[SetJobData_1_T1]: ...

        SetJobData_1_T1 = typing.TypeVar('SetJobData_1_T1')
        class SetJobData_1(typing.Generic[SetJobData_1_T1]):
            SetJobData_1_T = AnimationScriptPlayable.SetJobData_MethodGroup.SetJobData_1_T1
            def __call__(self, jobData: SetJobData_1_T) -> None:...




class AnimationStream:
    @property
    def angularVelocity(self) -> Vector3: ...
    @angularVelocity.setter
    def angularVelocity(self, value: Vector3) -> Vector3: ...
    @property
    def deltaTime(self) -> float: ...
    @property
    def inputStreamCount(self) -> int: ...
    @property
    def isHumanStream(self) -> bool: ...
    @property
    def isValid(self) -> bool: ...
    @property
    def rootMotionPosition(self) -> Vector3: ...
    @property
    def rootMotionRotation(self) -> Quaternion: ...
    @property
    def velocity(self) -> Vector3: ...
    @velocity.setter
    def velocity(self, value: Vector3) -> Vector3: ...
    def AsHuman(self) -> AnimationHumanStream: ...
    def CopyAnimationStreamMotion(self, animationStream: AnimationStream) -> None: ...
    def GetInputStream(self, index: int) -> AnimationStream: ...
    def GetInputWeight(self, index: int) -> float: ...


class AnimationStreamHandleUtility(abc.ABC):
    @staticmethod
    def ReadFloats(stream: AnimationStream, handles: NativeArray_1[PropertyStreamHandle], buffer: NativeArray_1[float]) -> None: ...
    @staticmethod
    def ReadInts(stream: AnimationStream, handles: NativeArray_1[PropertyStreamHandle], buffer: NativeArray_1[int]) -> None: ...
    @staticmethod
    def WriteFloats(stream: AnimationStream, handles: NativeArray_1[PropertyStreamHandle], buffer: NativeArray_1[float], useMask: bool) -> None: ...
    @staticmethod
    def WriteInts(stream: AnimationStream, handles: NativeArray_1[PropertyStreamHandle], buffer: NativeArray_1[int], useMask: bool) -> None: ...


class AnimatorControllerPlayable(IEquatable_1[AnimatorControllerPlayable], IPlayable):
    @classmethod
    @property
    def Null(cls) -> AnimatorControllerPlayable: ...
    @staticmethod
    def Create(graph: PlayableGraph, controller: RuntimeAnimatorController) -> AnimatorControllerPlayable: ...
    def Equals(self, other: AnimatorControllerPlayable) -> bool: ...
    def GetAnimatorTransitionInfo(self, layerIndex: int) -> AnimatorTransitionInfo: ...
    def GetCurrentAnimatorClipInfoCount(self, layerIndex: int) -> int: ...
    def GetCurrentAnimatorStateInfo(self, layerIndex: int) -> AnimatorStateInfo: ...
    def GetHandle(self) -> PlayableHandle: ...
    def GetLayerCount(self) -> int: ...
    def GetLayerIndex(self, layerName: str) -> int: ...
    def GetLayerName(self, layerIndex: int) -> str: ...
    def GetLayerWeight(self, layerIndex: int) -> float: ...
    def GetNextAnimatorClipInfoCount(self, layerIndex: int) -> int: ...
    def GetNextAnimatorStateInfo(self, layerIndex: int) -> AnimatorStateInfo: ...
    def GetParameter(self, index: int) -> AnimatorControllerParameter: ...
    def GetParameterCount(self) -> int: ...
    def HasState(self, layerIndex: int, stateID: int) -> bool: ...
    def IsInTransition(self, layerIndex: int) -> bool: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AnimatorControllerPlayable)
    def SetHandle(self, handle: PlayableHandle) -> None: ...
    def SetLayerWeight(self, layerIndex: int, weight: float) -> None: ...
    # Skipped CrossFade due to it being static, abstract and generic.

    CrossFade : CrossFade_MethodGroup
    class CrossFade_MethodGroup:
        @typing.overload
        def __call__(self, stateNameHash: int, transitionDuration: float) -> None:...
        @typing.overload
        def __call__(self, stateName: str, transitionDuration: float) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, transitionDuration: float, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateName: str, transitionDuration: float, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, transitionDuration: float, layer: int, normalizedTime: float) -> None:...
        @typing.overload
        def __call__(self, stateName: str, transitionDuration: float, layer: int, normalizedTime: float) -> None:...

    # Skipped CrossFadeInFixedTime due to it being static, abstract and generic.

    CrossFadeInFixedTime : CrossFadeInFixedTime_MethodGroup
    class CrossFadeInFixedTime_MethodGroup:
        @typing.overload
        def __call__(self, stateNameHash: int, transitionDuration: float) -> None:...
        @typing.overload
        def __call__(self, stateName: str, transitionDuration: float) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, transitionDuration: float, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateName: str, transitionDuration: float, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, transitionDuration: float, layer: int, fixedTime: float) -> None:...
        @typing.overload
        def __call__(self, stateName: str, transitionDuration: float, layer: int, fixedTime: float) -> None:...

    # Skipped GetBool due to it being static, abstract and generic.

    GetBool : GetBool_MethodGroup
    class GetBool_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> bool:...
        @typing.overload
        def __call__(self, name: str) -> bool:...

    # Skipped GetCurrentAnimatorClipInfo due to it being static, abstract and generic.

    GetCurrentAnimatorClipInfo : GetCurrentAnimatorClipInfo_MethodGroup
    class GetCurrentAnimatorClipInfo_MethodGroup:
        @typing.overload
        def __call__(self, layerIndex: int) -> Array_1[AnimatorClipInfo]:...
        @typing.overload
        def __call__(self, layerIndex: int, clips: List_1[AnimatorClipInfo]) -> None:...

    # Skipped GetFloat due to it being static, abstract and generic.

    GetFloat : GetFloat_MethodGroup
    class GetFloat_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> float:...
        @typing.overload
        def __call__(self, name: str) -> float:...

    # Skipped GetInteger due to it being static, abstract and generic.

    GetInteger : GetInteger_MethodGroup
    class GetInteger_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> int:...
        @typing.overload
        def __call__(self, name: str) -> int:...

    # Skipped GetNextAnimatorClipInfo due to it being static, abstract and generic.

    GetNextAnimatorClipInfo : GetNextAnimatorClipInfo_MethodGroup
    class GetNextAnimatorClipInfo_MethodGroup:
        @typing.overload
        def __call__(self, layerIndex: int) -> Array_1[AnimatorClipInfo]:...
        @typing.overload
        def __call__(self, layerIndex: int, clips: List_1[AnimatorClipInfo]) -> None:...

    # Skipped IsParameterControlledByCurve due to it being static, abstract and generic.

    IsParameterControlledByCurve : IsParameterControlledByCurve_MethodGroup
    class IsParameterControlledByCurve_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> bool:...
        @typing.overload
        def __call__(self, name: str) -> bool:...

    # Skipped Play due to it being static, abstract and generic.

    Play : Play_MethodGroup
    class Play_MethodGroup:
        @typing.overload
        def __call__(self, stateNameHash: int) -> None:...
        @typing.overload
        def __call__(self, stateName: str) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateName: str, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, layer: int, normalizedTime: float) -> None:...
        @typing.overload
        def __call__(self, stateName: str, layer: int, normalizedTime: float) -> None:...

    # Skipped PlayInFixedTime due to it being static, abstract and generic.

    PlayInFixedTime : PlayInFixedTime_MethodGroup
    class PlayInFixedTime_MethodGroup:
        @typing.overload
        def __call__(self, stateNameHash: int) -> None:...
        @typing.overload
        def __call__(self, stateName: str) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateName: str, layer: int) -> None:...
        @typing.overload
        def __call__(self, stateNameHash: int, layer: int, fixedTime: float) -> None:...
        @typing.overload
        def __call__(self, stateName: str, layer: int, fixedTime: float) -> None:...

    # Skipped ResetTrigger due to it being static, abstract and generic.

    ResetTrigger : ResetTrigger_MethodGroup
    class ResetTrigger_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...

    # Skipped SetBool due to it being static, abstract and generic.

    SetBool : SetBool_MethodGroup
    class SetBool_MethodGroup:
        @typing.overload
        def __call__(self, id: int, value: bool) -> None:...
        @typing.overload
        def __call__(self, name: str, value: bool) -> None:...

    # Skipped SetFloat due to it being static, abstract and generic.

    SetFloat : SetFloat_MethodGroup
    class SetFloat_MethodGroup:
        @typing.overload
        def __call__(self, id: int, value: float) -> None:...
        @typing.overload
        def __call__(self, name: str, value: float) -> None:...

    # Skipped SetInteger due to it being static, abstract and generic.

    SetInteger : SetInteger_MethodGroup
    class SetInteger_MethodGroup:
        @typing.overload
        def __call__(self, id: int, value: int) -> None:...
        @typing.overload
        def __call__(self, name: str, value: int) -> None:...

    # Skipped SetTrigger due to it being static, abstract and generic.

    SetTrigger : SetTrigger_MethodGroup
    class SetTrigger_MethodGroup:
        @typing.overload
        def __call__(self, id: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class AnimatorJobExtensions(abc.ABC):
    @staticmethod
    def AddJobDependency(animator: Animator, jobHandle: JobHandle) -> None: ...
    @staticmethod
    def BindCustomStreamProperty(animator: Animator, property: str, type: CustomStreamPropertyType) -> PropertyStreamHandle: ...
    @staticmethod
    def BindSceneTransform(animator: Animator, transform: Transform) -> TransformSceneHandle: ...
    @staticmethod
    def BindStreamTransform(animator: Animator, transform: Transform) -> TransformStreamHandle: ...
    @staticmethod
    def CloseAnimationStream(animator: Animator, stream: clr.Reference[AnimationStream]) -> None: ...
    @staticmethod
    def OpenAnimationStream(animator: Animator, stream: clr.Reference[AnimationStream]) -> bool: ...
    @staticmethod
    def ResolveAllSceneHandles(animator: Animator) -> None: ...
    @staticmethod
    def ResolveAllStreamHandles(animator: Animator) -> None: ...
    @staticmethod
    def UnbindAllSceneHandles(animator: Animator) -> None: ...
    @staticmethod
    def UnbindAllStreamHandles(animator: Animator) -> None: ...
    # Skipped BindSceneProperty due to it being static, abstract and generic.

    BindSceneProperty : BindSceneProperty_MethodGroup
    class BindSceneProperty_MethodGroup:
        @typing.overload
        def __call__(self, animator: Animator, transform: Transform, type: typing.Type[typing.Any], property: str) -> PropertySceneHandle:...
        @typing.overload
        def __call__(self, animator: Animator, transform: Transform, type: typing.Type[typing.Any], property: str, isObjectReference: bool) -> PropertySceneHandle:...

    # Skipped BindStreamProperty due to it being static, abstract and generic.

    BindStreamProperty : BindStreamProperty_MethodGroup
    class BindStreamProperty_MethodGroup:
        @typing.overload
        def __call__(self, animator: Animator, transform: Transform, type: typing.Type[typing.Any], property: str) -> PropertyStreamHandle:...
        @typing.overload
        def __call__(self, animator: Animator, transform: Transform, type: typing.Type[typing.Any], property: str, isObjectReference: bool) -> PropertyStreamHandle:...



class Axis(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : Axis # 0
    X : Axis # 1
    Y : Axis # 2
    Z : Axis # 4


class ConstraintSource:
    @property
    def sourceTransform(self) -> Transform: ...
    @sourceTransform.setter
    def sourceTransform(self, value: Transform) -> Transform: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...


class CustomStreamPropertyType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Float : CustomStreamPropertyType # 5
    Bool : CustomStreamPropertyType # 6
    Int : CustomStreamPropertyType # 10


class DiscreteEvaluationAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class IAnimationJob(typing.Protocol):
    @abc.abstractmethod
    def ProcessAnimation(self, stream: AnimationStream) -> None: ...
    @abc.abstractmethod
    def ProcessRootMotion(self, stream: AnimationStream) -> None: ...


class IAnimationJobPlayable(IPlayable, typing.Protocol):
    # Skipped GetJobData due to it being static, abstract and generic.

    GetJobData : GetJobData_MethodGroup
    class GetJobData_MethodGroup:
        def __getitem__(self, t:typing.Type[GetJobData_1_T1]) -> GetJobData_1[GetJobData_1_T1]: ...

        GetJobData_1_T1 = typing.TypeVar('GetJobData_1_T1')
        class GetJobData_1(typing.Generic[GetJobData_1_T1]):
            GetJobData_1_T = IAnimationJobPlayable.GetJobData_MethodGroup.GetJobData_1_T1
            def __call__(self) -> GetJobData_1_T:...


    # Skipped SetJobData due to it being static, abstract and generic.

    SetJobData : SetJobData_MethodGroup
    class SetJobData_MethodGroup:
        def __getitem__(self, t:typing.Type[SetJobData_1_T1]) -> SetJobData_1[SetJobData_1_T1]: ...

        SetJobData_1_T1 = typing.TypeVar('SetJobData_1_T1')
        class SetJobData_1(typing.Generic[SetJobData_1_T1]):
            SetJobData_1_T = IAnimationJobPlayable.SetJobData_MethodGroup.SetJobData_1_T1
            def __call__(self, jobData: SetJobData_1_T) -> None:...




class IAnimationWindowPreview(typing.Protocol):
    @abc.abstractmethod
    def BuildPreviewGraph(self, graph: PlayableGraph, inputPlayable: Playable) -> Playable: ...
    @abc.abstractmethod
    def StartPreview(self) -> None: ...
    @abc.abstractmethod
    def StopPreview(self) -> None: ...
    @abc.abstractmethod
    def UpdatePreviewGraph(self, graph: PlayableGraph) -> None: ...


class IConstraint(typing.Protocol):
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    @abc.abstractmethod
    def AddSource(self, source: ConstraintSource) -> int: ...
    @abc.abstractmethod
    def GetSource(self, index: int) -> ConstraintSource: ...
    @abc.abstractmethod
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    @abc.abstractmethod
    def RemoveSource(self, index: int) -> None: ...
    @abc.abstractmethod
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    @abc.abstractmethod
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...


class LookAtConstraint(Behaviour, IConstraint):
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def roll(self) -> float: ...
    @roll.setter
    def roll(self, value: float) -> float: ...
    @property
    def rotationAtRest(self) -> Vector3: ...
    @rotationAtRest.setter
    def rotationAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def rotationOffset(self) -> Vector3: ...
    @rotationOffset.setter
    def rotationOffset(self, value: Vector3) -> Vector3: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def useUpObject(self) -> bool: ...
    @useUpObject.setter
    def useUpObject(self, value: bool) -> bool: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    @property
    def worldUpObject(self) -> Transform: ...
    @worldUpObject.setter
    def worldUpObject(self, value: Transform) -> Transform: ...
    def AddSource(self, source: ConstraintSource) -> int: ...
    def GetSource(self, index: int) -> ConstraintSource: ...
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def RemoveSource(self, index: int) -> None: ...
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...


class MuscleHandle:
    @typing.overload
    def __init__(self, bodyDof: BodyDof) -> None: ...
    @typing.overload
    def __init__(self, headDof: HeadDof) -> None: ...
    @typing.overload
    def __init__(self, partDof: HumanPartDof, armDof: ArmDof) -> None: ...
    @typing.overload
    def __init__(self, partDof: HumanPartDof, fingerDof: FingerDof) -> None: ...
    @typing.overload
    def __init__(self, partDof: HumanPartDof, legDof: LegDof) -> None: ...
    @property
    def dof(self) -> int: ...
    @dof.setter
    def dof(self, value: int) -> int: ...
    @property
    def humanPartDof(self) -> HumanPartDof: ...
    @humanPartDof.setter
    def humanPartDof(self, value: HumanPartDof) -> HumanPartDof: ...
    @classmethod
    @property
    def muscleHandleCount(cls) -> int: ...
    @property
    def name(self) -> str: ...
    @staticmethod
    def GetMuscleHandles(muscleHandles: Array_1[MuscleHandle]) -> None: ...


class NotKeyableAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class ParentConstraint(Behaviour, IConstraint):
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def rotationAtRest(self) -> Vector3: ...
    @rotationAtRest.setter
    def rotationAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def rotationAxis(self) -> Axis: ...
    @rotationAxis.setter
    def rotationAxis(self, value: Axis) -> Axis: ...
    @property
    def rotationOffsets(self) -> Array_1[Vector3]: ...
    @rotationOffsets.setter
    def rotationOffsets(self, value: Array_1[Vector3]) -> Array_1[Vector3]: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def translationAtRest(self) -> Vector3: ...
    @translationAtRest.setter
    def translationAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def translationAxis(self) -> Axis: ...
    @translationAxis.setter
    def translationAxis(self, value: Axis) -> Axis: ...
    @property
    def translationOffsets(self) -> Array_1[Vector3]: ...
    @translationOffsets.setter
    def translationOffsets(self, value: Array_1[Vector3]) -> Array_1[Vector3]: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    def AddSource(self, source: ConstraintSource) -> int: ...
    def GetRotationOffset(self, index: int) -> Vector3: ...
    def GetSource(self, index: int) -> ConstraintSource: ...
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def GetTranslationOffset(self, index: int) -> Vector3: ...
    def RemoveSource(self, index: int) -> None: ...
    def SetRotationOffset(self, index: int, value: Vector3) -> None: ...
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def SetTranslationOffset(self, index: int, value: Vector3) -> None: ...


class PositionConstraint(Behaviour, IConstraint):
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def translationAtRest(self) -> Vector3: ...
    @translationAtRest.setter
    def translationAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def translationAxis(self) -> Axis: ...
    @translationAxis.setter
    def translationAxis(self, value: Axis) -> Axis: ...
    @property
    def translationOffset(self) -> Vector3: ...
    @translationOffset.setter
    def translationOffset(self, value: Vector3) -> Vector3: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    def AddSource(self, source: ConstraintSource) -> int: ...
    def GetSource(self, index: int) -> ConstraintSource: ...
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def RemoveSource(self, index: int) -> None: ...
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...


class PropertySceneHandle:
    def GetBool(self, stream: AnimationStream) -> bool: ...
    def GetFloat(self, stream: AnimationStream) -> float: ...
    def GetInt(self, stream: AnimationStream) -> int: ...
    def IsResolved(self, stream: AnimationStream) -> bool: ...
    def IsValid(self, stream: AnimationStream) -> bool: ...
    def Resolve(self, stream: AnimationStream) -> None: ...
    def SetBool(self, stream: AnimationStream, value: bool) -> None: ...
    def SetFloat(self, stream: AnimationStream, value: float) -> None: ...
    def SetInt(self, stream: AnimationStream, value: int) -> None: ...


class PropertyStreamHandle:
    def GetBool(self, stream: AnimationStream) -> bool: ...
    def GetFloat(self, stream: AnimationStream) -> float: ...
    def GetInt(self, stream: AnimationStream) -> int: ...
    def GetReadMask(self, stream: AnimationStream) -> bool: ...
    def IsResolved(self, stream: AnimationStream) -> bool: ...
    def IsValid(self, stream: AnimationStream) -> bool: ...
    def Resolve(self, stream: AnimationStream) -> None: ...
    def SetBool(self, stream: AnimationStream, value: bool) -> None: ...
    def SetFloat(self, stream: AnimationStream, value: float) -> None: ...
    def SetInt(self, stream: AnimationStream, value: int) -> None: ...


class RotationConstraint(Behaviour, IConstraint):
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def rotationAtRest(self) -> Vector3: ...
    @rotationAtRest.setter
    def rotationAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def rotationAxis(self) -> Axis: ...
    @rotationAxis.setter
    def rotationAxis(self, value: Axis) -> Axis: ...
    @property
    def rotationOffset(self) -> Vector3: ...
    @rotationOffset.setter
    def rotationOffset(self, value: Vector3) -> Vector3: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    def AddSource(self, source: ConstraintSource) -> int: ...
    def GetSource(self, index: int) -> ConstraintSource: ...
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def RemoveSource(self, index: int) -> None: ...
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...


class ScaleConstraint(Behaviour, IConstraint):
    @property
    def animation(self) -> Component: ...
    @property
    def audio(self) -> Component: ...
    @property
    def camera(self) -> Component: ...
    @property
    def collider(self) -> Component: ...
    @property
    def collider2D(self) -> Component: ...
    @property
    def constantForce(self) -> Component: ...
    @property
    def constraintActive(self) -> bool: ...
    @constraintActive.setter
    def constraintActive(self, value: bool) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> bool: ...
    @property
    def gameObject(self) -> GameObject: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def hingeJoint(self) -> Component: ...
    @property
    def isActiveAndEnabled(self) -> bool: ...
    @property
    def light(self) -> Component: ...
    @property
    def locked(self) -> bool: ...
    @locked.setter
    def locked(self, value: bool) -> bool: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def networkView(self) -> Component: ...
    @property
    def particleSystem(self) -> Component: ...
    @property
    def renderer(self) -> Component: ...
    @property
    def rigidbody(self) -> Component: ...
    @property
    def rigidbody2D(self) -> Component: ...
    @property
    def scaleAtRest(self) -> Vector3: ...
    @scaleAtRest.setter
    def scaleAtRest(self, value: Vector3) -> Vector3: ...
    @property
    def scaleOffset(self) -> Vector3: ...
    @scaleOffset.setter
    def scaleOffset(self, value: Vector3) -> Vector3: ...
    @property
    def scalingAxis(self) -> Axis: ...
    @scalingAxis.setter
    def scalingAxis(self, value: Axis) -> Axis: ...
    @property
    def sourceCount(self) -> int: ...
    @property
    def tag(self) -> str: ...
    @tag.setter
    def tag(self, value: str) -> str: ...
    @property
    def transform(self) -> Transform: ...
    @property
    def weight(self) -> float: ...
    @weight.setter
    def weight(self, value: float) -> float: ...
    def AddSource(self, source: ConstraintSource) -> int: ...
    def GetSource(self, index: int) -> ConstraintSource: ...
    def GetSources(self, sources: List_1[ConstraintSource]) -> None: ...
    def RemoveSource(self, index: int) -> None: ...
    def SetSource(self, index: int, source: ConstraintSource) -> None: ...
    def SetSources(self, sources: List_1[ConstraintSource]) -> None: ...


class TransformSceneHandle:
    def GetGlobalTR(self, stream: AnimationStream, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion]) -> None: ...
    def GetLocalPosition(self, stream: AnimationStream) -> Vector3: ...
    def GetLocalRotation(self, stream: AnimationStream) -> Quaternion: ...
    def GetLocalScale(self, stream: AnimationStream) -> Vector3: ...
    def GetLocalToParentMatrix(self, stream: AnimationStream) -> Matrix4x4: ...
    def GetLocalToWorldMatrix(self, stream: AnimationStream) -> Matrix4x4: ...
    def GetLocalTRS(self, stream: AnimationStream, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion], scale: clr.Reference[Vector3]) -> None: ...
    def GetPosition(self, stream: AnimationStream) -> Vector3: ...
    def GetRotation(self, stream: AnimationStream) -> Quaternion: ...
    def IsValid(self, stream: AnimationStream) -> bool: ...
    def SetLocalPosition(self, stream: AnimationStream, position: Vector3) -> None: ...
    def SetLocalRotation(self, stream: AnimationStream, rotation: Quaternion) -> None: ...
    def SetLocalScale(self, stream: AnimationStream, scale: Vector3) -> None: ...
    def SetPosition(self, stream: AnimationStream, position: Vector3) -> None: ...
    def SetRotation(self, stream: AnimationStream, rotation: Quaternion) -> None: ...


class TransformStreamHandle:
    def GetGlobalTR(self, stream: AnimationStream, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion]) -> None: ...
    def GetLocalPosition(self, stream: AnimationStream) -> Vector3: ...
    def GetLocalRotation(self, stream: AnimationStream) -> Quaternion: ...
    def GetLocalScale(self, stream: AnimationStream) -> Vector3: ...
    def GetLocalToParentMatrix(self, stream: AnimationStream) -> Matrix4x4: ...
    def GetLocalToWorldMatrix(self, stream: AnimationStream) -> Matrix4x4: ...
    def GetLocalTRS(self, stream: AnimationStream, position: clr.Reference[Vector3], rotation: clr.Reference[Quaternion], scale: clr.Reference[Vector3]) -> None: ...
    def GetPosition(self, stream: AnimationStream) -> Vector3: ...
    def GetPositionReadMask(self, stream: AnimationStream) -> bool: ...
    def GetRotation(self, stream: AnimationStream) -> Quaternion: ...
    def GetRotationReadMask(self, stream: AnimationStream) -> bool: ...
    def GetScaleReadMask(self, stream: AnimationStream) -> bool: ...
    def IsResolved(self, stream: AnimationStream) -> bool: ...
    def IsValid(self, stream: AnimationStream) -> bool: ...
    def Resolve(self, stream: AnimationStream) -> None: ...
    def SetGlobalTR(self, stream: AnimationStream, position: Vector3, rotation: Quaternion, useMask: bool) -> None: ...
    def SetLocalPosition(self, stream: AnimationStream, position: Vector3) -> None: ...
    def SetLocalRotation(self, stream: AnimationStream, rotation: Quaternion) -> None: ...
    def SetLocalScale(self, stream: AnimationStream, scale: Vector3) -> None: ...
    def SetLocalTRS(self, stream: AnimationStream, position: Vector3, rotation: Quaternion, scale: Vector3, useMask: bool) -> None: ...
    def SetPosition(self, stream: AnimationStream, position: Vector3) -> None: ...
    def SetRotation(self, stream: AnimationStream, rotation: Quaternion) -> None: ...

