import typing, clr, abc
from System import IEquatable_1, Array_1
from UnityEngine.Playables import IPlayable, PlayableGraph, PlayableHandle, PlayableBinding, IPlayableOutput, PlayableOutputHandle
from UnityEngine import AudioClip, Object, HideFlags, AudioSource

class AudioClipPlayable(IEquatable_1[AudioClipPlayable], IPlayable):
    @staticmethod
    def Create(graph: PlayableGraph, clip: AudioClip, looping: bool) -> AudioClipPlayable: ...
    def Equals(self, other: AudioClipPlayable) -> bool: ...
    def GetClip(self) -> AudioClip: ...
    def GetHandle(self) -> PlayableHandle: ...
    def GetLooped(self) -> bool: ...
    def GetPauseDelay(self) -> float: ...
    def GetStartDelay(self) -> float: ...
    def IsChannelPlaying(self) -> bool: ...
    def IsPlaying(self) -> bool: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AudioClipPlayable)
    def SetClip(self, value: AudioClip) -> None: ...
    def SetLooped(self, value: bool) -> None: ...
    # Skipped Seek due to it being static, abstract and generic.

    Seek : Seek_MethodGroup
    class Seek_MethodGroup:
        @typing.overload
        def __call__(self, startTime: float, startDelay: float) -> None:...
        @typing.overload
        def __call__(self, startTime: float, startDelay: float, duration: float) -> None:...



class AudioMixer(Object):
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def outputAudioMixerGroup(self) -> AudioMixerGroup: ...
    @outputAudioMixerGroup.setter
    def outputAudioMixerGroup(self, value: AudioMixerGroup) -> AudioMixerGroup: ...
    @property
    def updateMode(self) -> AudioMixerUpdateMode: ...
    @updateMode.setter
    def updateMode(self, value: AudioMixerUpdateMode) -> AudioMixerUpdateMode: ...
    def ClearFloat(self, name: str) -> bool: ...
    def FindMatchingGroups(self, subPath: str) -> Array_1[AudioMixerGroup]: ...
    def FindSnapshot(self, name: str) -> AudioMixerSnapshot: ...
    def GetFloat(self, name: str, value: clr.Reference[float]) -> bool: ...
    def SetFloat(self, name: str, value: float) -> bool: ...
    def TransitionToSnapshots(self, snapshots: Array_1[AudioMixerSnapshot], weights: Array_1[float], timeToReach: float) -> None: ...


class AudioMixerGroup(Object):
    @property
    def audioMixer(self) -> AudioMixer: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class AudioMixerPlayable(IEquatable_1[AudioMixerPlayable], IPlayable):
    @staticmethod
    def Create(graph: PlayableGraph, inputCount: int = ..., normalizeInputVolumes: bool = ...) -> AudioMixerPlayable: ...
    def Equals(self, other: AudioMixerPlayable) -> bool: ...
    def GetHandle(self) -> PlayableHandle: ...
    # Operator not supported op_Explicit(playable: Playable)
    # Operator not supported op_Implicit(playable: AudioMixerPlayable)


class AudioMixerSnapshot(Object):
    @property
    def audioMixer(self) -> AudioMixer: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def TransitionTo(self, timeToReach: float) -> None: ...


class AudioMixerUpdateMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : AudioMixerUpdateMode # 0
    UnscaledTime : AudioMixerUpdateMode # 1


class AudioPlayableBinding(abc.ABC):
    @staticmethod
    def Create(name: str, key: Object) -> PlayableBinding: ...


class AudioPlayableOutput(IPlayableOutput):
    @classmethod
    @property
    def Null(cls) -> AudioPlayableOutput: ...
    @staticmethod
    def Create(graph: PlayableGraph, name: str, target: AudioSource) -> AudioPlayableOutput: ...
    def GetEvaluateOnSeek(self) -> bool: ...
    def GetHandle(self) -> PlayableOutputHandle: ...
    def GetTarget(self) -> AudioSource: ...
    # Operator not supported op_Explicit(output: PlayableOutput)
    # Operator not supported op_Implicit(output: AudioPlayableOutput)
    def SetEvaluateOnSeek(self, value: bool) -> None: ...
    def SetTarget(self, value: AudioSource) -> None: ...

