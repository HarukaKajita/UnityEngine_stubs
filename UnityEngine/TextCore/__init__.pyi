import typing
from System import IEquatable_1
from UnityEngine import Rect

class FaceInfo:
    @property
    def ascentLine(self) -> float: ...
    @ascentLine.setter
    def ascentLine(self, value: float) -> float: ...
    @property
    def baseline(self) -> float: ...
    @baseline.setter
    def baseline(self, value: float) -> float: ...
    @property
    def capLine(self) -> float: ...
    @capLine.setter
    def capLine(self, value: float) -> float: ...
    @property
    def descentLine(self) -> float: ...
    @descentLine.setter
    def descentLine(self, value: float) -> float: ...
    @property
    def familyName(self) -> str: ...
    @familyName.setter
    def familyName(self, value: str) -> str: ...
    @property
    def lineHeight(self) -> float: ...
    @lineHeight.setter
    def lineHeight(self, value: float) -> float: ...
    @property
    def meanLine(self) -> float: ...
    @meanLine.setter
    def meanLine(self, value: float) -> float: ...
    @property
    def pointSize(self) -> int: ...
    @pointSize.setter
    def pointSize(self, value: int) -> int: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...
    @property
    def strikethroughOffset(self) -> float: ...
    @strikethroughOffset.setter
    def strikethroughOffset(self, value: float) -> float: ...
    @property
    def strikethroughThickness(self) -> float: ...
    @strikethroughThickness.setter
    def strikethroughThickness(self, value: float) -> float: ...
    @property
    def styleName(self) -> str: ...
    @styleName.setter
    def styleName(self, value: str) -> str: ...
    @property
    def subscriptOffset(self) -> float: ...
    @subscriptOffset.setter
    def subscriptOffset(self, value: float) -> float: ...
    @property
    def subscriptSize(self) -> float: ...
    @subscriptSize.setter
    def subscriptSize(self, value: float) -> float: ...
    @property
    def superscriptOffset(self) -> float: ...
    @superscriptOffset.setter
    def superscriptOffset(self, value: float) -> float: ...
    @property
    def superscriptSize(self) -> float: ...
    @superscriptSize.setter
    def superscriptSize(self, value: float) -> float: ...
    @property
    def tabWidth(self) -> float: ...
    @tabWidth.setter
    def tabWidth(self, value: float) -> float: ...
    @property
    def underlineOffset(self) -> float: ...
    @underlineOffset.setter
    def underlineOffset(self, value: float) -> float: ...
    @property
    def underlineThickness(self) -> float: ...
    @underlineThickness.setter
    def underlineThickness(self, value: float) -> float: ...
    def Compare(self, other: FaceInfo) -> bool: ...


class Glyph:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, glyph: Glyph) -> None: ...
    @typing.overload
    def __init__(self, index: int, metrics: GlyphMetrics, glyphRect: GlyphRect) -> None: ...
    @typing.overload
    def __init__(self, index: int, metrics: GlyphMetrics, glyphRect: GlyphRect, scale: float, atlasIndex: int) -> None: ...
    @property
    def atlasIndex(self) -> int: ...
    @atlasIndex.setter
    def atlasIndex(self, value: int) -> int: ...
    @property
    def classDefinitionType(self) -> GlyphClassDefinitionType: ...
    @classDefinitionType.setter
    def classDefinitionType(self, value: GlyphClassDefinitionType) -> GlyphClassDefinitionType: ...
    @property
    def glyphRect(self) -> GlyphRect: ...
    @glyphRect.setter
    def glyphRect(self, value: GlyphRect) -> GlyphRect: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def metrics(self) -> GlyphMetrics: ...
    @metrics.setter
    def metrics(self, value: GlyphMetrics) -> GlyphMetrics: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...
    def Compare(self, other: Glyph) -> bool: ...


class GlyphClassDefinitionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Undefined : GlyphClassDefinitionType # 0
    Base : GlyphClassDefinitionType # 1
    Ligature : GlyphClassDefinitionType # 2
    Mark : GlyphClassDefinitionType # 3
    Component : GlyphClassDefinitionType # 4


class GlyphMetrics(IEquatable_1[GlyphMetrics]):
    def __init__(self, width: float, height: float, bearingX: float, bearingY: float, advance: float) -> None: ...
    @property
    def height(self) -> float: ...
    @height.setter
    def height(self, value: float) -> float: ...
    @property
    def horizontalAdvance(self) -> float: ...
    @horizontalAdvance.setter
    def horizontalAdvance(self, value: float) -> float: ...
    @property
    def horizontalBearingX(self) -> float: ...
    @horizontalBearingX.setter
    def horizontalBearingX(self, value: float) -> float: ...
    @property
    def horizontalBearingY(self) -> float: ...
    @horizontalBearingY.setter
    def horizontalBearingY(self, value: float) -> float: ...
    @property
    def width(self) -> float: ...
    @width.setter
    def width(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: GlyphMetrics, rhs: GlyphMetrics) -> bool: ...
    def __ne__(self, lhs: GlyphMetrics, rhs: GlyphMetrics) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: GlyphMetrics) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class GlyphRect(IEquatable_1[GlyphRect]):
    @typing.overload
    def __init__(self, rect: Rect) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int) -> None: ...
    @property
    def height(self) -> int: ...
    @height.setter
    def height(self, value: int) -> int: ...
    @property
    def width(self) -> int: ...
    @width.setter
    def width(self, value: int) -> int: ...
    @property
    def x(self) -> int: ...
    @x.setter
    def x(self, value: int) -> int: ...
    @property
    def y(self) -> int: ...
    @y.setter
    def y(self, value: int) -> int: ...
    @classmethod
    @property
    def zero(cls) -> GlyphRect: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, lhs: GlyphRect, rhs: GlyphRect) -> bool: ...
    def __ne__(self, lhs: GlyphRect, rhs: GlyphRect) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: GlyphRect) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...


