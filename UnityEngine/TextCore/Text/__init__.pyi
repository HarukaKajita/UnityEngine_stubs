import typing, clr, abc
import UnityEngine
from UnityEngine.TextCore import Glyph, FaceInfo, GlyphMetrics, GlyphRect, GlyphClassDefinitionType
from System import Action, Action_1, Action_2, Action_3, Array_1
from UnityEngine.TextCore.LowLevel import GlyphRenderMode
from UnityEngine import Texture2D, HideFlags, Material, Font, Texture, Sprite, ScriptableObject, Color, Object, GameObject
from System.Collections.Generic import Dictionary_2, List_1

class AtlasPopulationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Static : AtlasPopulationMode # 0
    Dynamic : AtlasPopulationMode # 1
    DynamicOS : AtlasPopulationMode # 2


class Character(TextElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, unicode: int, fontAsset: FontAsset, glyph: Glyph) -> None: ...
    @typing.overload
    def __init__(self, unicode: int, glyph: Glyph) -> None: ...
    @property
    def elementType(self) -> TextElementType: ...
    @property
    def glyph(self) -> Glyph: ...
    @glyph.setter
    def glyph(self, value: Glyph) -> Glyph: ...
    @property
    def glyphIndex(self) -> int: ...
    @glyphIndex.setter
    def glyphIndex(self, value: int) -> int: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...
    @property
    def textAsset(self) -> TextAsset: ...
    @textAsset.setter
    def textAsset(self, value: TextAsset) -> TextAsset: ...
    @property
    def unicode(self) -> int: ...
    @unicode.setter
    def unicode(self, value: int) -> int: ...


class ColorGradientMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Single : ColorGradientMode # 0
    HorizontalGradient : ColorGradientMode # 1
    VerticalGradient : ColorGradientMode # 2
    FourCornersGradient : ColorGradientMode # 3


class FastAction_GenericClasses(abc.ABCMeta):
    Generic_FastAction_GenericClasses_FastAction_1_A = typing.TypeVar('Generic_FastAction_GenericClasses_FastAction_1_A')
    @typing.overload
    def __getitem__(self, types : typing.Type[Generic_FastAction_GenericClasses_FastAction_1_A]) -> typing.Type[FastAction_1[Generic_FastAction_GenericClasses_FastAction_1_A]]: ...
    Generic_FastAction_GenericClasses_FastAction_2_A = typing.TypeVar('Generic_FastAction_GenericClasses_FastAction_2_A')
    Generic_FastAction_GenericClasses_FastAction_2_B = typing.TypeVar('Generic_FastAction_GenericClasses_FastAction_2_B')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_FastAction_GenericClasses_FastAction_2_A], typing.Type[Generic_FastAction_GenericClasses_FastAction_2_B]]) -> typing.Type[FastAction_2[Generic_FastAction_GenericClasses_FastAction_2_A, Generic_FastAction_GenericClasses_FastAction_2_B]]: ...
    Generic_FastAction_GenericClasses_FastAction_3_A = typing.TypeVar('Generic_FastAction_GenericClasses_FastAction_3_A')
    Generic_FastAction_GenericClasses_FastAction_3_B = typing.TypeVar('Generic_FastAction_GenericClasses_FastAction_3_B')
    Generic_FastAction_GenericClasses_FastAction_3_C = typing.TypeVar('Generic_FastAction_GenericClasses_FastAction_3_C')
    @typing.overload
    def __getitem__(self, types : typing.Tuple[typing.Type[Generic_FastAction_GenericClasses_FastAction_3_A], typing.Type[Generic_FastAction_GenericClasses_FastAction_3_B], typing.Type[Generic_FastAction_GenericClasses_FastAction_3_C]]) -> typing.Type[FastAction_3[Generic_FastAction_GenericClasses_FastAction_3_A, Generic_FastAction_GenericClasses_FastAction_3_B, Generic_FastAction_GenericClasses_FastAction_3_C]]: ...

class FastAction(FastAction_0, metaclass =FastAction_GenericClasses): ...

class FastAction_0:
    def __init__(self) -> None: ...
    def Add(self, rhs: Action) -> None: ...
    def Call(self) -> None: ...
    def Remove(self, rhs: Action) -> None: ...


FastAction_1_A = typing.TypeVar('FastAction_1_A')
class FastAction_1(typing.Generic[FastAction_1_A]):
    def __init__(self) -> None: ...
    def Add(self, rhs: Action_1[FastAction_1_A]) -> None: ...
    def Call(self, a: FastAction_1_A) -> None: ...
    def Remove(self, rhs: Action_1[FastAction_1_A]) -> None: ...


FastAction_2_A = typing.TypeVar('FastAction_2_A')
FastAction_2_B = typing.TypeVar('FastAction_2_B')
class FastAction_2(typing.Generic[FastAction_2_A, FastAction_2_B]):
    def __init__(self) -> None: ...
    def Add(self, rhs: Action_2[FastAction_2_A, FastAction_2_B]) -> None: ...
    def Call(self, a: FastAction_2_A, b: FastAction_2_B) -> None: ...
    def Remove(self, rhs: Action_2[FastAction_2_A, FastAction_2_B]) -> None: ...


FastAction_3_A = typing.TypeVar('FastAction_3_A')
FastAction_3_B = typing.TypeVar('FastAction_3_B')
FastAction_3_C = typing.TypeVar('FastAction_3_C')
class FastAction_3(typing.Generic[FastAction_3_A, FastAction_3_B, FastAction_3_C]):
    def __init__(self) -> None: ...
    def Add(self, rhs: Action_3[FastAction_3_A, FastAction_3_B, FastAction_3_C]) -> None: ...
    def Call(self, a: FastAction_3_A, b: FastAction_3_B, c: FastAction_3_C) -> None: ...
    def Remove(self, rhs: Action_3[FastAction_3_A, FastAction_3_B, FastAction_3_C]) -> None: ...


class FontAsset(TextAsset):
    def __init__(self) -> None: ...
    @property
    def atlasHeight(self) -> int: ...
    @atlasHeight.setter
    def atlasHeight(self, value: int) -> int: ...
    @property
    def atlasPadding(self) -> int: ...
    @atlasPadding.setter
    def atlasPadding(self, value: int) -> int: ...
    @property
    def atlasPopulationMode(self) -> AtlasPopulationMode: ...
    @atlasPopulationMode.setter
    def atlasPopulationMode(self, value: AtlasPopulationMode) -> AtlasPopulationMode: ...
    @property
    def atlasRenderMode(self) -> GlyphRenderMode: ...
    @atlasRenderMode.setter
    def atlasRenderMode(self, value: GlyphRenderMode) -> GlyphRenderMode: ...
    @property
    def atlasTexture(self) -> Texture2D: ...
    @property
    def atlasTextureCount(self) -> int: ...
    @property
    def atlasTextures(self) -> Array_1[Texture2D]: ...
    @atlasTextures.setter
    def atlasTextures(self, value: Array_1[Texture2D]) -> Array_1[Texture2D]: ...
    @property
    def atlasWidth(self) -> int: ...
    @atlasWidth.setter
    def atlasWidth(self, value: int) -> int: ...
    @property
    def boldStyleSpacing(self) -> float: ...
    @boldStyleSpacing.setter
    def boldStyleSpacing(self, value: float) -> float: ...
    @property
    def boldStyleWeight(self) -> float: ...
    @boldStyleWeight.setter
    def boldStyleWeight(self, value: float) -> float: ...
    @property
    def characterLookupTable(self) -> Dictionary_2[int, Character]: ...
    @property
    def characterTable(self) -> List_1[Character]: ...
    @characterTable.setter
    def characterTable(self, value: List_1[Character]) -> List_1[Character]: ...
    @property
    def faceInfo(self) -> FaceInfo: ...
    @faceInfo.setter
    def faceInfo(self, value: FaceInfo) -> FaceInfo: ...
    @property
    def fallbackFontAssetTable(self) -> List_1[FontAsset]: ...
    @fallbackFontAssetTable.setter
    def fallbackFontAssetTable(self, value: List_1[FontAsset]) -> List_1[FontAsset]: ...
    @property
    def fontAssetCreationEditorSettings(self) -> FontAssetCreationEditorSettings: ...
    @fontAssetCreationEditorSettings.setter
    def fontAssetCreationEditorSettings(self, value: FontAssetCreationEditorSettings) -> FontAssetCreationEditorSettings: ...
    @property
    def fontFeatureTable(self) -> FontFeatureTable: ...
    @fontFeatureTable.setter
    def fontFeatureTable(self, value: FontFeatureTable) -> FontFeatureTable: ...
    @property
    def fontWeightTable(self) -> Array_1[FontWeightPair]: ...
    @fontWeightTable.setter
    def fontWeightTable(self, value: Array_1[FontWeightPair]) -> Array_1[FontWeightPair]: ...
    @property
    def glyphLookupTable(self) -> Dictionary_2[int, Glyph]: ...
    @property
    def glyphTable(self) -> List_1[Glyph]: ...
    @glyphTable.setter
    def glyphTable(self, value: List_1[Glyph]) -> List_1[Glyph]: ...
    @property
    def hashCode(self) -> int: ...
    @hashCode.setter
    def hashCode(self, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def instanceID(self) -> int: ...
    @property
    def isMultiAtlasTexturesEnabled(self) -> bool: ...
    @isMultiAtlasTexturesEnabled.setter
    def isMultiAtlasTexturesEnabled(self, value: bool) -> bool: ...
    @property
    def italicStyleSlant(self) -> int: ...
    @italicStyleSlant.setter
    def italicStyleSlant(self, value: int) -> int: ...
    @property
    def material(self) -> Material: ...
    @material.setter
    def material(self, value: Material) -> Material: ...
    @property
    def materialHashCode(self) -> int: ...
    @materialHashCode.setter
    def materialHashCode(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def regularStyleSpacing(self) -> float: ...
    @regularStyleSpacing.setter
    def regularStyleSpacing(self, value: float) -> float: ...
    @property
    def regularStyleWeight(self) -> float: ...
    @regularStyleWeight.setter
    def regularStyleWeight(self, value: float) -> float: ...
    @property
    def sourceFontFile(self) -> Font: ...
    @sourceFontFile.setter
    def sourceFontFile(self, value: Font) -> Font: ...
    @property
    def tabMultiple(self) -> int: ...
    @tabMultiple.setter
    def tabMultiple(self, value: int) -> int: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> str: ...
    def ClearFontAssetData(self, setAtlasSizeToZero: bool = ...) -> None: ...
    @staticmethod
    def GetCharacters(fontAsset: FontAsset) -> str: ...
    @staticmethod
    def GetCharactersArray(fontAsset: FontAsset) -> Array_1[int]: ...
    def ReadFontAssetDefinition(self) -> None: ...
    # Skipped CreateFontAsset due to it being static, abstract and generic.

    CreateFontAsset : CreateFontAsset_MethodGroup
    class CreateFontAsset_MethodGroup:
        @typing.overload
        def __call__(self, font: Font) -> FontAsset:...
        @typing.overload
        def __call__(self, familyName: str, styleName: str, pointSize: int = ...) -> FontAsset:...
        @typing.overload
        def __call__(self, fontFilePath: str, faceIndex: int, samplingPointSize: int, atlasPadding: int, renderMode: GlyphRenderMode, atlasWidth: int, atlasHeight: int) -> FontAsset:...
        @typing.overload
        def __call__(self, font: Font, samplingPointSize: int, atlasPadding: int, renderMode: GlyphRenderMode, atlasWidth: int, atlasHeight: int, atlasPopulationMode: AtlasPopulationMode = ..., enableMultiAtlasSupport: bool = ...) -> FontAsset:...

    # Skipped HasCharacter due to it being static, abstract and generic.

    HasCharacter : HasCharacter_MethodGroup
    class HasCharacter_MethodGroup:
        @typing.overload
        def __call__(self, character: int) -> bool:...
        @typing.overload
        def __call__(self, character: str, searchFallbacks: bool = ..., tryAddCharacter: bool = ...) -> bool:...
        @typing.overload
        def __call__(self, character: int, searchFallbacks: bool = ..., tryAddCharacter: bool = ...) -> bool:...

    # Skipped HasCharacters due to it being static, abstract and generic.

    HasCharacters : HasCharacters_MethodGroup
    class HasCharacters_MethodGroup:
        @typing.overload
        def __call__(self, text: str) -> bool:...
        @typing.overload
        def __call__(self, text: str, missingCharacters: clr.Reference[List_1[str]]) -> bool:...
        @typing.overload
        def __call__(self, text: str, missingCharacters: clr.Reference[Array_1[int]], searchFallbacks: bool = ..., tryAddCharacter: bool = ...) -> bool:...

    # Skipped TryAddCharacters due to it being static, abstract and generic.

    TryAddCharacters : TryAddCharacters_MethodGroup
    class TryAddCharacters_MethodGroup:
        @typing.overload
        def __call__(self, unicodes: Array_1[int], includeFontFeatures: bool = ...) -> bool:...
        @typing.overload
        def __call__(self, characters: str, includeFontFeatures: bool = ...) -> bool:...
        @typing.overload
        def __call__(self, unicodes: Array_1[int], missingUnicodes: clr.Reference[Array_1[int]], includeFontFeatures: bool = ...) -> bool:...
        @typing.overload
        def __call__(self, characters: str, missingCharacters: clr.Reference[str], includeFontFeatures: bool = ...) -> bool:...



class FontAssetCreationEditorSettings:
    atlasHeight : int
    atlasWidth : int
    characterSequence : str
    characterSetSelectionMode : int
    faceIndex : int
    fontStyle : int
    fontStyleModifier : float
    includeFontFeatures : bool
    packingMode : int
    padding : int
    paddingMode : int
    pointSize : int
    pointSizeSamplingMode : int
    referencedFontAssetGUID : str
    referencedTextAssetGUID : str
    renderMode : int
    sourceFontFileGUID : str


class FontFeatureTable:
    def SortGlyphPairAdjustmentRecords(self) -> None: ...
    def SortMarkToBaseAdjustmentRecords(self) -> None: ...
    def SortMarkToMarkAdjustmentRecords(self) -> None: ...


class FontStyles(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : FontStyles # 0
    Bold : FontStyles # 1
    Italic : FontStyles # 2
    Underline : FontStyles # 4
    LowerCase : FontStyles # 8
    UpperCase : FontStyles # 16
    SmallCaps : FontStyles # 32
    Strikethrough : FontStyles # 64
    Superscript : FontStyles # 128
    Subscript : FontStyles # 256
    Highlight : FontStyles # 512


class FontWeightPair:
    italicTypeface : FontAsset
    regularTypeface : FontAsset


class SpriteAsset(TextAsset):
    def __init__(self) -> None: ...
    fallbackSpriteAssets : List_1[SpriteAsset]
    @property
    def faceInfo(self) -> FaceInfo: ...
    @faceInfo.setter
    def faceInfo(self, value: FaceInfo) -> FaceInfo: ...
    @property
    def hashCode(self) -> int: ...
    @hashCode.setter
    def hashCode(self, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def instanceID(self) -> int: ...
    @property
    def material(self) -> Material: ...
    @material.setter
    def material(self, value: Material) -> Material: ...
    @property
    def materialHashCode(self) -> int: ...
    @materialHashCode.setter
    def materialHashCode(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def spriteCharacterLookupTable(self) -> Dictionary_2[int, SpriteCharacter]: ...
    @spriteCharacterLookupTable.setter
    def spriteCharacterLookupTable(self, value: Dictionary_2[int, SpriteCharacter]) -> Dictionary_2[int, SpriteCharacter]: ...
    @property
    def spriteCharacterTable(self) -> List_1[SpriteCharacter]: ...
    @spriteCharacterTable.setter
    def spriteCharacterTable(self, value: List_1[SpriteCharacter]) -> List_1[SpriteCharacter]: ...
    @property
    def spriteGlyphTable(self) -> List_1[SpriteGlyph]: ...
    @spriteGlyphTable.setter
    def spriteGlyphTable(self, value: List_1[SpriteGlyph]) -> List_1[SpriteGlyph]: ...
    @property
    def spriteSheet(self) -> Texture: ...
    @spriteSheet.setter
    def spriteSheet(self, value: Texture) -> Texture: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> str: ...
    def GetSpriteIndexFromHashcode(self, hashCode: int) -> int: ...
    def GetSpriteIndexFromName(self, name: str) -> int: ...
    def GetSpriteIndexFromUnicode(self, unicode: int) -> int: ...
    @staticmethod
    def SearchForSpriteByHashCode(spriteAsset: SpriteAsset, hashCode: int, includeFallbacks: bool, spriteIndex: clr.Reference[int], textSettings: TextSettings = ...) -> SpriteAsset: ...
    @staticmethod
    def SearchForSpriteByUnicode(spriteAsset: SpriteAsset, unicode: int, includeFallbacks: bool, spriteIndex: clr.Reference[int]) -> SpriteAsset: ...
    def SortGlyphTable(self) -> None: ...
    def UpdateLookupTables(self) -> None: ...


class SpriteCharacter(TextElement):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, unicode: int, glyph: SpriteGlyph) -> None: ...
    @typing.overload
    def __init__(self, unicode: int, spriteAsset: SpriteAsset, glyph: SpriteGlyph) -> None: ...
    @property
    def elementType(self) -> TextElementType: ...
    @property
    def glyph(self) -> Glyph: ...
    @glyph.setter
    def glyph(self, value: Glyph) -> Glyph: ...
    @property
    def glyphIndex(self) -> int: ...
    @glyphIndex.setter
    def glyphIndex(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...
    @property
    def textAsset(self) -> TextAsset: ...
    @textAsset.setter
    def textAsset(self, value: TextAsset) -> TextAsset: ...
    @property
    def unicode(self) -> int: ...
    @unicode.setter
    def unicode(self, value: int) -> int: ...


class SpriteGlyph(Glyph):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, index: int, metrics: GlyphMetrics, glyphRect: GlyphRect, scale: float, atlasIndex: int) -> None: ...
    @typing.overload
    def __init__(self, index: int, metrics: GlyphMetrics, glyphRect: GlyphRect, scale: float, atlasIndex: int, sprite: Sprite) -> None: ...
    sprite : Sprite
    @property
    def atlasIndex(self) -> int: ...
    @atlasIndex.setter
    def atlasIndex(self, value: int) -> int: ...
    @property
    def classDefinitionType(self) -> GlyphClassDefinitionType: ...
    @classDefinitionType.setter
    def classDefinitionType(self, value: GlyphClassDefinitionType) -> GlyphClassDefinitionType: ...
    @property
    def glyphRect(self) -> GlyphRect: ...
    @glyphRect.setter
    def glyphRect(self, value: GlyphRect) -> GlyphRect: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> int: ...
    @property
    def metrics(self) -> GlyphMetrics: ...
    @metrics.setter
    def metrics(self, value: GlyphMetrics) -> GlyphMetrics: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...


class TextAsset(ScriptableObject, abc.ABC):
    @property
    def hashCode(self) -> int: ...
    @hashCode.setter
    def hashCode(self, value: int) -> int: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def instanceID(self) -> int: ...
    @property
    def material(self) -> Material: ...
    @material.setter
    def material(self, value: Material) -> Material: ...
    @property
    def materialHashCode(self) -> int: ...
    @materialHashCode.setter
    def materialHashCode(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> str: ...


class TextColorGradient(ScriptableObject):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, color: Color) -> None: ...
    @typing.overload
    def __init__(self, color0: Color, color1: Color, color2: Color, color3: Color) -> None: ...
    bottomLeft : Color
    bottomRight : Color
    colorMode : ColorGradientMode
    topLeft : Color
    topRight : Color
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...


class TextElement(abc.ABC):
    @property
    def elementType(self) -> TextElementType: ...
    @property
    def glyph(self) -> Glyph: ...
    @glyph.setter
    def glyph(self, value: Glyph) -> Glyph: ...
    @property
    def glyphIndex(self) -> int: ...
    @glyphIndex.setter
    def glyphIndex(self, value: int) -> int: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, value: float) -> float: ...
    @property
    def textAsset(self) -> TextAsset: ...
    @textAsset.setter
    def textAsset(self, value: TextAsset) -> TextAsset: ...
    @property
    def unicode(self) -> int: ...
    @unicode.setter
    def unicode(self, value: int) -> int: ...


class TextElementType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Character : TextElementType # 1
    Sprite : TextElementType # 2


class TextEventManager(abc.ABC):
    COLOR_GRADIENT_PROPERTY_EVENT : FastAction_1[Object]
    DRAG_AND_DROP_MATERIAL_EVENT : FastAction_3[GameObject, Material, Material]
    FONT_PROPERTY_EVENT : FastAction_2[bool, Object]
    MATERIAL_PROPERTY_EVENT : FastAction_2[bool, Material]
    OnPreRenderObject_Event : FastAction
    RESOURCE_LOAD_EVENT : FastAction
    SPRITE_ASSET_PROPERTY_EVENT : FastAction_2[bool, Object]
    TEXT_CHANGED_EVENT : FastAction_1[Object]
    TEXT_STYLE_PROPERTY_EVENT : FastAction_1[bool]
    TEXTMESHPRO_PROPERTY_EVENT : FastAction_2[bool, Object]
    TEXTMESHPRO_UGUI_PROPERTY_EVENT : FastAction_2[bool, Object]
    TMP_SETTINGS_PROPERTY_EVENT : FastAction
    @staticmethod
    def ON_COLOR_GRADIENT_PROPERTY_CHANGED(gradient: Object) -> None: ...
    @staticmethod
    def ON_DRAG_AND_DROP_MATERIAL_CHANGED(sender: GameObject, currentMaterial: Material, newMaterial: Material) -> None: ...
    @staticmethod
    def ON_FONT_PROPERTY_CHANGED(isChanged: bool, font: Object) -> None: ...
    @staticmethod
    def ON_MATERIAL_PROPERTY_CHANGED(isChanged: bool, mat: Material) -> None: ...
    @staticmethod
    def ON_PRE_RENDER_OBJECT_CHANGED() -> None: ...
    @staticmethod
    def ON_RESOURCES_LOADED() -> None: ...
    @staticmethod
    def ON_SPRITE_ASSET_PROPERTY_CHANGED(isChanged: bool, obj: Object) -> None: ...
    @staticmethod
    def ON_TEXT_CHANGED(obj: Object) -> None: ...
    @staticmethod
    def ON_TEXT_STYLE_PROPERTY_CHANGED(isChanged: bool) -> None: ...
    @staticmethod
    def ON_TEXTMESHPRO_PROPERTY_CHANGED(isChanged: bool, obj: Object) -> None: ...
    @staticmethod
    def ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED(isChanged: bool, obj: Object) -> None: ...
    @staticmethod
    def ON_TMP_SETTINGS_CHANGED() -> None: ...


class TextFontWeight(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Thin : TextFontWeight # 100
    ExtraLight : TextFontWeight # 200
    Light : TextFontWeight # 300
    Regular : TextFontWeight # 400
    Medium : TextFontWeight # 500
    SemiBold : TextFontWeight # 600
    Bold : TextFontWeight # 700
    Heavy : TextFontWeight # 800
    Black : TextFontWeight # 900


class TextSettings(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def clearDynamicDataOnBuild(self) -> bool: ...
    @clearDynamicDataOnBuild.setter
    def clearDynamicDataOnBuild(self, value: bool) -> bool: ...
    @property
    def defaultColorGradientPresetsPath(self) -> str: ...
    @defaultColorGradientPresetsPath.setter
    def defaultColorGradientPresetsPath(self, value: str) -> str: ...
    @property
    def defaultFontAsset(self) -> FontAsset: ...
    @defaultFontAsset.setter
    def defaultFontAsset(self, value: FontAsset) -> FontAsset: ...
    @property
    def defaultFontAssetPath(self) -> str: ...
    @defaultFontAssetPath.setter
    def defaultFontAssetPath(self, value: str) -> str: ...
    @property
    def defaultSpriteAsset(self) -> SpriteAsset: ...
    @defaultSpriteAsset.setter
    def defaultSpriteAsset(self, value: SpriteAsset) -> SpriteAsset: ...
    @property
    def defaultSpriteAssetPath(self) -> str: ...
    @defaultSpriteAssetPath.setter
    def defaultSpriteAssetPath(self, value: str) -> str: ...
    @property
    def defaultStyleSheet(self) -> TextStyleSheet: ...
    @defaultStyleSheet.setter
    def defaultStyleSheet(self, value: TextStyleSheet) -> TextStyleSheet: ...
    @property
    def displayWarnings(self) -> bool: ...
    @displayWarnings.setter
    def displayWarnings(self, value: bool) -> bool: ...
    @property
    def fallbackFontAssets(self) -> List_1[FontAsset]: ...
    @fallbackFontAssets.setter
    def fallbackFontAssets(self, value: List_1[FontAsset]) -> List_1[FontAsset]: ...
    @property
    def fallbackSpriteAssets(self) -> List_1[SpriteAsset]: ...
    @fallbackSpriteAssets.setter
    def fallbackSpriteAssets(self, value: List_1[SpriteAsset]) -> List_1[SpriteAsset]: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def lineBreakingRules(self) -> UnicodeLineBreakingRules: ...
    @lineBreakingRules.setter
    def lineBreakingRules(self, value: UnicodeLineBreakingRules) -> UnicodeLineBreakingRules: ...
    @property
    def matchMaterialPreset(self) -> bool: ...
    @matchMaterialPreset.setter
    def matchMaterialPreset(self, value: bool) -> bool: ...
    @property
    def missingCharacterUnicode(self) -> int: ...
    @missingCharacterUnicode.setter
    def missingCharacterUnicode(self, value: int) -> int: ...
    @property
    def missingSpriteCharacterUnicode(self) -> int: ...
    @missingSpriteCharacterUnicode.setter
    def missingSpriteCharacterUnicode(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @property
    def styleSheetsResourcePath(self) -> str: ...
    @styleSheetsResourcePath.setter
    def styleSheetsResourcePath(self, value: str) -> str: ...
    @property
    def useModernHangulLineBreakingRules(self) -> bool: ...
    @useModernHangulLineBreakingRules.setter
    def useModernHangulLineBreakingRules(self, value: bool) -> bool: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> str: ...


class TextShaderUtilities(abc.ABC):
    ID_BevelAmount : int
    ID_ClipRect : int
    ID_EnvMap : int
    ID_EnvMatrix : int
    ID_EnvMatrixRotation : int
    ID_FaceColor : int
    ID_FaceDilate : int
    ID_FaceTex : int
    ID_GlowColor : int
    ID_GlowInner : int
    ID_GlowOffset : int
    ID_GlowOuter : int
    ID_GlowPower : int
    ID_GradientScale : int
    ID_IsoPerimeter : int
    ID_LightAngle : int
    ID_MainTex : int
    ID_MaskCoord : int
    ID_MaskSoftnessX : int
    ID_MaskSoftnessY : int
    ID_Outline2Color : int
    ID_Outline2Width : int
    ID_OutlineColor : int
    ID_OutlineMode : int
    ID_OutlineOffset1 : int
    ID_OutlineOffset2 : int
    ID_OutlineOffset3 : int
    ID_OutlineSoftness : int
    ID_OutlineTex : int
    ID_OutlineWidth : int
    ID_Padding : int
    ID_PerspectiveFilter : int
    ID_ScaleRatio_A : int
    ID_ScaleRatio_B : int
    ID_ScaleRatio_C : int
    ID_ScaleX : int
    ID_ScaleY : int
    ID_ShaderFlags : int
    ID_Sharpness : int
    ID_Shininess : int
    ID_Softness : int
    ID_StencilComp : int
    ID_StencilID : int
    ID_StencilOp : int
    ID_StencilReadMask : int
    ID_StencilWriteMask : int
    ID_TextureHeight : int
    ID_TextureWidth : int
    ID_UnderlayColor : int
    ID_UnderlayDilate : int
    ID_UnderlayIsoPerimeter : int
    ID_UnderlayOffset : int
    ID_UnderlayOffsetX : int
    ID_UnderlayOffsetY : int
    ID_UnderlaySoftness : int
    ID_UseClipRect : int
    ID_VertexOffsetX : int
    ID_VertexOffsetY : int
    ID_WeightBold : int
    ID_WeightNormal : int
    isInitialized : bool
    Keyword_Bevel : str
    Keyword_Glow : str
    Keyword_MASK_HARD : str
    Keyword_MASK_SOFT : str
    Keyword_MASK_TEX : str
    Keyword_Outline : str
    Keyword_Ratios : str
    Keyword_Underlay : str
    ShaderTag_CullMode : str
    ShaderTag_ZTestMode : str


class TextStyle:
    @property
    def hashCode(self) -> int: ...
    @hashCode.setter
    def hashCode(self, value: int) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    @classmethod
    @property
    def NormalStyle(cls) -> TextStyle: ...
    @property
    def styleClosingDefinition(self) -> str: ...
    @property
    def styleClosingTagArray(self) -> Array_1[int]: ...
    @property
    def styleOpeningDefinition(self) -> str: ...
    @property
    def styleOpeningTagArray(self) -> Array_1[int]: ...
    def RefreshStyle(self) -> None: ...


class TextStyleSheet(ScriptableObject):
    def __init__(self) -> None: ...
    @property
    def hideFlags(self) -> HideFlags: ...
    @hideFlags.setter
    def hideFlags(self, value: HideFlags) -> HideFlags: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> str: ...
    def RefreshStyles(self) -> None: ...
    # Skipped GetStyle due to it being static, abstract and generic.

    GetStyle : GetStyle_MethodGroup
    class GetStyle_MethodGroup:
        @typing.overload
        def __call__(self, hashCode: int) -> TextStyle:...
        @typing.overload
        def __call__(self, name: str) -> TextStyle:...



class UnicodeLineBreakingRules:
    def __init__(self) -> None: ...
    @property
    def followingCharacters(self) -> UnityEngine.TextAsset: ...
    @property
    def leadingCharacters(self) -> UnityEngine.TextAsset: ...
    @property
    def lineBreakingRules(self) -> UnityEngine.TextAsset: ...
    @property
    def useModernHangulLineBreakingRules(self) -> bool: ...
    @useModernHangulLineBreakingRules.setter
    def useModernHangulLineBreakingRules(self, value: bool) -> bool: ...

