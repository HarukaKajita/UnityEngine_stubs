import typing, clr
from System import IDisposable, MulticastDelegate, IAsyncResult, AsyncCallback
from System.Collections.Generic import IEnumerable_1, List_1
from UnityEngine import Resolution, Matrix4x4, Texture2D
from System.Reflection import MethodInfo

class CameraParameters:
    def __init__(self, webCamMode: WebCamMode) -> None: ...
    @property
    def cameraResolutionHeight(self) -> int: ...
    @cameraResolutionHeight.setter
    def cameraResolutionHeight(self, value: int) -> int: ...
    @property
    def cameraResolutionWidth(self) -> int: ...
    @cameraResolutionWidth.setter
    def cameraResolutionWidth(self, value: int) -> int: ...
    @property
    def frameRate(self) -> float: ...
    @frameRate.setter
    def frameRate(self, value: float) -> float: ...
    @property
    def hologramOpacity(self) -> float: ...
    @hologramOpacity.setter
    def hologramOpacity(self, value: float) -> float: ...
    @property
    def pixelFormat(self) -> CapturePixelFormat: ...
    @pixelFormat.setter
    def pixelFormat(self, value: CapturePixelFormat) -> CapturePixelFormat: ...


class CapturePixelFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BGRA32 : CapturePixelFormat # 0
    NV12 : CapturePixelFormat # 1
    JPEG : CapturePixelFormat # 2
    PNG : CapturePixelFormat # 3


class PhotoCapture(IDisposable):
    @classmethod
    @property
    def SupportedResolutions(cls) -> IEnumerable_1[Resolution]: ...
    def Dispose(self) -> None: ...
    def GetUnsafePointerToVideoDeviceController(self) -> int: ...
    def StartPhotoModeAsync(self, setupParams: CameraParameters, onPhotoModeStartedCallback: PhotoCapture.OnPhotoModeStartedCallback) -> None: ...
    def StopPhotoModeAsync(self, onPhotoModeStoppedCallback: PhotoCapture.OnPhotoModeStoppedCallback) -> None: ...
    # Skipped CreateAsync due to it being static, abstract and generic.

    CreateAsync : CreateAsync_MethodGroup
    class CreateAsync_MethodGroup:
        @typing.overload
        def __call__(self, onCreatedCallback: PhotoCapture.OnCaptureResourceCreatedCallback) -> None:...
        @typing.overload
        def __call__(self, showHolograms: bool, onCreatedCallback: PhotoCapture.OnCaptureResourceCreatedCallback) -> None:...

    # Skipped TakePhotoAsync due to it being static, abstract and generic.

    TakePhotoAsync : TakePhotoAsync_MethodGroup
    class TakePhotoAsync_MethodGroup:
        @typing.overload
        def __call__(self, onCapturedPhotoToMemoryCallback: PhotoCapture.OnCapturedToMemoryCallback) -> None:...
        @typing.overload
        def __call__(self, filename: str, fileOutputFormat: PhotoCaptureFileOutputFormat, onCapturedPhotoToDiskCallback: PhotoCapture.OnCapturedToDiskCallback) -> None:...


    class CaptureResultType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Success : PhotoCapture.CaptureResultType # 0
        UnknownError : PhotoCapture.CaptureResultType # 1


    class OnCapturedToDiskCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: PhotoCapture.PhotoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: PhotoCapture.PhotoCaptureResult) -> None: ...


    class OnCapturedToMemoryCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: PhotoCapture.PhotoCaptureResult, photoCaptureFrame: PhotoCaptureFrame, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: PhotoCapture.PhotoCaptureResult, photoCaptureFrame: PhotoCaptureFrame) -> None: ...


    class OnCaptureResourceCreatedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, captureObject: PhotoCapture, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, captureObject: PhotoCapture) -> None: ...


    class OnPhotoModeStartedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: PhotoCapture.PhotoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: PhotoCapture.PhotoCaptureResult) -> None: ...


    class OnPhotoModeStoppedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: PhotoCapture.PhotoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: PhotoCapture.PhotoCaptureResult) -> None: ...


    class PhotoCaptureResult:
        hResult : int
        resultType : PhotoCapture.CaptureResultType
        @property
        def success(self) -> bool: ...



class PhotoCaptureFileOutputFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PNG : PhotoCaptureFileOutputFormat # 0
    JPG : PhotoCaptureFileOutputFormat # 1


class PhotoCaptureFrame(IDisposable):
    @property
    def dataLength(self) -> int: ...
    @dataLength.setter
    def dataLength(self, value: int) -> int: ...
    @property
    def hasLocationData(self) -> bool: ...
    @hasLocationData.setter
    def hasLocationData(self, value: bool) -> bool: ...
    @property
    def pixelFormat(self) -> CapturePixelFormat: ...
    @pixelFormat.setter
    def pixelFormat(self, value: CapturePixelFormat) -> CapturePixelFormat: ...
    def CopyRawImageDataIntoBuffer(self, byteBuffer: List_1[int]) -> None: ...
    def Dispose(self) -> None: ...
    def GetUnsafePointerToBuffer(self) -> int: ...
    def TryGetCameraToWorldMatrix(self, cameraToWorldMatrix: clr.Reference[Matrix4x4]) -> bool: ...
    def UploadImageDataToTexture(self, targetTexture: Texture2D) -> None: ...
    # Skipped TryGetProjectionMatrix due to it being static, abstract and generic.

    TryGetProjectionMatrix : TryGetProjectionMatrix_MethodGroup
    class TryGetProjectionMatrix_MethodGroup:
        @typing.overload
        def __call__(self, projectionMatrix: clr.Reference[Matrix4x4]) -> bool:...
        @typing.overload
        def __call__(self, nearClipPlane: float, farClipPlane: float, projectionMatrix: clr.Reference[Matrix4x4]) -> bool:...



class VideoCapture(IDisposable):
    @property
    def IsRecording(self) -> bool: ...
    @classmethod
    @property
    def SupportedResolutions(cls) -> IEnumerable_1[Resolution]: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def GetSupportedFrameRatesForResolution(resolution: Resolution) -> IEnumerable_1[float]: ...
    def GetUnsafePointerToVideoDeviceController(self) -> int: ...
    def StartRecordingAsync(self, filename: str, onStartedRecordingVideoCallback: VideoCapture.OnStartedRecordingVideoCallback) -> None: ...
    def StartVideoModeAsync(self, setupParams: CameraParameters, audioState: VideoCapture.AudioState, onVideoModeStartedCallback: VideoCapture.OnVideoModeStartedCallback) -> None: ...
    def StopRecordingAsync(self, onStoppedRecordingVideoCallback: VideoCapture.OnStoppedRecordingVideoCallback) -> None: ...
    def StopVideoModeAsync(self, onVideoModeStoppedCallback: VideoCapture.OnVideoModeStoppedCallback) -> None: ...
    # Skipped CreateAsync due to it being static, abstract and generic.

    CreateAsync : CreateAsync_MethodGroup
    class CreateAsync_MethodGroup:
        @typing.overload
        def __call__(self, onCreatedCallback: VideoCapture.OnVideoCaptureResourceCreatedCallback) -> None:...
        @typing.overload
        def __call__(self, showHolograms: bool, onCreatedCallback: VideoCapture.OnVideoCaptureResourceCreatedCallback) -> None:...


    class AudioState(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        MicAudio : VideoCapture.AudioState # 0
        ApplicationAudio : VideoCapture.AudioState # 1
        ApplicationAndMicAudio : VideoCapture.AudioState # 2
        None_ : VideoCapture.AudioState # 3


    class CaptureResultType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Success : VideoCapture.CaptureResultType # 0
        UnknownError : VideoCapture.CaptureResultType # 1


    class OnStartedRecordingVideoCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: VideoCapture.VideoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: VideoCapture.VideoCaptureResult) -> None: ...


    class OnStoppedRecordingVideoCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: VideoCapture.VideoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: VideoCapture.VideoCaptureResult) -> None: ...


    class OnVideoCaptureResourceCreatedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, captureObject: VideoCapture, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, captureObject: VideoCapture) -> None: ...


    class OnVideoModeStartedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: VideoCapture.VideoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: VideoCapture.VideoCaptureResult) -> None: ...


    class OnVideoModeStoppedCallback(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, result: VideoCapture.VideoCaptureResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, result: VideoCapture.VideoCaptureResult) -> None: ...


    class VideoCaptureResult:
        hResult : int
        resultType : VideoCapture.CaptureResultType
        @property
        def success(self) -> bool: ...



class WebCam:
    def __init__(self) -> None: ...
    @classmethod
    @property
    def Mode(cls) -> WebCamMode: ...


class WebCamMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : WebCamMode # 0
    PhotoMode : WebCamMode # 1
    VideoMode : WebCamMode # 2

